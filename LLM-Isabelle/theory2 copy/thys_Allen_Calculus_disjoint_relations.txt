theory disjoint_relations

imports
  allen  

begin



using e m  meets_irrefl 
by (metis ComplI disjoint_eq_subset_Compl meets_wd subrelI)

using b e meets_asym 
by (metis ComplI disjoint_eq_subset_Compl subrelI)

apply (auto simp: e ov)
using elimmeets by blast

apply (auto simp:e s)
using elimmeets by blast

using e f by (metis (no_types, lifting) ComplI disjoint_eq_subset_Compl meets_atrans subrelI)

using e d by (metis (no_types, lifting) ComplI disjoint_eq_subset_Compl meets_atrans subrelI)

using converseE em e 
by (metis disjoint_iff_not_equal)

using converseE eb e 
by (metis disjoint_iff_not_equal)

using converseE eov e 
by (metis disjoint_iff_not_equal)

using converseE es e 
by (metis disjoint_iff_not_equal)

using converseE ef e 
by (metis disjoint_iff_not_equal)

using converseE ed e 
by (metis disjoint_iff_not_equal)


using m b
apply auto
using elimmeets by blast

apply (auto simp:m ov) 
by (meson M1 elimmeets)

apply (auto simp:m s)
by (meson M1 elimmeets)

apply (auto simp:m f)
using elimmeets by blast

apply (auto simp: m d)
using trans2 by blast

apply (auto simp:m)
using converseE m meets_asym by blast

apply (auto simp:mb) 
apply (auto simp: m b) 
using nontrans2 by blast

using m ov
apply auto
using trans2 by blast

apply (auto simp:m s)
by (meson M1 elimmeets)

apply (auto simp:m f)
by (meson M1 elimmeets)

apply (auto simp:m d)
using trans2 by blast

apply (auto simp:b ov)
by (meson M1 trans2)

apply (auto simp:b s)
by (meson M1 trans2)

apply (auto simp: b f)
by (meson M1 trans2)

apply (auto simp:b d)
by (meson M1 nonmeets4)

using mbi by auto

apply (auto simp:b)
using M5exist_var3 trans2 by blast

apply (auto simp:bov) 
apply (auto simp:b ov) 
by (meson M1 nontrans2)

using bs apply auto using b s apply auto 
using trans2 by blast

using bf apply auto using b f apply auto 
using trans2 by blast

apply (auto simp:bd) 
apply (auto simp:b d) 
using trans2 
using M1 nonmeets4 by blast


apply (auto simp:ov s)
by (meson M1 meets_atrans)

apply (auto simp:ov f)
by (meson M1 meets_atrans)

apply (auto simp:ov d)
by (meson M1 trans2)

using movi by auto

using bovi by blast

apply (auto simp:ov)
by (meson M1 trans2)

apply (auto simp:ov s)
by (meson M1 elimmeets)

apply (auto simp:ov f) 
by (meson M1 elimmeets)

apply (auto simp:ov d) 
by (meson M1 trans2)

apply (auto simp:s f) 
by (metis M4 elimmeets)

apply (auto simp:s d) 
by (metis M1 meets_atrans)

using msi by auto

using bsi by blast

using ovsi by auto

apply (auto simp:s) 
by (meson M1 trans2)

apply (auto simp:s f)
by (metis M4 elimmeets)

apply (auto simp:s d)
by (meson M1 meets_atrans)


apply (auto simp:f d)
by (meson M1 meets_atrans)

using mfi by auto

using bfi converse_Int by auto

  using ovfi by auto

using sfi by auto

apply (auto simp:f) 
by (meson M1 trans2)

apply (auto simp:f d) 
by (meson M1 trans2)


using mdi by auto

using bdi by blast

using ovdi by auto

using sdi by auto

apply (auto simp:d f) 
by (meson M1 trans2)

apply (auto simp:d) 
by (meson M1 trans2)

using mb by auto

using mov by auto

using ms by auto

using mf by auto

using md by auto


by (simp add: dbi inf_sup_aci(1))

using mibi by auto

using bov by blast

using bs by blast

using bf by blast

using bd by blast

using ovs by blast

using ovf by blast

using ovd by blast


using sf by blast

using sd by blast 

using fd by blast

lemma eei[simp]:"e^-1 =  e"
using e 
by (metis converse_iff subrelI subset_antisym)

lemma rdisj_sym:"A \<inter> B = {} \<Longrightarrow> B \<inter> A = {}"
by auto

named_theorems e_rules declare em[e_rules] and eb[e_rules] and eov[e_rules] and es[e_rules] and ef[e_rules] and ed[e_rules] and emi[e_rules] and ebi[e_rules] and eovi[e_rules] 
and esi[e_rules] and efi[e_rules] and edi[e_rules]

named_theorems m_rules declare em[THEN rdisj_sym, m_rules] and mb [m_rules] and ms  [m_rules] and mov [m_rules] and mf[m_rules] and 
md[m_rules] and mi [m_rules] and mbi [m_rules] and movi [m_rules] and msi [m_rules] and mfi [m_rules] and mdi [m_rules] and emi[m_rules]

named_theorems b_rules declare eb[THEN rdisj_sym, b_rules] and mb [THEN rdisj_sym, b_rules] and bs  [b_rules] and bov [b_rules] and bf[b_rules] and 
bd[b_rules] and bmi [b_rules] and bi [b_rules] and bovi [b_rules] and bsi [b_rules] and bfi [b_rules] and bdi [b_rules] and ebi[b_rules]

named_theorems ov_rules declare eov[THEN rdisj_sym, ov_rules] and mov [THEN rdisj_sym, ov_rules] and ovs  [ov_rules] and bov [THEN rdisj_sym,ov_rules] and ovf[ov_rules] and 
ovd[ov_rules] and ovmi [ov_rules] and  ovi [ov_rules] and ovsi [ov_rules] and ovfi [ov_rules] and ovdi [ov_rules] and eovi[ov_rules]

named_theorems s_rules declare es[THEN rdisj_sym, s_rules] and ms [THEN rdisj_sym, s_rules] and ovs  [THEN rdisj_sym, s_rules] and bs [THEN rdisj_sym,s_rules] and sf[s_rules] and 
sd[s_rules] and smi [s_rules] and  sovi [s_rules] and si [s_rules] and sfi [s_rules] and sdi [s_rules]

named_theorems d_rules declare ed[THEN rdisj_sym, d_rules] and md [THEN rdisj_sym, d_rules] and sd  [THEN rdisj_sym, d_rules]  and fd[THEN rdisj_sym, d_rules] and 
ovd[THEN rdisj_sym,d_rules] and dmi [d_rules] and  dovi [d_rules] and dsi [d_rules] and dfi [d_rules] and di [d_rules] 
 
named_theorems f_rules declare ef[THEN rdisj_sym, f_rules] and mf [THEN rdisj_sym, f_rules] and sf  [THEN rdisj_sym, f_rules] and ovf [THEN rdisj_sym,f_rules] and fd[f_rules] and 
 fmi [f_rules] and  fovi [f_rules] and fsi [f_rules] and fi [f_rules] and fdi [f_rules] 

 
end
