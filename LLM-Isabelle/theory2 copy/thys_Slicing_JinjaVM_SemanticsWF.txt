theory SemanticsWF imports JVMInterpretation "../Basic/SemanticsCFG" begin

declare rev_nth [simp add]



abbreviation update_stk :: "((nat \<times> nat) \<Rightarrow> val) \<Rightarrow> (frame list) \<Rightarrow> ((nat \<times> nat) \<Rightarrow> val)"
where
  "update_stk stk frs \<equiv> (\<lambda>(a, b).
    if length frs \<le> a then stk (a, b)
      else let xs = fst (frs ! (length frs - Suc a))
        in if length xs \<le> b then stk (a, b) else xs ! (length xs - Suc b))"

abbreviation update_loc :: "((nat \<times> nat) \<Rightarrow> val) \<Rightarrow> (frame list) \<Rightarrow> ((nat \<times> nat) \<Rightarrow> val)"
where
  "update_loc loc frs \<equiv> (\<lambda>(a, b).
    if length frs \<le> a then loc (a, b)
      else let xs = fst (snd (frs ! (length frs - Suc a)))
        in if length xs \<le> b then loc (a, b) else xs ! b)"


lemma update_loc_s2jvm [simp]:
  "update_loc loc (snd(snd(state_to_jvm_state P cs (h,stk,loc)))) = loc"
  by (auto intro!: ext simp: nth_locss)

lemma update_stk_s2jvm [simp]:
  "update_stk stk (snd(snd(state_to_jvm_state P cs (h,stk,loc)))) = stk"
  by (auto intro!: ext simp: nth_stkss)

lemma update_loc_s2jvm' [simp]:
  "update_loc loc (zip (stkss P cs stk) (zip (locss P cs loc) cs)) = loc"
  by (auto intro!: ext simp: nth_locss)

lemma update_stk_s2jvm' [simp]:
  "update_stk stk (zip (stkss P cs stk) (zip (locss P cs loc) cs)) = stk"
  by (auto intro!: ext simp: nth_stkss)

lemma find_handler_find_handler_forD:
  "find_handler (P\<^bsub>wf\<^esub>) a h frs = (xp',h',frs')
  \<Longrightarrow> find_handler_for P (cname_of h a) (framestack_to_callstack frs) =
       framestack_to_callstack frs'"
  by (induct frs, auto)

lemma find_handler_nonempty_frs [simp]:
  "(find_handler P a h frs \<noteq> (None, h', []))"
  by (induct frs, auto)

lemma find_handler_heap_eqD:
  "find_handler P a h frs = (xp, h', frs') \<Longrightarrow> h' = h"
  by (induct frs, auto)

lemma find_handler_frs_decrD:
  "find_handler P a h frs = (xp, h', frs') \<Longrightarrow> length frs' \<le> length frs"
  by (induct frs, auto)

lemma find_handler_decrD [dest]:
  "find_handler P a h frs = (xp, h', f#frs) \<Longrightarrow> False"
  by (drule find_handler_frs_decrD, simp)

lemma find_handler_decrD' [dest]:
  "\<lbrakk> find_handler P a h frs = (xp,h',f#frs'); length frs = length frs' \<rbrakk> \<Longrightarrow> False"
  by (drule find_handler_frs_decrD, simp)

lemma Suc_minus_Suc_Suc [simp]:
  "b < n - 1 \<Longrightarrow> Suc (n - Suc (Suc b)) = n - Suc b"
  by simp

lemma find_handler_loc_fun_eq':
  "find_handler (P\<^bsub>wf\<^esub>) a h
    (zip (stkss P cs stk) (zip (locss P cs loc) cs)) =
  (xf, h', frs)
  \<Longrightarrow> update_loc loc frs = loc"
proof
  fix x
  obtain a' b' where x: "x = (a'::nat,b'::nat)" by fastforce
  assume find_handler: "find_handler (P\<^bsub>wf\<^esub>) a h
    (zip (stkss P cs stk) (zip (locss P cs loc) cs)) =
    (xf, h', frs)"
  thus "update_loc loc frs x = loc x"
  proof (induct cs)
    case Nil
    thus ?case by simp
  next
    case (Cons aa cs')
    then obtain C M pc where step_case: "find_handler (P\<^bsub>wf\<^esub>) a h
      (zip (stkss P ((C,M,pc) # cs') stk)
      (zip (locss P ((C,M,pc) # cs') loc) ((C,M,pc) # cs'))) =
      (xf, h', frs)"
      by (cases aa, clarsimp)
    show ?thesis
    proof (cases "match_ex_table (P\<^bsub>wf\<^esub>) (cname_of h a) pc (ex_table_of (P\<^bsub>wf\<^esub>) C M)")
      case None
      with step_case IH show ?thesis
        by simp
    next
      case (Some e)
      with step_case x
      show ?thesis
        by (cases "length cs' = a'",
    qed
  qed
qed

lemma find_handler_loc_fun_eq:
  "find_handler (P\<^bsub>wf\<^esub>) a h (snd(snd(state_to_jvm_state P cs (h,stk,loc)))) = (xf,h',frs)
  \<Longrightarrow> update_loc loc frs = loc"
  by (simp add: find_handler_loc_fun_eq')

lemma find_handler_stk_fun_eq':
  "\<lbrakk>find_handler (P\<^bsub>wf\<^esub>) a h
    (zip (stkss P cs stk) (zip (locss P cs loc) cs)) =
  (None, h', frs);
  cd = length frs - 1;
  i = length (fst(hd(frs))) - 1 \<rbrakk>
  \<Longrightarrow> update_stk stk frs = stk((cd, i) := Addr a)"
proof
  fix x
  obtain a' b' where x: "x = (a'::nat,b'::nat)" by fastforce
  assume find_handler: "find_handler (P\<^bsub>wf\<^esub>) a h
    (zip (stkss P cs stk) (zip (locss P cs loc) cs)) =
    (None, h', frs)"
    and calldepth: "cd = length frs - 1"
    and idx: "i = length (fst (hd frs)) - 1"
  from find_handler have "frs \<noteq> []"
    by clarsimp
  then obtain stk' loc' C' M' pc' frs' where frs: "frs = (stk',loc',C',M',pc')#frs'"
    by (cases frs, fastforce+)
  from find_handler
  show "update_stk stk frs x = (stk((cd, i) := Addr a)) x"
  proof (induct cs)
    case Nil
    thus ?case by simp
  next
    case (Cons aa cs')
    then obtain C M pc where step_case: "find_handler (P\<^bsub>wf\<^esub>) a h
      (zip (stkss P ((C,M,pc) # cs') stk)
      (zip (locss P ((C,M,pc) # cs') loc) ((C,M,pc) # cs'))) =
      (None, h', frs)"
      by (cases aa, clarsimp)
    show ?thesis
    proof (cases "match_ex_table (P\<^bsub>wf\<^esub>) (cname_of h a) pc (ex_table_of (P\<^bsub>wf\<^esub>) C M)")
      case None
      with step_case IH show ?thesis
        by simp
    next
      case (Some e)
      show ?thesis
      proof (cases "a' = length cs'")
        case True
        with Some step_case frs calldepth idx x
        show ?thesis
          by (fastforce simp: nth_Cons')
      next
        case False
        with Some step_case frs calldepth idx x
        show ?thesis
          by (fastforce simp: nth_Cons' nth_stkss)
      qed
    qed
  qed
qed

lemma find_handler_stk_fun_eq:
  "find_handler (P\<^bsub>wf\<^esub>) a h (snd(snd(state_to_jvm_state P cs (h,stk,loc)))) = (None,h',frs)
  \<Longrightarrow> update_stk stk frs = stk((length frs - 1, length (fst(hd(frs))) - 1) := Addr a)"
  by (simp add: find_handler_stk_fun_eq')

lemma f2c_emptyD [dest]:
  "framestack_to_callstack frs = [] \<Longrightarrow> frs = []"
  by (simp add: framestack_to_callstack_def)

lemma f2c_emptyD' [dest]:
  "[] = framestack_to_callstack frs \<Longrightarrow> frs = []"
  by (simp add: framestack_to_callstack_def)

lemma correct_state_imp_valid_callstack:
  "\<lbrakk> P,cs \<turnstile>\<^bsub>BV\<^esub> s \<surd>; fst (last cs) = C0; fst(snd (last cs)) = Main \<rbrakk>
  \<Longrightarrow> valid_callstack (P,C0,Main) cs"
proof (cases cs rule: rev_cases)
  case Nil
  thus ?thesis by simp
next
  case (snoc cs' y)
  assume bv_correct: "P,cs \<turnstile>\<^bsub>BV\<^esub> s \<surd>"
    and last_C: "fst (last cs) = C0"
    and last_M: "fst(snd (last cs)) = Main"
  with snoc obtain pcX where [simp]: "cs = cs'@[(C0,Main,pcX)]"
    by (cases "last cs", fastforce)
  obtain h stk loc where [simp]: "s = (h,stk,loc)"
    by (cases s, fastforce)
  from bv_correct show ?thesis
  proof (cases "snd(snd(state_to_jvm_state P cs s))")
    case Nil
    thus ?thesis
      by (cases cs', auto)
  next
    case [simp]: (Cons a frs')
    obtain stk' loc' C M pc where [simp]: "a = (stk', loc', C, M, pc)" by (cases a, fastforce)
    from Cons bv_correct show ?thesis
      apply clarsimp
    proof (induct cs' arbitrary: stk' loc' C M pc frs')
      case Nil
      thus ?case by (fastforce simp: bv_conform_def)
    next
      case (Cons a' cs'')
      then have [simp]: "a' = (C,M,pc)"
        by (cases a', fastforce)
      from Cons obtain T Ts mxs mxl "is" xt
        where sees_M: "(P\<^bsub>wf\<^esub>) \<turnstile> C sees M:Ts\<rightarrow>T = (mxs,mxl,is,xt) in C"
        by (clarsimp simp: bv_conform_def correct_state_def)
      with Cons
      have "pc < length is"
        by (auto dest: sees_method_fun
                 simp: bv_conform_def)
      from wf_jvmprog_is_wf [of P] sees_M
      have "wt_method (P\<^bsub>wf\<^esub>) C Ts T mxs mxl is xt (P\<^bsub>\<Phi>\<^esub> C M)"
        by (auto dest: sees_wf_mdecl simp: wf_jvm_prog_phi_def wf_mdecl_def)
      have "length Ts = locLength P C M 0 - Suc mxl"
        by (auto dest!: list_all2_lengthD
                  simp: wt_method_def wt_start_def)
      with Cons sees_M show ?case
        by (cases cs'',
            (fastforce dest: sees_method_fun simp: bv_conform_def)+)
    qed
  qed
qed

declare correct_state_def [simp del]

lemma bool_sym: "Bool (a = b) = Bool (b = a)"
  by auto

lemma find_handler_exec_correct:
  "\<lbrakk>(P\<^bsub>wf\<^esub>),(P\<^bsub>\<Phi>\<^esub>) \<turnstile> state_to_jvm_state P cs (h,stk,loc) \<surd>;
    (P\<^bsub>wf\<^esub>),(P\<^bsub>\<Phi>\<^esub>) \<turnstile> find_handler (P\<^bsub>wf\<^esub>) a h
      (zip (stkss P cs stk) (zip (locss P cs loc) cs)) \<surd>;
    find_handler_for P (cname_of h a) cs = (C', M', pc') # cs'
  \<rbrakk> \<Longrightarrow>
  (P\<^bsub>wf\<^esub>),(P\<^bsub>\<Phi>\<^esub>) \<turnstile> (None, h,
    (stks (stkLength P C' M' pc')
      (\<lambda>a'. (stk((length cs', stkLength P C' M' pc' - Suc 0) := Addr a)) (length cs', a')),
     locs (locLength P C' M' pc') (\<lambda>a. loc (length cs', a)), C', M', pc') #
    zip (stkss P cs' stk) (zip (locss P cs' loc) cs')) \<surd>"
proof (induct cs)
  case Nil
  thus ?case by simp
next
  case (Cons aa cs)
  obtain C M pc where [simp]: "aa = (C,M,pc)" by (cases aa, fastforce)
  note P_wf = wf_jvmprog_is_wf [of P]
  from state_correct
  have cs_state_correct: "P\<^bsub>wf\<^esub>,P\<^bsub>\<Phi>\<^esub> \<turnstile> state_to_jvm_state P cs (h, stk, loc) \<surd>"
    apply (auto simp: correct_state_def)
    apply (cases "zip (stkss P cs stk) (zip (locss P cs loc) cs)")
     by fastforce+
  show ?thesis
  proof (cases "match_ex_table (P\<^bsub>wf\<^esub>) (cname_of h a) pc (ex_table_of (P\<^bsub>wf\<^esub>) C M)")
    case None
    with trg_state_correct fhf cs_state_correct IH show ?thesis
      by clarsimp
  next
    case (Some xte)
    with IH trg_state_correct fhf state_correct show ?thesis
      apply (cases "stkLength P C' M' (fst xte)", auto)
       apply (clarsimp simp: correct_state_def)
      apply (auto simp: correct_state_def)
      apply (rule_tac x="Ts" in exI)
      apply (rule_tac x="T" in exI)
      apply (rule_tac x="mxs" in exI)
      apply (rule_tac x="mxl\<^sub>0" in exI)
      apply (rule_tac x="is" in exI)
      apply (rule conjI)
       apply (rule_tac x="xt" in exI)
       apply clarsimp
      apply clarsimp
      apply (drule sees_method_fun, fastforce, clarsimp)
      apply (auto simp: list_all2_Cons1)
       apply (rule list_all2_all_nthI)
        apply clarsimp
       apply clarsimp
       apply (frule_tac ys="zs" in list_all2_lengthD)
       apply clarsimp
       apply (drule_tac p="n" and ys="zs" in list_all2_nthD)
        apply clarsimp
       apply clarsimp
       apply (case_tac "length aa - Suc (length aa - snd xte + n) = length zs - Suc n")
        apply clarsimp
       apply clarsimp
      apply (rule list_all2_all_nthI)
       apply clarsimp
      apply (frule_tac p="n" and ys="b" in list_all2_nthD)
       apply (clarsimp dest!: list_all2_lengthD)
      by (clarsimp dest!: list_all2_lengthD)
  qed
qed

lemma locs_rev_stks:
  "x \<ge> z \<Longrightarrow>
  locs z
    (\<lambda>b.
      if z < b then loc (Suc y, b)
        else if b \<le> z
          then stk (y, x + b - Suc z)
          else arbitrary)
  @ [stk (y, x - Suc 0)]
  =
  stk (y, x - Suc (z))
  # rev (take z (stks x (\<lambda>a. stk(y, a))))"
apply (rule nth_equalityI)
 apply (simp)
done

lemma locs_invoke_purge:
  "(z::nat) > c \<Longrightarrow>
  locs l
    (\<lambda>b. if z = c \<longrightarrow> Q b then loc (c, b) else u b) =
  locs l (\<lambda>a. loc (c, a))"
  by (induct l, auto)


lemma nth_rev_equalityI:
  "\<lbrakk>length xs = length ys; \<forall>i<length xs. xs ! (length xs - Suc i) = ys ! (length ys - Suc i)\<rbrakk>
  \<Longrightarrow> xs = ys"
proof (induct xs ys rule: list_induct2)
  case Nil
  thus ?case by simp
next
  case (Cons x xs y ys)
  hence "\<forall>i<length ys. xs ! (length ys - Suc i) = ys ! (length ys - Suc i)"
    apply auto
    apply (erule_tac x="i" in allE)
    by (auto simp: nth_Cons')
  with Cons show ?case
    by (auto simp: nth_Cons)
qed

lemma length_locss:
  "i < length cs
  \<Longrightarrow> length (locss P cs loc ! (length cs - Suc i)) =
  locLength P (fst(cs ! (length cs - Suc i)))
              (fst(snd(cs ! (length cs - Suc i))))
              (snd(snd(cs ! (length cs - Suc i))))"
apply (induct cs, auto)
apply (case_tac "i = length cs")
 by (auto simp: nth_Cons')

lemma locss_invoke_purge:
  "z > length cs \<Longrightarrow>
  locss P cs
    (\<lambda>(a, b). if (a = z \<longrightarrow> Q b)
      then loc (a, b)
      else u b)
  = locss P cs loc"
  by (induct cs, auto simp: locs_invoke_purge [simplified])

lemma stks_purge':
  "d \<ge> b \<Longrightarrow> stks b (\<lambda>x. if x = d then e else stk x) = stks b stk"
  by simp


our CFG. Therefore, we must assume, that the predicate of a potential preceding
predicate-edge holds for every update-edge.
\<close>
  with sees_M \<open>pc < length is\<close> reachable
  with wt_method sees_M \<open>pc < length is\<close>
    apply (tactic \<open>PARALLEL_ALLGOALS
      (Clasimp.fast_force_tac (@{context} addSDs @{thms list_all2_lengthD}))\<close>)
          \<open>preallocated h\<close>
        from trg_state_correct Invoke \<open>length ST > n\<close>
        with Invoke state_correct trg_state_correct \<open>length ST > n\<close>
    with ve Return \<open>pc' - 1 < length is'\<close> reachable' sees_M state_correct
    from \<open>wt_method (P\<^bsub>wf\<^esub>) C' Ts' T' mxs' mxl' is' xt' (P\<^bsub>\<Phi>\<^esub> C' M')\<close>
      \<open>(pc' - 1) < length is'\<close> \<open>P\<^bsub>\<Phi>\<^esub> C' M' ! (pc' - 1) \<noteq> None\<close>
      \<open>is' ! (pc' - 1) = Invoke M (length Ts)\<close>
    from \<open>wt_method (P\<^bsub>wf\<^esub>) C' Ts' T' mxs' mxl' is' xt' (P\<^bsub>\<Phi>\<^esub> C' M')\<close>
      ve Return \<open>pc' - 1 < length is'\<close> reachable' sees_M state_correct
    with \<open>stkLength P C' M' pc' = stkLength P C' M' (pc' - 1) - length Ts\<close>
      \<open>fst (the (P\<^bsub>\<Phi>\<^esub> C' M' ! (pc' - 1))) = ST'#STr'\<close> \<open>is' ! (pc' - 1) = Invoke M (length Ts)\<close>
      \<open>locLength P C M 0 = Suc (length Ts) + mxl\<close>
    with New state_correct ve sees_M trg_state_correct applicable a_pred \<open>preallocated h\<close>
    with Getfield state_correct ve sees_M trg_state_correct applicable a_pred \<open>preallocated h\<close>
    with Putfield state_correct ve sees_M trg_state_correct applicable a_pred \<open>preallocated h\<close>
      trg_state_correct applicable a_pred pred_s \<open>preallocated h\<close>
    with Throw state_correct ve trg_state_correct a_pred applicable sees_M \<open>preallocated h\<close>
section \<open>CFG simulates Jinja's semantics\<close>
subsection \<open>Definitions\<close>
text \<open>
The following predicate defines the semantics of Jinja lifted to our
state representation. Thereby, we require the state to be byte code verifier
conform; otherwise the step in the semantics is undefined.

byte code verifier conformance. But we list it explicitly for convenience.
\<close>
subsection \<open>Some more simplification lemmas\<close>
subsection \<open>Interpretation of the \<open>CFG_semantics_wf\<close> locale\<close>
  from sees_M P_wf \<open>pc < length is\<close>
      with \<open>identifies n c\<close> c c' have "JVM_CFG_Interpret.path prog n [?e1] (_ c',None _)"
      moreover from Load jvm_exec loc' stk' c c' s s' prog wt \<open>nat < length LT\<close>
      with \<open>identifies n c\<close> c c' have "JVM_CFG_Interpret.path prog n [?e1] (_ c',None _)"
        \<open>length ST > 0 \<and> nat < length LT\<close>
      with \<open>identifies n c\<close> c c' have "JVM_CFG_Interpret.path prog n [?e1] (_ c',None _)"
          with v_pred_edge \<open>identifies n c\<close> c c' Nil
          with v_pred_edge \<open>identifies n c\<close> c c' Nil
          moreover from New c c' s s' loc' stk' \<open>loc' = loc\<close> prog jvm_exec None
        with v_pred_edge \<open>identifies n c\<close> c c'
          with v_pred_edge \<open>identifies n c\<close> c c' Nil
          moreover from Nil True Getfield sem_step c c' s s' prog wt \<open>length ST > 0\<close>
          with v_pred_edge \<open>identifies n c\<close> c c' Nil
            \<open>loc' = loc\<close> wt ST
        with Getfield sem_step s s' c prog prealloc wt \<open>length ST > 0\<close>
        with v_pred_edge \<open>identifies n c\<close> c c'
      with \<open>length ST > 1\<close> obtain ST2 STr
        with Putfield sem_step s s' c prog prealloc wt \<open>length ST > 1\<close>
        with Putfield jvm_exec True prealloc \<open>length ST > 1\<close> wt
          with v_pred_edge \<open>identifies n c\<close> c c' Nil
          with v_pred_edge \<open>identifies n c\<close> c c' Nil
          moreover from True Putfield c c' s s' loc' stk' \<open>stk' = update_stk stk frs'\<close>
        with Putfield sem_step s s' c prog prealloc wt \<open>length ST > 1\<close>
        with Putfield False jvm_exec \<open>length ST > 1\<close> wt
        with v_pred_edge \<open>identifies n c\<close> c c'
        with Checkcast sem_step s s' c prog prealloc wt \<open>length ST > 0\<close>
        with jvm_exec Checkcast True prealloc \<open>length ST > 0\<close> wt
          with v_pred_edge \<open>identifies n c\<close> c c' Nil
          moreover from Nil True Checkcast sem_step c c' s s' prog wt \<open>length ST > 0\<close>
          with v_pred_edge \<open>identifies n c\<close> c c' Nil
        with Checkcast sem_step s s' c prog prealloc wt \<open>length ST > 0\<close>
        with \<open>identifies n c\<close> c c'
          with v_pred_edge \<open>identifies n c\<close> c c' Nil
            prog True wt ST prealloc Nil \<open>h = h'\<close>
          with v_pred_edge \<open>identifies n c\<close> c c' Nil
                        prog wt ST \<open>h = h'\<close>
        with c s False jvm_exec Invoke frs' wt \<open>length ST > n'\<close>
        with trg_state_correct frs' Invoke wt \<open>length ST > n'\<close>
        with v_pred_edge \<open>identifies n c\<close> c c' locLength_trg
        moreover from s s' \<open>h = h'\<close> \<open>stk' = stk\<close> upd_loc'
        with \<open>identifies n c\<close> c c' have "JVM_CFG_Interpret.path prog n [?e1] (_ c',None _)"
        moreover from Return sem_step c c' s s' prog wt Nil \<open>length ST > 0\<close>
        with \<open>identifies n c\<close> c c' 
        moreover from stk' loc' s s' \<open>h = h'\<close> \<open>loc' = loc\<close> stk_upd wt
      with \<open>identifies n c\<close> c c' have "JVM_CFG_Interpret.path prog n [?e1] (_ c',None _)"
      with \<open>length ST > 1\<close> obtain ST2 STr
      with \<open>identifies n c\<close> c c'
        with \<open>identifies n c\<close> c c' have "JVM_CFG_Interpret.path prog n [?e1] (_ c',None _)"
        with \<open>identifies n c\<close> c c'
      with \<open>identifies n c\<close> c c'
      with \<open>length ST > 1\<close> obtain ST2 STr
      with \<open>identifies n c\<close> c c'
          with v_pred_edge \<open>identifies n c\<close> c c' Nil
          from \<open>(C',M',pc')#cs' = framestack_to_callstack frs'\<close> Cons
          with v_pred_edge \<open>identifies n c\<close> c c' True prog
          moreover from Cons True Throw jvm_exec c c' s s' \<open>loc' = loc\<close> stk' stk'' wt ST
          with v_pred_edge \<open>identifies n c\<close> c c' Nil
          from \<open>(C',M',pc')#cs' = framestack_to_callstack frs'\<close> Cons
          with v_pred_edge \<open>identifies n c\<close> c c' Nil
            addr_the_addr_stk_eq prog wt ST \<open>loc' = loc\<close> stk''
