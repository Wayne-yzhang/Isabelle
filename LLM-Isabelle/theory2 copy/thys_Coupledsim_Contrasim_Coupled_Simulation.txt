theory Coupled_Simulation
  imports Contrasimulation
begin

context lts_tau
begin

  

definition coupled_simulation ::
where

    




lemma coupled_simulation_weak_simulation:
  unfolding coupled_simulation_def weak_simulation_def by blast

corollary coupled_simulation_implies_weak_simulation:
  using assms unfolding coupled_simulation_weak_simulation ..

corollary coupledsim_enabled_subs:
  assumes
  using assms weak_sim_enabled_subs coupled_simulation_implies_weak_simulation by blast

lemma coupled_simulation_implies_coupling:
  assumes
  shows
  using assms unfolding coupled_simulation_weak_simulation by blast

lemma weak_bisim_implies_coupled_sim_gla17:
  assumes
unfolding coupled_simulation_def proof safe
  fix p q p' a
    using wbisim unfolding weak_bisimulation_def by simp
next
  fix p q 
    using symmetry steps.refl[of q tau] by auto
qed



lemma coupledsim_step_gla17:
  unfolding coupled_simulation_def
  using lts.steps.simps by metis

corollary coupledsim_step:
  assumes
  shows
  using assms coupledsim_step_gla17 by auto

corollary strongly_tau_connected_coupled_similar:
  assumes
  using assms coupledsim_step by auto

lemma silent_steps_retain_coupled_simulation:
assumes 
  using assms(1,3,2,4) steps_retain_weak_sim
  unfolding coupled_simulation_weak_simulation by blast

lemma coupled_simulation_weak_premise:
  unfolding coupled_simulation_weak_simulation weak_sim_weak_premise by blast


  stable states.\<close>
    \<open>coupled_simulation R1\<close>
    \<open>coupled_simulation R2\<close>
    \<open>coupled_simulation (\<lambda> p q . R1 p q \<or> R2 p q)\<close>
  \<open>p \<sqsubseteq>cs p\<close>
    \<open>p \<sqsubseteq>cs pq\<close>
    \<open>pq \<sqsubseteq>cs q\<close>
    \<open>p \<sqsubseteq>cs q\<close>
  obtain R1 where R1_def: \<open>coupled_simulation R1\<close> \<open>R1 p pq\<close>
  obtain R2 where R2_def: \<open>coupled_simulation R2\<close> \<open>R2 pq q\<close>
  define R where R_def: \<open>R \<equiv> \<lambda> p q . \<exists> pq . (R1 p pq \<and> R2 pq q) \<or> (R2 p pq \<and> R1 pq q)\<close>
  have \<open>weak_simulation R\<close> \<open>R p q\<close>
  moreover have \<open>(\<forall> p q . R p q \<longrightarrow> (\<exists> q'. q \<longmapsto>*tau q' \<and> R q' p))\<close>
    assume r1r2: \<open>R1 p pq\<close> \<open>R2 pq q\<close>
    then obtain pq' where \<open>R1 pq' p\<close> \<open>pq \<longmapsto>* tau  pq'\<close>
    then moreover obtain q' where \<open>R2 pq' q'\<close> \<open>q \<longmapsto>* tau q'\<close>
    then moreover obtain q'' where \<open>R2 q'' pq'\<close> \<open>q' \<longmapsto>* tau  q''\<close>
    ultimately show \<open>\<exists>q'. q \<longmapsto>* tau  q' \<and> (\<exists>pq. R1 q' pq \<and> R2 pq p \<or> R2 q' pq \<and> R1 pq p)\<close>
  next \<comment>\<open>analogous with R2 and R1 swapped\<close>
    assume r2r1: \<open>R2 p pq\<close> \<open>R1 pq q\<close>
    then obtain pq' where \<open>R2 pq' p\<close> \<open>pq \<longmapsto>* tau  pq'\<close>
    then moreover obtain q' where \<open>R1 pq' q'\<close> \<open>q \<longmapsto>* tau q'\<close>
    then moreover obtain q'' where \<open>R1 q'' pq'\<close> \<open>q' \<longmapsto>* tau  q''\<close>
    ultimately show \<open>\<exists>q'. q \<longmapsto>* tau  q' \<and> (\<exists>pq. R1 q' pq \<and> R2 pq p \<or> R2 q' pq \<and> R1 pq p)\<close>
  ultimately have \<open>R p q\<close> \<open>coupled_simulation R\<close>
interpretation preorder \<open>\<lambda> p q. p \<sqsubseteq>cs q\<close> \<open>\<lambda> p q. p \<sqsubseteq>cs q \<and> \<not>(q \<sqsubseteq>cs p)\<close>
  \<open>equivp (\<lambda> p q. p \<equiv>cs q)\<close>
  show \<open>reflp coupled_similar\<close>
  show \<open>symp coupled_similar\<close>
  show \<open>transp coupled_similar\<close>
    \<open>p \<sqsubseteq>cs q\<close>
    \<open>tau_max q\<close>
  shows  \<open>p \<equiv>cs q\<close> 
    \<open>p \<sqsubseteq>cs q\<close>
    \<open>stable_state q\<close>
  shows  \<open>p \<equiv>cs q\<close> 
subsection \<open>Coinductive Coupled Simulation Preorder\<close>
text \<open>\<open>\<sqsubseteq>cs\<close> can also be characterized coinductively. \<open>\<sqsubseteq>cs\<close> is the greatest
  acts as a least upper bound within the semi-lattice of CSP terms related by \<open>\<sqsubseteq>cs\<close> taking \<open>\<equiv>cs\<close>
