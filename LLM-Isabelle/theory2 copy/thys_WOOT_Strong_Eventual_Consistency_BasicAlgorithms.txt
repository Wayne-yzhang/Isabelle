theory BasicAlgorithms
  imports Data ErrorMonad
begin


definition ext_ids :: "('\<I>, '\<Sigma>) woot_character list \<Rightarrow> '\<I> extended list"
  where "ext_ids s = \<turnstile>#(map (\<lambda>x. \<lbrakk> I x \<rbrakk>) s)@[\<stileturn>]"


fun idx :: "('\<I>, '\<Sigma>) woot_character list \<Rightarrow> '\<I> extended \<Rightarrow> error + nat"
  where
    "idx s i = fromSingleton (filter (\<lambda>j. (ext_ids s ! j = i)) [0..<(length (ext_ids s))])"


fun nth :: "('\<I>, '\<Sigma>) woot_character list \<Rightarrow> nat \<Rightarrow> error + ('\<I>, '\<Sigma>) woot_character"
  where
    "nth s 0 = error (STR ''Index has to be >= 1.'')" |
    "nth s (Suc k) = (
      if k < (length s) then
        return (s ! k)
      else
        error (STR ''Index has to be <= length s''))"


fun list_update ::
  "('\<I>, '\<Sigma>) woot_character list \<Rightarrow> nat \<Rightarrow> ('\<I>, '\<Sigma>) woot_character \<Rightarrow> 
  error + ('\<I>, '\<Sigma>) woot_character list"
  where
    "list_update s (Suc k) v = (
        if k < length s then
          return (List.list_update s k v)
        else
          error (STR ''Illegal arguments.''))" |
    "list_update _ 0 _ = error (STR ''Illegal arguments.'')"


end
