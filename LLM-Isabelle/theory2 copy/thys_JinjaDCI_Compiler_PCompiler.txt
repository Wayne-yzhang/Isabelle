    Based on the Jinja theory Common/PCompiler.thy by Tobias Nipkow
*)
(*<*)
(*>*)
(*<*)
(*>*)
(*<*)by(simp add:class_def compP_def compC_def map_of_map4)(*>*)
(*<*)by(clarsimp simp add:class_def compP_def compC_def map_of_map4)(*>*)
(*<*)by(auto simp:is_class_def dest: class_compP class_compPD)(*>*)
(*<*)
(*>*)
(*<*)(is "?P \<Longrightarrow> compP f P \<turnstile> C sees_methods (?map Mm)")
(*>*)
(*<*)by(fastforce elim:sees_methods_compP simp add:Method_def)(*>*)
(*<*)
(*>*)
(*<*)(is "\<lbrakk> ?P; ?Q \<rbrakk> \<Longrightarrow> \<exists>Mm. P \<turnstile> C sees_methods Mm \<and> Mm' = (?map Mm)")
(*>*)
(*<*)
(*>*)
(*<*)
(*>*)
(*<*)by(cases T')(simp_all add:widen_Class)(*>*)
(*<*)
(*>*)
(*<*)by(cases T) simp_all(*>*)
(*<*)
(*>*)
(*<*)by(simp add:fields_def)(*>*)
(*<*)by(simp add:ifields_def)(*>*)
(*<*)by(simp add:blank_def)(*>*)
(*<*)by(simp add:isfields_def)(*>*)
(*<*)by(simp add:sblank_def)(*>*)
(*<*)by(simp add:sees_field_def)(*>*)
(*<*)by(simp add:has_field_def)(*>*)
(*<*)by(simp add:field_def)(*>*)
(*<*)
(*>*)
(*<*)
(*>*)
(*<*)by(simp add:wf_syscls_def compP_def compC_def image_def Bex_def)(*>*)
(*<*)by(simp add:wf_fdecl_def)(*>*)
(*<*)
(*>*)
(*<*)by(fastforce simp add:compP_def compC_def image_iff Bex_def)(*>*)
(*<*)
(*>*)
(*<*)
(*>*)
