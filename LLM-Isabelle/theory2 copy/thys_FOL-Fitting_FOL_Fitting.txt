theory FOL_Fitting
  imports "HOL-Library.Countable"
begin






datatype 'a "term"
  = Var nat

datatype ('a, 'b) form
  = FF
  | TT





primrec


  using le by (induct t and ts rule: closedt.induct closedts.induct) simp_all

  using le
proof (induct p arbitrary: i j)
  case (Pred i l)
  then show ?case
    using closedt_mono by simp
qed auto



primrec

primrec

  ("_[_'/_]" [300, 0, 0] 300) where

theorem lift_closed [simp]:
  by (induct t and ts rule: closedt.induct closedts.induct) simp_all

theorem subst_closedt [simp]:
  using u closedt_mono(1)
  by (induct t and ts rule: closedt.induct closedts.induct) auto

theorem subst_closed [simp]:
  by (induct p arbitrary: i t) simp_all

  by (induct p arbitrary: i t) simp_all



primrec



primrec


theorem psubstt_closed [simp]:
  by (induct t and ts rule: closedt.induct closedts.induct) simp_all

theorem psubst_closed [simp]:
  by (induct p arbitrary: i) simp_all

theorem psubstt_subst [simp]:
  by (induct t and ts rule: psubstt.induct psubstts.induct) simp_all

theorem psubstt_lift [simp]:
  by (induct t and ts rule: psubstt.induct psubstts.induct) simp_all

theorem psubst_subst [simp]:
  by (induct P arbitrary: i t) simp_all

theorem psubstt_upd [simp]:
  by (induct t and ts rule: psubstt.induct psubstts.induct) (auto split: sum.split)

  by (induct P) (simp_all del: fun_upd_apply)

theorem psubstt_id:
  by (induct t and ts rule: psubstt.induct psubstts.induct) simp_all

proof
    by (induct p) (simp_all add: psubstt_id)
qed

theorem psubstt_image [simp]:
  by (induct t and ts rule: paramst.induct paramsts.induct) (simp_all add: image_Un)

  by (induct p) (simp_all add: image_Un)




  by (simp add: shift_def)

  by (simp add: shift_def)

  by (simp add: shift_def)

proof
  fix x
    by (cases x) (simp_all add: shift_def)
qed

primrec





theorem subst_lemma' [simp]:
  by (induct t and ts rule: substt.induct substts.induct) simp_all

theorem lift_lemma [simp]:
  by (induct t and ts rule: liftt.induct liftts.induct) simp_all

theorem subst_lemma [simp]:
  by (induct a arbitrary: e i t) simp_all

theorem upd_lemma' [simp]:
  by (induct t and ts rule: paramst.induct paramsts.induct) auto

theorem upd_lemma [simp]:
  by (induct p arbitrary: e) simp_all

  by (induct G) simp_all

theorem psubst_eval' [simp]:
  by (induct t and ts rule: psubstt.induct psubstts.induct) simp_all

theorem psubst_eval:
  by (induct p arbitrary: e) simp_all


theorem ex_all_commute_eval:
  apply simp
  by iprover





  by (rule Class, rule NegE, rule Assum) (simp, iprover)

  by (rule ImplE, rule ImplI)

  by (rule cut, rule ForallE)


proof -
    by (simp add: Assum)
      by (simp add: Assum)
      by (simp add: Assum)
      by (rule OrI1)
      by (rule NegE)
      by (rule NegI)
      by (rule OrI2) }
    by (rule NegE)
  then show ?thesis
    by (rule Class)
qed

theorem ex_all_commute:
proof -

    by (simp add: Assum)
      by (simp add: Assum)
      by (simp add: Assum)
      by (rule ForallE') }
    by (rule ExistsI)
    by simp
    by simp
    by simp
    by (rule ExistsE)
    by simp
    by simp
    by simp
    by (rule ForallI)
  then show ?thesis
    by (rule ImplI)
qed

proof -

    by (simp add: Assum)
    by (simp_all add: Assum)
    by (rule NegE)
    by (rule FFE)
    using ImplI by simp
    by (rule ExistsI)
    by (rule NegE)
    using Class by simp
    by simp
    by simp
    by (rule ForallI)
    using ImplI by simp
    by (rule ExistsI)
  then show ?thesis
    by (rule Class')
qed

theorem peirce:
proof -

    by (simp add: Assum)
      by (simp add: Assum)
      by (simp add: Assum)
      by (rule ImplI)
      by (rule NegE) }
    by (rule FFE)
    by (rule ImplI)
    by (rule ImplE)
    by (rule ImplI)
    by (rule Class')
qed



proof (induct p rule: deriv.induct)
  case (Assum a G)
  then show ?case by (simp add: model_def list_all_iff)
next
  case (ForallI G a n)
  show ?case
  proof (intro allI)
      using ForallI by blast
      using ForallI unfolding model_def by simp
  qed
next
  case (ExistsE G a n b)
  show ?case
  proof (intro allI)
      using ExistsE unfolding model_def by simp blast
      using ExistsE unfolding model_def by simp
      using ExistsE unfolding model_def by simp
  qed
qed (simp_all add: model_def, blast+)










theorem alt_consistency:
  unfolding alt_consistency_def
proof (intro allI impI conjI)

    unfolding mk_alt_consistency_def by blast

  fix p ts
  proof
      by blast
      by simp
      using conc sc by (simp add: consistency_def)
      by force
    then show False
      using * by blast
  qed

    using conc sc unfolding consistency_def by simp_all
    by (force, force)

  { fix Z
      by blast
      using conc sc by (simp add: consistency_def)
      unfolding mk_alt_consistency_def by auto }

  { fix A B
      by blast
      using conc sc by (simp add: consistency_def)
      unfolding mk_alt_consistency_def by auto }

  { fix A B
      by blast
      using conc sc by (simp add: consistency_def)
      unfolding mk_alt_consistency_def by auto }

  { fix A B
      by blast
      using conc sc by (simp add: consistency_def)
      unfolding mk_alt_consistency_def by auto }

  { fix A B
      by blast
      using conc sc by (simp add: consistency_def)
      unfolding mk_alt_consistency_def by auto }

  { fix A B
      by blast
      using conc sc by (simp add: consistency_def)
      unfolding mk_alt_consistency_def by auto }

  { fix A B
      by blast
      using conc sc by (simp add: consistency_def)
      unfolding mk_alt_consistency_def by auto }

      by blast
      unfolding mk_alt_consistency_def by auto }

      by blast
      unfolding mk_alt_consistency_def by auto }

      using calculation by blast
      using conc sc by (simp add: consistency_def)
      by blast

      using calculation by (simp cong add: image_cong)
      using calculation by auto
      by blast
      unfolding mk_alt_consistency_def by simp }

      using calculation by blast
      using conc sc by (simp add: consistency_def)
      by blast

      using calculation by (simp cong add: image_cong)
      using calculation by auto
      by blast
      unfolding mk_alt_consistency_def by simp }
qed

  unfolding mk_alt_consistency_def
proof
    by simp
    by blast
    by simp
qed





lemma subset_in_close:
proof -
  then show ?thesis unfolding close_def by blast
qed

theorem close_consistency:
  unfolding consistency_def
proof (intro allI impI conjI)
  fix S
    unfolding close_def by blast

  { fix p ts



  { fix Z

  { fix A B

  { fix A B

  { fix A B

  { fix A B

  { fix A B

  { fix A B



  { fix P

  { fix P
qed

  unfolding close_def subset_closed_def by blast

  unfolding close_def by blast


theorem mk_alt_consistency_closed:
  unfolding subset_closed_def mk_alt_consistency_def
proof (intro ballI allI impI)
    by blast
    by blast
    by blast
qed





theorem finite_alt_consistency:
  unfolding alt_consistency_def
proof (intro allI impI conjI)
  fix S
    unfolding mk_finite_char_def by blast

    by blast

  { fix p ts
    proof
        using finc by simp
      then show False
        using altconc unfolding alt_consistency_def by fast
    qed }

  proof
      using finc by simp
    then show False
      using altconc unfolding alt_consistency_def by fast
  qed

  proof
      using finc by simp
    then show False
      using altconc unfolding alt_consistency_def by fast
  qed

  { fix Z
      unfolding mk_finite_char_def
    proof (intro allI impI CollectI)
      fix S'

        using * by blast
        using finc by blast
        using altconc unfolding alt_consistency_def by simp
        using sc by blast
    qed }

  { fix A B
      unfolding mk_finite_char_def
    proof (intro allI impI CollectI)
      fix S'

        using * by blast
        using finc by blast
        using altconc unfolding alt_consistency_def by simp
        using sc by blast
    qed }

  { fix A B
      unfolding mk_finite_char_def
    proof (intro allI impI CollectI)
      fix S'

        using * by blast
        using finc by blast
        using altconc unfolding alt_consistency_def by simp
        using sc by blast
    qed }

  { fix A B
      unfolding mk_finite_char_def
    proof (intro allI impI CollectI)
      fix S'

        using * by blast
        using finc by blast
        using altconc unfolding alt_consistency_def by simp
        using sc by blast
    qed }

  { fix A B
    proof (rule ccontr)
      then obtain Sa and Sb
        unfolding mk_finite_char_def by blast


        using finc by blast
        using altconc unfolding alt_consistency_def by simp
        using sc by blast
      then show False
    qed }

  { fix A B
    proof (rule ccontr)
      then obtain Sa and Sb
        unfolding mk_finite_char_def by blast


        using finc by blast
        using altconc unfolding alt_consistency_def by simp
        using sc by blast
      then show False
    qed }

  { fix A B
    proof (rule ccontr)
      then obtain Sa and Sb
        unfolding mk_finite_char_def by blast


        using finc by blast
        using altconc unfolding alt_consistency_def by simp
        using sc by blast
      then show False
    qed }

      unfolding mk_finite_char_def
    proof (intro allI impI CollectI)
      fix S'

        using * by blast
        using finc by blast
        using sc by blast
    qed }

      unfolding mk_finite_char_def
    proof (intro allI impI CollectI)
      fix S'

        using * by blast
        using finc by blast
        using sc by blast
    qed }

  { fix P x
      unfolding mk_finite_char_def
    proof (intro allI impI CollectI)
      fix S'

        using * by blast
        using finc by blast
        using sc by blast
    qed }

  { fix P x
      unfolding mk_finite_char_def
    proof (intro allI impI CollectI)
      fix S'

        using * by blast
        using finc by blast
        using sc by blast
    qed }
qed

  unfolding finite_char_def mk_finite_char_def by blast

  unfolding finite_char_def subset_closed_def
proof (intro ballI allI impI)
  fix S S'
qed

  unfolding mk_finite_char_def subset_closed_def by blast



  by countable_datatype

instance form :: (countable, countable) countable
  by countable_datatype




  by (induct n) (auto simp: is_chain_def)

theorem is_chainD':
proof -
    by blast
    by (simp add: is_chainD)
qed

theorem chain_index:
  using fin
proof (induct rule: finite_induct)
  case empty
  then show ?case by blast
next
  case (insert x F)
    using ch by simp_all
    by blast
    by simp_all
    using calculation by blast
  ultimately show ?case by blast
qed

lemma chain_union_closed':
proof -
qed

theorem chain_union_closed:
proof -
    using subset_closed_def by blast
    using chain_union_closed' assms by blast
  ultimately show ?thesis by blast
qed







  by (simp add: is_chain_def) blast

  by (induct t and ts rule: paramst.induct paramsts.induct) (simp_all split: sum.split)

  by (induct p) simp_all

theorem finite_params_extend [simp]:
  by (induct n) simp_all

lemma infinite_params_available:
proof -

    using assms by simp
    using infinite_imp_nonempty by blast
    by blast
  then show ?thesis
    by blast
qed

lemma extend_in_C_Exists:
proof -
    by blast
    using * by simp
    unfolding alt_consistency_def by simp
    by (metis (mono_tags, lifting) someI2)
  then show ?thesis
    using assms * by simp
qed

lemma extend_in_C_Neg_Forall:
proof -
    by blast
    using * by simp
    unfolding alt_consistency_def by simp
    by (metis (mono_tags, lifting) someI2)
  then show ?thesis
    using assms * by simp
qed

lemma extend_in_C_no_delta:
  using assms by simp

lemma extend_in_C_stop:
  using assms by simp

proof (induct n)
  case 0
  then show ?case by simp
next
  case (Suc n)
  then show ?case
    using extend_in_C_Exists extend_in_C_Neg_Forall
      extend_in_C_no_delta extend_in_C_stop
    by metis
qed


  unfolding Extend_def
  using chain_union_closed is_chain_extend extend_in_C
  by blast

proof
  fix x
qed



theorem extend_maximal:
  unfolding maximal_def Extend_def
proof (intro ballI impI)
  fix S'
  proof (rule ccontr)
      by blast
      by blast


      unfolding subset_closed_def by simp
      by blast
      by simp
    then show False using * by blast
  qed
    by simp
qed






primrec

theorem herbrand_evalt [simp]:
  by (induct t and ts rule: closedt.induct closedts.induct) simp_all

theorem herbrand_evalt' [simp]:
  by (induct ht and hts rule: term_of_hterm.induct terms_of_hterms.induct) simp_all

theorem closed_hterm [simp]:
  by (induct ht and hts rule: term_of_hterm.induct terms_of_hterms.induct) simp_all


theorem hintikka_model:
    by blast
next

  fix x

  proof (cases x)
    case FF
    show ?thesis
    proof (intro conjI impI)
        using FF hin by (simp add: hintikka_def)
    next
    qed
  next
    case TT
    show ?thesis
    proof (intro conjI impI)
        using TT by simp
    next
        using TT hin by (simp add: hintikka_def)
    qed
  next
    case (Pred p ts)
    show ?thesis
    proof (intro conjI impI)
    next
        using Pred by simp
        using hin unfolding hintikka_def by fast
    qed
  next
    case (Neg Z)
    then show ?thesis
    proof (intro conjI impI)
        using Neg wf by simp
    next
        using Neg hin unfolding hintikka_def by blast
        using Neg by simp
        using Neg wf by simp
        using Neg by simp
    qed
  next
    case (And A B)
    then show ?thesis
    proof (intro conjI impI)
        using And by simp_all
        using And hin unfolding hintikka_def by blast
    next
        using And by simp_all
        using hin unfolding hintikka_def by blast
    qed
  next
    case (Or A B)
    then show ?thesis
    proof (intro conjI impI)
        using Or by simp_all
        using hin unfolding hintikka_def by blast
    next
        using Or by simp_all
        using hin unfolding hintikka_def by blast
    qed
  next
    case (Impl A B)
    then show ?thesis
    proof (intro conjI impI)
        using Impl by simp_all
        using hin unfolding hintikka_def by blast
    next
        using Impl by simp_all
        using hin unfolding hintikka_def by blast
    qed
  next
    case (Forall P)
    then show ?thesis
    proof (intro conjI impI)
      proof (rule allI)
        fix z
          using Forall by simp_all
          using hin unfolding hintikka_def by blast

          using Forall wf by blast
      qed
        using Forall by simp
    next
        using Forall by simp
        using Forall hin unfolding hintikka_def by blast
        by blast

        using Forall wf by blast
        by auto
        using Forall by simp
    qed
  next
    case (Exists P)
    then show ?thesis
    proof (intro conjI impI allI)
        using Exists hin unfolding hintikka_def by blast
        by blast

        using Exists wf by blast
        by auto
        using Exists by simp
    next
      proof (rule allI)
        fix z
          using Exists by simp_all
          using hin unfolding hintikka_def by blast

          using Exists wf by blast
      qed
        using Exists by simp
    qed
  qed
qed


lemma Exists_in_extend:
proof -
    by simp
  finally show ?thesis
    by blast
qed

lemma Neg_Forall_in_extend:
proof -

    by simp
  finally show ?thesis
    by blast
qed

theorem extend_hintikka:
  unfolding hintikka_def
proof (intro allI impI conjI)
    by (simp add: extend_maximal fin_ch surj)

    using Extend_in_C assms by blast

    unfolding maximal_def by blast

  { fix p ts



  { fix Z

  { fix A B

  { fix A B

  { fix A B

  { fix A B

  { fix A B

  { fix A B



  { fix P
      using surj by blast


      using * by (simp add: UN_upper)
      unfolding subset_closed_def by metis
      using * Exists_in_extend by blast
      using Extend_def by blast

  { fix P
      using surj by blast


      using * by (simp add: UN_upper)
      unfolding subset_closed_def by metis
      using * Neg_Forall_in_extend by blast
      using Extend_def by blast
qed



lemma hintikka_Extend_S:
proof -
    using finite_char by blast
    by simp
    by blast
      finite_alt_consistency mk_alt_consistency_closed
    by blast
    using mk_alt_consistency_subset by blast
    using close_closed finite_char_subset mk_alt_consistency_closed by blast
  ultimately show ?thesis
    by metis
qed

theorem model_existence:
  using assms hintikka_model hintikka_Extend_S Extend_subset
  by blast



theorem deriv_consistency:
  unfolding consistency_def
proof (intro conjI allI impI notI)
    by blast

  { fix p ts
      using Assum * by blast+
      using NegE by blast
    then show False

      using Assum * by blast
    then show False

      using Assum * by blast
      using TTI by blast
      using NegE by blast
    then show False

  { fix Z
      using Assum * by blast

        using NegI by blast
      then have False
      by blast
      using * by simp
      by blast }

  { fix A B
      using Assum * by blast
      using AndE1 AndE2 by blast+

        using NegI by blast
      then have False
      by blast
      using * by simp
      by blast }

  { fix A B
      using Assum * by blast

      by (simp add: Assum)
      using OrI1 by blast
      using NegI by blast

      by (simp add: Assum)
      using OrI2 by blast
      using NegI by blast

        using NegI by blast
      then have False
      by blast
      using * by simp
      by blast }

  { fix A B

      by (simp add: Assum)
      by (simp add: Assum)
      using NegE by blast
      using FFE by blast
      using ImplI by blast
      using NegE by blast
      using Class by blast

      by (simp add: Assum)
      using ImplI by blast
      using NegE by blast
      using NegI by blast

        using NegI by blast
      then have False
        by blast }
      by blast
      using * by simp
      by blast }

  { fix A B
      using * Assum by blast

        using * by simp_all
      then have False
      by blast }

  { fix A B


      by (simp_all add: Assum)
      using AndI by blast
      using NegE by blast
      using NegI by blast
      using OrI2 by blast
      by (simp add: Assum)
      using NegE by blast
      using NegI by blast
      using OrI1 by blast
      using Class' by blast

        using * by simp_all
      then have False
      by blast }

  { fix A B


      by (simp add: Assum)
      using ImplE by blast
      using OrI2 by blast
      by (simp add: Assum)
      using NegE by blast
      using NegI by blast
      using OrI1 by blast
      using Class' by blast

        using * by simp_all
      then have False
      by blast }

      using Assum * by blast
      using ForallE by blast

      then have False
      by blast
      using * by simp
      by blast }

      using Assum * by blast
      by (simp add: Assum)
      using Assum by blast
      using ExistsI by blast
      using NegE by blast
      using NegI by blast

      then have False
      by blast
      using * by simp
      by blast }

  { fix P
      using * Assum by blast

      by simp
      using inf_param Diff_infinite_finite finite_compl by blast
      by (simp add: Compl_eq_Diff_UNIV)
      using infinite_imp_nonempty by blast

        using ** by (simp add: list_all_iff)
        using ** by simp
        by simp
      then have False
        by blast}
      by blast
      using * by simp
      by blast }

  { fix P
      using * Assum by blast

      by simp
      using inf_param Diff_infinite_finite finite_compl by blast
      by (simp add: Compl_eq_Diff_UNIV)
      using infinite_imp_nonempty by blast


      by (simp add: Assum)
      using ExistsI by blast
      by (simp add: Assum)
      using NegE by blast
      using Class by blast
      using ** by (simp add: list_all_iff)
      using ** by simp
      using ForallI by fast
      using NegE by blast
      using Class by blast

        using ** by (simp add: list_all_iff)
        using ** by simp
        by simp
      then have False
        by blast}
      by blast
      using * by simp
      by blast }
qed


theorem natded_complete:
proof (rule Class, rule ccontr)
  fix e

  let ?f = HApp

    by (simp add: list_all_iff)

  { fix x
      using deriv_consistency by blast
      by (simp add: Compl_eq_Diff_UNIV)
      using model_existence by blast }
    by (simp add: list_all_iff)
    using calculation by simp
    using calculation by simp
    using mod unfolding model_def by blast
  ultimately show False by simp
qed



theorem sat_consistency:
  unfolding consistency_def
proof (intro allI impI conjI)

    by blast+

  { fix p ts
    proof
        using * by blast
      then show False by simp
    qed }

    using * by fastforce

    using * by fastforce

  { fix Z
      using * by blast
      by simp
      using inf_params by simp
      by blast }

  { fix A B
      using * by blast
      by simp
      using inf_params by simp
      by blast }

  { fix A B
      using * by blast
      by simp
      using inf_params by simp
      by blast }

  { fix A B
      using * by blast
      by simp
      using inf_params by simp
      by blast }

  { fix A B
      using * by blast
      by simp
      using inf_params by simp_all
      by blast }

  { fix A B
      using * by blast
      by simp
      using inf_params by simp_all
      by blast }

  { fix A B
      using * by blast
      by simp
      using inf_params by simp_all
      by blast }

      using * by blast
      by simp
      using inf_params by simp
      by blast }

      using * by blast
      by simp
      using inf_params by simp
      by blast }

  { fix P
      using * by blast
      by blast
      by auto
      using inf_params infinite_imp_nonempty by blast
      by simp
      using * ** by simp
      using inf_params by simp
      by simp
      by blast }

  { fix P
      using * by blast
      by blast
      by auto
      using inf_params infinite_imp_nonempty by blast
      by simp
      using * ** by simp
      using inf_params by simp
      by simp
      by blast }
qed

theorem doublep_infinite_params:
proof (rule infinite_super)
    using inj_onI Suc_1 Suc_mult_cancel1 add_right_imp_eq finite_imageD infinite_UNIV_char_0
    by (metis (no_types, lifting))
next
    by auto
qed


theorem loewenheim_skolem:
  using evalS
proof (intro ballI impI)
  fix p


    using evalS by blast
    using evalS by blast
    by (simp add: psubst_eval)
    using doublep_infinite_params by blast
    using sat_consistency by blast
    using model_existence by blast
    using psubst_eval by blast
qed






lemma new_psubst_image':
  by (induct t and l rule: paramst.induct paramsts.induct) auto

  using new_psubst_image' by (induct p) auto

  using new_psubst_image by (induct z) auto

  by (induct z) auto

lemma deriv_psubst:
proof (induct z p arbitrary: f rule: deriv.induct)
  case (Assum a G)
  then show ?case
    using deriv.Assum member_psubst by blast
next
  case (TTI G)
  then show ?case
    using deriv.TTI by auto
next
  case (FFE G a)
  then show ?case
    using deriv.FFE by auto
next
  case (NegI a G)
  then show ?case
    using deriv.NegI by auto
next
  case (NegE G a)
  then show ?case
    using deriv.NegE by auto
next
  case (Class a G)
  then show ?case
    using deriv.Class by auto
next
  case (ImplE G a b)
    by simp_all
  then show ?case
    using deriv.ImplE by blast
next
  case (ImplI G a b)
  then show ?case
    using deriv.ImplI by auto
next
  case (OrE G a b c)
    by simp_all
  then show ?case
    using deriv.OrE by blast
next
  case (OrI1 G a b)
  then show ?case
    using deriv.OrI1 by auto
next
  case (OrI2 G a b)
  then show ?case
    using deriv.OrI2 by auto
next
  case (AndE1 G a b)
  then show ?case
    using deriv.AndE1 by auto
next
  case (AndE2 p q z)
  then show ?case
    using deriv.AndE2 by auto
next
  case (AndI G a b)
  then show ?case
    using deriv.AndI by fastforce
next
  case (ExistsE z p c q)

    by simp
    using ex_new_if_finite inf_params
    by (metis finite.emptyI finite.insertI finite_UnI finite_imageI)


    using ExistsE by simp
    using * new_psubst_image news_psubst by (fastforce simp add: image_Un)+
    using ExistsE by (metis (mono_tags, lifting) Ball_set map_eq_conv psubst_upd)

    using ExistsE by blast
    by simp
    using ExistsE by blast
    by simp
    by simp
    by simp_all
    using deriv.ExistsE by metis
  then show ?case
next
  case (ExistsI z p t)
  then show ?case
    using deriv.ExistsI by auto
next
  case (ForallE z p t)
  then show ?case
    using deriv.ForallE by auto
next
  case (ForallI z p c)

    by simp
    using ex_new_if_finite inf_params
    by (metis finite.emptyI finite.insertI finite_UnI finite_imageI)


    using ForallI by simp
    using * new_psubst_image news_psubst by (fastforce simp add: image_Un)+
    using ForallI by (metis (mono_tags, lifting) Ball_set map_eq_conv psubst_upd)

    using ForallI by blast
    by simp
    by simp
    by simp_all
    using deriv.ForallI by metis
  then show ?case
qed


primrec



lemma subst_0_lift:
  by (induct t and l rule: substt.induct substts.induct) simp_all

lemma params_lift [simp]:
  shows
  by (induct t and ts rule: paramst.induct paramsts.induct) simp_all

lemma subst_new' [simp]:
  by (induct t and l rule: substt.induct substts.induct) simp_all

  by (induct p arbitrary: m s) simp_all

lemma subst_new_all:
  using assms by (induct cs) auto

lemma subc_new' [simp]:
  by (induct t and l rule: subc_term.induct subc_list.induct) auto

  by (induct p arbitrary: s) simp_all

  by (induct z) simp_all

lemma subc_psubst' [simp]:
  by (induct t and l rule: psubstt.induct psubstts.induct) simp_all

  by (induct p arbitrary: s) simp_all

  by (induct z) (simp_all add: subc_psubst)

lemma new_lift:
  by (induct t and l rule: liftt.induct liftts.induct) simp_all

lemma new_subc' [simp]:
  by (induct t and l rule: substt.induct substts.induct) simp_all

  by (induct p arbitrary: s) simp_all

  by (induct z) simp_all

lemma psubst_new_free':
  by (induct t and l rule: paramst.induct paramsts.induct) simp_all

  using psubst_new_free' by (induct p) fastforce+

  using psubst_new_free by (induct z) fastforce+

lemma psubst_new_away' [simp]:
  by (induct t and l rule: psubstt.induct psubstts.induct) auto

  by (induct p) simp_all

lemma map_psubst_new_away:
  by (induct z) simp_all

lemma psubst_new':
  by (induct t and l rule: psubstt.induct psubstts.induct) auto

  using psubst_new' by (induct p) fastforce+

  using psubst_new by (induct z) auto

lemma lift_subst [simp]:
  by (induct t and l rule: substt.induct substts.induct) simp_all

lemma new_subc_same' [simp]:
  by (induct t and l rule: subc_term.induct subc_list.induct) simp_all

  by (induct p arbitrary: s) simp_all

lemma lift_subc:
  by (induct t and l rule: liftt.induct liftts.induct) simp_all

lemma new_subc_put':
  by (induct t and l rule: subc_term.induct subc_list.induct) simp_all

lemma new_subc_put:
proof (induct p arbitrary: s m t)
  case FF
  then show ?case
    by simp
next
  case TT
  then show ?case
    by simp
next
  case (Pred i l)
  then show ?case
    using new_subc_put' by fastforce
next
  case (Neg p)
  then show ?case
    by (metis subc.simps(4) subst.simps(7))
next
  case (Impl p q)
  then show ?case
    by (metis subc.simps(5) subst.simps(6))
next
  case (Or p q)
  then show ?case
    by (metis subc.simps(6) subst.simps(5))
next
  case (And p q)
  then show ?case
    by (metis subc.simps(7) subst.simps(4))
next
  case (Exists p)
    by (simp add: lift_subc)
    using Exists new_lift(1) by metis
  finally show ?case
    by simp
next
  case (Forall p)
    by (simp add: lift_subc)
    using Forall new_lift(1) by metis
  finally show ?case
    by simp
qed

lemma subc_subst_new':
  by (induct t and l rule: subc_term.induct subc_list.induct) simp_all

lemma subc_subst_new:
  using subc_subst_new' by (induct p arbitrary: m t s) fastforce+

lemma subc_sub_0_new [simp]:
  using subc_subst_new subst_0_lift(1) by metis

  by (induct z) auto

lemma deriv_subc:
proof (induct z p arbitrary: c s rule: deriv.induct)
  case (Assum p z)
  then show ?case
    using member_subc deriv.Assum by fast
next
  case TTI
  then show ?case
    using deriv.TTI by simp
  case FFE
  then show ?case
    using deriv.FFE by auto
next
  case (NegI z p)
  then show ?case
    using deriv.NegI by auto
next
  case (NegE z p)
  then show ?case
    using deriv.NegE by fastforce
next
  case (Class p z)
  then show ?case
    using deriv.Class by auto
next
  case (ImplE z p q)
  then show ?case
    using deriv.ImplE by fastforce
next
  case (ImplI z q p)
  then show ?case
    using deriv.ImplI by fastforce
next
  case (OrE z p q r)
  then show ?case
    using deriv.OrE by fastforce
next
  case (OrI1 z p q)
  then show ?case
    using deriv.OrI1 by fastforce
next
  case (OrI2 z q p)
  then show ?case
    using deriv.OrI2 by fastforce
next
  case (AndE1 z p q)
  then show ?case
    using deriv.AndE1 by fastforce
next
  case (AndE2 z p q)
  then show ?case
    using deriv.AndE2 by fastforce
next
  case (AndI p z q)
  then show ?case
    using deriv.AndI by fastforce
next
  case (ExistsE z p d q)
  then show ?case
    case True
      using ExistsE deriv.ExistsE by fast
      using ExistsE True by simp_all
    ultimately show ?thesis
      using subc_new subcs_news by metis
  next
    case False

      by simp
      using inf_params by (meson ex_new_if_finite infinite_UNIV_listI)


      using fresh by simp

      using fresh psubst_new_free'(1) by fast
      by (metis fun_upd_twist psubstt_upd(1))
      using fresh by simp

      using False fresh by auto

      using ExistsE by blast
    then have exi_p:
      using psubst_s by simp

      using ExistsE by simp
      using fresh by (induct z) simp_all
      by (induct z) simp_all
      by auto

      using fresh by (simp add: subc_psubst)
      using ExistsE fresh by simp

      using f by blast

      using ExistsE by blast
      by simp
      using deriv_psubst inf_params by fastforce
      using psubst_q psubst_z psubst_p by simp

      using fresh new_subc new_lift by simp
      using fresh new_subc by simp
      using deriv.ExistsE exi_p q psubst_s by metis
  qed
next
  case (ExistsI z p t)

    by simp
    using inf_params by (meson ex_new_if_finite infinite_UNIV_listI)


    using fresh by simp
    using fresh by simp
    using fresh by simp

    using fresh by auto
    using fresh by (induct z) simp_all
    using s by (simp add: subcs_psubst)

    using fresh psubst_new_free' by fast
    using ExistsI new_subc_put by metis
    using subc_sub_0_new by metis

    using deriv.ExistsI by simp
    using deriv_psubst inf_params by blast
    using fresh by auto
    using c s p z by (simp add: subc_psubst)
next
  case (ForallE z p t)

    by simp
    using inf_params by (meson ex_new_if_finite infinite_UNIV_listI)


    using fresh by simp
    using fresh by simp
    using fresh psubst_new psubst_subst subst_new psubst_new'(1) by fastforce

    using fresh by auto
    using fresh by (induct z) simp_all
    using s by (simp add: subcs_psubst)

    using fresh psubst_new_free' by fastforce

    using ForallE by simp
    using deriv.ForallE by blast
    by simp
    using deriv_psubst inf_params by blast
    using fresh p psubst_new_free by (metis fun_upd_apply id_apply)
    using c s p z by (simp add: subc_psubst)
next
  case (ForallI z p d)
  then show ?case
    case True
      using ForallI deriv.ForallI by fast
      using ForallI True by simp_all
    ultimately show ?thesis
      by (simp add: subcs_news)
  next
    case False

      by simp
      using inf_params by (meson ex_new_if_finite infinite_UNIV_listI)


      using fresh by simp

      using fresh psubst_new_free' by fastforce
      by (metis fun_upd_twist psubstt_upd(1))
      using fresh by simp

      using False fresh by auto

      by (simp add: subc_psubst)
      using ForallI fresh by simp

      using ForallI by simp
      using fresh by (induct z) simp_all
      by (induct z) simp_all
      by auto

      using ForallI by blast
      using deriv_psubst inf_params by blast
      using psubst_z by simp
      using psubst_p by simp

      using fresh by simp
      using new_lift by simp
      using fresh new_subc by simp
      using deriv.ForallI sub_p by simp
  qed
qed


lemma psubst_new_subset:
  using assms by force

  by auto

lemma weaken_assumptions:
proof (induct z p arbitrary: z' rule: deriv.induct)
  case (Assum p z)
  then show ?case
    using deriv.Assum by auto
next
  case TTI
  then show ?case
    using deriv.TTI by auto
next
  case FFE
  then show ?case
    using deriv.FFE by auto
next
  case (NegI p z)
  then show ?case
    using deriv.NegI subset_cons by metis
next
  case (NegE p z)
  then show ?case
    using deriv.NegE by metis
next
  case (Class z p)
  then show ?case
    using deriv.Class subset_cons by metis
next
  case (ImplE z p q)
  then show ?case
    using deriv.ImplE by blast
next
  case (ImplI z q p)
  then show ?case
    using deriv.ImplI subset_cons by metis
next
  case (OrE z p q z )
  then show ?case
    using deriv.OrE subset_cons by metis
next
  case (OrI1 z p q)
  then show ?case
    using deriv.OrI1 by blast
next
  case (OrI2 z q p)
  then show ?case
    using deriv.OrI2 by blast
next
  case (AndE1 z p q)
  then show ?case
    using deriv.AndE1 by blast
next
  case (AndE2 z p q)
  then show ?case
    using deriv.AndE2 by blast
next
  case (AndI z p q)
  then show ?case
    using deriv.AndI by blast
next
  case (ExistsE z p c q)

    by simp
    using inf_params by (meson ex_new_if_finite List.finite_set infinite_UNIV_listI)


    using ExistsE by simp
    using ExistsE psubst_new_subset by (simp add: Ball_set)
    using ExistsE by blast

    using ExistsE by blast

    using fresh by (simp add: map_psubst_new_free)
    using ExistsE by simp_all

    using ExistsE deriv.ExistsE by metis

    using deriv_psubst inf_params by blast
    using fresh map_psubst_new_away Ball_set by fastforce
    using fresh by simp
    by simp
next
  case (ExistsI z p t)
  then show ?case
    using deriv.ExistsI by blast
next
  case (ForallE p z t)
  then show ?case
    using deriv.ForallE by blast
next
  case (ForallI z p c)

    by simp
    using inf_params by (meson ex_new_if_finite List.finite_set infinite_UNIV_listI)


    using ForallI by simp
    using ForallI psubst_new_subset by (metis (no_types, lifting) Ball_set UN_iff)
    using ForallI by blast

    using fresh psubst_new_free by fastforce
    using ForallI by (simp add: list_all_iff)
    by simp_all

    using ForallI deriv.ForallI by fast

    using deriv_psubst inf_params by blast
    using fresh map_psubst_new_away Ball_set by fastforce
    using fresh ForallI by simp
    by simp
qed



lemma semantics_put_imps:
  unfolding model_def by (induct z) auto

lemma shift_imp_assum:
proof -
    by auto
    using assms weaken_assumptions inf_params by blast
    by (simp add: Assum)
    using ImplE by blast
qed

lemma remove_imps:
  using assms shift_imp_assum by (induct z arbitrary: z') auto


lemma subc_sub_closed_var' [simp]:
  by (induct t and l rule: substt.induct substts.induct) auto

  by (induct p arbitrary: m) simp_all


lemma sub_put_unis [simp]:
  by (induct k arbitrary: i) simp_all

  by (induct k arbitrary: m) simp_all

  by (induct m arbitrary: e) simp_all

  by (induct m) simp_all


proof (induct cs arbitrary: p)
  case (Cons c cs)
    by simp
    using ForallE by blast
  then show ?case
    using Cons by simp
qed simp


lemma vars_for_consts:
  using assms deriv_subc by (induct xs arbitrary: p) fastforce+

lemma vars_for_consts_for_unis:
  by (induct cs arbitrary: p) (simp_all add: subst_new_all)

lemma fresh_constant:
proof -
    by simp
  then show ?thesis
    using assms ex_new_if_finite UnI1 UnI2 by metis
qed

lemma fresh_constants:
proof (induct m)
  case (Suc m)
    by blast
    using Suc assms fresh_constant by blast
    by simp
  then show ?case
    by blast
qed simp

lemma closed_max:
proof -
    by simp_all
  then show ?thesis
    using assms closed_mono by metis
qed

lemma ex_closed' [simp]:
proof (induct t and l rule: closedt.induct closedts.induct)
  case (Cons_term t l)
    by blast
    by simp_all
    using closedt_mono by blast+
  then show ?case
    by auto
qed auto

proof (induct p)
  case FF
  then show ?case
    by simp
next
  case TT
  then show ?case
    by simp
next
  case (Neg p)
  then show ?case
    by simp
next
  case (Impl p q)
  then show ?case
    using closed_max by fastforce
next
  case (Or p q)
  then show ?case
    using closed_max by fastforce
next
  case (And p q)
  then show ?case
    using closed_max by fastforce
next
  case (Exists p)
    by blast
    using closed_mono Suc_n_not_le_n nat_le_linear by blast
  then show ?case
    by auto
next
  case (Forall p)
    by blast
    using closed_mono Suc_n_not_le_n nat_le_linear by blast
  then show ?case
    by auto
qed simp_all

  by simp

lemma remove_unis_sentence:
proof -
    using assms finite_compl finite_params fresh_constants inf_params by metis
    using assms consts_for_unis by blast
    using vars_for_consts inf_params by fastforce
    using vars_for_consts_for_unis * ** by metis
qed


theorem completeness:
proof -

    using assms semantics_put_imps unfolding model_def by fastforce
    using ex_closure by blast
    by simp
    using * valid_put_unis unfolding model_def by blast
    using natded_complete by blast
    using ** remove_unis_sentence by fastforce
    using remove_imps by fastforce
qed


proposition
  using completeness correctness
  unfolding model_def by (metis list.pred_inject(1))

proposition
  using completeness correctness
  unfolding model_def by fastforce

  by (rule completeness)

end
