theory ArcExt
imports SubRel
begin





abbreviation extends :: 
  "('v,'x) rgraph_scheme \<Rightarrow> 'v edge \<Rightarrow> ('v,'x) rgraph_scheme \<Rightarrow> bool" 
where
  "extends g e g' \<equiv> src e \<in> Graph.vertices g 
                  \<and> tgt e \<notin> Graph.vertices g 
                  \<and> g' = (add_edge g e)"




lemma extends_tgt_out_edges :
  assumes "extends g e g'"
  shows   "out_edges g' (tgt e) = {}" 
using assms unfolding vertices_def image_def by force


lemma (in sub_rel_of)
  assumes "extends g e g'"
  shows   "sub_rel_of g' subs"
using assms sub_rel_of by (auto simp add : sub_rel_of_def vertices_def)


lemma sp_in_extends :
  assumes "extends g e g'"
  assumes "Graph.subpath g  v1 es v2"
  shows   "Graph.subpath g' v1 es v2"
using assms by (auto simp add : Graph.subpath_def vertices_def)








lemma extends_is_tree :
  assumes "is_tree g"
  assumes "extends g e g'"
  shows   "is_tree g'"
unfolding is_tree_def Ball_def
proof (intro allI impI)
  fix v

  have "root g' = root g" using assms(2) by simp
  
  assume "v \<in> Graph.vertices g'"

  hence "v \<in> Graph.vertices g \<or> v = tgt e"
  using assms(2) by (auto simp add : vertices_def)

  thus "\<exists>!es. path g' es v"
  proof (elim disjE, goal_cases)
    case 1
    
    then obtain es 
    where "Graph.path g es v"
    and   "\<forall> es'. Graph.path g es' v \<longrightarrow> es' = es"
    using assms(1) unfolding Ex1_def is_tree_def by blast
  
    hence "Graph.path g' es v" 
    using assms(2) sp_in_extends[OF assms(2)]
    
    moreover
    have "\<forall> es'. Graph.path g' es' v \<longrightarrow> es' =  es"
    proof (intro allI impI)
      fix es'
  
      assume "Graph.path g' es' v"
  
      thus "es' = es"
      proof (case_tac "e \<in> set es'", goal_cases)
        case 1
  
        then obtain es'' 
        where "es' = es'' @ [e]"
        and   "e \<notin> set es''" 
              Graph.sp_through_de_decomp[OF extends_tgt_out_edges[OF assms(2)]]
        by blast
  
        hence "v = tgt e"
        by (simp add : Graph.sp_append_one)
  
        thus ?thesis 
        using assms(2) 
        by simp
      next
        case 2 thus ?thesis 
        using assms 
        by (auto simp add : Graph.subpath_def vertices_def)
      qed
    qed

    ultimately
    show ?thesis by auto

  next
    case 2

    then obtain es 
    where "Graph.path g es (src e)"
    and   "\<forall> es'. Graph.path g es' (src e) \<longrightarrow> es' = es"
    using assms(1,2) unfolding is_tree_def by blast
  
    hence "Graph.path g' es (src e)" 
    using sp_in_extends[OF assms(2)] 
  
    hence "Graph.path g' (es @ [e]) (tgt e)" 
    using assms(2) by (auto simp add : Graph.sp_append_one)
    
    moreover
    have "\<forall> es'. Graph.path g' es' (tgt e) \<longrightarrow> es' = es @ [e]"
    proof (intro allI impI)
      fix es'
  
      assume "Graph.path g' es' (tgt e)"
  
      moreover
      hence "e \<in> set es'" 
      using assms 
            sp_ends_in_tgt_imp_mem[of e g "root g" es']
      by (auto simp add : Graph.subpath_def vertices_def)
  
      moreover
      have   "out_edges g' (tgt e) = {}" 
      using assms 
      by (intro extends_tgt_out_edges)
  
      ultimately
      have "\<exists> es''. es' = es'' @ [e] \<and> e \<notin> set es''" 
      by (elim Graph.sp_through_de_decomp)
  
      then obtain es'' 
      where "es' = es'' @ [e]" 
      and   "e \<notin> set es''" 
      by blast
  
      hence "Graph.path g' es'' (src e)" 
      by (auto simp add : Graph.sp_append_one)
  
      hence "Graph.path g es'' (src e)"
      by (auto simp add : Graph.subpath_def vertices_def)
  
      hence "es'' = es" 
      by simp
  
    qed
    
    ultimately
    show ?thesis using 2 by auto
  qed
qed





lemma sp_in_extends_w_subs :
  assumes "extends g a g'"
  assumes "subpath g  v1 es v2 subs"
  shows   "subpath g' v1 es v2 subs"
using assms by (auto simp add : subpath_def sub_rel_of_def vertices_def)



lemma (in sub_rel_of) sp_from_old_verts_imp_sp_in_old :
  assumes "extends g e g'"
  assumes "v1 \<in> Graph.vertices g"
  assumes "v2 \<in> Graph.vertices g"
  assumes "subpath g' v1 es v2 subs"
  shows   "subpath g  v1 es v2 subs"
proof -
  have "e \<notin> set es"
  proof (intro notI)
    assume "e \<in> set es"
  
    have "v2 = tgt e"
    proof -
      have "tgt e \<notin> subsumees subs" using sub_rel_of assms(1) by fast
  
      moreover
      have  "out_edges g' (tgt e) = {}" using assms(1) by (rule extends_tgt_out_edges)
    
      ultimately
      have "\<exists> es'. es = es' @ [e] \<and> e \<notin> set es'" 
      by (intro sp_through_de_decomp)
    
      then obtain es' where "es = es' @ [e]" "e \<notin> set es'" by blast
  
      hence "tgt e = v2 \<or> (tgt e,v2) \<in> subs\<^sup>+"
      using assms(4) by (simp add : sp_append_one)
  
    qed

    thus False using assms(1,3) by simp
  qed

  thus ?thesis 
  using sub_rel_of assms
  unfolding subpath_def sub_rel_of_def by auto
qed




lemma (in sub_rel_of) sp_from_tgt_in_extends_is_Nil :
  assumes "extends g e g'"
  assumes "subpath g' (tgt e) es v subs"
  shows   "es = []"
using sub_rel_of assms
      extends_tgt_out_edges
      sp_from_de_empty[of "tgt e" subs g' es v]
by fast



lemma (in sub_rel_of) sp_to_new_edge_tgt_imp :
  assumes "extends g e g'"
  assumes "subpath g' v es (tgt e) subs"
  assumes "v \<noteq> tgt e"
  shows   "\<exists> es'. es = es' @ [e] \<and> e \<notin> set es' \<and> subpath g v es' (src e) subs"
proof -
  obtain es' where "es = es' @ [e]" and "e \<notin> set es'" 
  using sub_rel_of assms(1,2,3)
        extends_tgt_out_edges[OF assms(1)]
        sp_through_de_decomp[of e subs g' v es "tgt e"]
        sp_ends_in_tgt_imp_mem[of e v es]
  by blast

  moreover
  have "subpath g v es' (src e) subs"
  proof -
    have "v \<in> Graph.vertices g" 
    using assms(1,3) fst_of_sp_is_vert[OF assms(2)] 
    by (auto simp add : vertices_def)

    moreover
    have "SubRel.subpath g' v es' (src e) subs" 

    ultimately 
    show ?thesis 
    unfolding subpath_def by (auto simp add : sub_rel_of_def)
  qed

  ultimately
  show ?thesis by blast
qed

end
