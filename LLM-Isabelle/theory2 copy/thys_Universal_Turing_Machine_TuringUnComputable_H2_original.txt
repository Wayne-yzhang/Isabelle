   this file was part of the theory file Uncomputable.thy
   in the original AFP entry. 
   
 *)
(*
declare adjust.simps[simp del]

declare seq_tm.simps [simp del] 
declare shift.simps[simp del]
declare composable_tm.simps[simp del]
declare step.simps[simp del]
declare steps.simps[simp del]
*)
(* Cleanup the global simpset for proofs of several theorems about tm_dither *)
(*
declare adjust.simps[simp del]
*)
(*

Turing_HaltingConditions.thy:

definition TMC_has_num_res :: "tprog0 \<Rightarrow> nat list \<Rightarrow> bool"
  where
    "TMC_has_num_res p ns \<equiv>
     \<lbrace> \<lambda>tap. tap = ([], <ns>) \<rbrace> p \<lbrace> \<lambda>tap. (\<exists>k n l. tap = (Bk \<up> k, <n::nat> @ Bk \<up> l)) \<rbrace>"

DitherTM.thy:

lemma composable_tm0_tm_dither[intro, simp]: "composable_tm0 tm_dither"
  by (auto simp: composable_tm.simps tm_dither_def)

CopyTM.thy:

lemma composable_tm0_tm_copy[intro, simp]: "composable_tm0 tm_copy"
  by (auto simp: tm_copy_def)

*)
  (* Interestingly, the detailed definition of the coding function @{text "code"} for Turing machines
     does not affect the final result. In the proof there is no need to appeal on properties of the coding function
     like e.g. injectivity! *)
  (* 
   * The TM "H" is the one which is assumed being able to solve the general Halting problem.
   *)
  (* FABR Note:
   * The next axiom states that the Turing machine H is well-formed (composable).
   * However, this manifests a bug in the modelling of this locale!
   *
   * Due to this local axiom, we only prove that there exists no composable TM H
   * that is able to decide the Halting problem 'TMC_has_num_res M ns'
   *
   * See theories composableTMs and HaltingProblem_K for a fix by FABR.
   *
   *)
  (*
   * The following two local axioms specify (claim) that the Turing Machine H
   * is able to decide the general Halting problem H2.
   *)
(* Assertions for the Turing Machine H *)
(* The TM tcontra is the culprit that is used to derive a contradiction *)
(* assume tcontra does not halt on its code *)
  (* invariants *)
(*
  \<lbrace>P1\<rbrace> tm_copy \<lbrace>P2\<rbrace>  \<lbrace>P2\<rbrace> H \<lbrace>P3\<rbrace> 
  ----------------------------
     \<lbrace>P1\<rbrace> (tm_copy |+| H) \<lbrace>P3\<rbrace>     \<lbrace>P3\<rbrace> tm_dither \<lbrace>P3\<rbrace>
  ------------------------------------------------
                 \<lbrace>P1\<rbrace> tcontra \<lbrace>P3\<rbrace>
  *)
(* \<lbrace>P1\<rbrace> (tm_copy |+| H) \<lbrace>P3\<rbrace> *)
    case A_halt (* of tm_copy *)
    case B_halt (* of H *)
(* \<lbrace>P3\<rbrace> tm_dither \<lbrace>P3\<rbrace> *)
(* \<lbrace>P1\<rbrace> tcontra \<lbrace>P3\<rbrace> *)
(* asumme tcontra halts on its code *)
  (* invariants *)
(*
  \<lbrace>P1\<rbrace> tm_copy \<lbrace>P2\<rbrace>  \<lbrace>P2\<rbrace> H \<lbrace>Q3\<rbrace> 
  ----------------------------
     \<lbrace>P1\<rbrace> (tm_copy |+| H) \<lbrace>Q3\<rbrace>     \<lbrace>Q3\<rbrace> tm_dither loops
  ------------------------------------------------
               \<lbrace>P1\<rbrace> tcontra loops
  *)
(* \<lbrace>P1\<rbrace> (tm_copy |+| H) \<lbrace>Q3\<rbrace> *)
    case A_halt (* of tm_copy *)
    case B_halt (* of H *)
(* \<lbrace>P3\<rbrace> tm_dither loops *)
(* \<lbrace>P1\<rbrace> tcontra loops *)
end (* locale uncomputable *)
