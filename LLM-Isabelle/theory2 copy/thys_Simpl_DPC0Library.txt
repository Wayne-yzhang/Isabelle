theory DPC0Library imports DPC0Expressions Vcg begin





primrec pfilter:: "bool list \<Rightarrow> 'a list \<Rightarrow> 'a list"
where
"pfilter c [] = []" |
"pfilter c (v#vs) = (if hd c then v#pfilter (tl c) vs else pfilter (tl c) vs)"


primrec pmask:: "nat \<Rightarrow> bool list \<Rightarrow> nat list"
where
"pmask i  [] = []" |
"pmask i (b#bs) = (if b then i#(pmask (Suc i) bs) else pmask (Suc i) bs)"



syntax
  "_In":: "[ident,'a,'a] \<Rightarrow> ('s,'p,'f) com"
                 ("(2 IN \<acute>_:/ _ :== _)" [1000,30,30] 21)
  "_Where":: "['a,ident,('s,'p,'f) com] \<Rightarrow> ('s,'p,'f) com"
                 ("(0 WHERE (_)/ FOR \<acute>_ DO/ _ EREHW)" [0,0,0] 71)
  "_WhereElse":: "['a,ident,('s,'p,'f) com,('s,'p,'f) com] \<Rightarrow> ('s,'p,'f) com"
                 ("(0 WHERE (_)/ FOR \<acute>_ DO/ _ ELSE _ EREHW)" [0,0,0,0] 71)


translations
  "_In c (x!!i) y" => "x!!(pfilter \<acute>c i) :== pfilter \<acute>c y"
  "_In c x y" => "x!!(pmask 0 \<acute>c) :== pfilter \<acute>c y"
  "_Where m c s" => "_Loc (_locinit c (p_and \<acute>c m)) s"
  "_WhereElse m c s1 s2" => "(_Loc (_locinit c (p_and \<acute>c m)) s1);;
                             (_Loc (_locinit c (p_and \<acute>c (p_not m))) s2)"




end
