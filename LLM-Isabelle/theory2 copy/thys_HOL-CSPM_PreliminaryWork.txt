theory PreliminaryWork
  imports "HOL-Library.Multiset"
begin





lemma finite_subset_induct_singleton
      [consumes 3, case_names singleton insertion]:
  apply (erule Finite_Set.finite_subset_induct, simp_all)
  by (metis insert_absorb2 insert_commute)


lemma finite_set_induct_nonempty
      [consumes 2, case_names singleton insertion]:
proof-
qed


lemma finite_subset_induct_singleton'
      [consumes 3, case_names singleton insertion]:
  apply (erule Finite_Set.finite_subset_induct', simp_all)
  by (metis insert_absorb2 insert_commute)


lemma induct_subset_empty_single[consumes 1]:
  by (rule finite_subset_induct') auto




lemma msubset_induct [consumes 1, case_names empty add]:
  by (fact multi_subset_induct)


lemma msubset_induct_singleton [consumes 2, case_names m_singleton add]:
  by (erule msubset_induct, simp_all add: add_mset_commute)


lemma mset_induct_nonempty [consumes 1, case_names m_singleton add]:
proof-
qed 


lemma msubset_induct' [consumes 2, case_names empty add]:
proof -
  show ?thesis
  proof (induct F)
  next
    case (add x F)
      using Diff_eq_empty_iff_mset add_diff_cancel_left add_diff_cancel_left'
            add_mset_add_single local.insert mset_subset_eq_insertD
            subset_mset.le_iff_add subset_mset.less_imp_le by fastforce
  qed
qed


lemma msubset_induct_singleton' [consumes 2, case_names m_singleton add]:
  by (erule msubset_induct', simp_all add: add_mset_commute)


lemma msubset_induct_singleton'' [consumes 1, case_names m_singleton add]:
  apply (induct F, simp) 
  by (metis add_mset_commute diff_subset_eq_self subset_mset.trans union_single_eq_diff)


lemma mset_induct_nonempty' [consumes 1, case_names m_singleton add]:
proof-
    using nonempty multiset_cases subset_mset_def by auto
  proof (induct A' rule: msubset_induct_singleton'')
  next
    case (add x F)
      apply (subst hyp) 
                      mset_subset_eq_insertD subset_mset.add_diff_inverse 
                      subset_mset.add_le_cancel_left subset_mset_def)
                     subset_mset.dual_order.strict_implies_order)
  qed
qed


lemma induct_subset_mset_empty_single:
  by (metis in_diffD mset_induct_nonempty')




lemma strong_nat_induct[consumes 0, case_names 0 Suc]: 
  by (induct n rule: nat_less_induct) (metis gr0_implies_Suc gr_zeroI less_Suc_eq_le)

lemma strong_nat_induct_non_zero[consumes 1, case_names 1 Suc]: 
  by (induct n rule: nat_less_induct) (metis One_nat_def gr0_implies_Suc gr_zeroI less_Suc_eq_le)




lemma prem_Multi_cartprod:
  by auto



end
