theory Sigma_Protocols imports
  CryptHOL.CryptHOL
  Commitment_Schemes
begin

type_synonym ('msg', 'challenge', 'response') conv_tuple = "('msg' \<times> 'challenge' \<times> 'response')"

type_synonym ('msg','response') sim_out = "('msg' \<times> 'response')"

type_synonym ('pub_input', 'msg', 'challenge', 'response', 'witness') prover_adversary 
                  = "'pub_input' \<Rightarrow> ('msg', 'challenge', 'response') conv_tuple 
                        \<Rightarrow> ('msg', 'challenge', 'response') conv_tuple \<Rightarrow> 'witness' spmf"

locale \<Sigma>_protocols_base =
    and response :: "'rand \<Rightarrow> 'witness \<Rightarrow> 'challenge  \<Rightarrow> 'response spmf" 
    and check :: "'pub_input \<Rightarrow> 'msg \<Rightarrow> 'challenge \<Rightarrow> 'response \<Rightarrow> bool"
    and valid_pub :: "'pub_input set"
  assumes domain_subset_valid_pub: "Domain Rel \<subseteq> valid_pub"
begin

lemma assumes "x \<in> Domain Rel" shows "\<exists> w. (x,w) \<in> Rel"
  using assms by auto


definition "L \<equiv> {x. \<exists> w. (x, w) \<in> Rel}"

that runs the components of the protocol and outputs the boolean defined by the check algorithm.\<close>
text\<open>We define completeness as the probability that the completeness-game returns true for all challenges assuming the relation holds on \<open>h\<close> and \<open>w\<close>.\<close>
text\<open>Second we consider the honest verifier zero knowledge property (HVZK). To reason about this we construct the real view of the 

definition R :: "'pub_input \<Rightarrow> 'witness \<Rightarrow> 'challenge \<Rightarrow> ('msg, 'challenge, 'response) conv_tuple spmf"
  where "R h w e = do { 
    (r,a) \<leftarrow> init h w;
    z \<leftarrow> response r w e;
    return_spmf (a,e,z)}"

definition S where "S h e = map_spmf (\<lambda> (a, z). (a, e, z)) (S_raw h e)"

lemma lossless_S_raw_imp_lossless_S: "lossless_spmf (S_raw h e) \<longrightarrow> lossless_spmf (S h e)"
  by(simp add: S_def)


definition "HVZK \<equiv> (\<forall>e \<in> challenge_space. 
                      (\<forall>(h, w)\<in>Rel. R h w e = S h e)
                        \<and> (\<forall>h \<in> valid_pub. \<forall>(a, z) \<in> set_spmf (S_raw h e). check h a e z))"

