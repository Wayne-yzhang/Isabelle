theory Sparc_Types    
imports Main "../lib/WordDecl" "Word_Lib.Bit_Shifts_Infix_Syntax"
begin


type_synonym machine_word = word32
type_synonym byte = word8
type_synonym phys_address = word36

type_synonym virtua_address = word32
type_synonym page_address = word24
type_synonym offset = word12

type_synonym table_entry = word8

definition page_size :: "word32" where "page_size \<equiv> 4096"

type_synonym virtua_page_address = word20
type_synonym context_type = word8

type_synonym word_length_t1 = word_length8
type_synonym word_length_t2 = word_length6
type_synonym word_length_t3 = word_length6
type_synonym word_length_offset = word_length12
type_synonym word_length_page = word_length24
type_synonym word_length_phys_address = word_length36
type_synonym word_length_virtua_address = word_length32
type_synonym word_length_entry_type = word_length2
type_synonym word_length_machine_word = word_length32

definition length_machine_word :: "nat" 
 where "length_machine_word \<equiv> LENGTH(word_length_machine_word)"




definition leon3khz ::"word32"
where
"leon3khz \<equiv> 33000"


datatype MMU_register

lemma MMU_register_induct: 
  "P CR \<Longrightarrow> P CTP \<Longrightarrow> P CNR \<Longrightarrow> P FTSR \<Longrightarrow> P FAR 
   \<Longrightarrow> P x"
  by (cases x) auto

lemma UNIV_MMU_register [no_atp]: "UNIV = {CR, CTP, CNR, FTSR, FAR}"
   apply (safe)
   apply (case_tac x)
   apply (auto intro:MMU_register_induct)
  done


instantiation MMU_register :: enum begin

definition "enum_MMU_register = [ CR, CTP, CNR, FTSR, FAR ]"

definition
  "enum_all_MMU_register P \<longleftrightarrow> P CR \<and> P CTP \<and> P CNR \<and> P FTSR \<and> P FAR "
definition
  "enum_ex_MMU_register P \<longleftrightarrow> P CR \<or> P CTP \<or> P CNR \<or> P FTSR \<or> P FAR"

 instance proof
  qed (simp_all only: enum_MMU_register_def enum_all_MMU_register_def 
                      enum_ex_MMU_register_def UNIV_MMU_register, simp_all)
end
type_synonym MMU_context = "MMU_register \<Rightarrow> machine_word"

\<^item> C - bit 7
\<^item> M - bit 6,
\<^item> R - bit 5
\<^item> ACC - bit 4~2
\<^item> ET - bit 1~0.\<close>
text \<open>
  @{term CPU_register} datatype is an enumeration with the CPU registers defined in the SPARC V8 
  architecture.
\<close>
   PSR   \<comment> \<open>Processor State Register\<close>
 | WIM   \<comment> \<open>Window Invalid Mask\<close>
 | TBR   \<comment> \<open>Trap Base Register\<close>
 | Y     \<comment> \<open>Multiply/Divide Register\<close>
 | PC    \<comment> \<open>Program Counter\<close>
 | nPC   \<comment> \<open>next Program Counter\<close>
 | DTQ   \<comment> \<open>Deferred-Trap Queue\<close>
 | FSR   \<comment> \<open>Floating-Point State Register\<close>
 | FQ    \<comment> \<open>Floating-Point Deferred-Trap Queue\<close>
 | CSR   \<comment> \<open>Coprocessor State Register\<close>
 | CQ    \<comment> \<open>Coprocessor Deferred-Trap Queue\<close>
 | ASR "word5"  \<comment> \<open>Ancillary State Register\<close>
text \<open>The following two functions are dummies since we will not use 
        ASRs. Future formalisation may add more details to this.\<close>
text \<open>Write the tt field of the TBR register. 
        Return the new value of TBR.\<close>
text \<open>Get the nth bit of WIM. This equals ((AND) WIM $2^n$). 
        N.B. the first bit of WIM is the 0th bit.\<close>
  \<^cancel>\<open>ucast (((AND) psr 0b00000000000000000000000010000000) >> 7)\<close>
text \<open>Update the CWP field of PSR. 
        Return the new value of PSR.\<close>
text \<open>Update the the ET, CWP, and S fields of PSR. 
        Return the new value of PSR.\<close>
text \<open>Update the N, Z, V, C fields of PSR. 
        Return the new value of PSR.\<close>
text \<open>Update the ET, PIL fields of PSR. 
        Return the new value of PSR.\<close>
text \<open>
   SPARC V8 architecture is organized in windows of 32 user registers.
   The data stored in a register is defined as a 32 bits word @{term reg_type}:
\<close>
text \<open>
  The access to the value of a CPU register of type @{term CPU_register} is
  defined by a total function @{term cpu_context}
\<close>
text \<open>
  User registers are defined with the type @{term user_reg} represented by a 5 bits word.
\<close>
text \<open>
  Each window context is defined by a total function @{term window_context} from @{term user_register} 
  to @{term reg_type} (32 bits word storing the actual value of the register).
\<close>
text \<open>
  The number of windows is implementation dependent. 
  The LEON architecture is composed of 16 different windows (a 4 bits word).
\<close>
text \<open>Maximum number of windows is 32 in SPARCv8.\<close>
text \<open>
Finally the user context is defined by another total function @{term user_context} from 
@{term window_size} to @{term window_context}. That is, the user context is a function taking as
argument a register set window and a register within that window, and it returns the value stored
in that user register.
\<close>
         CCR    \<comment> \<open>Cache control register\<close>
        |ICCR   \<comment> \<open>Instruction cache configuration register\<close>
        |DCCR   \<comment> \<open>Data cache configuration register\<close>
text\<open>
The memory model is defined by a total function from 32 bits words to 8 bits words
\<close>
text \<open>
 The memory is defined as a function from page address to page, which is also defined
  as a function from physical address to @{term "machine_word"}
\<close>
text \<open>The delayed-write pool generated from write state register instructions.\<close>
text \<open>Convert a set to a list.\<close>
text \<open>The processor asserts this signal to ensure that the
memory system will not process another SWAP or
LDSTUB operation to the same memory byte.\<close>
text\<open>The processor asserts this signal to ensure that the
memory system will not process another SWAP or
LDSTUB operation to the same memory word.\<close>
text \<open>Given a word7 value, find the highest bit,
        and fill the left bits to be the highest bit.\<close>
text \<open>Given a word8 value, find the highest bit,
        and fill the left bits to be the highest bit.\<close>
text \<open>Given a word13 value, find the highest bit,
        and fill the left bits to be the highest bit.\<close>
text \<open>Given a word16 value, find the highest bit,
        and fill the left bits to be the highest bit.\<close>
text \<open>Given a word22 value, find the highest bit,
        and fill the left bits to tbe the highest bit.\<close>
text \<open>Given a word24 value, find the highest bit,
        and fill the left bits to tbe the highest bit.\<close>
text\<open>
Operations to be defined.
The SPARC V8 architecture is composed of the following set of instructions:
  \<^item> Load Integer Instructions
  \<^item> Load Floating-point Instructions
  \<^item> Load Coprocessor Instructions
  \<^item> Store Integer Instructions
  \<^item> Store Floating-point Instructions
  \<^item> Store Coprocessor Instructions
  \<^item> Atomic Load-Store Unsigned Byte Instructions
  \<^item> SWAP Register With Memory Instruction
  \<^item> SETHI Instructions
  \<^item> NOP Instruction
  \<^item> Logical Instructions
  \<^item> Shift Instructions
  \<^item> Add Instructions
  \<^item> Tagged Add Instructions
  \<^item> Subtract Instructions
  \<^item> Tagged Subtract Instructions
  \<^item> Multiply Step Instruction
  \<^item> Multiply Instructions
  \<^item> Divide Instructions
  \<^item> SAVE and RESTORE Instructions
  \<^item> Branch on Integer Condition Codes Instructions
  \<^item> Branch on Floating-point Condition Codes Instructions
  \<^item> Branch on Coprocessor Condition Codes Instructions
  \<^item> Call and Link Instruction
  \<^item> Jump and Link Instruction
  \<^item> Return from Trap Instruction
  \<^item> Trap on Integer Condition Codes Instructions
  \<^item> Read State Register Instructions
  \<^item> Write State Register Instructions
  \<^item> STBAR Instruction
  \<^item> Unimplemented Instruction
  \<^item> Flush Instruction Memory
  \<^item> Floating-point Operate (FPop) Instructions
  \<^item> Convert Integer to Floating point Instructions
  \<^item> Convert Floating point to Integer Instructions
  \<^item> Convert Between Floating-point Formats Instructions
  \<^item> Floating-point Move Instructions
  \<^item> Floating-point Square Root Instructions
  \<^item> Floating-point Add and Subtract Instructions
  \<^item> Floating-point Multiply and Divide Instructions
  \<^item> Floating-point Compare Instructions
  \<^item> Coprocessor Operate Instructions
\<close>
text \<open>The CALL instruction.\<close>
datatype call_type = CALL \<comment> \<open>Call and Link\<close>
text \<open>The SETHI instruction.\<close>
datatype sethi_type = SETHI    \<comment> \<open>Set High 22 bits of r Register\<close>
text \<open>The NOP instruction.\<close>
datatype nop_type = NOP      \<comment> \<open>No Operation\<close>
text \<open>The Branch on integer condition codes instructions.\<close> 
  BE       \<comment> \<open>Branch on Equal\<close>
 | BNE      \<comment> \<open>Branch on Not Equal\<close>
 | BGU      \<comment> \<open>Branch on Greater Unsigned\<close>
 | BLE      \<comment> \<open>Branch on Less or Equal\<close>
 | BL       \<comment> \<open>Branch on Less\<close>
 | BGE      \<comment> \<open>Branch on Greater or Equal\<close>
 | BNEG     \<comment> \<open>Branch on Negative\<close>
 | BG       \<comment> \<open>Branch on Greater\<close>
 | BCS      \<comment> \<open>Branch on Carry Set (Less than, Unsigned)\<close>
 | BLEU     \<comment> \<open>Branch on Less or Equal Unsigned\<close>
 | BCC      \<comment> \<open>Branch on Carry Clear (Greater than or Equal, Unsigned)\<close>
 | BA       \<comment> \<open>Branch Always\<close>
 | BN       \<comment> \<open>Branch Never\<close> \<comment> \<open>Added for unconditional branches\<close>
 | BPOS     \<comment> \<open>Branch on Positive\<close>
 | BVC      \<comment> \<open>Branch on Overflow Clear\<close>
 | BVS      \<comment> \<open>Branch on Overflow Set\<close>
text \<open>Memory instructions. That is, load and store.\<close>
  LDSB     \<comment> \<open>Load Signed Byte\<close>
 | LDUB     \<comment> \<open>Load Unsigned Byte\<close>
 | LDUBA    \<comment> \<open>Load Unsigned Byte from Alternate space\<close>
 | LDUH     \<comment> \<open>Load Unsigned Halfword\<close>
 | LD       \<comment> \<open>Load Word\<close>
 | LDA      \<comment> \<open>Load Word from Alternate space\<close>
 | LDD      \<comment> \<open>Load Doubleword\<close>
 | STB      \<comment> \<open>Store Byte\<close>
 | STH      \<comment> \<open>Store Halfword\<close>
 | ST       \<comment> \<open>Store Word\<close>
 | STA      \<comment> \<open>Store Word into Alternate space\<close>
 | STD      \<comment> \<open>Store Doubleword\<close>
 | LDSBA    \<comment> \<open>Load Signed Byte from Alternate space\<close>
 | LDSH     \<comment> \<open>Load Signed Halfword\<close>
 | LDSHA    \<comment> \<open>Load Signed Halfword from Alternate space\<close>
 | LDUHA    \<comment> \<open>Load Unsigned Halfword from Alternate space\<close>
 | LDDA     \<comment> \<open>Load Doubleword from Alternate space\<close>
 | STBA     \<comment> \<open>Store Byte into Alternate space\<close>
 | STHA     \<comment> \<open>Store Halfword into Alternate space\<close>
 | STDA     \<comment> \<open>Store Doubleword into Alternate space\<close>
 | LDSTUB   \<comment> \<open>Atomic Load Store Unsigned Byte\<close>
 | LDSTUBA  \<comment> \<open>Atomic Load Store Unsinged Byte in Alternate space\<close>
 | SWAP     \<comment> \<open>Swap r Register with Mmemory\<close>
 | SWAPA    \<comment> \<open>Swap r Register with Mmemory in Alternate space\<close>
 | FLUSH    \<comment> \<open>Flush Instruction Memory\<close>
 | STBAR    \<comment> \<open>Store Barrier\<close>
text \<open>Arithmetic instructions.\<close>
  ADD      \<comment> \<open>Add\<close>
 | ADDcc    \<comment> \<open>Add and modify icc\<close>
 | ADDX     \<comment> \<open>Add with Carry\<close>
 | SUB      \<comment> \<open>Subtract\<close>
 | SUBcc    \<comment> \<open>Subtract and modify icc\<close>
 | SUBX     \<comment> \<open>Subtract with Carry\<close>
 | UMUL     \<comment> \<open>Unsigned Integer Multiply\<close>
 | SMUL     \<comment> \<open>Signed Integer Multiply\<close>
 | SMULcc   \<comment> \<open>Signed Integer Multiply and modify icc\<close>
 | UDIV     \<comment> \<open>Unsigned Integer Divide\<close>
 | UDIVcc   \<comment> \<open>Unsigned Integer Divide and modify icc\<close>
 | SDIV     \<comment> \<open>Signed Integer Divide\<close> 
 | ADDXcc   \<comment> \<open>Add with Carry and modify icc\<close>
 | TADDcc   \<comment> \<open>Tagged Add and modify icc\<close>
 | TADDccTV \<comment> \<open>Tagged Add and modify icc and Trap on overflow\<close>
 | SUBXcc   \<comment> \<open>Subtract with Carry and modify icc\<close>
 | TSUBcc   \<comment> \<open>Tagged Subtract and modify icc\<close>
 | TSUBccTV \<comment> \<open>Tagged Subtract and modify icc and Trap on overflow\<close>
 | MULScc   \<comment> \<open>Multiply Step and modify icc\<close>
 | UMULcc   \<comment> \<open>Unsigned Integer Multiply and modify icc\<close>
 | SDIVcc   \<comment> \<open>Signed Integer Divide and modify icc\<close>
text \<open>Logical instructions.\<close>
  ANDs      \<comment> \<open>And\<close>
 | ANDcc    \<comment> \<open>And and modify icc\<close>
 | ANDN     \<comment> \<open>And Not\<close>
 | ANDNcc   \<comment> \<open>And Not and modify icc\<close>
 | ORs       \<comment> \<open>Inclusive-Or\<close>
 | ORcc     \<comment> \<open>Inclusive-Or and modify icc\<close>
 | ORN      \<comment> \<open>Inclusive Or Not\<close>
 | XORs      \<comment> \<open>Exclusive-Or\<close>
 | XNOR     \<comment> \<open>Exclusive-Nor\<close>
 | ORNcc    \<comment> \<open>Inclusive-Or Not and modify icc\<close>
 | XORcc    \<comment> \<open>Exclusive-Or and modify icc\<close>
 | XNORcc   \<comment> \<open>Exclusive-Nor and modify icc\<close>
text \<open>Shift instructions.\<close>
  SLL      \<comment> \<open>Shift Left Logical\<close>
 | SRL      \<comment> \<open>Shift Right Logical\<close>
 | SRA      \<comment> \<open>Shift Right Arithmetic\<close> 
text \<open>Other Control-transfer instructions.\<close>
  JMPL     \<comment> \<open>Jump and Link\<close>
 | RETT     \<comment> \<open>Return from Trap\<close>
 | SAVE     \<comment> \<open>Save caller's window\<close>
 | RESTORE  \<comment> \<open>Restore caller's window\<close> 
text \<open>Access state registers instructions.\<close>
  RDASR    \<comment> \<open>Read Ancillary State Register\<close>
 | RDY      \<comment> \<open>Read Y Register\<close>
 | RDPSR    \<comment> \<open>Read Processor State Register\<close>
 | RDWIM    \<comment> \<open>Read Window Invalid Mask Register\<close>
 | RDTBR    \<comment> \<open>Read Trap Base Regiser\<close>
 | WRASR    \<comment> \<open>Write Ancillary State Register\<close>
 | WRY      \<comment> \<open>Write Y Register\<close>
 | WRPSR    \<comment> \<open>Write Processor State Register\<close>
 | WRWIM    \<comment> \<open>Write Window Invalid Mask Register\<close>
 | WRTBR    \<comment> \<open>Write Trap Base Register\<close> 
text \<open>Unimplemented instruction.\<close>
datatype uimp_type = UNIMP    \<comment> \<open>Unimplemented\<close> 
text \<open>Trap on integer condition code instructions.\<close>
 TA       \<comment> \<open>Trap Always\<close>
 | TN       \<comment> \<open>Trap Never\<close>
 | TNE      \<comment> \<open>Trap on Not Equal\<close>
 | TE       \<comment> \<open>Trap on Equal\<close>
 | TG       \<comment> \<open>Trap on Greater\<close>
 | TLE      \<comment> \<open>Trap on Less or Equal\<close>
 | TGE      \<comment> \<open>Trap on Greater or Equal\<close>
 | TL       \<comment> \<open>Trap on Less\<close>
 | TGU      \<comment> \<open>Trap on Greater Unsigned\<close>
 | TLEU     \<comment> \<open>Trap on Less or Equal Unsigned\<close>
 | TCC      \<comment> \<open>Trap on Carry Clear (Greater than or Equal, Unsigned)\<close>
 | TCS      \<comment> \<open>Trap on Carry Set (Less Than, Unsigned)\<close>
 | TPOS     \<comment> \<open>Trap on Postive\<close>
 | TNEG     \<comment> \<open>Trap on Negative\<close>
 | TVC      \<comment> \<open>Trap on Overflow Clear\<close>
 | TVS      \<comment> \<open>Trap on Overflow Set\<close>
\<comment> \<open>The following are processor states that are not in the instruction model,\<close>
\<comment> \<open>but we MAY want to deal with these from hardware perspective.\<close>
\<^cancel>\<open>|execute_mode\<close>
\<^cancel>\<open>|reset_mode\<close>
\<^cancel>\<open>|error_mode\<close>
\<comment> \<open>The following are self-defined exceptions.\<close>
|illegal_instruction2 \<comment> \<open>when \<open>i = 0\<close> for load/store not from alternate space\<close>
