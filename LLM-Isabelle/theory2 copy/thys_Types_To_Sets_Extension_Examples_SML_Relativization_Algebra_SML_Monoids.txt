theory SML_Monoids
  imports 
    SML_Semigroups
    "../Foundations/Product_Type_Ext"
    "../Foundations/Transfer_Ext"
begin






locale neutral_ow =
  assumes z_closed[simp]: "\<^bold>1\<^sub>o\<^sub>w \<in> U" 
begin



lemma not_empty[simp]: "U \<noteq> {}" using z_closed by blast

lemma neutral_map: "(\<lambda>y. \<^bold>1\<^sub>o\<^sub>w) ` A \<subseteq> U" using z_closed by auto

end

locale monoid_ow = semigroup_ow U f + neutral_ow U z
  for U :: "'ag set" and f z +
  assumes left_neutral_mow[simp]: "a \<in> U \<Longrightarrow> (\<^bold>1\<^sub>o\<^sub>w \<^bold>*\<^sub>o\<^sub>w a) = a"
    and right_neutral_mow[simp]: "a \<in> U \<Longrightarrow> (a \<^bold>*\<^sub>o\<^sub>w \<^bold>1\<^sub>o\<^sub>w) = a"

locale zero_ow = zero: neutral_ow U zero
begin


lemma zero_closed: "0\<^sub>o\<^sub>w \<in> U" by (rule zero.z_closed)

end

lemma monoid_ow: "monoid = monoid_ow UNIV"
  unfolding 
    monoid_def monoid_ow_def monoid_axioms_def monoid_ow_axioms_def
    neutral_ow_def
    semigroup_ow
  by simp

locale one_ow = one: neutral_ow U one
begin


lemma one_closed: "1\<^sub>o\<^sub>w \<in> U" by (rule one.z_closed)

end

locale power_ow = one_ow U one + times_ow U times

primrec power_with :: "['a, ['a, 'a] \<Rightarrow> 'a, 'a, nat] \<Rightarrow> 'a"
  where
    power_0: "power_with one times a 0 = one" for one times
  | power_Suc: "power_with one times a (Suc n) = 
      times a (power_with one times a n)" for one times

  apply(intro ext)
  subgoal for x n by (induction n) auto
  done

context power_ow
begin

