theory Implem_lemmas
imports Implem
begin


context semivalid_implem
begin


definition
  abs :: "msg set \<Rightarrow> chan set"
where
  "abs S \<equiv> {Chan x A B M | x A B M. M \<in> payload \<and> implem (Chan x A B M) \<in> S}"

lemma absE [elim]: 
  "\<lbrakk> X \<in> abs H;
     \<And> x A B M. X = Chan x A B M \<Longrightarrow> M \<in> payload \<Longrightarrow> implem X \<in> H \<Longrightarrow> P \<rbrakk>
  \<Longrightarrow> P"
by (auto simp add: abs_def)

lemma absI [intro]: "M \<in> payload \<Longrightarrow> implem (Chan x A B M) \<in> H \<Longrightarrow> Chan x A B M \<in> abs H"
by (auto simp add: abs_def)

lemma abs_mono: "G \<subseteq> H \<Longrightarrow> abs G \<subseteq> abs H"
by (auto simp add: abs_def)

lemmas abs_monotone [simp] = abs_mono [THEN [2] rev_subsetD]

lemma abs_empty [simp]: "abs {} = {}"
by (auto simp add: abs_def)

lemma abs_Un_eq: "abs (G \<union> H) = abs G \<union> abs H"
by (auto simp add: abs_def)

lemma abs_insert_payload [simp]: "M \<in> payload \<Longrightarrow> abs (insert M S) = abs S"
by (auto simp add: abs_def)

lemma abs_insert_impl [simp]:
  "M \<in> payload \<Longrightarrow> abs (insert (implem (Chan x A B M)) S) = insert (Chan x A B M) (abs S)"
by (auto simp add: abs_def)

lemma extr_payload [simp, intro]:
  "\<lbrakk> X \<in> extr Bad NI (abs I); NI \<subseteq> payload \<rbrakk> \<Longrightarrow> X \<in> payload"
by (erule extr.induct, blast, auto)

lemma abs_Un_LtK:
  "K \<subseteq> range LtK \<Longrightarrow> abs (K \<union> S) = abs S"
by (auto simp add: abs_Un_eq)

lemma abs_Un_keys_of [simp]:
  "abs (keys_of A \<union> S) = abs S"
by (auto intro!: abs_Un_LtK)



lemma abs_validSet: "abs (S \<inter> valid) = abs S"
by (auto elim: absE intro: validI)

lemma valid_abs: "M \<in> valid \<Longrightarrow> \<exists> M'. M' \<in> abs {M}"
by (auto elim: validE)



(not necessarily valid since we do not require that they are payload) and can be extracted 
using the keys in K. It corresponds to L2 @{term extr}.\<close>
text \<open>General lemmas about implementations and extractable.\<close>
text \<open>Auxiliary lemmas about extractable messages: they are implementations.\<close>
subsubsection\<open>Partition $I$ to keep only the extractable messages\<close>
text \<open>Partition the implementation set.\<close>
subsubsection \<open>Partition of @{term "extractable"}\<close>
text \<open>We partition the @{term "extractable"} set into insecure, confidential, authentic 
implementations.\<close>
subsection \<open>Lemmas for proving intruder refinement (L2-L3)\<close>
text \<open>Chain of lemmas used to prove the refinement for \<open>l3_dy\<close>. 
