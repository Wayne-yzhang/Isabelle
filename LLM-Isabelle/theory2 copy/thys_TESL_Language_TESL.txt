theory TESL
imports Main

begin






datatype '\<tau> TESL_atomic =



where 

instantiation tag_const ::(field)field
begin
  fun inverse_tag_const

  fun divide_tag_const 

  fun uminus_tag_const

fun minus_tag_const


fun times_tag_const


fun plus_tag_const

instance proof
    using tag_const.exhaust by metis
    by (simp add: TESL.times_tag_const.simps)
next
    by (simp add: TESL.times_tag_const.simps)
next
    by (simp add: TESL.times_tag_const.simps one_tag_const_def)
next
    using tag_const.exhaust by metis
    by (simp add: TESL.plus_tag_const.simps)
next
    by (simp add: TESL.plus_tag_const.simps)
next
    by (simp add: TESL.plus_tag_const.simps zero_tag_const_def)
next
    by (simp add: TESL.plus_tag_const.simps
                  TESL.uminus_tag_const.simps
                  zero_tag_const_def)
next
    by (simp add: TESL.minus_tag_const.simps
                  TESL.plus_tag_const.simps
                  TESL.uminus_tag_const.simps)
next
    using tag_const.exhaust by metis
    by (simp add: TESL.plus_tag_const.simps
                  TESL.times_tag_const.simps
                  ring_class.ring_distribs(2))
next
    by (simp add: one_tag_const_def zero_tag_const_def)
next
    by (simp add: TESL.inverse_tag_const.simps
                  TESL.times_tag_const.simps
                  one_tag_const_def)
next
    by (simp add: TESL.divide_tag_const.simps
                  TESL.inverse_tag_const.simps
                  TESL.times_tag_const.simps
                  divide_inverse)
next
    by (simp add: TESL.inverse_tag_const.simps zero_tag_const_def)
qed

end


instantiation tag_const :: (order)order
begin
  where


  instance proof
      using less_eq_tag_const.simps less_tag by auto
  next
  next
      using less_eq_tag_const.simps by auto
  next
      using less_eq_tag_const.simps by auto
  qed

end

instantiation tag_const :: (linorder)linorder
begin
  instance proof
  qed

end

end
