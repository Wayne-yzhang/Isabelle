theory MultiSeq
  imports Patch
begin






translations  "SEQ i \<in>@ A. P " \<rightleftharpoons> "CONST MultiSeq A (\<lambda>i. P)"




  by (simp add: MultiSeq_def)


  by (simp add: MultiSeq_def Seq_SKIP)


  by (simp add: MultiSeq_def)




  by (simp_all add: Seq_SKIP Seq_assoc)


  by (simp add: upto.simps Seq_SKIP Seq_assoc)




lemma MultiSeq_cont[simp]:
  by (induct L) force+




lemma MultiSeq_factorization_append:
  by (induct A rule: list.induct, simp_all add: SKIP_Seq, metis Seq_assoc)





lemma MultiSeq_BOT_absorb:
  by (metis BOT_Seq MultiSeq_Cons MultiSeq_factorization_append)




lemma MultiSeq_SKIP_neutral:
  by (simp add: MultiSeq_def SKIP_Seq)


lemma MultiSeq_STOP_absorb:
  by (metis STOP_Seq MultiSeq_Cons MultiSeq_factorization_append)


lemma mono_MultiSeq_eq:
  by (induct L) fastforce+


lemma MultiSeq_is_SKIP_iff:
  by (induct L, simp_all add: Seq_is_SKIP_iff)








lemma inj_on_mapping_over_MultiSeq:
proof (induct C)
  case Nil
  show ?case by simp
next
  case (Cons a C)
  show ?case
    apply (subst "Cons.hyps"(1), rule inj_on_subset[OF "Cons.prems"],
           simp add: subset_insertI)
    apply (rule mono_MultiSeq_eq)
    using "Cons.prems" by fastforce
qed






      This will be very useful later.\<close>
value \<open>first_elem (\<lambda>x. 4 < x) [0::nat, 2, 5]\<close>
lemma \<open>first_elem (\<lambda>x. 5 < x) [0::nat, 2, 5] = 3\<close> by simp 
lemma \<open>P ` set L \<subseteq> {False} \<Longrightarrow> first_elem P L = length L\<close> by (induct L; simp)
