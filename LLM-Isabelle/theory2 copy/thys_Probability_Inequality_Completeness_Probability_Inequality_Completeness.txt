theory Probability_Inequality_Completeness
  imports
    "Suppes_Theorem.Probability_Logic"
begin

no_notation FuncSet.funcset (infixr "\<rightarrow>" 60)


       in sense to prove multiple conclusions. That is to say, a portion of the
       premises must be used to prove each conclusion which cannot be reused. Counting
       deduction counts the number of times a particular conclusion can be proved
       (as the name implies), while measure deduction includes multiple, different
       conclusions which must be proven via the premises. \<close>
text \<open> We also introduce an abstract notion of MaxSAT, which is the
       maximal number of clauses in a list of clauses that can be simultaneously
       satisfied. \<close>
text \<open> We show the following are equivalent:

\<close>
text \<open> In the special case of MaxSAT, we show the following are
       equivalent:

\<close>
chapter \<open> Measure Deduction and Counting Deduction \<close>
section \<open> Definition of Measure Deduction \<close>
text \<open> To start, we introduce a common combinator for modifying functions
       that take two arguments. \<close>
text \<open> Our new logical calculus is a recursively defined relation \<open>($\<turnstile>)\<close>
       using \<^emph>\<open>list deduction\<close> \<^term>\<open>(:\<turnstile>)\<close>. \<close>
text \<open> We call our new logical relation \<^emph>\<open>measure deduction\<close>: \<close>
text \<open> Let us briefly analyze what the above definition is saying. \<close>
text \<open> From the above we must find a special list-of-pairs \<open>\<Psi>\<close>,
       which we refer to as a \<^emph>\<open>witness\<close>, in order to establish
      \<^term>\<open>\<Gamma> $\<turnstile> (\<phi> # \<Phi>)\<close>. \<close>
text \<open> We may motivate measure deduction as follows. In the simplest case
       reflects proving theorems in the theory of inequalities of probability
       logic is the elementary intuition behind the soundness theorem we will
       ultimately prove in \S\ref{subsubsec:measure-deduction-soundness}. \<close>
text \<open> A key difference from the simple motivation above is that, as in the

       that lets us weigh several things on the left and one thing on the



       simply weighing the two bags. A sufficient (but incomplete) approach
       avoids the complexity of iteratively cutting up balls of clay. \<close>
section \<open> The Stronger Theory Relation is a Preorder \<close>
text \<open> Next, we show that \<^term>\<open>(\<preceq>)\<close> is a preorder by establishing reflexivity
       right hand side of the \<^term>\<open>($\<turnstile>)\<close> turnstile to the left. \<close>
text \<open> We observe a novel logical principle, which we call \<^emph>\<open>exchange\<close>.
       classical logic that \<open> \<Gamma> :\<turnstile> \<phi> = (\<sim> \<phi> # \<Gamma>) :\<turnstile> \<bottom> \<close> for measure
       another kind of judgement: \<^emph>\<open>how many times can a list of premises
       with each dispatched conclusion. \<close>
section \<open> Converting Back and Forth from Counting Deduction to Measure Deduction \<close>
text \<open> We next show how to convert back and forth from counting deduction to
       measure deduction. \<close>
text \<open> First, we show that trivially counting deduction is a special case of
       measure deduction. \<close>
text \<open> We next prove a few helpful lemmas regarding counting deduction. \<close>
text \<open> Finally, we use @{thm measure_negation_swap [no_vars]} to prove
       that measure deduction reduces to counting deduction. \<close>
section \<open> Measure Deduction Soundess \label{subsubsec:measure-deduction-soundness} \<close>
text \<open> The last major result for measure deduction we have to show is
       lists of formulae can be translated into tautologies for inequalities
       of finitely additive probability measures over those same formulae
       (using the same underlying classical logic). \<close>
      from \<open>map snd (\<psi> # \<Psi>) = \<^bold>\<sim> \<Delta>\<close> have "map snd \<Psi> = \<^bold>\<sim> (tl \<Delta>)" by auto
        using \<open>map snd (\<psi> # \<Psi>) = \<^bold>\<sim> \<Delta>\<close> by force
      using \<Psi>(1) \<Delta>(2) \<open>map fst ?\<Psi> = \<Delta>\<close> by simp
        from \<open>map snd (\<psi> # \<Psi>) = \<^bold>\<sim> \<Delta>\<close> have "map snd \<Psi> = \<^bold>\<sim> (tl \<Delta>)" by auto
          using \<open>map snd (\<psi> # \<Psi>) = \<^bold>\<sim> \<Delta>\<close> by force
chapter \<open> MaxSAT \label{subsec:abstract-maxsat} \<close>
text \<open> We turn now to showing that counting deduction reduces to
       MaxSAT, the problem of finding the maximal number of
       satisfiable clauses in a list of clauses. \<close>
section \<open> Definition of Relative Maximal Clause Collections \<close>
text \<open> Given a list of assumptions \<open>\<Phi>\<close> and formula \<open>\<phi>\<close>, we can think of those
       maximal sublists of \<open>\<Phi>\<close> that do not prove \<open>\<phi>\<close>. While in practice we
       will care about \<open>\<phi> = \<bottom>\<close>, we provide a general definition in the more
