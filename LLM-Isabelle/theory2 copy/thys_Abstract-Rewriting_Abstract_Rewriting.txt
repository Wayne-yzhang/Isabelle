theory Abstract_Rewriting
imports
  "HOL-Library.Infinite_Set"
  "Regular-Sets.Regexp_Method"
  Seq
begin

lemma trancl_mono_set:
  "r \<subseteq> s \<Longrightarrow> r\<^sup>+ \<subseteq> s\<^sup>+"
  by (blast intro: trancl_mono)

lemma relpow_mono:
  fixes r :: "'a rel"
  assumes "r \<subseteq> r'" shows "r ^^ n \<subseteq> r' ^^ n"
  using assms by (induct n) auto

lemma refl_inv_image:
  "refl R \<Longrightarrow> refl (inv_image R f)"
  by (simp add: inv_image_def refl_on_def)


definition join :: "'a rel \<Rightarrow> 'a rel"  ("(_\<^sup>\<down>)" [1000] 999) where
  "A\<^sup>\<down> = A\<^sup>* O (A\<inverse>)\<^sup>*"

definition meet :: "'a rel \<Rightarrow> 'a rel"  ("(_\<^sup>\<up>)" [1000] 999) where
  "A\<^sup>\<up> = (A\<inverse>)\<^sup>* O A\<^sup>*"

abbreviation symcl :: "'a rel \<Rightarrow> 'a rel"  ("(_\<^sup>\<leftrightarrow>)" [1000] 999) where
  "A\<^sup>\<leftrightarrow> \<equiv> A \<union> A\<inverse>"

definition conversion :: "'a rel \<Rightarrow> 'a rel"  ("(_\<^sup>\<leftrightarrow>\<^sup>*)" [1000] 999) where
