theory VName
imports Main
begin

datatype vname = I nat | R nat

instantiation vname :: linorder begin
fun less_vname :: "vname \<Rightarrow> vname \<Rightarrow> bool" where
  "(I n1) < (R n2) = True" |
  "(R n1) < (I n2) = False" |
  "(I n1) < (I n2) = (n1 < n2)" |
  "(R n1) < (R n2) = (n1 < n2)"

definition less_eq_vname :: "vname \<Rightarrow> vname \<Rightarrow> bool" where
  "less_eq_vname v1 v2 = (v1 < v2 \<or> v1 = v2)"
declare less_eq_vname_def [simp]

instance
  apply standard
      apply (auto elim: less_vname.elims)
  subgoal for x y z
    apply (cases x; cases y; cases z)
           apply simp_all
    done
  done
end

end
