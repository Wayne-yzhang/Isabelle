theory LowerBound
imports PlaneProps ScoreProps
begin

lemma trans1:
 "(l::nat) = a1 + a2 + (a3 + a4) \<Longrightarrow> a1 + a3 = r \<Longrightarrow> l = r + a2 + a4"
by simp

lemma trans2: "(l::nat) =  a1 + a2 + a3  \<Longrightarrow>  a1 \<le> r \<Longrightarrow> l \<le> r + a2 + a3"
by simp

lemma trans3:
 "(l::nat) \<le>  a1 + a2 + (a3 + a4) \<Longrightarrow> a2 + a3 \<le> r \<Longrightarrow> l \<le> a1 + r + a4"
by simp

lemma trans4: "(l::nat) \<le> a1 + a2 + a3 \<Longrightarrow> a3 \<le> r \<Longrightarrow> l \<le> a1 + a2 + r"
by simp

lemma trans5: "(l::nat) \<le> a1 + a2 + a3 \<Longrightarrow> a2 + a3 = r \<Longrightarrow> l \<le> a1 + r"
by simp

lemma trans6: "(a::nat) = b1 + (b2 + b3) + b4 \<Longrightarrow> b3 = 0 \<Longrightarrow>
            a = b1 + b2 + b4" by (simp add: ac_simps)


theorem total_weight_lowerbound:
 "inv g \<Longrightarrow> final g \<Longrightarrow> tame g \<Longrightarrow> admissible w g \<Longrightarrow>
 (\<Sum>\<^bsub>f \<in> faces g\<^esub> w f) < squanderTarget \<Longrightarrow>
 squanderLowerBound g \<le> (\<Sum>\<^bsub>f \<in> faces g\<^esub> w f)"
proof -
  assume final: "final g" and tame: "tame g" and pl: "inv g"
  assume admissible: "admissible w g"
  assume w: "(\<Sum>\<^bsub>f \<in> faces g\<^esub> w f) < squanderTarget"
  from admissible have admissible\<^sub>1:
   "\<And>f. f \<in> set (faces g) \<Longrightarrow> \<d> |vertices f| \<le> w f"
    by (simp add: admissible_def admissible\<^sub>1_def)

  have "squanderLowerBound g
     = ExcessNotAt g None + faceSquanderLowerBound g"
    by (simp add: squanderLowerBound_def)



  also from ExcessNotAt_eq[OF pl[THEN inv_mgp] final] obtain V
    where eq: "ExcessNotAt g None = (\<Sum>\<^bsub>v \<in> V\<^esub> ExcessAt g v)"
    and pS:  "separated g (set V)"
    and V_subset: "set V \<subseteq> set(vertices g)"
    by (blast) note eq


  also
  define V1 where "V1 = [v \<leftarrow> V. except g v = 0]"
  have s: "set V1 \<subseteq> set V" by (auto simp add: V1_def)
  with pS obtain pSV1: "separated g (set V1)"
    by (auto dest: separated_subset)
  from V_distinct obtain V1_distinct: "distinct V1"
    by (unfold V1_def) (auto dest: distinct_filter)
  obtain noExV1: "noExceptionals g (set V1)"
    by (auto simp add: V1_def noExceptionals_def
      exceptionalVertex_def)

  have V_subset_simp: "\<And>v. v: set V \<Longrightarrow> v : \<V> g"
    using V_subset by fast

  have "(\<Sum>\<^bsub>v \<in> V\<^esub> ExcessAt g v)

  $V4$ contains all exceptional vertices of degree $\neq 5$
  $V3$ contains all exceptional vertices of degree $5$.
\<close>
  have "distinct V3" by(simp add:V3_def V2_def \<open>distinct V\<close>)
  txt \<open>We partition  \<open>faces g\<close> in two disjoint subsets:
  \<open>excess\<close> returns \<open>a (tri g v)\<close>.\<close>
  txt \<open>($E_3$) For all exceptional vertices of degree $\neq 5$

    by (rule_tac ListSum_eq)



  also(trans6) have
  "(\<Sum>\<^bsub>v \<in> V1\<^esub> \<b> (tri g v) (quad g v)) \<le> (\<Sum>\<^bsub>v \<in> V1\<^esub> \<Sum>\<^bsub>f \<in> facesAt g v\<^esub> w f)"

  proof (rule_tac ListSum_le)
    fix v assume "v \<in> set V1"
    with admissible show "\<b> (tri g v) (quad g v) \<le> (\<Sum>\<^bsub>f \<in> facesAt g v\<^esub> w f)"
  qed

  also(trans2) from pSV1 V1_distinct V_subset have "\<dots> = (\<Sum>\<^bsub>f \<in> F1\<^esub> w f)"
    apply (unfold F1_def)
    apply (rule ScoreProps.separated_disj_Union2)
    apply (rule pl)
    apply (rule final)
    apply (rule noExV1)
    apply (rule pSV1)
    apply (rule V1_distinct)
    apply (unfold V1_def)
    apply auto
    done


  proof-
    define T where "T = [f\<leftarrow>F3. triangle f]"
    define E where "E = [f\<leftarrow>F3. \<not> triangle f]"
    have "(\<Sum>\<^bsub>f\<in>F3\<^esub> \<d> |vertices f| ) =
      (\<Sum>\<^bsub>f\<in>T\<^esub> \<d> |vertices f| ) + (\<Sum>\<^bsub>f\<in>E\<^esub> \<d> |vertices f| )"
      by(simp only: T_def E_def ListSum_compl2)
    also have "(\<Sum>\<^bsub>f\<in>T\<^esub> \<d> |vertices f| ) =
          (\<Sum>\<^bsub>f \<in> [f\<leftarrow>faces g . \<exists>v \<in> set V3. f \<in> set (facesAt g v) \<inter> Collect triangle]\<^esub> \<d> |vertices f| )"
      by(rule listsum_cong[OF _ HOL.refl])
        (simp add:T_def F3 Int_def)
    also have "\<dots> = (\<Sum>\<^bsub>v \<in> V3\<^esub> \<Sum>\<^bsub>f \<in> filter triangle (facesAt g v)\<^esub> \<d> |vertices f| )"
        (simp add:Ball_def)
    also have "\<dots> = 0" by (simp add: squanderFace_def)
    finally have "(\<Sum>\<^bsub>v\<in>V3\<^esub> \<a>) + (\<Sum>\<^bsub>f\<in>F3\<^esub> \<d> |vertices f| ) =
      (\<Sum>\<^bsub>v\<in>V3\<^esub> \<a>) + (\<Sum>\<^bsub>f\<in>E\<^esub> \<d> |vertices f| )" by simp
    also have "(\<Sum>\<^bsub>f\<in>E\<^esub> \<d> |vertices f| ) \<le> (\<Sum>\<^bsub>f\<in>E\<^esub> w f )"
      by(rule_tac ListSum_le)
        (simp add: admissible_def admissible\<^sub>1_def E_def F3_def F2_def)
    also have "(\<Sum>\<^bsub>v\<in>V3\<^esub> \<a>) \<le> (\<Sum>\<^bsub>v\<in>V3\<^esub> \<Sum>\<^bsub>f\<in>filter triangle (facesAt g v)\<^esub> w(f))"
      by(rule_tac ListSum_le)
        (simp add: admissible_def admissible\<^sub>3_def V3_def V2_def V_subset_simp)
    also have "\<dots> = (\<Sum>\<^bsub>f \<in> [f\<leftarrow>faces g . \<exists>v \<in> set V3. f \<in> set (facesAt g v) \<inter> Collect triangle]\<^esub> w f)"
        (simp add:Ball_def)
    also have "\<dots> = (\<Sum>\<^bsub>f\<in>T\<^esub> w f)"
      by(simp add: T_def F3 Int_def)
    also have "ListSum T w + ListSum E w = ListSum F3 w"
      by(simp add: T_def E_def ListSum_compl2)
    finally show ?thesis by simp
  qed


  also(trans3) have "(\<Sum>\<^bsub> f \<in> F4\<^esub> \<d> |vertices f| ) \<le> (\<Sum>\<^bsub>f \<in> F4\<^esub> w f)"
  proof (rule ListSum_le)
    fix f assume "f \<in> set F4"
    with admissible\<^sub>1 f show "\<d> |vertices f| \<le> w f" by (simp)
  qed





  finally show "squanderLowerBound g \<le> (\<Sum>\<^bsub>f \<in> faces g\<^esub> w f)" .
qed

end
