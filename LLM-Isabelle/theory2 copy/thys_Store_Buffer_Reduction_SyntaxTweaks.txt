theory SyntaxTweaks 
imports Main
begin

syntax (implnl output)
  "\<Longrightarrow>" :: "prop \<Rightarrow> prop \<Rightarrow> prop" ("_ //\<Longrightarrow> _" [0,1] 1)

notation (holimplnl output)
"implies" ("(2_ \<longrightarrow>// _)" [0,1] 1)
notation (holimplnl output)
"conj" ("_ \<and>/ _" [34,35]35)
  

syntax (letnl output)
  "_binds"      :: "[letbind, letbinds] => letbinds"     ("_;//_")

syntax (eqindent output) "op =" ::"['a, 'a] => bool"               ( "(2_ =/ _)" [49,50]50)

syntax (latex output)
  If            :: "[bool, 'a, 'a] => 'a"

  "_Let"        :: "[letbinds, 'a] => 'a"

  "_case_syntax":: "['a, cases_syn] => 'b"

notation (Rule output)

syntax (Rule output)
  "_bigimpl" :: "asms \<Rightarrow> prop \<Rightarrow> prop"

  "_asms" :: "prop \<Rightarrow> asms \<Rightarrow> asms" 



notation (Axiom output)

syntax (IfThen output)
  "==>" :: "prop \<Rightarrow> prop \<Rightarrow> prop"

  "_bigimpl" :: "asms \<Rightarrow> prop \<Rightarrow> prop"


syntax (IfThenNoBox output)
  "==>" :: "prop \<Rightarrow> prop \<Rightarrow> prop"
  "_bigimpl" :: "asms \<Rightarrow> prop \<Rightarrow> prop"
  "_asm" :: "prop \<Rightarrow> asms" ("_")


syntax (latex output)
  power :: "['a::power, nat] => 'a"           ("_\<^bsup>_\<^esup>" [1000,0]80)

syntax (latex output)
  "_emptyset" :: "'a set"              ("\<emptyset>")
translations
  "_emptyset"      <= "{}"

translations 
  "{x,y}" <= "{x} \<union> {y}"
  "{x,y} \<union> A" <= "{x} \<union> ({y} \<union> A)"
  "{x}" <= "{x} \<union> {}"


syntax (latex output)
 Cons :: "'a \<Rightarrow> 'a list \<Rightarrow> 'a list"    (infixr "\<cdot>" 65)

syntax (latex output)
 "Some" :: "'a \<Rightarrow> 'a option" ("(\<lfloor>_\<rfloor>)")
 "None" :: "'a option" ("\<bottom>")

syntax (latex output)
  "ALL "        :: "[idts, bool] => bool"                ("(2\<forall>_./ _)" [0, 10] 10)
  "EX "         :: "[idts, bool] => bool"                ("(2\<exists>_./ _)" [0, 10] 10)

syntax (latex output)

term "HOL.conj"
notation (compact output)
"conj" ("_ \<and>/ _" [34,35]35)
notation (compact output)
"append" ("_ @/ _" [64,65]65)

syntax (defnl output)
  "=="       :: "[prop, prop] => prop"                ("(2_ \<equiv>// _)" [1,2] 2) 
syntax (defeqnl output)
  "=="       :: "[prop, prop] => prop"                ("(2_ =// _)" [1,2] 2) 
syntax (eqnl output)
  "op ="       :: "['a, 'a] => bool"                     ("(2_ =// _)" [1,2] 2) 
syntax (latex output)
  "=="       :: "[prop, prop] => prop"                ("(2_ \<equiv>/ _)" [1,2] 2) 

syntax (asmnl output)
  "_asms" :: "prop \<Rightarrow> asms \<Rightarrow> asms" 
  ("_; // _")

syntax (uncurry output)
"_cargs" :: "'a \<Rightarrow> cargs \<Rightarrow> cargs" ("_, _")
"_applC" :: "[('b => 'a), cargs] => logic" ("(1_/(1'(_')))" [1000, 0] 1000)

syntax (uncurry output)
"_cargs_curry":: "'a \<Rightarrow> cargs \<Rightarrow> cargs" ("_ _" [1000,1000] 1000)
"_applC_curry":: "[('b => 'a), cargs] => logic" ("(1_/ _)" [1000, 1000] 999)



syntax (latex output)
"_rec_sel" :: "'r \<Rightarrow> id \<Rightarrow> 'a" ("_._" [1000,1000]1000)




consts Bind:: "('a \<Rightarrow> 'b) \<Rightarrow> 'c" (binder "Bind " 10)
translations
  "f" <= "Bind x. f"


notation (latex output)
  length  ("|_|")

notation (latex output)
  None ("\<bottom>")

notation (latex output)
  Some ("\<lfloor>_\<rfloor>")

notation (latex output)

end
