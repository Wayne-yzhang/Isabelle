theory Autoref_Translate
imports Autoref_Fix_Rel
begin

lemma autoref_ABS: 
  "\<lbrakk> \<And>x x'. (x,x')\<in>Ra \<Longrightarrow> (c x, a x')\<in>Rr \<rbrakk> \<Longrightarrow> (c, \<lambda>'x. a x)\<in>Ra\<rightarrow>Rr"
  by auto
lemma autoref_APP:
  "\<lbrakk> (c,a)\<in>Ra\<rightarrow>Rr; (x,x')\<in>Ra \<rbrakk> \<Longrightarrow> (c$x, a $ x')\<in>Rr"
  by (auto dest: fun_relD)

lemma autoref_beta: 
  assumes "(c,a x)\<in>R"
  shows "(c,(\<lambda>'x. a x)$x)\<in>R"
  using assms by auto

lemmas dflt_trans_rules = autoref_beta autoref_ABS autoref_APP


definition [simp, autoref_tag_defs]: "REMOVE_INTERNAL x \<equiv> x" 

abbreviation "PREFER nt \<Phi> \<equiv> PREFER_tag (nt (REMOVE_INTERNAL \<Phi>))"
abbreviation "DEFER nt \<Phi> \<equiv> DEFER_tag (nt (REMOVE_INTERNAL \<Phi>))"

definition [simp]: "REMOVE_INTERNAL_EQ a b \<equiv> a=b"
lemma REMOVE_INTERNAL_EQI: "REMOVE_INTERNAL_EQ a a" by simp

lemma autoref_REMOVE_INTERNAL_EQ: 
  assumes "(c,a)\<in>R"
  assumes "REMOVE_INTERNAL_EQ c c'"
  shows "(c',a)\<in>R"
  using assms by simp


setup Autoref_Translate.setup



definition [simp, autoref_tag_defs]: "PRECOND_tag P == P"
lemma PRECOND_tagI: "P ==> PRECOND_tag P" by simp
abbreviation "SIDE_PRECOND P == PREFER PRECOND_tag P"


definition [simp, autoref_tag_defs]: "PRECOND_OPT_tag P == P"
lemma PRECOND_OPT_tagI: "P ==> PRECOND_OPT_tag P" by simp
abbreviation "SIDE_PRECOND_OPT P == PREFER PRECOND_OPT_tag P"

end
