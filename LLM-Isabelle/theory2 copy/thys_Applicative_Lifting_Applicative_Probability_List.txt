theory Applicative_Probability_List imports
  Applicative_List
  Complex_Main
begin

lemma sum_list_concat_map: "sum_list (concat (map f xs)) = sum_list (map (\<lambda>x. sum_list (f x)) xs)"
by(induction xs) simp_all

context includes applicative_syntax begin

lemma set_ap_list [simp]: "set (f \<diamondop> x) = (\<lambda>(f, x). f x) ` (set f \<times> set x)"
by(auto simp add: ap_list_def List.bind_def)

  Probability by Martin Erwig and Steve Kollmansberger (Probabilistic Functional Programming).\<close>
