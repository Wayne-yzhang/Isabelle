  we sidestepped the issue, of not having a category of ``all'' sets, by axiomatizing
  the notion of a ``set category'', showing that for every category we could obtain
  a hom-functor into a set category at a higher type, and then proving the Yoneda
  lemma for that particular hom-functor.  This is perhaps the best we can do within HOL,
  because HOL does not provide any type that contains a universe of sets with the closure
  However, a significant aspect of category theory involves considering ``all''
  algebraic structures of a particular kind as the objects of a ``large'' category having
  nice closure or completeness properties.  Being able to consider a category of sets that
  is ``small-complete'', or a cartesian closed category of sets and functions that includes
  some infinite sets as objects, are basic examples of this kind of situation.

  The purpose of this section is to demonstrate that, although it cannot be done in
  correspond to sets satisfying the axioms of ZFC, then it is possible to construct,
  for example, the ``large'' category of sets and functions as it is usually understood
  in category theory.  Moreover, assuming the existence of such a type is essentially
  all we have to do; all the category theory we have developed so far still applies.
  to the category of all small sets and functions between them.
\<close>
  text\<open>
    The following locale constructs the category of classes and functions between them
    and shows that it is small complete.  The category is obtained simply as the replete
  \<close>
    sublocale replete_setcat \<open>TYPE(V)\<close> .
  text\<open>
    We now construct the desired category of small sets and functions between them,
    as a full subcategory of the category of classes and functions.  To show that this
    subcategory is small complete, we show that the inclusion creates small products;
    that is, a small product of objects corresponding to small sets itself corresponds
    to a small set.
  \<close>
    sublocale sub_set_category Cls.comp \<open>\<lambda>A. A \<subseteq> Cls.Univ\<close> setp
    interpretation incl: full_inclusion_functor Cls.comp \<open>\<lambda>a. Cls.ide a \<and> setp (Cls.set a)\<close>
    text\<open>
      The following functions establish a bijection between the identities of the category
    \<close>
          using ide_mkIde \<open>Univ = Cls.Univ\<close> setp_def by auto
              using Cls.UP_DN \<open>Cls.set a \<subseteq> Cls.Univ\<close>
              using \<open>Cls.set a \<subseteq> Cls.Univ\<close>
    text\<open>
      Next, we establish bijections between the hom-sets of the category and certain
    \<close>
                using \<open>Cls.set a \<subseteq> Cls.Univ \<and> Cls.set b \<subseteq> Cls.Univ\<close>
    text\<open>
      which must then be a product in the subcategory, in view of the fact that the
      subcategory is full.
    \<close>
      interpret incloD: diagram_in_set_category J Cls.comp \<open>\<lambda>A. A \<subseteq> Cls.Univ\<close> incloD.map
            interpret \<phi>x: cone J Cls.comp incloD.map Cls.unity \<open>\<phi> x\<close>
            interpret \<phi>x: cone J Cls.comp incloD.map Cls.unity \<open>\<phi> x\<close>
            interpret \<phi>y: cone J Cls.comp incloD.map Cls.unity \<open>\<phi> y\<close>
          interpret \<chi>: cone J Cls.comp incloD.map a \<open>incloD.mkCone \<chi>'\<close>
                using \<open>\<pi> \<in> D.cones (cod f)\<close> by simp
  text\<open>
    but there was necessarily a dependence of the target set category of the hom functor
  \<close>
    text\<open>
      Using this result, we can now state a more traditional version of the Yoneda Lemma
      in which the target category of the Yoneda functor is the same for all locally small
      categories.
    \<close>
