theory Tetrahedron
imports Orbit_Stabiliser
begin

section "Definition of the Tetrahedron and its Rotations"


datatype Vertex = A | B | C | D
definition vertices :: "Vertex set" where
  "vertices = {A, B, C, D}"

type_synonym Rotation = "(Vertex \<Rightarrow> Vertex)"


definition rotate_A :: Rotation where
  "rotate_A = (\<lambda>v. (case v of A \<Rightarrow> A | B \<Rightarrow> C | C \<Rightarrow> D | D \<Rightarrow> B))"
definition rotate_B :: Rotation where
  "rotate_B = (\<lambda>v. (case v of A \<Rightarrow> D | B \<Rightarrow> B | C \<Rightarrow> A | D \<Rightarrow> C))"
definition rotate_C :: Rotation where
  "rotate_C = (\<lambda>v. (case v of A \<Rightarrow> B | B \<Rightarrow> D | C \<Rightarrow> C | D \<Rightarrow> A))"
definition rotate_D :: Rotation where
  "rotate_D = (\<lambda>v. (case v of A \<Rightarrow> C | B \<Rightarrow> A | C \<Rightarrow> B | D \<Rightarrow> D))"

named_theorems simple_rotations
declare rotate_A_def [simple_rotations] rotate_B_def [simple_rotations] rotate_C_def [simple_rotations] rotate_D_def [simple_rotations] 

definition simple_rotations :: "Rotation set" where
  "simple_rotations = {id, rotate_A, rotate_B, rotate_C, rotate_D}"

inductive_set complex_rotations :: "Rotation set" where
  simp: "r \<in> simple_rotations \<Longrightarrow> r \<in> complex_rotations" |
  comp: "r \<in> simple_rotations \<Longrightarrow> s \<in> complex_rotations \<Longrightarrow> (r \<circ> s) \<in> complex_rotations"
  
section "Properties of Rotations"


lemma simple_rotations_inj:
  assumes r:"r \<in> simple_rotations"
  shows "inj r"  
  using r unfolding simple_rotations_def
  by safe
     (rule injI; rename_tac a b; case_tac a; case_tac b;
      simp add: simple_rotations
     )+

lemma simple_rotations_surj:
  assumes r:"r \<in> simple_rotations"
  shows "surj r"  
  using r unfolding simple_rotations_def
  by safe
     (rename_tac a; case_tac a;
      auto simp add: simple_rotations Vertex.split
     )+

lemma simple_rotations_bij:
  assumes r:"r \<in> simple_rotations"
  shows "bij r"
  by (simp add: r bij_def simple_rotations_surj simple_rotations_inj)

lemma complex_rotations_bij: "r \<in> complex_rotations \<Longrightarrow> bij r"
proof(induction r rule: complex_rotations.induct)
  case (simp r) then show ?case using simple_rotations_bij by simp
next
  case (comp r s) then show ?case using bij_comp simple_rotations_bij by blast
qed

lemma simple_rotation_bij_corollary: "r \<in> simple_rotations \<Longrightarrow> r x \<noteq> r y \<longleftrightarrow> x \<noteq> y"
  using bij_def simple_rotations_bij inj_eq by metis

lemma rotation_bij_corollary: "r \<in> complex_rotations \<Longrightarrow> r x \<noteq> r y \<longleftrightarrow> x \<noteq> y"
  using bij_def complex_rotations_bij inj_eq by metis
    
lemma complex_rotations_comp: 
  "r \<in> complex_rotations \<Longrightarrow> s \<in> complex_rotations \<Longrightarrow> (r \<circ> s) \<in> complex_rotations"
apply(induction arbitrary: s rule: complex_rotations.induct)
apply(auto simp add: comp_assoc complex_rotations.comp)
done
    

lemma simple_rotations_fix:
  assumes r:"r \<in> simple_rotations"
  shows "\<exists>v. r v = v"
  using r unfolding simple_rotations_def 
  by (auto simp add: simple_rotations split: Vertex.split)

lemma simple_rotations_fix_unique:
  assumes r:"r \<in> simple_rotations"
  shows "r \<noteq> id \<Longrightarrow> r v = v \<Longrightarrow> r w = w \<Longrightarrow> v = w"
  using r unfolding simple_rotations_def 
  by safe 
     (case_tac v; case_tac w; 
      auto simp add: simple_rotations
     )+
   
   
lemma simple_rotations_cycle:
  assumes r:"r \<in> simple_rotations"
  shows "r \<noteq> id \<Longrightarrow> r v = w \<Longrightarrow> v \<noteq> w \<Longrightarrow> r w \<noteq> v"
  using r unfolding simple_rotations_def
  by safe
     (case_tac v;
      auto simp add: simple_rotations
     )+ 

   
lemma distinct_vertices: "distinct[(a::Vertex),b,c,d] \<Longrightarrow> (\<forall> e. e \<in> {a,b,c,d})"
apply(safe)
apply(case_tac a)
apply(auto simp add: distinct_def)
apply(metis Vertex.exhaust)+
done  
  
lemma distinct_map: "r \<in> complex_rotations \<Longrightarrow> distinct[a,b,c,d] \<Longrightarrow> (\<forall> e \<in> {a,b,c}. r e \<noteq> f) \<Longrightarrow> r d = f"
proof -
  assume r:"r \<in> complex_rotations" and dist:"distinct [a,b,c,d]" and notf:"\<forall> e \<in> {a,b,c}. r e \<noteq> f"
  then have 1:"(\<forall> v. v \<in> {a,b,c,d})" using distinct_vertices by simp
  from complex_rotations_bij have "\<exists> v. r v = f" using r bij_pointE by metis
  then have "\<exists> v \<in> {a,b,c,d}. r v = f" using 1 by blast
  then show "r d = f" using notf by simp
qed
  
lemma distinct_map': "r \<in> complex_rotations \<Longrightarrow> distinct[a,b,c,d] \<Longrightarrow> (\<forall> e \<in> {a,b,c}. r f \<noteq> e) \<Longrightarrow> r f = d"
proof -
  assume r:"r \<in> complex_rotations" and dist:"distinct [a,b,c,d]" and notf:"\<forall> e \<in> {a,b,c}. r f \<noteq> e"
  then have 1:"(\<forall> v. v \<in> {a,b,c,d})" using distinct_vertices by simp
  have "\<exists> v. r f = v" by simp
  then have "\<exists> v \<in> {a,b,c,d}. r f = v" using 1 by blast
  then show "r f = d" using notf by simp
qed 
  
lemma cycle_map: "r \<in> complex_rotations \<Longrightarrow> distinct[a,b,c,d] \<Longrightarrow> 
  r a = b \<Longrightarrow> r b = a \<Longrightarrow> r c = d \<Longrightarrow> r d = c \<Longrightarrow> \<forall> v w. r v = w \<longrightarrow> r w = v"
  using distinct_map' rotation_bij_corollary by fastforce
  
lemma simple_distinct_map: "r \<in> simple_rotations \<Longrightarrow> distinct[a,b,c,d] \<Longrightarrow> (\<forall> e \<in> {a,b,c}. r e \<noteq> f) \<Longrightarrow> r d = f"
  using complex_rotations.simp distinct_map by simp

lemma simple_distinct_map': "r \<in> simple_rotations \<Longrightarrow> distinct[a,b,c,d] \<Longrightarrow> (\<forall> e \<in> {a,b,c}. r f \<noteq> e) \<Longrightarrow> r f = d"
  using complex_rotations.simp distinct_map' by simp
  
lemma simple_distinct_ident: "r \<in> simple_rotations \<Longrightarrow> distinct[a,b,c,d] \<Longrightarrow> (\<forall> e \<in> {a,b,c}. r e \<noteq> e) \<Longrightarrow> r d = d"
  using simple_rotations_fix simple_distinct_map' by metis

lemma id_decomp: 
  assumes distinct:"distinct [(a::Vertex),b,c,d]" and ident:"(\<forall> x \<in> {a,b,c,d}. r x = x)"
  shows "r = id"
proof -
  from distinct_vertices have "\<forall> e. e \<in> set [a,b,c,d]" using distinct by simp
  then have "\<forall> e. r e = e" using ident by auto
  then show "r = id" by auto
qed 
 
  
lemma complex_rotations_invariants: 
  "r \<in> complex_rotations \<Longrightarrow> (((\<forall> v. r v \<noteq> v) \<longrightarrow> r v = w \<longrightarrow> r w = v) \<and> (r v = v \<longrightarrow> r w = w \<longrightarrow> v \<noteq> w \<longrightarrow> r = id)) "
proof(induction r arbitrary: v w rule: complex_rotations.induct)
  case (simp r)
  assume r:"r \<in> simple_rotations"
  show ?case
  proof 
    have "\<exists> v. r v = v" using simple_rotations_fix r by simp
    then have "\<not> (\<forall> v. r v \<noteq> v)" by simp
    then show "(\<forall> v. r v \<noteq> v) \<longrightarrow> r v = w \<longrightarrow> r w = v" by blast
        
    show "r v = v \<longrightarrow> r w = w \<longrightarrow> v \<noteq> w \<longrightarrow> r = id" using simple_rotations_fix_unique simp by blast
  qed
next
  case (comp r s)  
  assume r:"r \<in> simple_rotations"
  assume s:"s \<in> complex_rotations"
  have fix_unique:"\<forall> v w. s v = v \<longrightarrow> s w = w \<longrightarrow> v \<noteq> w \<longrightarrow> s = id" using comp by blast
  show ?case 
  proof
    show "(\<forall>x. (r \<circ> s) x \<noteq> x) \<longrightarrow> (r \<circ> s) v = w \<longrightarrow> (r \<circ> s) w = v"
    proof (rule impI)+
      assume nofixrs:"\<forall> x.(r \<circ> s) x \<noteq> x"
      assume "(r \<circ> s) v = w"
      show "(r \<circ> s) w = v"
      proof (cases "\<forall> x. s x \<noteq> x")
        assume nofixs:"\<forall> x. s x \<noteq> x"
        then have cycle:"\<forall> x y. (s x = y \<longrightarrow> s y = x)" using comp.IH by blast
        then show ?thesis
        proof (cases "r = id")
          assume id:"r = id"
          then have "s w = v" using cycle by blast
          then show "(r \<circ> s) w = v" using id by simp
        next
          assume notid:"r \<noteq> id"
          obtain a where "s v = a" and "s a = v" and "a \<noteq> v" using comp.IH nofixs by blast
          obtain b where "s w = b" and "s b = w" and "b \<noteq> w" using comp.IH nofixs by blast
          then show ?thesis
          proof (cases "a = w")
            assume "a = w"
                comp.hyps(1) by auto
            obtain c d where "s c = d" and "c \<noteq> v" and "c \<noteq> w"
            then have "d \<noteq> v" and "d \<noteq> w"
            then have "c \<noteq> d" using nofixs by auto
            then show ?thesis
            proof(cases "r v = c")
              assume "r v = c"
              have "r c \<noteq> w" 
                comp.hyps(1) simple_rotations_fix_unique notid by blast 
              then have "r c = d" using simple_distinct_map' comp.hyps(1) dist by auto    
              then have False using nofixrs by blast 
              then show ?thesis by simp
            next
              assume "r v \<noteq> c"
              then have "r v \<noteq> w" 
                comp.hyps(1) simple_rotations_fix_unique notid by blast 
              then have "r v = d" using simple_distinct_map' comp.hyps(1) dist by auto 
              have "r d \<noteq> w"
                comp.hyps(1) simple_rotations_fix_unique notid by blast 
              then have "r d = c" using simple_distinct_map' comp.hyps(1) dist' by auto 
              then have False using nofixrs by blast 
              then show ?thesis by simp
            qed
          next
            assume "a \<noteq> w"
            from nofixs have "s w \<noteq> w" by simp
            then show ?thesis
            proof (cases "r b = b")
              assume "r b = b"
              then have "r v = a" using simple_distinct_map comp.hyps(1) dist by auto 
            next
              assume "r b \<noteq> b"
              then have "r v = v" using simple_distinct_ident comp.hyps(1) dist by auto 
              then have "r w = b" using simple_distinct_map' comp.hyps(1) dist' by auto
            qed
          qed
        qed        
    next
      assume "\<not> (\<forall> v. s v \<noteq> v)"
      then have fix1:"\<exists> v. s v = v" by blast
      then obtain a where a:"s a = a" by blast
      then show ?thesis
      proof (cases "r = id")
        assume id:"r = id"
        then have "(r \<circ> s) a = a" using a by simp
        then have False using nofixrs by auto
        then show ?thesis by simp
      next
        assume notid: "r \<noteq> id"
        then have fix1:"\<exists> v. r v = v" using simple_rotations_fix comp.hyps by simp
        then obtain b where b:"r b = b" by blast
        then show ?thesis
        proof (cases "a = b")
          assume "a = b"
          then have "(r \<circ> s) a = a" using a b by simp
          then have False using nofixrs by blast
          then show ?thesis by simp
        next
          assume "a \<noteq> b"
          have "s b \<noteq> b" using b nofixrs comp_apply by metis
          then show ?thesis
          proof (cases "c = d")
            assume "c = d"
            obtain e where "r c = e" and "a \<noteq> e" and "b \<noteq> e" and "c \<noteq> e" and "d \<noteq> e" 
            then have "r e = a" using simple_distinct_map' comp.hyps(1) dist by auto               
            then have "r c = e" using simple_distinct_map' comp.hyps(1) dist by auto  
            then have "s e = b" using distinct_map' comp.hyps(2) dist by auto
            then have "s c = e" using distinct_map' comp.hyps(2) dist by auto    
            
            have comprs:"r \<circ> s \<in> complex_rotations" using complex_rotations.comp r s by simp
          next
            assume "c \<noteq> d"
            then have "r c = d" using simple_distinct_map' comp.hyps(1) dist by auto 
            then have "r d = a" using simple_distinct_map' comp.hyps(1) dist by auto         
            then have "s d = b" using distinct_map' comp.hyps(2) dist by auto 
            then have "s c = c" using distinct_map' comp.hyps(2) dist by auto 
            then show ?thesis by simp
          qed
        qed
      qed
    qed
  qed
next
  show "(r \<circ> s) v = v \<longrightarrow> (r \<circ> s) w = w \<longrightarrow> v \<noteq> w \<longrightarrow> r \<circ> s = id"
  proof(rule impI)+
    assume rsv:"(r \<circ> s) v = v" and rsw:"(r \<circ> s) w = w" and "v \<noteq> w"
    show "r \<circ> s = id"
    proof(cases "s = id")
      assume sid:"s = id"
      then have "s v = v" and "s w = w" by auto
      with sid show ?thesis by simp
    next
      assume snotid:"s \<noteq> id"
      then show ?thesis
      proof(cases "r = id")
        assume rid:"r = id"
        then have "s v = v" and "s w = w" using rsv rsw by auto
        with rid show ?thesis by simp
      next
        assume rnotid:"r \<noteq> id"
        from simple_rotations_fix_unique[OF comp.hyps(1) rnotid] have 
          r_fix_forall:"\<forall>v w. r v = v \<and> r w = w \<longrightarrow> v = w" by blast
        from comp.IH snotid have
          s_fix_forall:"\<forall>v w. s v = v \<and> s w = w \<longrightarrow> v = w" by blast
        then show ?thesis
        proof (cases "\<forall> x. s x \<noteq> x")
          assume sfix':"\<forall> x. s x \<noteq> x"  
          from simple_rotations_fix obtain a where a:"r a = a" using r by blast
          from sfix' have "s a \<noteq> a" by blast
          then have "(r \<circ> s) a \<noteq> a" using a simple_rotation_bij_corollary r by fastforce
          with fixes_two obtain b where "(r \<circ> s) b = b" and "b \<noteq> a" by blast
          with fixes_two obtain c where "(r \<circ> s) c = c" and "c \<noteq> a" and "c \<noteq> b" 
        
        
          then obtain d where "s d = a" and "d \<noteq> a" and "d \<noteq> b" and "d \<noteq> c"
        
        
          then have False using sfix'
          proof (cases "r b = c")
            assume "r b = c"
            then have "r c = d" using simple_distinct_map' r dist by auto
        
            then have "r d = b" using simple_distinct_map' r dist' by auto
        
            
          next
            assume "r b \<noteq> c"
            then have "r b = d" using simple_distinct_map' r dist' by auto
            
            then have "r c = b" using simple_distinct_map' r dist'' by auto
        
            then have "r d = c" using simple_distinct_map' r dist''' by auto
        
            
            then show ?thesis by simp
          qed
          then show ?thesis by simp
        next
          assume "\<not> (\<forall> x. s x \<noteq> x)" 
          then have "\<exists> x. s x = x" by simp
          then obtain a where a:"s a = a" by blast
          from simple_rotations_fix obtain b where b:"r b = b" using r by blast
          then show ?thesis
          proof (cases "a = b")
            assume "a \<noteq> b"
            with a b have "r a \<noteq> a" using r rnotid simple_rotations_fix_unique by blast 
            then have "(r \<circ> s) a \<noteq> a" using a by simp
            then have "(r \<circ> s) b \<noteq> b" using b simple_rotations_inj r 
                complex_rotations.simp rotation_bij_corollary by fastforce  
            from fixes_two obtain d where "(r \<circ> s) d = d" and "d \<noteq> a" and "d \<noteq> b" and "d \<noteq> c" 
        
            
        
            then have "r a = a" using simple_distinct_map' r dist by simp
            then show ?thesis by simp
          next
            assume "a = b"
            with a b have "(r \<circ> s) a = a" by simp
            from fixes_two obtain c where rsc:"(r \<circ> s) c = c" and "c \<noteq> a" by blast
            then have "s c \<noteq> c" using rsc by auto
            then obtain d where "s c = d" and "d \<noteq> c" by blast
            then have "d \<noteq> a" using a s rotation_bij_corollary by blast
            then obtain e where "r c = e" and "e \<noteq> d" by blast
            then have "r e = d" using simple_distinct_map r dist by auto
            
            have dist':"distinct [a,c,e,d]" using dist by auto
            then have "s d = e" using distinct_map s dist' by auto           
            then have "s e = c" using distinct_map s dist by auto          
            qed    
          qed
        qed
      qed
    qed     
  qed
qed
  

corollary complex_rotations_fix: "r \<in> complex_rotations \<Longrightarrow> r a = a \<Longrightarrow> r b = b \<Longrightarrow> a \<noteq> b \<Longrightarrow> r = id"
  using complex_rotations_invariants by blast

section "Inversions"

lemma simple_rotations_rotate_id:
  assumes r:"r \<in> simple_rotations"
  shows "r \<circ> r \<circ> r = id"  
  using r unfolding simple_rotations_def
  by safe
     (rule ext; rename_tac a; case_tac a;
      simp add: simple_rotations
     )+

lemma simple_rotations_inverses:
  assumes r:"r \<in> simple_rotations"
  shows "\<exists>y\<in>complex_rotations. y \<circ> r = id"
proof
  let ?y = "r \<circ> r"
  from r show y:"?y \<in> complex_rotations" using complex_rotations.intros by simp
  from simple_rotations_rotate_id show "?y \<circ> r = id" using r by auto 
qed  

lemma complex_rotations_inverses:
  "r \<in> complex_rotations \<Longrightarrow> \<exists>y\<in>complex_rotations. y \<circ> r = id"
proof (induction r rule: complex_rotations.induct)
  case (simp r) then show ?case using simple_rotations_inverses by blast
next
  case (comp r s)
  obtain r' where r'_comp:"r'\<in>complex_rotations" and r'_inv:"r' \<circ> r = id" 
    using simple_rotations_inverses comp.hyps  by auto
  obtain y where y_comp:"y\<in>complex_rotations" and y_inv:"y \<circ> s = id" using comp.IH by blast
  from complex_rotations_comp have yr':"y \<circ> r' \<in> complex_rotations" using r'_comp y_comp by simp
  have "r' \<circ> (r \<circ> s) = r' \<circ> r \<circ> s" using comp_assoc by metis
  then have "r' \<circ> (r \<circ> s) = s" using r'_inv by simp
  then have "y \<circ> r' \<circ> (r \<circ> s) = id" using y_inv comp_assoc by metis
  then show ?case using yr' by metis
qed

section "The Tetrahedral Group"


definition tetrahedral_group :: "Rotation monoid" where
  "tetrahedral_group = \<lparr>carrier = complex_rotations, mult = (\<circ>), one = id\<rparr>"


lemma is_tetrahedral_group: "group tetrahedral_group"
proof(rule groupI)
  show "\<one>\<^bsub>tetrahedral_group\<^esub> \<in> carrier tetrahedral_group"
    by (simp add: complex_rotations.intros(1) simple_rotations_def tetrahedral_group_def)
next
  fix x
  assume "x \<in> carrier tetrahedral_group"
  show "\<one>\<^bsub>tetrahedral_group\<^esub> \<otimes>\<^bsub>tetrahedral_group\<^esub> x = x"
    unfolding id_comp tetrahedral_group_def monoid.select_convs(1) monoid.select_convs(2) ..
next
  fix x y z
  assume "x \<in> carrier tetrahedral_group" and
    "y \<in> carrier tetrahedral_group" and
    "z \<in> carrier tetrahedral_group"
  then show "x \<otimes>\<^bsub>tetrahedral_group\<^esub> y \<otimes>\<^bsub>tetrahedral_group\<^esub> z =
             x \<otimes>\<^bsub>tetrahedral_group\<^esub> (y \<otimes>\<^bsub>tetrahedral_group\<^esub> z)"
    unfolding tetrahedral_group_def monoid.select_convs(1) by auto 
next
  fix x y
  assume "x \<in> carrier tetrahedral_group" and
    "y \<in> carrier tetrahedral_group"
  then show "x \<otimes>\<^bsub>tetrahedral_group\<^esub> y \<in> carrier tetrahedral_group"
    by (simp add: complex_rotations.intros(2) tetrahedral_group_def complex_rotations_comp)
next
  fix x
  assume "x \<in> carrier tetrahedral_group"
  then show "\<exists>y\<in>carrier tetrahedral_group.
            y \<otimes>\<^bsub>tetrahedral_group\<^esub> x = \<one>\<^bsub>tetrahedral_group\<^esub>"
    using complex_rotations_inverses by (simp add: tetrahedral_group_def)
qed


fun apply_rotation :: "Rotation \<Rightarrow> Vertex \<Rightarrow> Vertex" where "apply_rotation r v = r v"

interpretation tetrahedral: orbit_stabiliser "tetrahedral_group" "apply_rotation :: Rotation \<Rightarrow> Vertex \<Rightarrow> Vertex"
proof intro_locales
  show "Group.monoid tetrahedral_group" using is_tetrahedral_group by (simp add: group.is_monoid)
  show "group_axioms tetrahedral_group" using is_tetrahedral_group by (simp add: group_def)
  show "orbit_stabiliser_axioms tetrahedral_group apply_rotation"
  proof
    fix x
    show "apply_rotation \<one>\<^bsub>tetrahedral_group\<^esub> x = x" by (simp add: tetrahedral_group_def)
  next
    fix g h x
    show "g \<in> carrier tetrahedral_group \<and> h \<in> carrier tetrahedral_group
           \<longrightarrow> apply_rotation g (apply_rotation h x) = apply_rotation (g \<otimes>\<^bsub>tetrahedral_group\<^esub> h) x"
      by (simp add: tetrahedral_group_def)
  qed
qed

section "Counting Orbits"
lemma orbit_is_transitive: "tetrahedral.orbit A = vertices"
proof
  show "tetrahedral.orbit A \<subseteq> vertices" unfolding vertices_def using Vertex.exhaust by blast 
  have "id \<in> complex_rotations" using complex_rotations.intros simple_rotations_def by auto
  then have "id \<in> carrier tetrahedral_group" 
    unfolding tetrahedral_group_def partial_object.select_convs(1).
  moreover have "apply_rotation id A = A" by simp
  ultimately have A:"A \<in> (tetrahedral.orbit A)"
    using tetrahedral.orbit_def mem_Collect_eq by fastforce

  have "rotate_C \<in> simple_rotations"
    using simple_rotations_def insert_subset subset_insertI by blast
  then have "rotate_C \<in> complex_rotations" using complex_rotations.intros(1) by simp
  then have "rotate_C \<in> carrier tetrahedral_group"
    unfolding tetrahedral_group_def partial_object.select_convs(1).
  moreover have "apply_rotation rotate_C A = B" by (simp add: rotate_C_def)
  ultimately have B:"B \<in> (tetrahedral.orbit A)"
    using tetrahedral.orbit_def mem_Collect_eq by fastforce

  have "rotate_D \<in> simple_rotations"
    using simple_rotations_def insert_subset subset_insertI by blast
  then have "rotate_D \<in> complex_rotations" using complex_rotations.intros(1) by simp
  then have "rotate_D \<in> carrier tetrahedral_group"
    unfolding tetrahedral_group_def partial_object.select_convs(1).
  moreover have "apply_rotation rotate_D A = C" by (simp add: rotate_D_def)
  ultimately have C:"C \<in> (tetrahedral.orbit A)"
    using tetrahedral.orbit_def mem_Collect_eq by fastforce

  have "rotate_B \<in> simple_rotations"
    using simple_rotations_def insert_subset subset_insertI by blast
  then have "rotate_B \<in> complex_rotations" using complex_rotations.intros(1) by simp
  then have "rotate_B \<in> carrier tetrahedral_group"
    unfolding tetrahedral_group_def partial_object.select_convs(1).
  moreover have "apply_rotation rotate_B A = D" by (simp add: rotate_B_def)
  ultimately have D:"D \<in> (tetrahedral.orbit A)"
    using tetrahedral.orbit_def mem_Collect_eq by fastforce

  from A B C D show "vertices \<subseteq> tetrahedral.orbit A" by (simp add: vertices_def subsetI)
qed

lemma card_orbit: "card (tetrahedral.orbit A) = 4"
proof -
  from card.empty card_insert_if have "card vertices = 4" unfolding vertices_def by auto
  with orbit_is_transitive show "card (tetrahedral.orbit A) = 4" by simp
qed

section "Counting Stabilisers"

definition stabiliser_A :: "Rotation set" where
  "stabiliser_A = {id, rotate_A, rotate_A \<circ> rotate_A}"

lemma is_stabiliser: "tetrahedral.stabiliser A = stabiliser_A"
proof
  show "stabiliser_A \<subseteq> tetrahedral.stabiliser A"
  proof -
    have "id \<in> complex_rotations" using complex_rotations.intros simple_rotations_def by auto
    then have "id \<in> carrier tetrahedral_group"
      unfolding tetrahedral_group_def partial_object.select_convs(1) by simp
    moreover have "apply_rotation id A = A" by simp
    ultimately have id:"id \<in> (tetrahedral.stabiliser A)"
      using tetrahedral.stabiliser_def mem_Collect_eq by fastforce

    have "rotate_A \<in> simple_rotations"
      using simple_rotations_def insert_subset subset_insertI by blast
    then have "rotate_A \<in> complex_rotations" using complex_rotations.intros(1) by simp
    then have "rotate_A \<in> carrier tetrahedral_group"
      unfolding tetrahedral_group_def partial_object.select_convs(1) by simp
    moreover have "apply_rotation rotate_A A = A" by (simp add: rotate_A_def)
    ultimately have A:"rotate_A \<in> (tetrahedral.stabiliser A)"
      using tetrahedral.stabiliser_def mem_Collect_eq by fastforce

    have "rotate_A \<in> simple_rotations"
      using simple_rotations_def insert_subset subset_insertI by blast
    then have "rotate_A \<circ> rotate_A \<in> complex_rotations" using complex_rotations.intros by simp
    then have "rotate_A \<circ> rotate_A \<in> carrier tetrahedral_group"
      unfolding tetrahedral_group_def partial_object.select_convs(1) by simp
    moreover have "apply_rotation (rotate_A \<circ> rotate_A) A = A" by (simp add: rotate_A_def)
    ultimately have AA:"(rotate_A \<circ> rotate_A) \<in> (tetrahedral.stabiliser A)"
      using tetrahedral.stabiliser_def mem_Collect_eq by fastforce

    from id A AA show "stabiliser_A \<subseteq> tetrahedral.stabiliser A"
      by (simp add: stabiliser_A_def subsetI)
  qed
  show "tetrahedral.stabiliser A \<subseteq> stabiliser_A"
  proof
    fix x
    assume a:"x \<in> tetrahedral.stabiliser A"
    with tetrahedral.stabiliser_def have "apply_rotation x A = A" by simp
    with apply_rotation.simps have xA:"x A = A" by simp
    from a have "x \<in> carrier tetrahedral_group"
      using subgroup.mem_carrier[of "tetrahedral.stabiliser A"] tetrahedral.stabiliser_subgroup by auto
    then have xC:"x \<in> complex_rotations"
      unfolding tetrahedral_group_def partial_object.select_convs(1) by simp
    have "x B \<noteq> A" using xA xC rotation_bij_corollary by fastforce
    then have "x \<in> complex_rotations \<Longrightarrow> x A = A \<Longrightarrow> x \<in> stabiliser_A"
    proof (cases "x B", simp)
      assume "x B = B"
      then have "x = id" using complex_rotations_fix xC xA by simp
      then show ?thesis using stabiliser_A_def by auto
    next
      assume "x B = C"
      then have "x \<noteq> id" by auto
      then have "x D \<noteq> D" using complex_rotations_fix xC xA by blast
      have "x D \<noteq> A" using xC xA rotation_bij_corollary by fastforce 
      
      have "x C \<noteq> A" using xC xA rotation_bij_corollary by fastforce 

      have "\<forall> v. x v = rotate_A v" 
      then have "x = rotate_A" by auto
      then show ?thesis using stabiliser_A_def by auto
    next
      assume "x B = D"
      then have "x \<noteq> id" by auto
      then have "x C \<noteq> C" using complex_rotations_fix xC xA by blast
      have "x C \<noteq> A" using xC xA rotation_bij_corollary by fastforce 
      
      have "x D \<noteq> A" using xC xA rotation_bij_corollary by fastforce 

      have "\<forall> v. x v = (rotate_A \<circ> rotate_A) v" 
      then have "x = rotate_A \<circ> rotate_A" by auto
      then show ?thesis using stabiliser_A_def by auto
    qed
    then show "x \<in> stabiliser_A" using xA xC by simp
  qed
qed

lemma card_stabiliser_help: "card stabiliser_A = 3"
proof -
  have idA:"id \<noteq> rotate_A"
  proof -
    have "id B = B" by simp
    moreover have "rotate_A B = C" by (simp add: rotate_A_def)
    ultimately show "id \<noteq> rotate_A" by force
  qed
  have idAA:"id \<noteq> rotate_A \<circ> rotate_A"
  proof -
    have "id B = B" by simp
    moreover have "(rotate_A \<circ> rotate_A) B = D" by (simp add: rotate_A_def)
    ultimately show "id \<noteq> rotate_A \<circ> rotate_A" by force
  qed
  have AAA:"rotate_A \<noteq> rotate_A \<circ> rotate_A"
  proof -
    have "rotate_A B = C" by (simp add: rotate_A_def)
    moreover have "(rotate_A \<circ> rotate_A) B = D" by (simp add: rotate_A_def)
    ultimately show "rotate_A \<noteq> rotate_A \<circ> rotate_A" by force
  qed
  from idA idAA AAA card.empty card_insert_if show
    "(card stabiliser_A) = 3" unfolding stabiliser_A_def by auto
qed

lemma card_stabiliser: "card (tetrahedral.stabiliser A) = 3"
  using is_stabiliser card_stabiliser_help by simp

section "Proving Finiteness"

lemma vertex_set: "(UNIV::Vertex set) = {A, B, C, D}"
  by(auto, metis Vertex.exhaust)

lemma vertex_finite: "finite (UNIV :: Vertex set)"
  by (simp add: vertex_set)


instantiation Vertex :: finite
begin
instance proof
  show "finite (UNIV :: Vertex set)" by (simp add: vertex_set)
qed

lemma finite_carrier: "finite (carrier tetrahedral_group)"
proof -
  have "finite (UNIV :: (Vertex \<Rightarrow> Vertex) set)" by simp
  moreover have "complex_rotations \<subseteq> (UNIV :: (Vertex \<Rightarrow> Vertex) set)" by simp
  ultimately show "finite (carrier tetrahedral_group)" using finite_subset top_greatest by blast
qed

section "Order of the Group"

theorem "order tetrahedral_group = 12"
proof -
  have "card (tetrahedral.orbit A) * card (tetrahedral.stabiliser A) = 12"
    using card_stabiliser card_orbit by simp
  with tetrahedral.orbit_stabiliser[OF finite_carrier]
  show "order tetrahedral_group = 12" by simp
qed

end
  
end
