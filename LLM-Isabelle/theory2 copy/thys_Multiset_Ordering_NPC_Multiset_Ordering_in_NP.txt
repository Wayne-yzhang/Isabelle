theory
  Multiset_Ordering_in_NP
imports
  Multiset_Ordering_More
  Propositional_Formula
begin



locale encoder = 
  fixes eval :: "('a \<Rightarrow> bool) \<Rightarrow> 'f \<Rightarrow> bool" 
  and enc_False :: "'f" 
  and enc_True :: 'f
  and enc_pos :: "'a \<Rightarrow> 'f" 
  and enc_neg :: "'a \<Rightarrow> 'f" 
  and enc_different :: "'a \<Rightarrow> 'a \<Rightarrow> 'f" 
  and enc_equiv_and_not :: "'a \<Rightarrow> 'a \<Rightarrow> 'a \<Rightarrow> 'f" 
  and enc_equiv_ite :: "'a \<Rightarrow> 'a \<Rightarrow> 'a \<Rightarrow> 'a \<Rightarrow> 'f"
  and enc_ite :: "'a \<Rightarrow> 'a \<Rightarrow> 'a \<Rightarrow> 'f"
  and enc_impl :: "'a \<Rightarrow> 'f \<Rightarrow> 'f" 
  and enc_var_impl :: "'a \<Rightarrow> 'a \<Rightarrow> 'f" 
  and enc_not_and :: "'a \<Rightarrow> 'a \<Rightarrow> 'f"
  and enc_not_all :: "'a list \<Rightarrow> 'f"
  and enc_conj :: "'f list \<Rightarrow> 'f" 
assumes enc_sound[simp]: 
  "eval \<alpha> (enc_False) = False"
  "eval \<alpha> (enc_True) = True" 
  "eval \<alpha> (enc_pos x) = \<alpha> x"
  "eval \<alpha> (enc_neg x) = (\<not> \<alpha> x)"
  "eval \<alpha> (enc_different x y) = (\<alpha> x \<noteq> \<alpha> y)" 
  "eval \<alpha> (enc_equiv_and_not x y z) = (\<alpha> x \<longleftrightarrow> \<alpha> y \<and> \<not> \<alpha> z)" 
  "eval \<alpha> (enc_equiv_ite x y z u) = (\<alpha> x \<longleftrightarrow> (if \<alpha> y then \<alpha> z else \<alpha> u))" 
  "eval \<alpha> (enc_ite x y z) = (if \<alpha> x then \<alpha> y else \<alpha> z)" 
  "eval \<alpha> (enc_impl x f) = (\<alpha> x \<longrightarrow> eval \<alpha> f)" 
  "eval \<alpha> (enc_var_impl x y) = (\<alpha> x \<longrightarrow> \<alpha> y)" 
  "eval \<alpha> (enc_not_and x y) = (\<not> (\<alpha> x \<and> \<alpha> y))" 
  "eval \<alpha> (enc_not_all xs) = (\<not> (Ball (set xs) \<alpha>))" 
  "eval \<alpha> (enc_conj fs) = (Ball (set fs) (eval \<alpha>))" 
begin



fun encode_sum_0_1_main :: "('a \<times> 'a \<times> 'a) list \<Rightarrow> 'f list \<times> 'a \<times> 'a" where
  "encode_sum_0_1_main [(x, zero, one)] = ([enc_different zero x], zero, x)" 
| "encode_sum_0_1_main ((x, zero, one) # rest) = (case encode_sum_0_1_main rest of
      (conds, fzero, fone) \<Rightarrow> let
        czero = enc_equiv_and_not zero fzero x;
        cone  = enc_equiv_ite one x fzero fone
       in (czero # cone # conds, zero, one))" 

definition encode_exactly_one :: "('a \<times> 'a \<times> 'a) list \<Rightarrow> 'f \<times> 'f list" where
  "encode_exactly_one vars = (case vars of [] \<Rightarrow> (enc_False, [])
      | [(x,_,_)] \<Rightarrow> (enc_pos x, [])
      | ((x,_,_) # vars) \<Rightarrow> (case encode_sum_0_1_main vars of (conds, zero, one) 
              \<Rightarrow> (enc_ite x zero one, conds)))" 

fun encodeGammaCond :: "'a \<Rightarrow> 'a \<Rightarrow> bool \<Rightarrow> bool \<Rightarrow> 'f" where
  "encodeGammaCond gam eps True True = enc_True" 
| "encodeGammaCond gam eps False False = enc_neg gam" 
| "encodeGammaCond gam eps False True = enc_var_impl gam eps" 
| "encodeGammaCond gam eps True False = enc_not_and gam eps" 
end

  It uses propositional variables $\gamma_{ij}$ and $\epsilon_i$. 
  We further add auxiliary variables that are required for the exactly-one-encoding.\<close>
text \<open>At this point we define a new locale as an instance of @{locale encoder} where the 
  type of propositional variables is fixed to @{typ PropVar}.\<close>
text \<open>The main encoding function. It takes a function as input
  that returns for each pair of elements a pair of Booleans, and
  these indicate whether the elements are strictly or weakly decreasing. Moreover, two input lists are given.
  Finally two formulas are returned, where the first is satisfiable iff the two lists are strictly decreasing w.r.t.
  the multiset ordering, and second is satisfiable iff there is a weak decrease w.r.t. the multiset ordering.\<close>
subsection \<open>Soundness of the Encoding\<close>
  note p_xs = pos[OF \<open>distinct xs1\<close>]
  note p_ys = pos[OF \<open>distinct ys1\<close>]
          by (metis \<open>distinct xs1\<close> len length_map nth_eq_iff_index_eq p1 xs1 ys1)
      by (rule bexI[of _ "hd xs2"]; insert ne[OF \<open>?S\<close>] xs2 un_xs dist_xs; cases xs2, auto simp: v_defs)
subsection \<open>Encoding into Propositional Formulas\<close>
text \<open>The soundness theorem of the propositional formula encoder\<close>
subsection \<open>Size of Propositional Formula Encoding is Quadratic\<close>
subsection \<open>Encoding into Conjunctive Normal Form\<close>
text \<open>The soundness theorem of the CNF-encoder\<close>
subsection \<open>Size of CNF-Encoding is Quadratic\<close>
subsection \<open>Check Executability\<close>
text \<open>The constant 36 in the size-estimation for the PF-encoder is not that bad in comparison to the actual size,
  since using 34 in the size-estimation would be wrong:\<close>
text \<open>Similarly, the constant 55 in the size-estimation for the CNF-encoder is not that bad in comparison to the actual size,
  since using 51 in the size-estimation would be wrong:\<close>
text \<open>Example encoding\<close>
