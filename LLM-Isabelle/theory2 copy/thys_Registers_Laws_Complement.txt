theory Laws_Complement
  imports Laws Axioms_Complement
begin

notation comp_update (infixl "*\<^sub>u" 55)
notation tensor_update (infixr "\<otimes>\<^sub>u" 70)


  using complements_def by blast

proof (rule complementsI)
    using compatible_sym complements_def that by blast
    by (meson complements_def)
    using iso_register_def by blast
qed


  using complement_exists[OF that]
  by (metis (no_types, lifting) compatible_def complement_def some_eq_imp)

lemma complement_is_complement:
  using complement_exists[OF assms] unfolding complements_def
  by (metis (mono_tags, lifting) complement_def some_eq_imp)

lemma complement_unique:
  apply (rule complement_unique[where F=F])
  using assms unfolding complements_def using compatible_register1 complement_is_complement complements_def by blast+

  using complement_is_complement complements_def by blast

lemma complements_register_tensor:
proof (rule complementsI)
      apply (rule separating_tensor'[where A=UNIV and B=UNIV]) apply auto[3]
     apply (rule separating_tensor'[where A=UNIV and B=UNIV]) apply auto[3]
    by auto
    by (metis assms(1) assms(2) compatible_register_tensor complement_is_complement complements_def)
    by auto
    by (simp add: register_pair_apply Fst_def Snd_def tensor_update_mult)
    apply (rule iso_registerI[of _ ?reorder]) apply auto[2]
     apply (rule register_eqI[OF sep4]) apply auto[3]
    apply (rule register_eqI[OF sep4]) by auto
    apply (rule register_eqI[OF sep4])
    by (auto intro!: register_preregister register_comp register_tensor_is_register pair_is_register
        simp: compat register_pair_apply tensor_update_mult)
    apply (auto intro!: iso_register_comp iso_register_tensor_is_iso_register)
    using assms complement_is_complement complements_def by blast+
    by simp
qed

definition is_unit_register where

  by (simp add: compatible_def complements_def is_unit_register_def)

  by (metis compatible_comp_right complements_def id_comp is_unit_register_def that(1) that(2))

  using compatible_sym that(1) that(2) unit_register_compatible by blast

  using compatible_sym complement_is_complement complements_def by blast

  using complement_is_complement complements_def by blast

proof -
    using complements_def is_unit_register_def iso_register_equivalent_id that(1) by blast
    apply (rule equivalent_registers_pair_right)
     apply (auto intro!: unit_register_compatible)
    using complement_is_complement complements_def equivalent_registersI id_comp register_id that(2) by blast
    apply (rule equivalent_registers_assoc)
    by auto
    by (auto simp: equivalent_registers_def complements_def)
    by (metis complement_is_complement complements_def equivalent_registers_def iso_register_def that)
  ultimately show ?thesis
    by (meson complement_unique complement_is_complement complements_sym equivalent_registers_sym equivalent_registers_trans that)
qed

lemma unit_register_compose_left:
proof -
    apply (auto intro!: compatible3')
    by (metis assms(1) assms(2) comp_id compatible_comp_inner complements_def is_unit_register_def)
    by (metis assms(2) compatible_comp_right complement_is_complement complements_def iso_register_def)
    apply (auto intro!: equivalent_registers_pair_right)
    using assms(2) complement_is_complement complements_def equivalent_registers_def id_comp register_id by blast
    apply auto
    by (metis (no_types, opaque_lifting) compat assms(1) assms(2) compatible_comp_left compatible_def compatible_register1 complement_is_complement complements_def equivalent_registers_assoc id_apply register_unit_register)
    by (metis (no_types, opaque_lifting) assms(1) assms(2) calculation complements_def equivalent_registers_sym equivalent_registers_trans is_unit_register_def register_comp_pair)
    apply (intro equivalent_registers_pair_left equivalent_registers_comp)
      apply (auto simp: assms)
    using assms(1) equivalent_registers_sym register_id unit_register_pair by blast
    by (metis assms(2) comp_id complement_is_complement complements_def equivalent_registers_def iso_register_inv iso_register_inv_comp2 pair_is_register)
  finally show ?thesis
    using compat complementsI equivalent_registers_sym is_unit_register_def iso_register_equivalent_id by blast
qed

lemma unit_register_compose_right:
proof (unfold is_unit_register_def, rule complementsI)
    by (simp add: iso_register_is_register)
    by (meson assms(1) assms(2) complements_def is_unit_register_def iso_register_comp iso_register_id iso_register_tensor_is_iso_register)
    by (metis assms(1) assms(2) complements_def fun.map_id is_unit_register_def iso_register_id iso_register_is_register pair_o_tensor)
    using 1 2 by auto
qed

lemma unit_register_unique:
proof -
    using assms by (metis complements_def equivalent_registers_def id_comp is_unit_register_def)+
  then show ?thesis
    by (meson complement_unique complements_sym equivalent_registers_sym equivalent_registers_trans)
qed

lemma unit_register_domains_isomorphic:
proof -
    by (simp add: assms(2) unit_register_compose_left)
    using assms(1) register_tensor_left unit_register_compose_left by blast
    using unit_register_unique by blast
  then show ?thesis
    unfolding equivalent_registers_def by auto
qed


  by (metis is_unit_register_def complement_is_complement complements_def complements_sym equivalent_registers_def id_comp register_id)


proof -
    by auto
    apply atomize_elim by (rule unit_register_domains_isomorphic)
    by (rule unit_register_compose_right)
  then show ?thesis
    by (metis someI_ex unit_register_def)
qed

lemma unit_register_domain_tensor_unit:
proof -
    using id_complement_is_unit_register iso_register_equivalent_id register_id unit_register_pair by blast
    using equivalent_registers_def iso_register_inv by blast
    using assms id_complement_is_unit_register unit_register_domains_isomorphic by blast
    by auto
  then show ?thesis   
    by auto
qed

lemma compatible_complement_pair1:
  by (metis assms compatible_comp_left compatible_complement_right pair_is_register register_Fst register_pair_Fst)

lemma compatible_complement_pair2:
proof -
    by simp
    by auto
  then show ?thesis
    by (auto simp: register_pair_Snd)
qed

lemma equivalent_complements:
  apply (rule complementsI)
   apply (metis assms(1) assms(2) compatible_comp_right complements_def equivalent_registers_def iso_register_is_register)
  by (metis assms(1) assms(2) complements_def equivalent_registers_def equivalent_registers_pair_right iso_register_comp)

lemma complements_complement_pair:
proof (rule complementsI)
    apply (rule equivalent_registers_assoc)
    by (auto simp add: compatible_complement_pair1 compatible_complement_pair2)
    by (meson assms complement_is_complement complements_def equivalent_registers_sym iso_register_equivalent_id pair_is_register)
    using equivalent_registers_sym iso_register_equivalent_id by blast
    using assms compatible3' compatible_complement_pair1 compatible_complement_pair2 by blast
qed

lemma equivalent_registers_complement:
proof -
    using assms complement_is_complement equivalent_registers_register_left by blast
    by (meson complements_sym equivalent_complements)
  then show ?thesis
    by (rule complement_unique)
qed


lemma complements_complement_pair':
proof -
    apply (rule equivalent_registersI[where I=swap])
    by auto
    by (rule equivalent_registers_complement)
    apply (rule equivalent_registers_pair_right[rotated])
    using assms compatible_complement_pair1 by blast
    apply (rule complements_complement_pair)
    using assms compatible_sym by blast
  ultimately show ?thesis
    by (meson equivalent_complements equivalent_registers_sym)
qed

lemma complements_chain: 
proof (rule complementsI)
    by auto
    by (auto intro!: iso_register_tensor_is_iso_register simp: pair_o_tensor)
    apply (rule equivalent_registersI[where I=assoc])
    by (auto intro!: iso_register_tensor_is_iso_register simp: pair_o_tensor)
    by (metis (no_types, lifting) assms(1) assms(2) calculation compatible_complement_right
        equivalent_registers_sym equivalent_registers_trans register_comp_pair)
    apply (rule equivalent_registers_pair_left, simp)
    apply (rule equivalent_registers_comp, simp)
    by (metis assms(2) complement_is_complement complements_def equivalent_registers_def iso_register_def)
    by (metis assms(1) comp_id complement_is_complement complements_def equivalent_registers_def iso_register_def)
    using equivalent_registers_sym iso_register_equivalent_id by blast
qed

  by (auto intro!: complementsI simp: pair_Fst_Snd)

  by (auto intro!: complementsI simp flip: swap_def)

  using compatible_sym unit_register_compatible unit_register_is_unit_register by blast

  using complements_sym is_unit_register_def unit_register_is_unit_register by blast

  using complements_sym equivalent_complements is_unit_register_def iso_register_equivalent_id by blast

lemma iso_register_complement_is_unit_register[simp]:
  by (meson assms complement_is_complement complements_sym equivalent_complements equivalent_registers_sym is_unit_register_def iso_register_equivalent_id iso_register_is_register)

lemmas [register_attribute_rule] = is_unit_register_def[THEN iffD1] complements_def[THEN iffD1]

no_notation comp_update (infixl "*\<^sub>u" 55)
no_notation tensor_update (infixr "\<otimes>\<^sub>u" 70)

end
