theory Fair_Stream imports "HOL-Library.Stream" begin




  unfolding upt_lists_def by auto

  using upt_lists_snth by (meson dual_order.strict_trans1 gt_ex nle_le)

  unfolding upt_lists_def by (simp add: sset_range)

proof (cases s)
  case (SCons x xs)
  then show ?thesis
    by (cases x) (simp add: stl_sset subsetI, auto)
qed

lemma flat_snth_nth:
  using assms
proof (induct n arbitrary: s)
  case 0
  then show ?case
    using flat_snth by fastforce
next
  case (Suc n)
    by (metis Suc_le_D Suc_le_mono)
    by simp
    using Suc.prems flat_unfold by (simp add: shd_sset)
    using that by (metis (no_types, opaque_lifting) add.commute add_diff_cancel_left'
        dual_order.trans le_add2 shift_snth_ge)
  moreover {
      using Suc.prems by simp_all
      using Suc.prems by (cases s) simp_all
      using Suc.hyps by blast }
  ultimately show ?case .
qed

proof -
    using all_ex_upt_lists .
    by (simp add: in_set_conv_nth)
    by blast
    using flat_snth_nth upt_lists_ne by metis
  ultimately show ?thesis
    unfolding fair_nats_def by blast
qed

lemma fair_surj:
  using assms unfolding fair_def by (metis UNIV_I all_ex_fair_nats imageE snth_smap)


  unfolding fair_stream_def using fair_surj .

  unfolding fair_stream_def using all_ex_fair_nats by (metis sset_range stream.set_map surjI)

end
