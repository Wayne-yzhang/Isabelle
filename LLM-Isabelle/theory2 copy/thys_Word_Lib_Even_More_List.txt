theory Even_More_List
  imports Main
begin

lemma upt_add_eq_append':
  assumes "i \<le> j" and "j \<le> k"
  shows "[i..<k] = [i..<j] @ [j..<k]"
  using assms le_Suc_ex upt_add_eq_append by blast

lemma map_idem_upt_eq:
  case False
  then show ?thesis
    by simp
next
  case True
    by simp
    by simp
    by (induction r) simp_all
    by simp
qed

lemma upt_zero_numeral_unfold:
  by (simp add: numeral_eq_Suc)

lemma length_takeWhile_less:
  "\<exists>x\<in>set xs. \<not> P x \<Longrightarrow> length (takeWhile P xs) < length xs"
  by (induct xs) (auto split: if_splits)

lemma Min_eq_length_takeWhile:
proof -
  using that proof (induction rule: inc_induct)
    case base
      by simp
  next
    case (step q)
      by (simp add: upt_rec)
    show ?case
      case False
        using that step.prems [of m] by (auto simp add: Suc_le_eq less_le)
        by (simp add: * step.IH)
    next
      case True
        using step.prems by (auto simp add: less_imp_le_nat)
        by simp
        by (rule finite_subset)
        by (auto intro: Min_eqI simp add: *)
