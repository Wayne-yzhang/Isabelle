theory Nonempty_Bounded_Set
imports
  "HOL-Cardinals.Bounded_Set"
begin

typedef ('a, 'k) nebset ("_ set![_]" [22, 21] 21) =
  "{A :: 'a set. A \<noteq> {} \<and> |A| <o natLeq +c |UNIV :: 'k set|}"
  morphisms set_nebset Abs_nebset
  apply (rule exI[of _ "{undefined}"], simp)
  apply (rule Cfinite_ordLess_Cinfinite)
  apply (auto simp: cfinite_def cinfinite_csum natLeq_cinfinite Card_order_csum)
  done

setup_lifting type_definition_nebset

lift_definition map_nebset ::
  "('a \<Rightarrow> 'b) \<Rightarrow> 'a set!['k] \<Rightarrow> 'b set!['k]" is image
  using card_of_image ordLeq_ordLess_trans by blast

lift_definition rel_nebset ::
  "('a \<Rightarrow> 'b \<Rightarrow> bool) \<Rightarrow> 'a set!['k] \<Rightarrow> 'b set!['k] \<Rightarrow> bool" is rel_set .

lift_definition nebinsert :: "'a \<Rightarrow> 'a set!['k] \<Rightarrow> 'a set!['k]" is "insert"
  using infinite_card_of_insert ordIso_ordLess_trans Field_card_of Field_natLeq UNIV_Plus_UNIV
   csum_def finite_Plus_UNIV_iff finite_insert finite_ordLess_infinite2 infinite_UNIV_nat
   insert_not_empty by metis

lift_definition nebsingleton :: "'a \<Rightarrow> 'a set!['k]" is "\<lambda>a. {a}"
  apply simp
  apply (rule Cfinite_ordLess_Cinfinite)
  apply (auto simp: cfinite_def cinfinite_csum natLeq_cinfinite Card_order_csum)
  done

lemma set_nebset_to_set_nebset: "A \<noteq> {} \<Longrightarrow> |A| <o natLeq +c |UNIV :: 'k set| \<Longrightarrow>
  set_nebset (the_inv set_nebset A :: 'a set!['k]) = A"
  apply (rule f_the_inv_into_f[unfolded inj_on_def])
  apply (simp add: set_nebset_inject range_eqI Abs_nebset_inverse[symmetric])
  apply (rule range_eqI Abs_nebset_inverse[symmetric] CollectI)+
  apply blast
  done

lemma rel_nebset_aux_infinite:
  fixes a :: "'a set!['k]" and b :: "'b set!['k]"
  shows "(\<forall>t \<in> set_nebset a. \<exists>u \<in> set_nebset b. R t u) \<and> (\<forall>u \<in> set_nebset b. \<exists>t \<in> set_nebset a. R t u) \<longleftrightarrow>
   ((BNF_Def.Grp {a. set_nebset a \<subseteq> {(a, b). R a b}} (map_nebset fst))\<inverse>\<inverse> OO
    BNF_Def.Grp {a. set_nebset a \<subseteq> {(a, b). R a b}} (map_nebset snd)) a b" (is "?L \<longleftrightarrow> ?R")
proof
  assume ?L
  define R' :: "('a \<times> 'b) set!['k]"
    where "R' = the_inv set_nebset (Collect (case_prod R) \<inter> (set_nebset a \<times> set_nebset b))"
    (is "_ = the_inv set_nebset ?L'")
  moreover
  have "|?L'| <o natLeq +c |UNIV :: 'k set|"
    unfolding csum_def Field_natLeq
    by (intro ordLeq_ordLess_trans[OF card_of_mono1[OF Int_lower2]]
      card_of_Times_ordLess_infinite)
      (simp, (transfer, simp add: csum_def Field_natLeq)+)
  ultimately have *: "set_nebset R' = ?L'" unfolding R'_def by (intro set_nebset_to_set_nebset)
  show ?R unfolding Grp_def relcompp.simps conversep.simps
  proof (intro CollectI case_prodI exI[of _ a] exI[of _ b] exI[of _ R'] conjI refl)
      by (transfer, auto simp add: image_def Int_def split: prod.splits)
      by (transfer, auto simp add: image_def Int_def split: prod.splits)
  qed (auto simp add: *)
(* FIXME for ONDRA*)
(*
declare nebset.rel_eq[relator_eq]
declare nebset.rel_mono[relator_mono]
declare nebset.rel_compp[symmetric, relator_distr]
declare nebset.rel_transfer[transfer_rule]

lemma nebset_quot_map[quot_map]: "Quotient R Abs Rep T \<Longrightarrow>
  Quotient (rel_nebset R) (map_nebset Abs) (map_nebset Rep) (rel_nebset T)"
  unfolding Quotient_alt_def5 nebset.rel_Grp[of UNIV, simplified, symmetric]
    nebset.rel_conversep[symmetric] nebset.rel_compp[symmetric]
    by (auto elim: nebset.rel_mono_strong)

lemma set_relator_eq_onp [relator_eq_onp]:
  "rel_nebset (eq_onp P) = eq_onp (\<lambda>A. Ball (set_nebset A) P)"
  unfolding fun_eq_iff eq_onp_def by transfer (auto simp: rel_set_def)
*)
