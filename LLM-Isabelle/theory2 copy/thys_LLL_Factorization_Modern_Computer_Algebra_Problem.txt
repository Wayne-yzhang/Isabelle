theory Modern_Computer_Algebra_Problem
  imports Factorization_Algorithm_16_22
begin

fun max_degree_poly :: "int poly \<Rightarrow> int poly \<Rightarrow> int poly"
  where "max_degree_poly a b = (if degree a \<ge> degree b then a else b)"
 
fun choose_u :: "int poly list \<Rightarrow> int poly"
   where "choose_u [] = undefined"
 | "choose_u [gi] = gi" 
 | "choose_u (gi # gj # gs) = max_degree_poly gi (choose_u (gj # gs))"



lemma "let f = [:1,1:] * [:1,1,0,1:];
   p = suitable_prime_bz f;
   b = lead_coeff f;
   A = linf_norm_poly f; n = degree f; B = sqrt_int_ceiling (n+1) * 2^n * A;
   Bnd = 2^(n^2 div 2) * B^(2*n); l = log_ceiling p Bnd;
   (_, fs) = finite_field_factorization_int p f;
   gs = hensel_lifting p l f fs;
   u = choose_u gs;
   d = degree u;
   g_star = [:2,2,0,2 :: int :];
   (gs',hs') = List.partition (\<lambda>gi. poly_mod.dvdm p gi g_star) gs;
   h_star = smult b (prod_list hs');
   f_star = primitive_part h_star
  in (hs' = [] \<and> f_star = 1)" by eval




definition "input_poly = [: 1,0,0,0,1,1,0,0,1,0,1,0,1 :: int :]" 


lemma "let f = input_poly;
   p = suitable_prime_bz f;
   b = lead_coeff f;
   A = linf_norm_poly f; n = degree f; B = sqrt_int_ceiling (n+1) * 2^n * A;
   Bnd = 2^(n^2 div 2) * B^(2*n); l = log_ceiling p Bnd;
   (_, fs) = finite_field_factorization_int p f;
   gs = hensel_lifting p l f fs;
   u = choose_u gs;
   pl = p^l;
   pl2 = pl div 2;  
   u' = poly_mod.inv_Mp2 pl pl2 (poly_mod.Mp pl (smult b u))
  in sqrt_int_floor (sq_norm u') > pl" by eval


definition "compute_norms = (let f = input_poly;
   p = suitable_prime_bz f;
   b = lead_coeff f;
   A = linf_norm_poly f; n = degree f; B = sqrt_int_ceiling (n+1) * 2^n * A;
   Bnd = 2^(n^2 div 2) * B^(2*n); l = log_ceiling p Bnd;
   (_, fs) = finite_field_factorization_int p f;
   gs = hensel_lifting p l f fs;
   u = choose_u gs;
   pl = p^l;
   pl2 = pl div 2;  
   u' = poly_mod.inv_Mp2 pl pl2 (poly_mod.Mp pl (smult b u));
   d = degree u;
   pl = p^l;
   L = factorization_lattice u' 1 pl;
   g_star = short_vector 2 L 
  in (
     ''p^l:         '' @ show pl @ shows_nl [] @ 
     ''norm u:      '' @ show (sqrt_int_floor (sq_norm_poly u')) @ shows_nl [] @
     ''norm g_star: '' @ show (sqrt_int_floor (sq_norm_vec g_star)) @ shows_nl [] @ shows_nl [] 
))"

export_code compute_norms in Haskell 




lemma "let g2 = [:-984,1:];
           g3 = [:-72,1:];
           g4 = [:-6828,1:];
           rhs = [:-1728,-840,-420,6:]
  in \<not> poly_mod.eq_m (5^6) (smult 6 (g2*g3*g4)) (rhs)" by eval

end
