theory Labels imports Com begin


inductive labels :: "cmd \<Rightarrow> nat \<Rightarrow> cmd \<Rightarrow> bool"
where

Labels_Base:
  "labels c 0 c"

| Labels_LAss:
  "labels (V:=e) 1 Skip"

| Labels_Seq1: 
  "labels c\<^sub>1 l c \<Longrightarrow> labels (c\<^sub>1;;c\<^sub>2) l (c;;c\<^sub>2)"

| Labels_Seq2: 
  "labels c\<^sub>2 l c \<Longrightarrow> labels (c\<^sub>1;;c\<^sub>2) (l + #:c\<^sub>1) c"

| Labels_CondTrue:
  "labels c\<^sub>1 l c \<Longrightarrow> labels (if (b) c\<^sub>1 else c\<^sub>2) (l + 1) c"

| Labels_CondFalse:
  "labels c\<^sub>2 l c \<Longrightarrow> labels (if (b) c\<^sub>1 else c\<^sub>2) (l + #:c\<^sub>1 + 1) c"

| Labels_WhileBody:
  "labels c' l c \<Longrightarrow> labels (while(b) c') (l + 2) (c;;while(b) c')"

| Labels_WhileExit:
  "labels (while(b) c') 1 Skip"

| Labels_Call:
  "labels (Call p es rets) 1 Skip"


lemma label_less_num_inner_nodes:
  "labels c l c' \<Longrightarrow> l < #:c"
proof(induct c arbitrary:l c')
  case Skip 
next
  case (LAss V e) 
next
  case (Seq c\<^sub>1 c\<^sub>2)
    by simp(erule labels.cases,auto,force)
next
  case (Cond b c\<^sub>1 c\<^sub>2)
    by simp(erule labels.cases,auto,force)
next
  case (While b c)
    by simp(erule labels.cases,fastforce+)
next
  case (Call p es rets) 
  thus ?case by simp(erule labels.cases,fastforce+)
qed


declare One_nat_def [simp del]

lemma less_num_inner_nodes_label:
  assumes "l < #:c" obtains c' where "labels c l c'"
proof(atomize_elim)
  proof(induct c arbitrary:l)
    case Skip
    thus ?case by(fastforce intro:Labels_Base)
  next
    case (LAss V e)
    thus ?case by(auto intro:Labels_Base Labels_LAss)
  next
    case (Seq c\<^sub>1 c\<^sub>2)
    show ?case
    proof(cases "l < #:c\<^sub>1")
      case True
      from IH1[OF this] obtain c' where "labels c\<^sub>1 l c'" by auto
      hence "labels (c\<^sub>1;;c\<^sub>2) l (c';;c\<^sub>2)" by(fastforce intro:Labels_Seq1)
      thus ?thesis by auto
    next
      case False
      hence "#:c\<^sub>1 \<le> l" by simp
      then obtain l' where "l = l' + #:c\<^sub>1" and "l' = l - #:c\<^sub>1" by simp
      from IH2[OF this] obtain c' where "labels c\<^sub>2 l' c'" by auto
        by(fastforce intro:Labels_Seq2)
      thus ?thesis by auto
    qed
  next
    case (Cond b c\<^sub>1 c\<^sub>2)
    show ?case
    proof(cases "l = 0")
      case True
      thus ?thesis by(fastforce intro:Labels_Base)
    next
      case False
      hence "0 < l" by simp
      then obtain l' where "l = l' + 1" and "l' = l - 1" by simp
      thus ?thesis
      proof(cases "l' < #:c\<^sub>1")
        case True
        from IH1[OF this] obtain c' where "labels c\<^sub>1 l' c'" by auto
          by(fastforce dest:Labels_CondTrue)
        thus ?thesis by auto
      next
        case False
        hence "#:c\<^sub>1 \<le> l'" by simp
        then obtain l'' where "l' = l'' + #:c\<^sub>1" and "l'' = l' - #:c\<^sub>1" by simp
        have "l'' < #:c\<^sub>2" by simp
        from IH2[OF this] obtain c' where "labels c\<^sub>2 l'' c'" by auto
          by(fastforce dest:Labels_CondFalse)
        thus ?thesis by auto
      qed
    qed
  next
    case (While b c')
    show ?case
    proof(cases "l < 1")
      case True
      hence "l = 0" by simp
      thus ?thesis by(fastforce intro:Labels_Base)
    next
      case False
      show ?thesis
      proof(cases "l < 2")
        case True
        thus ?thesis by(fastforce intro:Labels_WhileExit)
      next
        case False
        then obtain l' where "l = l' + 2" and "l' = l - 2" 
          by(simp del:add_2_eq_Suc')
        from IH[OF this] obtain c'' where "labels c' l' c''" by auto
          by(fastforce dest:Labels_WhileBody)
        thus ?thesis by auto
      qed
    qed
  next
    case (Call p es rets)
    show ?case
    proof(cases "l < 1")
      case True
      hence "l = 0" by simp
      thus ?thesis by(fastforce intro:Labels_Base)
    next
      case False
      thus ?thesis by(fastforce intro:Labels_Call)
    qed
  qed
qed


lemma labels_det:
  "labels c l c'\<Longrightarrow> (\<And>c''. labels c l c''\<Longrightarrow> c' = c'')"
proof(induct rule:labels.induct)
  case (Labels_Base c c'') 
  thus ?case by(induct rule:labels.induct,auto)
next
  case (Labels_Seq1 c\<^sub>1 l c c\<^sub>2)
    by(fastforce elim:labels.cases intro:Labels_Base)
  hence [simp]:"c'' = cx;;c\<^sub>2" and "labels c\<^sub>1 l cx" by simp_all
next
  case (Labels_Seq2 c\<^sub>2 l c c\<^sub>1)
    by(auto elim:labels.cases dest:label_less_num_inner_nodes)
  from IH[OF this] show ?case .
next
  case (Labels_CondTrue c\<^sub>1 l c b c\<^sub>2)
    by(fastforce elim:labels.cases dest:label_less_num_inner_nodes)
  from IH[OF this] show ?case .
next
  case (Labels_CondFalse c\<^sub>2 l c b c\<^sub>1)
  have "labels c\<^sub>2 l c''"
    by(fastforce elim:labels.cases dest:label_less_num_inner_nodes)
  from IH[OF this] show ?case .
next
  case (Labels_WhileBody c' l c b)
  obtain cx where "c'' = cx;;while (b) c' \<and> labels c' l cx" 
    by -(erule labels.cases,auto)
  hence [simp]:"c'' = cx;;while (b) c'" and "labels c' l cx" by simp_all
qed (fastforce elim:labels.cases)+



definition label :: "cmd \<Rightarrow> nat \<Rightarrow> cmd"
  where "label c n \<equiv> (THE c'. labels c n c')"


lemma labels_THE:
  "labels c l c' \<Longrightarrow> (THE c'. labels c l c') = c'"
by(fastforce intro:the_equality dest:labels_det)


lemma labels_label:"labels c l c' \<Longrightarrow> label c l = c'"
by(fastforce intro:labels_THE simp:label_def)


end
