theory 
  PersonalFirewallDatatype
  imports 
    "../../UPF-Firewall"
begin


datatype Adr = pc | internet
  
type_synonym DatatypeTwoNets = "Adr \<times> int"
  
instance Adr::adr ..
    
definition
  PC :: "DatatypeTwoNets net" where
  "PC = {{(a,b). a = pc}}"
  
definition
  Internet :: "DatatypeTwoNets net" where
  "Internet = {{(a,b). a = internet}}"
  
definition
  not_in_same_net :: "(DatatypeTwoNets,DummyContent) packet \<Rightarrow> bool" where
  "not_in_same_net x = ((src x \<sqsubset> PC \<longrightarrow> dest x \<sqsubset> Internet) \<and> (src x \<sqsubset> Internet \<longrightarrow> dest x \<sqsubset> PC))" 
  

definition
  strictPolicy :: "(DatatypeTwoNets,DummyContent) FWPolicy" where
  "strictPolicy = deny_all ++ allow_all_from_to PC Internet"
  
definition
  PortPolicy :: "(DatatypeTwoNets,'b) FWPolicy" where
  "PortPolicy = deny_all ++ allow_from_ports_to {80::port,24,21} PC Internet"
  
definition
  PortPolicyBig :: "(DatatypeTwoNets,'b) FWPolicy" where
  "PortPolicyBig =  
                 allow_from_port_to (80::port) PC Internet \<Oplus> 
                 allow_from_port_to (24::port) PC Internet \<Oplus> 
                 allow_from_port_to (21::port) PC Internet \<Oplus> 
                 deny_all"
  
lemmas policyLemmas = strictPolicy_def PortPolicy_def PC_def Internet_def PortPolicyBig_def src_def 
                      PolicyCombinators PortCombinators in_subnet_def
  
end
