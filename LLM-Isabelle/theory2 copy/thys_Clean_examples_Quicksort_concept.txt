theory Quicksort_concept
  imports Clean.Clean
          Clean.Hoare_Clean
          Clean.Clean_Symbex
begin









global_vars (S)
    A :: "int list"
global_vars (S2)
    B :: "int list"



find_theorems (60) name:global_state2_state

find_theorems create\<^sub>L name:"Quick"





definition A\<^sub>L' where "A\<^sub>L' \<equiv> create\<^sub>L global_S_state.A global_S_state.A_update"

lemma  A\<^sub>L'_control_indep : "(break_status\<^sub>L \<bowtie> A\<^sub>L' \<and> return_status\<^sub>L \<bowtie> A\<^sub>L')"
  unfolding A\<^sub>L'_def break_status\<^sub>L_def return_status\<^sub>L_def create\<^sub>L_def upd2put_def
  by (simp add: lens_indep_def)

lemma A\<^sub>L'_strong_indep : "\<sharp>! A\<^sub>L'"
  unfolding strong_control_independence_def
  using A\<^sub>L'_control_indep by blast


Note that this specialized rule of @{thm assign_global} does not
need any further side-conditions referring to independence from the control.
lemma assign_global_A:
     "\<lbrace>\<lambda>\<sigma>. \<triangleright> \<sigma> \<and>  P (\<sigma>\<lparr>A := rhs \<sigma>\<rparr>)\<rbrace>  A_update :==\<^sub>G rhs \<lbrace>\<lambda>r \<sigma>. \<triangleright> \<sigma> \<and> P \<sigma> \<rbrace>"
     apply(rule assign_global)
     apply(rule strong_vs_weak_upd [of global_S_state.A global_S_state.A_update])
     apply (metis A\<^sub>L'_def A\<^sub>L'_strong_indep)
     by(rule ext, rule ext, auto)



instead.\<close>
definition "i = ()" \<comment> \<open>check that \<^term>\<open>i\<close> can exist as a constant with an arbitrary type before treating \<^theory_text>\<open>function_spec\<close>\<close>
definition "j = ()" \<comment> \<open>check that \<^term>\<open>j\<close> can exist as a constant with an arbitrary type before treating \<^theory_text>\<open>function_spec\<close>\<close>
function_spec swap (i::nat,j::nat) \<comment> \<open>TODO: the hovering on parameters produces a number of report equal to the number of \<^ML>\<open>Proof_Context.add_fixes\<close> called in \<^ML>\<open>Function_Specification_Parser.checkNsem_function_spec\<close>\<close>
pre          "\<open>i < length A \<and> j < length A\<close>"    
post         "\<open>\<lambda>res. length A = length(old A) \<and> res = ()\<close>" 
defines      " \<open> tmp := A ! i\<close>  ;-
               \<open> A := list_update A i (A ! j)\<close> ;- 
               \<open> A := list_update A j tmp\<close> " 
text\<open>The body --- heavily using the \<open>\<lambda>\<close>-lifting cartouche --- corresponds to the 
\<open>\<open>defines " ((assign_local tmp_update (\<lambda>\<sigma>. (A \<sigma>) ! i ))   ;-
             (assign_global A_update (\<lambda>\<sigma>. list_update (A \<sigma>) (i) (A \<sigma> ! j))) ;- 
             (assign_global A_update (\<lambda>\<sigma>. list_update (A \<sigma>) (j) ((hd o tmp) \<sigma>))))"\<close>\<close>}\<close>
text\<open>The effect of this statement is generation of the following definitions in the logical context:\<close>
term "(i, j)" \<comment> \<open>check that \<^term>\<open>i\<close> and \<^term>\<open>j\<close> are pointing to the constants defined before treating \<^theory_text>\<open>function_spec\<close>\<close>
text\<open>The state-management is in the following configuration:\<close>
ML\<open> val Type(s,t) = StateMgt_core.get_state_type_global @{theory};
    StateMgt_core.get_state_field_tab_global @{theory}\<close>
subsection \<open>A Similation of \<^verbatim>\<open>swap\<close> in elementary specification constructs:\<close>
text\<open>Note that we prime identifiers in order to avoid confusion with the definitions of the
previous section. The pre- and postconditions are just definitions of the following form:\<close>
text\<open>The somewhat vacuous parameter \<open>res\<close> for the result of the swap-computation is the conseqeuence 
     factoring out the functionality into the command \<open>local_vars_test\<close> \<close>
text\<open>The immediate effect of this command on the internal Clean State Management
can be made explicit as follows: \<close>
ML\<open>
val Type(s,t) = StateMgt_core.get_state_type_global @{theory};
val tab = StateMgt_core.get_state_field_tab_global @{theory};
@{term "A::('a local_swap_state_scheme\<Rightarrow> int list)"}\<close>
text\<open>This has already the effect of the definition:\<close>
text\<open>Again, we simulate the effect of this command by more elementary \HOL specification constructs:\<close>
                                \<comment> \<open> recall : returns op value \<close>
                                \<comment> \<open> which happens to be unit \<close>
text\<open> a block manages the "dynamically" created fresh instances for the local variables of swap \<close>
text\<open>NOTE: If local variables were only used in single-assignment style, it is possible
   to drastically simplify the encoding. These variables were not stored in the state,
   just kept as part of the monadic calculation. The simplifications refer both to 
   calculation as well as well as symbolic execution and deduction.\<close>
text\<open>The could be represented by the following alternative, optimized version :\<close>
text\<open>In case that all local variables are single-assigned in swap, the entire local var definition
   could be ommitted.\<close>
text\<open>A more pretty-printed term representation is:\<close>
term\<open>  swap_opt = (\<lambda>(i, j).
               tmp \<leftarrow> (yield\<^sub>C (\<lambda>\<sigma>. A \<sigma> ! i));
               (A_update :==\<^sub>G (\<lambda>\<sigma>. (A \<sigma>)[i := A \<sigma> ! j]) ;- 
                A_update :==\<^sub>G (\<lambda>\<sigma>. (A \<sigma>)[j := tmp])))\<close>
subsubsection\<open>A Simulation of Synthesis of Typed Assignment-Rules\<close>
text\<open>Specialized Assignment Rule for Local Variable \<open>tmp\<close>.
Consequently, backward inference in an \<open>wp\<close>-calculus will just maintain
the invariant @{term \<open>\<triangleright> \<sigma>\<close>}.\<close>
section \<open>Encoding \<^verbatim>\<open>partition\<close> in Clean\<close>
subsection \<open>\<^verbatim>\<open>partition\<close> in High-level Notation\<close>
pre          "\<open>lo < length A \<and> hi < length A\<close>"    
post         "\<open>\<lambda>res::nat. length A = length(old A) \<and> res = 3\<close>" 
defines      " \<open>pivot := A ! hi \<close>  ;- \<open>i := lo \<close> ;- \<open>j := lo \<close> ;-
               (while\<^sub>C \<open>j \<le> hi - 1 \<close> 
                do (if\<^sub>C \<open>A ! j < pivot\<close>  
                    then  call\<^sub>C swap \<open>(i , j) \<close>  ;-
                          \<open>i := i + 1 \<close>
                    \<open>j := j + 1 \<close> 
                call\<^sub>C swap \<open>(i, j)\<close>  ;-
                return\<^sub>C result_value_update \<open>i\<close>" 
text\<open> The body is a fancy syntax for :

@{cartouche [display=true]


thm partition_pre_def
thm partition_post_def
thm push_local_partition_state_def
thm pop_local_partition_state_def
thm partition_core_def
thm partition_def




definition "partition'_pre \<equiv> \<lambda>(lo, hi) \<sigma>. lo < length (A \<sigma>) \<and> hi < length (A \<sigma>)"
definition "partition'_post \<equiv> \<lambda>(lo, hi) \<sigma>\<^sub>p\<^sub>r\<^sub>e \<sigma> res. length (A \<sigma>) = length (A \<sigma>\<^sub>p\<^sub>r\<^sub>e) \<and> res = 3"



local_vars_test  (partition' "nat")
    pivot  :: "int"
    i      :: "nat"
    j      :: "nat"


thm push_local_partition'_state_def
thm pop_local_partition'_state_def

definition push_local_partition_state' :: "(unit, 'a local_partition'_state_scheme) MON\<^sub>S\<^sub>E"
  where   "push_local_partition_state' \<sigma> = Some((),
                        \<sigma>\<lparr>local_partition_state.pivot := undefined # local_partition_state.pivot \<sigma>, 
                          local_partition_state.i     := undefined # local_partition_state.i \<sigma>, 
                          local_partition_state.j     := undefined # local_partition_state.j \<sigma>, 
                          local_partition_state.result_value   
                                           := undefined # local_partition_state.result_value \<sigma> \<rparr>)"

definition pop_local_partition_state' :: "(nat,'a local_partition_state_scheme) MON\<^sub>S\<^sub>E" 
  where   "pop_local_partition_state' \<sigma> = Some(hd(local_partition_state.result_value \<sigma>),
                       \<sigma>\<lparr>local_partition_state.pivot := tl(local_partition_state.pivot \<sigma>), 
                         local_partition_state.i     := tl(local_partition_state.i \<sigma>), 
                         local_partition_state.j     := tl(local_partition_state.j \<sigma>), 
                         local_partition_state.result_value := 
                                                        tl(local_partition_state.result_value \<sigma>) \<rparr>)"




definition partition'_core :: "nat \<times> nat \<Rightarrow>  (unit,'a local_partition'_state_scheme) MON\<^sub>S\<^sub>E"
  where   "partition'_core  \<equiv> \<lambda>(lo,hi).
              ((assign_local pivot_update (\<lambda>\<sigma>. A \<sigma> ! hi ))   ;- 
               (assign_local i_update (\<lambda>\<sigma>. lo )) ;-
 
               (assign_local j_update (\<lambda>\<sigma>. lo )) ;-
               (while\<^sub>C (\<lambda>\<sigma>. (hd o j) \<sigma> \<le> hi - 1 ) 
                do (if\<^sub>C (\<lambda>\<sigma>. A \<sigma> ! (hd o j) \<sigma> < (hd o pivot)\<sigma> ) 
                    then  call\<^sub>C (swap) (\<lambda>\<sigma>. ((hd o i) \<sigma>,  (hd o j) \<sigma>))  ;-
                          assign_local i_update (\<lambda>\<sigma>. ((hd o i) \<sigma>) + 1)
                    else skip\<^sub>S\<^sub>E 
                    fi) 
                od) ;-
               (assign_local j_update (\<lambda>\<sigma>. ((hd o j) \<sigma>) + 1)) ;-
                call\<^sub>C (swap) (\<lambda>\<sigma>. ((hd o i) \<sigma>,  (hd o j) \<sigma>))  ;-
                assign_local result_value_update (\<lambda>\<sigma>. (hd o i) \<sigma>)  
               )"

thm partition_core_def

definition partition' :: "nat \<times> nat \<Rightarrow>  (nat,'a local_partition'_state_scheme) MON\<^sub>S\<^sub>E"
  where   "partition'  \<equiv> \<lambda>(lo,hi). block\<^sub>C push_local_partition_state 
                                   (partition_core (lo,hi)) 
                                   pop_local_partition_state"
             



rec_function_spec quicksort (lo::nat, hi::nat) returns unit
variant      "hi - lo" 
local_vars   p :: "nat" 
               else skip\<^sub>S\<^sub>E 
               fi"


thm quicksort_core_def
thm quicksort_def
thm quicksort_pre_def
thm quicksort_post_def






local_vars_test  (quicksort' "unit")
    p  :: "nat"


thm pop_local_quicksort'_state_def
thm push_local_quicksort'_state_def

definition push_local_quicksort_state' :: "(unit, 'a local_quicksort'_state_scheme) MON\<^sub>S\<^sub>E"
  where   "push_local_quicksort_state' \<sigma> = 
                 Some((), \<sigma>\<lparr>local_quicksort'_state.p := undefined # local_quicksort'_state.p \<sigma>,
                            local_quicksort'_state.result_value := undefined # local_quicksort'_state.result_value \<sigma> \<rparr>)"




definition pop_local_quicksort_state' :: "(unit,'a local_quicksort'_state_scheme) MON\<^sub>S\<^sub>E"
  where   "pop_local_quicksort_state' \<sigma> = Some(hd(local_quicksort'_state.result_value \<sigma>),
                       \<sigma>\<lparr>local_quicksort'_state.p   := tl(local_quicksort'_state.p \<sigma>), 
                         local_quicksort'_state.result_value := 
                                                      tl(local_quicksort'_state.result_value \<sigma>) \<rparr>)"

\<close>
subsection\<open>Setup for Deductive Verification\<close>
text\<open>The coupling between the pre- and the post-condition state is done by the 
     free variable (serving as a kind of ghost-variable) @{term "\<sigma>\<^sub>p\<^sub>r\<^sub>e"}. This coupling
     can also be used to express framing conditions; i.e. parts of the state which are
     independent and/or not affected by the computations to be verified. \<close>
