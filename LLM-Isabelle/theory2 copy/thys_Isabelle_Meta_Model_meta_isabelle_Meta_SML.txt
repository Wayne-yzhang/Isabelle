theory  Meta_SML
imports "../Init"
begin



datatype semi__val_fun = Sval
                       | Sfun

datatype semi__term' = SML_string string
                     | SML_basic "string list"
                     | SML_binop semi__term' string semi__term'
                     | SML_apply semi__term' "semi__term' list"
                     | SML_let_open string semi__term'


locale SML
begin
no_type_notation abr_string ("string") definition "string = SML_string"
definition "rewrite = SML_rewrite"
definition "basic = SML_basic"
definition "binop = SML_binop"
definition "annot = SML_annot"
definition "function = SML_function"
definition "apply = SML_apply"
definition "paren = SML_paren"
definition "let_open = SML_let_open"

definition "app s = apply (basic [s])"
definition "option' f l = (case map_option f l of None \<Rightarrow> none | Some s \<Rightarrow> some s)"
definition "option = option' id"
definition "binop_l s l = (case rev l of x # xs \<Rightarrow> List.fold (\<lambda>x. binop x s) xs x)"
definition "list' f l = list (L.map f l)"
definition "rewrite_val = rewrite Sval"
definition "rewrite_fun = rewrite Sfun"
end

lemmas [code] =
  SML.string_def
  SML.rewrite_def
  SML.basic_def
  SML.binop_def
  SML.annot_def
  SML.function_def
  SML.apply_def
  SML.paren_def
  SML.let_open_def
  SML.app_def
  SML.none_def
  SML.some_def
  SML.option'_def
  SML.option_def
  SML.parenthesis_def
  SML.binop_l_def
  SML.list_def
  SML.list'_def
  SML.pair_def
  SML.pair'_def
  SML.rewrite_val_def
  SML.rewrite_fun_def

end
