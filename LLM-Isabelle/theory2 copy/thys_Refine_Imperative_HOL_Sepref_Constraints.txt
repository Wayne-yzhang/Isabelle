theory Sepref_Constraints
imports Main Automatic_Refinement.Refine_Lib Sepref_Basic
begin

definition "CONSTRAINT_SLOT (x::prop) \<equiv> x"

lemma insert_slot_rl1:
  assumes "PROP P \<Longrightarrow> PROP (CONSTRAINT_SLOT (Trueprop True)) \<Longrightarrow> PROP Q"
  shows "PROP (CONSTRAINT_SLOT (PROP P)) \<Longrightarrow> PROP Q"
  using assms unfolding CONSTRAINT_SLOT_def by simp

lemma insert_slot_rl2:
  assumes "PROP P \<Longrightarrow> PROP (CONSTRAINT_SLOT S) \<Longrightarrow> PROP Q"
  shows "PROP (CONSTRAINT_SLOT (PROP S &&& PROP P)) \<Longrightarrow> PROP Q"
  using assms unfolding CONSTRAINT_SLOT_def conjunction_def .

lemma remove_slot: "PROP (CONSTRAINT_SLOT (Trueprop True))"
  unfolding CONSTRAINT_SLOT_def by (rule TrueI)

definition CONSTRAINT where [simp]: "CONSTRAINT P x \<equiv> P x"

lemma CONSTRAINT_D:
  assumes "CONSTRAINT (P::'a => bool) x"
  shows "P x"
  using assms unfolding CONSTRAINT_def by simp

lemma CONSTRAINT_I:
  assumes "P x"
  shows "CONSTRAINT (P::'a => bool) x"
  using assms unfolding CONSTRAINT_def by simp

definition CN_FALSE :: "('a\<Rightarrow>bool) \<Rightarrow> 'a \<Rightarrow> bool" where [simp]: "CN_FALSE P x \<equiv> False"  
lemma CN_FALSEI: "CN_FALSE P x \<Longrightarrow> P x" by simp



lemmas split_constraint_rls 
    = atomize_conj[symmetric] imp_conjunction all_conjunction conjunction_imp


setup Sepref_Constraints.setup




end
