theory  Meta_Isabelle
imports Meta_Pure
        Meta_SML
begin



datatype semi__typ = Typ_apply semi__typ "semi__typ list"
                   | Typ_base string



                    | Term_basic "string list"
                    | Term_annot semi__term semi__typ
                    | Term_apply semi__term "semi__term list"
                    | Term_if_then_else semi__term semi__term semi__term


                                         semi__term


                           semi__typ

datatype "definition" = Definition semi__term

                             | Thm_THEN semi__thm_attribute semi__thm_attribute
                             | Thm_simplified semi__thm_attribute semi__thm_attribute
                             | Thm_symmetric semi__thm_attribute
                             | Thm_where semi__thm_attribute "(string \<times> semi__term) list"
                             | Thm_of semi__thm_attribute "semi__term list"
                             | Thm_OF semi__thm_attribute semi__thm_attribute

datatype semi__thm = Thms_single semi__thm_attribute
                   | Thms_mult semi__thm_attribute

type_synonym semi__thm_l = "semi__thm list"

                                    "semi__thm_attribute list"

datatype semi__method_simp = Method_simp_only semi__thm_l

datatype semi__method = Method_rule "semi__thm_attribute option"
                      | Method_drule semi__thm_attribute
                      | Method_erule semi__thm_attribute
                      | Method_intro "semi__thm_attribute list"
                      | Method_elim semi__thm_attribute
                                     semi__thm_attribute
                      | Method_insert semi__thm_l
                      | Method_plus "semi__method list"
                      | Method_option "semi__method list"
                      | Method_or "semi__method list"
                      | Method_one semi__method_simp
                      | Method_all semi__method_simp
                      | Method_auto_simp_add_split semi__thm_l "string list"
                      | Method_rename_tac "string list"
                      | Method_case_tac semi__term
                      | Method_blast "nat option"
                      | Method_clarify
                                     "semi__thm_attribute list"

datatype semi__command_final = Command_done
                             | Command_by "semi__method list"
                             | Command_sorry


                                            semi__term
                                            semi__command_final
                             | Command_fix_let "string list"

                         semi__command_final
                                 "semi__command_proof list"
                                 semi__command_final

                                           semi__term


datatype "text" = Text string

datatype "ML" = SML semi__term'

datatype "setup" = Setup semi__term'

datatype "thm" = Thm "semi__thm_attribute list"

                                           semi__command_final

datatype semi__theory = Theory_datatype "datatype"
                      | Theory_type_synonym "type_synonym"
                      | Theory_type_notation "type_notation"
                      | Theory_instantiation "instantiation"
                      | Theory_overloading "overloading"
                      | Theory_consts "consts"
                      | Theory_definition "definition"
                      | Theory_lemmas "lemmas"
                      | Theory_lemma "lemma"
                      | Theory_axiomatization "axiomatization"
                      | Theory_section "section"
                      | Theory_text "text"
                      | Theory_ML "ML"
                      | Theory_setup "setup"
                      | Theory_thm "thm"
                      | Theory_interpretation "interpretation"

record semi__locale = 
  HolThyLocale_name :: string

datatype semi__theories = Theories_one semi__theory


locale T
begin
definition "thm = Thm_thm"
definition "thms = Thm_thms"
definition "THEN = Thm_THEN"
definition "simplified = Thm_simplified"
definition "symmetric = Thm_symmetric"
definition "where = Thm_where"
definition "of' = Thm_of"
definition "OF = Thm_OF"
definition "OF_l s l = List.fold (\<lambda>x acc. Thm_OF acc x) l s"
definition "simplified_l s l = List.fold (\<lambda>x acc. Thm_simplified acc x) l s"
end

lemmas [code] =
  T.thm_def
  T.thms_def
  T.THEN_def
  T.simplified_def
  T.symmetric_def
  T.where_def
  T.of'_def
  T.OF_def
  T.OF_l_def
  T.simplified_l_def

definition "Raw = Typ_base"
definition "Type_synonym' n = Type_synonym n []"
definition "Type_synonym'' n l f = Type_synonym n l (f l)"
definition "Term_annot' e s = Term_annot e (Typ_base s)"
definition "Term_lambda x = Term_lambdas [x]"
definition "Term_lam x f = Term_lambdas0 (Term_basic [x]) (f x)"
definition "Term_binop = Term_rewrite"
definition "term_binop s l = (case rev l of x # xs \<Rightarrow> List.fold (\<lambda>x. Term_binop x s) xs x)"
definition "term_binop' s l = (case rev l of x # xs \<Rightarrow> List.fold (\<lambda>x. Term_parenthesis o Term_binop x s) xs x)"
definition "Term_list' f l = Term_list (L.map f l)"
definition "Term_applys0 e l = Term_parenthesis (Term_apply e (L.map Term_parenthesis l))"
definition "Term_applys e l = Term_applys0 (Term_parenthesis e) l"
definition "Term_app e = Term_applys0 (Term_basic [e])"
definition "Term_case = Term_fun_case o Some"
definition "Term_function = Term_fun_case None"
definition "Term_term' = Term_term []"
definition "Lemmas_simp = Lemmas_simp_thm True"
definition "Lemmas_nosimp = Lemmas_simp_thm False"
definition "Consts_raw0 s l e o_arg =
       | Some arg \<Rightarrow>
           ap (if arg = 0 then
              else
definition "Overloading' n ty = Overloading n (Term_annot (Term_basic [n]) ty)"

locale M
begin
definition "Method_simp_add_del l_a l_d = Method_simp_add_del_split l_a l_d []"
definition "Method_subst_l = Method_subst False"

definition "rule' = Method_rule None"
definition "rule = Method_rule o Some"
definition "drule = Method_drule"
definition "erule = Method_erule"
definition "intro = Method_intro"
definition "elim = Method_elim"
definition "subst_l0 = Method_subst"
definition "subst_l = Method_subst_l"
definition insert where "insert = Method_insert o L.map Thms_single"
definition plus where "plus = Method_plus"
definition "option = Method_option"
definition or where "or = Method_or"
definition "meth_gen_simp = Method_simp_add_del [] []"
definition "meth_gen_simp_add2 l1 l2 = Method_simp_add_del (L.flatten [ L.map Thms_mult l1
                                                    , L.map (Thms_single o Thm_thm) l2])
                                           []"
definition "meth_gen_simp_add_del l1 l2 = Method_simp_add_del (L.map (Thms_single o Thm_thm) l1)
                                              (L.map (Thms_single o Thm_thm) l2)"
definition "meth_gen_simp_add_del_split l1 l2 l3 = Method_simp_add_del_split (L.map Thms_single l1)
                                                             (L.map Thms_single l2)
                                                             (L.map Thms_single l3)"
definition "meth_gen_simp_add_split l1 l2 = Method_simp_add_del_split (L.map Thms_single l1)
                                                      []
                                                      (L.map Thms_single l2)"
definition "meth_gen_simp_only l = Method_simp_only (L.map Thms_single l)"
definition "meth_gen_simp_only' l = Method_simp_only (L.map Thms_mult l)"
definition "meth_gen_simp_add0 l = Method_simp_add_del (L.map Thms_single l) []"
definition "simp = Method_one meth_gen_simp"
definition "simp_add2 l1 l2 = Method_one (meth_gen_simp_add2 l1 l2)"
definition "simp_add_del l1 l2 = Method_one (meth_gen_simp_add_del l1 l2)"
definition "simp_add_del_split l1 l2 l3 = Method_one (meth_gen_simp_add_del_split l1 l2 l3)"
definition "simp_add_split l1 l2 = Method_one (meth_gen_simp_add_split l1 l2)"
definition "simp_only l = Method_one (meth_gen_simp_only l)"
definition "simp_only' l = Method_one (meth_gen_simp_only' l)"
definition "simp_add0 l = Method_one (meth_gen_simp_add0 l)"
definition "simp_add = simp_add2 []"
definition "simp_all = Method_all meth_gen_simp"
definition "simp_all_add l = Method_all (meth_gen_simp_add2 [] l)"
definition "simp_all_only l = Method_all (meth_gen_simp_only l)"
definition "simp_all_only' l = Method_all (meth_gen_simp_only' l)"
definition "auto_simp_add2 l1 l2 = Method_auto_simp_add_split (L.flatten [ L.map Thms_mult l1
                                                                , L.map (Thms_single o Thm_thm) l2]) []"
definition "auto_simp_add_split l = Method_auto_simp_add_split (L.map Thms_single l)"
definition "rename_tac = Method_rename_tac"
definition "case_tac = Method_case_tac"
definition "blast = Method_blast"
definition "clarify = Method_clarify"
definition "metis = Method_metis []"
definition "metis0 = Method_metis"

definition "auto_simp_add = auto_simp_add2 []"
definition "auto = auto_simp_add []"
end

lemmas [code] =
  M.Method_simp_add_del_def
  M.Method_subst_l_def
  M.rule'_def
  M.rule_def
  M.drule_def
  M.erule_def
  M.intro_def
  M.elim_def
  M.subst_l0_def
  M.subst_l_def
  M.insert_def
  M.plus_def
  M.option_def
  M.or_def
  M.meth_gen_simp_def
  M.meth_gen_simp_add2_def
  M.meth_gen_simp_add_del_def
  M.meth_gen_simp_add_del_split_def
  M.meth_gen_simp_add_split_def
  M.meth_gen_simp_only_def
  M.meth_gen_simp_only'_def
  M.meth_gen_simp_add0_def
  M.simp_def
  M.simp_add2_def
  M.simp_add_del_def
  M.simp_add_del_split_def
  M.simp_add_split_def
  M.simp_only_def
  M.simp_only'_def
  M.simp_add0_def
  M.simp_add_def
  M.simp_all_def
  M.simp_all_add_def
  M.simp_all_only_def
  M.simp_all_only'_def
  M.auto_simp_add2_def
  M.auto_simp_add_split_def
  M.rename_tac_def
  M.case_tac_def
  M.blast_def
  M.clarify_def
  M.metis_def
  M.metis0_def
  M.subst_asm_def
  M.subst_def
  M.auto_simp_add_def
  M.auto_def

definition "ty_arrow l = (case rev l of x # xs \<Rightarrow> List.fold Ty_arrow xs x)"

locale C 
begin
definition "done = Command_done"
definition "by = Command_by"
definition "sorry = Command_sorry"
definition "apply_end = Command_apply_end"
definition "apply = Command_apply"
definition "using = Command_using o L.map Thms_single"
definition "unfolding = Command_unfolding o L.map Thms_single"
definition "let' = Command_let"
definition "fix_let = Command_fix_let"
definition "fix l = Command_fix_let l [] None []"
definition "have n = Command_have n False"
definition "have0 = Command_have"
end

lemmas [code] =
  C.done_def
  C.by_def
  C.sorry_def
  C.apply_end_def
  C.apply_def
  C.using_def
  C.unfolding_def
  C.let'_def
  C.fix_let_def
  C.fix_def
  C.have_def
  C.have0_def

fun cross_abs_aux where
   "cross_abs_aux f l x = (\<lambda> (Suc n, Abs s _ t) \<Rightarrow> f s (cross_abs_aux f (s # l) (n, t))
                         | (_, e) \<Rightarrow> Term_term l e)
                         x"

definition "cross_abs f n l = cross_abs_aux f [] (n, l)"


definition "map_lemma f = (\<lambda> Theory_lemma x \<Rightarrow> Theory_lemma (f x)
                           | x \<Rightarrow> x)"

end
