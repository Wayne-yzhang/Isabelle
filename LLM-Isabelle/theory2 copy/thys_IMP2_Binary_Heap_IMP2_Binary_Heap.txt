theory IMP2_Binary_Heap
  imports IMP2.IMP2 IMP2.IMP2_Aux_Lemmas
begin

procedure_spec sift_up (heap, l, r, x) returns heap
  assumes "is_heap_except_up (\<le>) heap l r x \<and> bounded l r x"
    ensures "is_heap (\<le>) heap l\<^sub>0 r\<^sub>0 \<and>
             arr_mset heap\<^sub>0 l\<^sub>0 r\<^sub>0 = arr_mset heap l\<^sub>0 r\<^sub>0 \<and>
             heap\<^sub>0 = heap on - {l\<^sub>0..<r\<^sub>0}"
  for heap[] l x r
  apply vcg_cs
  apply(intro conjI)
  subgoal using parent_lower_bound sift_up_step by blast
  subgoal using parent_lower_bound by blast
  subgoal using parent_bounds by blast
  subgoal using parent_bounds by (simp add: mset_ran_swap)
  subgoal using swap_parent_eq_on by blast
  subgoal using parent_upper_bound by simp
  subgoal unfolding is_heap_except_up_def is_partial_heap_def
    by (metis le_less not_less parent_lower_bound)
  done

      invariant with @{const "sift_up"}.\<close>
  defines \<open>
    heap[r] = el;
    x = r;
    r = r + 1;
    heap = sift_up(heap, l, r, x)
  \<close>
subsubsection \<open>\<open>sift_down\<close>, \<open>del_min\<close> and \<open>make_heap\<close>\<close>
text \<open>The next heap functions are \<open>del_min\<close> and \<open>make_heap\<close>, which both use \<open>sift_down\<close> to 
      restore/establish the heap invariant. \<open>sift_down\<close> is proven first (this time without 
      additional auxiliary lemmas) followed by \<open>del_min\<close> and \<open>make_heap\<close>.\<close>
text \<open>\<open>sift_down\<close> restores the heap invariant, that is only violated at the current position, by 
      @variant \<open>r - x\<close>
      @invariant \<open>is_partial_heap_except_down (\<le>) heap l x\<^sub>0 r x \<and>
                  x\<^sub>0 \<le> x \<and> x \<le> r \<and> lc = l_child l x \<and> rc = r_child l x \<and>
                  arr_mset heap\<^sub>0 l r = arr_mset heap l r \<and>
                  heap\<^sub>0 = heap on - {l..<r}\<close>
