theory Functor
imports TypeApp Coerce
keywords "tycondef" :: thy_defn and "\<cdot>"
begin


Haskell class \texttt{Functor}. For technical reasons, we split the
preserve the identity function, and not function composition.\<close>
text \<open>The Haskell class \texttt{Functor f} fixes a polymorphic
function \texttt{fmap :: (a -> b) -> f a -> f b}. Since functions in
Isabelle type classes can only mention one type variable, we have the
of the polymorphic types to be the universal domain. We will use the

@{thm isodefl_def [of f t, no_vars]}.\<close>
text \<open>The \<open>functor\<close> class extends \<open>prefunctor\<close> with an
axiom stating that \<open>fmapU\<close> preserves composition.\<close>
text \<open>We define the polymorphic \<open>fmap\<close> by coercion from \<open>fmapU\<close>, then we proceed to derive the polymorphic versions of the
  defining new \<open>tycon\<close> instances. The \<open>tycondef\<close> command
  \<open>prefunctor\<close> instance for each new type. (The user must
  provide a proof of the composition law to obtain a \<open>functor\<close>
