theory  
  FTP_WithPolicy
  imports 
    FTP 
begin


definition POL :: "'a \<Rightarrow> 'a"   where  "POL x = x"

fun FTP_STP ::
  "((id \<rightharpoonup> port), adr\<^sub>i\<^sub>p, msg) FWStateTransitionP"
  where
 "FTP_STP (i,s,d,ftp_port_request pr) (ports, policy) = 
  (if p_accept (i,s,d,ftp_port_request pr) policy then
  Some (allow (POL ((allow_from_to_port pr (subnet_of d) (subnet_of s)) \<Oplus> policy)),
 ( (ports(i\<mapsto>pr)),(allow_from_to_port pr (subnet_of d) (subnet_of s)) 
                                 \<Oplus> policy))       
  else (Some (deny (POL policy),(ports,policy))))"

 |"FTP_STP (i,s,d,ftp_close) (ports,policy) = 
  (if (p_accept (i,s,d,ftp_close) policy) then 
 case ports i of 
  Some pr \<Rightarrow>
       Some(allow (POL (deny_from_to_port pr (subnet_of d) (subnet_of s) \<Oplus> policy)),
        ports(i:=None),
        deny_from_to_port pr (subnet_of d) (subnet_of s) \<Oplus> policy)
 |None \<Rightarrow>Some(allow (POL policy), ports, policy)
       else Some (deny (POL policy), ports, policy))"
  |"FTP_STP p x =  (if p_accept p (snd x) 
                   then Some (allow (POL (snd x)),((fst x),snd x)) 
                   else Some (deny (POL (snd x)),(fst x,snd x)))"
end
