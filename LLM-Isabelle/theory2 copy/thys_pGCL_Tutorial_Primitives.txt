theory Primitives imports "../pGCL" begin




datatype coin = Heads | Tails

record coins =
  a :: coin
  b :: coin


lemma
  "Apply (\<lambda>s. s \<lparr> a := Heads \<rparr>) = (a := (\<lambda>s. Heads))"
  by(simp)




lemma
  "\<And>x. \<guillemotleft>\<lambda>s. b s = x\<guillemotright> \<tturnstile> wp (a := b) \<guillemotleft>\<lambda>s. a s = x\<guillemotright>"
  by(pvcg, simp add:o_def)




lemma
  by(pvcg, simp add:o_def)


definition
  flip_a :: "real \<Rightarrow> coins prog"
where
  "flip_a p = a := (\<lambda>_. Heads) \<^bsub>(\<lambda>s. p)\<^esub>\<oplus> a := (\<lambda>_. Tails)"

lemma
  "(\<lambda>s. 1/2) = wp (flip_a (1/2)) \<guillemotleft>\<lambda>s. a s = Heads\<guillemotright>"
  unfolding flip_a_def
  by(simp add:wp_eval o_def)



lemma
  "\<lambda>s. 1/3 \<tturnstile> wp (flip_a (2/3) \<Sqinter> flip_a (1/3)) \<guillemotleft>\<lambda>s. a s = Heads\<guillemotright>"
  unfolding flip_a_def
  by pvcg



definition
  flip_b :: "real \<Rightarrow> coins prog"
where
  "flip_b p = b := (\<lambda>_. Heads) \<^bsub>(\<lambda>s. p)\<^esub>\<oplus> b := (\<lambda>_. Tails)"

lemma
  "(\<lambda>s. 1/4) = wp (flip_a (1/2) ;; flip_b (1/2))
                  \<guillemotleft>\<lambda>s. a s = Heads \<and> b s = Heads\<guillemotright>"
  unfolding flip_a_def flip_b_def
  by(simp add:wp_eval o_def)


record dice =
  red  :: nat
  blue :: nat

definition Puniform :: "'a set \<Rightarrow> ('a \<Rightarrow> real)"
where "Puniform S = (\<lambda>x. if x \<in> S then 1 / card S else 0)"

lemma Puniform_in:
  "x \<in> S \<Longrightarrow> Puniform S x = 1 / card S"
  by(simp add:Puniform_def)

lemma Puniform_out:
  "x \<notin> S \<Longrightarrow> Puniform S x = 0"
  by(simp add:Puniform_def)

lemma supp_Puniform:
  "finite S \<Longrightarrow> supp (Puniform S) = S"
  by(auto simp:Puniform_def supp_def)


lemma
  "(\<lambda>s. 7/2) = wp (bind v at (\<lambda>s. Puniform {1..6} v) in red := (\<lambda>_. v)) red"
  by(simp add:wp_eval supp_Puniform sum.atLeast_Suc_atMost Puniform_in)


lemma
  "(\<lambda>s. 7) = wp ((bind v at (\<lambda>s. Puniform {1..6} v) in red := (\<lambda>s. v)) ;;
                 (bind v at (\<lambda>s. Puniform {1..6} v) in blue := (\<lambda>s. v)))
                (\<lambda>s. red s + blue s)"
  by(simp add:wp_eval supp_Puniform sum.atLeast_Suc_atMost Puniform_in)

end
