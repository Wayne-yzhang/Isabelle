theory Simple_Game
imports
  Main
begin

locale simple_game =
fixes
begin




  for initial :: 's where


  for f initial where
  p0move:
  p1move:

lemma strategy0_step:
  assumes
  shows
  using assms
  by (induct rule: plays_for_0strategy.cases, auto)

  for f initial where
  p0move:
  p1move:




lemma strategy0_plays_subset:
  using assms by (induct rule: plays_for_0strategy.induct, auto simp add: plays.intros)
lemma strategy1_plays_subset:
  using assms by (induct rule: plays_for_1strategy.induct, auto simp add: plays.intros)

lemma no_empty_plays:
  using assms plays.cases by blast





lemma stuck_player0_win:
proof -
  proof -
    fix pl
  qed
  thus ?thesis using assms(1)
    by (metis list.sel(1) player0_winning_strategy_def player0_wins_def player1_wins_immediately_def
        sound_0strategy_def strategy0_plays_subset)
qed


end
end
