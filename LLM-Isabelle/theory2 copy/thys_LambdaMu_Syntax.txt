theory Syntax
  imports Main
begin


datatype type = 
     Iota
    | Fun type type (infixr "\<rightarrow>" 200)

  
datatype trm =
      LVar nat    ("`_" [100] 100)
    | Lbd type trm ("\<lambda>_:_" [0, 60] 60)
    | App trm trm (infix "\<degree>" 60)
    | Mu type cmd ("\<mu>_:_" [0, 60] 60)
and cmd = 
      MVar nat trm ("<_>_" [0, 60] 60)
      
datatype ctxt = 
  ContextEmpty ("\<diamond>") |
  ContextApp ctxt trm (infixl "\<^sup>\<bullet>" 75)
  
primrec ctxt_app :: "ctxt \<Rightarrow> ctxt \<Rightarrow> ctxt" (infix "." 60) where
  "\<diamond> . F = F" |
  "(E \<^sup>\<bullet> t) . F = (E . F) \<^sup>\<bullet> t"
  
fun is_val :: "trm \<Rightarrow> bool" where
  "is_val (\<lambda> T : v) = True" |
  "is_val _ = False"

  
end
