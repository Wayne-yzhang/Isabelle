theory Cars
  imports Main
begin


typedef cars = "{n::nat. True} " by blast 

locale cars 
begin


lemma at_least_two_cars_exists:"\<exists>c d ::cars . c\<noteq>d" 
proof -
  have "(0::nat) \<noteq> 1" by simp
  then have "Abs_cars (0::nat) \<noteq> Abs_cars(1) " by (simp add:Abs_cars_inject) 
  thus ?thesis by blast
qed

lemma infinite_cars:"infinite {c::cars . True}" 
proof -
  have "infinite {n::nat. True}" by auto 
  then show ?thesis 
    by (metis UNIV_def finite_imageI type_definition.Rep_range type_definition_cars)
qed

end
end
