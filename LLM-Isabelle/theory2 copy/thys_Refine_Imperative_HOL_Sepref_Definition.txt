theory Sepref_Definition
imports Sepref_Rules "Lib/Pf_Mono_Prover" "Lib/Term_Synth"
keywords "sepref_definition" :: thy_goal
      and "sepref_thm" :: thy_goal
begin
  declare [[cd_patterns "hn_refine _ ?f _ _ _"]]

  lemma heap_fixp_codegen:
    assumes DEF: "f \<equiv> heap.fixp_fun cB"
    assumes M: "(\<And>x. mono_Heap (\<lambda>f. cB f x))"
    shows "f x = cB f x"
    unfolding DEF
    apply (rule fun_cong[of _ _ x])
    apply (rule heap.mono_body_fixp)
    apply fact
    done



  setup Sepref_Extraction.setup 


  consts UNSPEC::'a  

  abbreviation hfunspec 
    :: "('a \<Rightarrow> 'b \<Rightarrow> assn) \<Rightarrow> ('a \<Rightarrow> 'b \<Rightarrow> assn)\<times>('a \<Rightarrow> 'b \<Rightarrow> assn)" 
    ("(_\<^sup>?)" [1000] 999)
    where "R\<^sup>? \<equiv> hf_pres R UNSPEC"

  definition SYNTH :: "('a \<Rightarrow> 'r nres) \<Rightarrow> (('ai \<Rightarrow>'ri Heap) \<times> ('a \<Rightarrow> 'r nres)) set \<Rightarrow> bool"
    where "SYNTH f R \<equiv> True"

  definition [simp]: "CP_UNCURRY _ _ \<equiv> True"
  definition [simp]: "INTRO_KD _ _ \<equiv> True"
  definition [simp]: "SPEC_RES_ASSN _ _ \<equiv> True"

  lemma [synth_rules]: "CP_UNCURRY f g" by simp
  lemma [synth_rules]: "CP_UNCURRY (uncurry0 f) (uncurry0 g)" by simp
  lemma [synth_rules]: "CP_UNCURRY f g \<Longrightarrow> CP_UNCURRY (uncurry f) (uncurry g)" by simp

  lemma [synth_rules]: "\<lbrakk>INTRO_KD R1 R1'; INTRO_KD R2 R2'\<rbrakk> \<Longrightarrow> INTRO_KD (R1*\<^sub>aR2) (R1'*\<^sub>aR2')" by simp
  lemma [synth_rules]: "INTRO_KD (R\<^sup>?) (hf_pres R k)" by simp
  lemma [synth_rules]: "INTRO_KD (R\<^sup>k) (R\<^sup>k)" by simp
  lemma [synth_rules]: "INTRO_KD (R\<^sup>d) (R\<^sup>d)" by simp

  lemma [synth_rules]: "SPEC_RES_ASSN R R" by simp
  lemma [synth_rules]: "SPEC_RES_ASSN UNSPEC R" by simp
  
  lemma synth_hnrI:
    "\<lbrakk>CP_UNCURRY fi f; INTRO_KD R R'; SPEC_RES_ASSN S S'\<rbrakk> \<Longrightarrow> SYNTH_TERM (SYNTH f ([P]\<^sub>a R\<rightarrow>S)) ((fi,SDUMMY)\<in>SDUMMY,(fi,f)\<in>([P]\<^sub>a R'\<rightarrow>S'))" 
    by (simp add: SYNTH_def)

term starts_with


end
