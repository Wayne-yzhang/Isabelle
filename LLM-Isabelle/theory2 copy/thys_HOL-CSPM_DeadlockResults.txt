theory DeadlockResults
  imports CSPM
begin


      This chapter contains several results about deadlock notion, and concludes
      with a proof of the theorem we just mentioned.\<close>
section \<open>Unfolding Lemmas for the Projections of \<^const>\<open>DF\<close> and \<^const>\<open>DF\<^sub>S\<^sub>K\<^sub>I\<^sub>P\<close>\<close>
text \<open>\<^const>\<open>DF\<close> and \<^const>\<open>DF\<^sub>S\<^sub>K\<^sub>I\<^sub>P\<close> naturally appear when we work around \<^const>\<open>deadlock_free\<close>
      and \<^const>\<open>deadlock_free\<^sub>S\<^sub>K\<^sub>I\<^sub>P\<close> notions (because
   \<longleftrightarrow> (DF (UNIV::'\<alpha> set) \<sqsubseteq>\<^sub>F\<^sub>D (DF UNIV \<lbrakk>S\<rbrakk> DF UNIV))\<close> (is \<open>?lhs \<longleftrightarrow> ?rhs\<close>)
  show ?rhs by (fold deadlock_free_def, rule \<open>?lhs\<close>[rule_format])
            by (intro allI impI trans_FD[OF \<open>?rhs\<close>]) (rule mono_Sync_FD)
text \<open>From this general equivalence on \<^const>\<open>Sync\<close>, we immediately obtain the equivalence
      on \<^term>\<open>(A ||| B)\<close>: @{thm deadlock_free_of_Sync_iff_DF_FD_DF_Sync_DF[of \<open>{}\<close>]}.\<close>
subsection \<open>\<^const>\<open>STOP\<close> and \<^const>\<open>SKIP\<close> Synchronized with \<^term>\<open>DF A\<close>\<close>
  \<open>(DF A \<sqsubseteq>\<^sub>F\<^sub>D DF A \<lbrakk>S\<rbrakk> P) \<longleftrightarrow> A \<inter> S = {}\<close>
  if P_disj: \<open>P = STOP \<or> P = SKIP\<close>
  { assume a1: \<open>DF A \<sqsubseteq>\<^sub>F\<^sub>D DF A \<lbrakk>S\<rbrakk> P\<close> and a2: \<open>A \<inter> S \<noteq> {}\<close>
    from a2 obtain x where f1: \<open>x \<in> A\<close> and f2: \<open>x \<in> S\<close> by blast
    have \<open>DF A \<lbrakk>S\<rbrakk> P \<sqsubseteq>\<^sub>F\<^sub>D DF {x} \<lbrakk>S\<rbrakk> P\<close>
    also have \<open>\<dots> = STOP\<close>
  thus \<open>DF A \<sqsubseteq>\<^sub>F\<^sub>D DF A \<lbrakk>S\<rbrakk> P \<Longrightarrow> A \<inter> S = {}\<close> by blast
  have D_P: \<open>\<D> P = {}\<close> using D_SKIP D_STOP P_disj by blast
  { assume a1: \<open>\<not> DF A \<sqsubseteq>\<^sub>F\<^sub>D DF A \<lbrakk>S\<rbrakk> P\<close> and a2: \<open>A \<inter> S = {}\<close>
    proof (cases \<open>A = {}\<close>)
      assume \<open>A = {}\<close>
      assume a3: \<open>A \<noteq> {}\<close>
      have falsify: \<open>(a, (X \<union> Y) \<inter> insert tick (ev ` S) \<union> X \<inter> Y) \<notin> \<F> (DF A) \<Longrightarrow>
                     (t, X) \<in> \<F> (DF A) \<Longrightarrow> (u, Y) \<in> \<F> P \<Longrightarrow> 
                     a setinterleaves ((t, u), insert tick (ev ` S)) \<Longrightarrow> False\<close> for a t u X Y
        from Cons(4) have f1: \<open>u = []\<close>
  thus \<open>A \<inter> S = {} \<Longrightarrow> DF A \<sqsubseteq>\<^sub>F\<^sub>D DF A \<lbrakk>S\<rbrakk> P\<close> by blast
lemma DF_Sync_STOP_or_SKIP_FD_DF: \<open>DF A \<lbrakk>S\<rbrakk> P \<sqsubseteq>\<^sub>F\<^sub>D DF A\<close> 
  if P_disj: \<open>P = STOP \<or> P = SKIP\<close> and empty_inter: \<open>A \<inter> S = {}\<close>
proof (cases \<open>A = {}\<close>)
  from P_disj show \<open>A = {} \<Longrightarrow> DF A \<lbrakk>S\<rbrakk> P \<sqsubseteq>\<^sub>F\<^sub>D DF A\<close>
  assume \<open>A \<noteq> {}\<close>
    show \<open>adm (\<lambda>a. a \<lbrakk>S\<rbrakk> P \<sqsubseteq>\<^sub>F\<^sub>D DF A)\<close> by (simp add: cont2mono)
    show \<open>\<bottom> \<lbrakk>S\<rbrakk> P \<sqsubseteq>\<^sub>F\<^sub>D DF A\<close> by (metis BOT_leFD Sync_BOT Sync_commute)
    have \<open>(\<sqinter>a \<in> A \<rightarrow> x) \<lbrakk>S\<rbrakk> P \<sqsubseteq>\<^sub>F\<^sub>D (a \<rightarrow> DF A)\<close> if \<open>a \<in> A\<close> for a
                      [of \<open>{a}\<close>, simplified, OF that] idem_FD]])
                    [of \<open>{a}\<close> _ \<open>{}\<close> \<open>\<lambda>a. x\<close>, 
    thus ?case by (subst DF_unfold, subst FD_Mndetprefix_iff; simp add: \<open>A \<noteq> {}\<close>)
subsection \<open>Finally, \<^term>\<open>deadlock_free (P ||| Q)\<close>\<close>
theorem DF_F_DF_Sync_DF: \<open>DF (A \<union> B::'\<alpha> set) \<sqsubseteq>\<^sub>F DF A \<lbrakk>S\<rbrakk> DF B\<close>
  if  nonempty: \<open>A \<noteq> {} \<and> B \<noteq> {}\<close>
 and intersect_hyp: \<open>B \<inter> S = {} \<or> (\<exists>y. B \<inter> S = {y} \<and> A \<inter> S \<subseteq> {y})\<close>
  assume * : \<open>(t, X) \<in> \<F> (DF A)\<close> \<open>(u, Y) \<in> \<F> (DF B)\<close> 
             \<open>v setinterleaves ((t, u), insert tick (ev ` S))\<close>
  define \<beta> where \<open>\<beta> \<equiv> (t, insert tick (ev ` S), u)\<close>
  with * have \<open>(fst \<beta>, X) \<in> \<F> (DF A)\<close> \<open>(snd (snd \<beta>), Y) \<in> \<F> (DF B)\<close>
              \<open>v \<in> setinterleaving \<beta>\<close> by simp_all
  thus \<open>(v, (X \<union> Y) \<inter> insert tick (ev ` S) \<union> X \<inter> Y) \<in> \<F> (DF (A \<union> B))\<close>
    hence mt_a: \<open>v = []\<close> using emptyLeftProperty by blast
    consider \<open>B \<inter> S = {}\<close> | \<open>\<exists>y. B \<inter> S = {y} \<and> A \<inter> S \<subseteq> {y}\<close> by blast
      then obtain y where f12: \<open>B \<inter> S = {y}\<close> and \<open>A \<inter> S \<subseteq> {y}\<close> by blast
      from this(2) consider \<open>A \<inter> S = {}\<close> | \<open>A \<inter> S = {y}\<close> by blast
    have * : \<open>y \<notin> Z\<close> \<open>([], X) \<in> \<F> (DF A)\<close> \<open>(u, Y) \<in> \<F> (DF B)\<close> \<open>v = y # u\<close>
    have ** : \<open>u setinterleaves (([], u), Z)\<close>
    from "2.prems"(2) obtain b where  *** : \<open>b \<in> B\<close> \<open>y = ev b\<close>
    have * : \<open>x \<notin> Z\<close> \<open>(t, X) \<in> \<F> (DF A)\<close> \<open>([], Y) \<in> \<F> (DF B)\<close> \<open>v = x # t\<close>
    have ** : \<open>t setinterleaves ((t, []), Z)\<close>
    from "3.prems"(1) obtain a where  *** : \<open>a \<in> A\<close> \<open>x = ev a\<close>
    consider \<open>x \<in> Z\<close> \<open>y \<in> Z\<close> | \<open>x \<in> Z\<close> \<open>y \<notin> Z\<close>
          |  \<open>x \<notin> Z\<close> \<open>y \<in> Z\<close> | \<open>x \<notin> Z\<close> \<open>y \<notin> Z\<close> by blast
      assume hyps: \<open>x \<in> Z\<close> \<open>y \<in> Z\<close>
      obtain v' where * : \<open>x = y\<close> \<open>(t, X) \<in> \<F> (DF A)\<close>
                          \<open>(u, Y) \<in> \<F> (DF B)\<close> \<open>v = x # v'\<close>
      have ** : \<open>v' setinterleaves ((t, u), Z)\<close>
      from "4.prems"(1) obtain a where  *** : \<open>a \<in> A\<close> \<open>x = ev a\<close>
      assume hyps: \<open>x \<in> Z\<close> \<open>y \<notin> Z\<close>
      obtain v' where * : \<open>(x # t, X) \<in> \<F> (DF A)\<close> \<open>(u, Y) \<in> \<F> (DF B)\<close>
                          \<open>v = y # v'\<close> \<open>v' setinterleaves ((x # t, u), Z)\<close>
      assume hyps: \<open>x \<notin> Z\<close> \<open>y \<in> Z\<close>
      obtain v' where * : \<open>(t, X) \<in> \<F> (DF A)\<close> \<open>(y # u, Y) \<in> \<F> (DF B)\<close>
                          \<open>v = x # v'\<close> \<open>v' setinterleaves ((t, y # u), Z)\<close>
      assume hyps: \<open>x \<notin> Z\<close> \<open>y \<notin> Z\<close>
        where \<open>v = x # v'  \<and> v'  setinterleaves ((t, y # u), Z) \<or> 
               v = y # v'' \<and> v'' setinterleaves ((x # t, u), Z)\<close>
              (is \<open>?left \<or> ?right\<close>) by blast
      then consider \<open>?left\<close> | \<open>?right\<close> by fast
        assume \<open>?left\<close>
             \<open>?left\<close>[THEN conjunct2]]
                        (auto simp add:  \<open>?left\<close> nonempty)
        assume \<open>?right\<close>
             \<open>?right\<close>[THEN conjunct2]]
                        (auto simp add: \<open>?right\<close> nonempty)
  \<open>A \<noteq> {} \<and> B \<noteq> {} \<Longrightarrow> B \<inter> S = {} \<or> (\<exists>y. B \<inter> S = {y} \<and> A \<inter> S \<subseteq> {y}) \<Longrightarrow> 
   DF (A \<union> B) \<sqsubseteq>\<^sub>F\<^sub>D DF A \<lbrakk>S\<rbrakk> DF B\<close>
  \<open>DF (A \<union> B) \<sqsubseteq>\<^sub>F\<^sub>D DF A \<lbrakk>S\<rbrakk> DF B \<longleftrightarrow> 
   (     if A = {} then B \<inter> S = {}
    else if B = {} then A \<inter> S = {}
    else A \<inter> S = {} \<or> (\<exists>a. A \<inter> S = {a} \<and> B \<inter> S \<subseteq> {a}) \<or>
         B \<inter> S = {} \<or> (\<exists>b. B \<inter> S = {b} \<and> A \<inter> S \<subseteq> {b}))\<close>
  (is \<open>?FD_ref \<longleftrightarrow> (     if A = {} then B \<inter> S = {}
                    else if B = {} then A \<inter> S = {} 
                    else ?cases)\<close>)
  { assume \<open>A \<noteq> {}\<close> and \<open>B \<noteq> {}\<close> and ?FD_ref and \<open>\<not> ?cases\<close>
    from \<open>\<not> ?cases\<close>[simplified] 
    obtain a and b where \<open>a \<in> A\<close> \<open>a \<in> S\<close> \<open>b \<in> B\<close> \<open>b \<in> S\<close> \<open>a \<noteq> b\<close> by blast
    have \<open>DF A \<lbrakk>S\<rbrakk> DF B \<sqsubseteq>\<^sub>F\<^sub>D (a \<rightarrow> DF A) \<lbrakk>S\<rbrakk> (b \<rightarrow> DF B)\<close>
          subst Mndetprefix_unit[symmetric], simp add: \<open>a \<in> A\<close> \<open>b \<in> B\<close>)
    also have \<open>\<dots> = STOP\<close> by (simp add: \<open>a \<in> S\<close> \<open>a \<noteq> b\<close> \<open>b \<in> S\<close> prefix_Sync1)
      by (metis DF_Univ_freeness Un_empty \<open>A \<noteq> {}\<close>
                trans_FD[OF \<open>?FD_ref\<close>] non_deadlock_free_STOP)
    apply (cases \<open>A = {}\<close>, simp,
    apply (cases \<open>B = {}\<close>, simp,
  \<open>(\<forall>a \<in> A. X a \<inter> S = {} \<or> (\<forall>b \<in> A. \<exists>y. X a \<inter> S = {y} \<and> X b \<inter> S \<subseteq> {y}))
   \<longleftrightarrow> (\<forall>a \<in> A. \<forall>b \<in> A. \<exists>y. (X a \<union> X b) \<inter> S \<subseteq> {y})\<close>
 \<comment> \<open>this is the reason we write ugly\_hyp this way\<close>
  \<open>DF (\<Union> x \<in> (insert a A). X x) \<sqsubseteq>\<^sub>F\<^sub>D \<^bold>\<lbrakk>S\<^bold>\<rbrakk> x \<in># mset_set (insert a A). DF (X x)\<close>
  if fin: \<open>finite A\<close> and nonempty: \<open>X a \<noteq> {}\<close> \<open>\<forall>b \<in> A. X b \<noteq> {}\<close>
 and ugly_hyp: \<open>\<forall>b \<in> A. X b \<inter> S = {} \<or> (\<exists>y. X b \<inter> S = {y} \<and> X a \<inter> S \<subseteq> {y})\<close>
               \<open>\<forall>b \<in> A. \<forall>c \<in> A. \<exists>y. (X b \<union> X c) \<inter> S \<subseteq> {y}\<close>
  have \<open>DF (\<Union> (X ` insert a A)) \<sqsubseteq>\<^sub>F\<^sub>D (\<^bold>\<lbrakk>S\<^bold>\<rbrakk> x \<in># mset_set (insert a A). DF (X x)) \<and>
        (\<forall>b\<in>A. X b \<inter> S = {} \<or> (\<exists>y. X b \<inter> S = {y} \<and> \<Union> (X ` insert a A) \<inter> S \<subseteq> {y}))\<close>
  \<comment> \<open>We need to add this in our induction\<close>
                      [of a \<open>insert a A\<close>, simplified, OF fin, 
      show \<open>DF (X b \<union> \<Union> (X ` insert a A')) \<sqsubseteq>\<^sub>F\<^sub>D
            \<^bold>\<lbrakk>S\<^bold>\<rbrakk> a\<in>#mset_set (insert b (insert a A')).  DF (X a)\<close>
      show \<open>\<forall>c \<in> A. X c \<inter> S = {} \<or> (\<exists>y. X c \<inter> S = {y} \<and> 
                    (X b \<union> \<Union> (X ` insert a A')) \<inter> S \<subseteq> {y})\<close>
  \<open>\<lbrakk>finite A; \<forall>a \<in> A. X a \<noteq> {}; \<forall>a \<in> A. \<forall>b \<in> A. \<exists>y. (X a \<union> X b) \<inter> S \<subseteq> {y}\<rbrakk>
   \<Longrightarrow> DF (\<Union> a \<in> A. X a) \<sqsubseteq>\<^sub>F\<^sub>D \<^bold>\<lbrakk>S\<^bold>\<rbrakk> a \<in># mset_set A. DF (X a)\<close>
       DF_FD_DF_MultiSync_DF'[where S = \<open>{}\<close>, simplified]
lemma \<open>DF {a} = DF {a} \<lbrakk>S\<rbrakk> STOP \<longleftrightarrow> a \<notin> S\<close>
lemma \<open>DF {a} \<lbrakk>S\<rbrakk> STOP = STOP \<longleftrightarrow> a \<in> S\<close> 
corollary DF_FD_DF_Inter_DF: \<open>DF (A::'\<alpha> set) \<sqsubseteq>\<^sub>F\<^sub>D DF A ||| DF A\<close>
  \<open>DF UNIV \<sqsubseteq>\<^sub>F\<^sub>D DF UNIV ||| DF UNIV\<close>
  \<open>deadlock_free P \<Longrightarrow> deadlock_free Q \<Longrightarrow> deadlock_free (P ||| Q)\<close>
  \<open>M \<noteq> {#} \<Longrightarrow> \<forall>p \<in># M. deadlock_free (P p) \<Longrightarrow>
   deadlock_free (\<^bold>|\<^bold>|\<^bold>| p \<in># M. P p)\<close>
