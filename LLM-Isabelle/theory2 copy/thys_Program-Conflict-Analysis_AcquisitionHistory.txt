theory AcquisitionHistory
imports ConsInterleave
begin

  to decide consistent interleavability. In this work, we use this concept for reentrant monitors.
  As in Section~\ref{thy:ConsInterleave}, we encode monitor usage information in pairs of sets of monitors, and regard lists of such pairs as (abstract) executions.
  An item @{term "(E,U)"} of such a list describes a sequence of steps of the concrete execution that first enters the monitors in @{term E} and then passes through the monitors in @{term U}. The monitors in @{term E} are
  never left by the execution. Note that due to the syntactic binding of monitors to the program structure, any execution of a single thread can be abstracted to a sequence of @{term "(E,U)"}-pairs. 
  Restricting the possible schedules (see Section \ref{thy:Normalization}) will allow us to also abstract executions reaching a single program point to a sequence of such pairs.

  there is a conflicting pair @{term "(m,m')"} of monitors, such that @{term e} enters (and never leaves) @{term m} and then uses @{term m'} and @{term e'} enters (and never leaves) @{term m'} and then uses @{term m}.  

  An acquisition history is a map from monitors to set of monitors. The acquisition history of an execution maps a monitor @{term m} that is allocated at the end of the execution to all monitors that are used after or in the 
  same step that finally enters @{term m}. Monitors that are not allocated at the end of an execution are mapped to the empty set. Though originally used for a setting without reentrant monitors, acquisition histories also work
  for our setting with reentrant monitors. 

  This theory contains the definition of acquisition histories and acquisition history interleavability, an ordering on acquisition histories that reflects the blocking potential of acquisition histories, 
  and a mapping function from paths to acquisition histories that is shown to be compatible with monitor consistent interleaving.\<close>
text \<open>Acquisition histories are modeled as functions from monitors to sets of monitors. Intuitively @{term "m'\<in>h m"} models that an execution finally is in @{term m}, and monitor @{term m'} has been used (i.e. passed or entered)
  after or at the same time @{term m} has been finally entered. By convention, we have @{term "m\<in>h m"} or @{term "h m = {}"}.
\<close>
text \<open>Two acquisition histories @{term h1} and @{term h2} are considered interleavable, iff there is no conflicting pair of monitors @{term m1} and @{term m2}, 
  where a pair of monitors @{term m1} and @{term m2} is called {\em conflicting} iff @{term m1} is used in @{term h2} after entering @{term m2} and, vice versa, @{term m2} is used in @{term h1} after entering @{term m1}.\<close>  
text \<open>From our convention, it follows (as expected) that the sets of entered monitors (lock-sets) of two interleavable acquisition histories are disjoint\<close>
text \<open>Of course, acquisition history interleavability is commutative\<close>
text \<open>Let's define the monitors of an acquisition history, as all monitors that occur in the acquisition history\<close>
text \<open>The element-wise subset-ordering on acquisition histories intuitively reflects the blocking potential: The bigger the acquisition history, the fewer acquisition histories are interleavable with it.\<close>
text \<open>Note that the Isabelle standard library automatically lifts the subset ordering to functions, so we need no explicit definition here.\<close>
\<comment> \<open>The ordering is compatible with interleavability, i.e.\ smaller acquisition histories are more likely to be interleavable.\<close>
text \<open>Next we define a function that abstracts from executions (lists of enter/use pairs) to acquisition histories\<close>
\<comment> \<open>@{term \<alpha>ah} generates valid acquisition histories\<close>
\<comment> \<open>Subwords generate smaller acquisition histories\<close>
      with mon_pl_ileq[OF take.hyps(2)] and \<open>a = b\<close>
      with take.hyps(3)[unfolded le_fun_def [where 'b="'a set"]] and \<open>a = b\<close>
text \<open>We can now prove the relation of monitor consistent interleavability and interleavability of the acquisition histories.\<close>
  \<comment> \<open>The lemma is shown by induction on the structure of the monitor consistent interleaving operator\<close>
  case empty show ?case by (simp add: ah_il_def) \<comment> \<open>The base case is trivial by the definition of @{term "([*])"}\<close>
  \<comment> \<open>Case: First step comes from the left word\<close>
  proof (rule ccontr) \<comment> \<open>We do a proof by contradiction\<close>
    \<comment> \<open>Assume there is a conflicting pair in the acquisition histories\<close>
    \<comment> \<open>It comes either from the first step or not\<close>
      \<comment> \<open>Case: One monitor of the conflicting pair is entered in the first step of the left path\<close>
      \<comment> \<open>Because the paths are consistently interleavable, the monitors entered in the first step must not occur in the other path\<close>
      \<comment> \<open>But this is a contradiction to being a conflicting pair\<close>
      \<comment> \<open>Case: The first monitor of the conflicting pair is entered after the first step of the left path\<close>
      \<comment> \<open>But this is a contradiction to the induction hypothesis, that says that the acquisition histories of the tail of the left path and the 
        right path are interleavable\<close>
  \<comment> \<open>Case: First step comes from the right word. This case is shown completely analogous\<close>
  \<comment> \<open>This lemma is shown by induction on the sum of the word lengths\<close>
  \<comment> \<open>To apply this induction in Isabelle, we have to rewrite the lemma a bit\<close>
      \<comment> \<open>We first rule out the cases that one of the words is empty\<close>
        \<comment> \<open>If the first word is empty, the lemma is trivial\<close>
          \<comment> \<open>If the second word is empty, the lemma is also trivial\<close>
          \<comment> \<open>The interesting case is if both words are not empty\<close>
          \<comment> \<open>In this case, we check whether the first step of one of the words can safely be executed without blocking any steps of the other word\<close>
            case True \<comment> \<open>The first step of the first word can safely be executed\<close>
            \<comment> \<open>From the induction hypothesis, we get that there is a consistent interleaving of the rest of the first word and the second word\<close>
            \<comment> \<open>And because the first step of the first word can be safely executed, we can prepend it to that consistent interleaving\<close>
              case True \<comment> \<open>The first step of the second word can safely be executed\<close>
              \<comment> \<open>This case is shown analogously to the latter one\<close>
              case False note C2=this \<comment> \<open>Neither first step can safely be executed. This is exactly the situation from that we can extract a conflicting pair\<close>
              \<comment> \<open>But by assumption, there are no conflicting pairs, thus we get a contradiction\<close>
text \<open>Finally, we can state the relationship between monitor consistent interleaving and interleaving of acquisition histories\<close>
text \<open>We define a function to update an acquisition history backwards. This function is useful for constructing acquisition histories in backward constraint systems.\<close>
text \<open>
  Intuitively, @{term "ah_update h (E,U) M m"} means to prepend a step @{term "(E,U)"} to the acquisition history @{term h} of a path that uses monitors @{term M}. Note that we need the extra parameter @{term M}, since
  an acquisition history does not contain information about the monitors that are used on a path before the first monitor that will not be left has been entered. 
\<close>
text \<open>The backward-update function is monotonic in the first and third argument as well as in the used monitors of the second argument. 
  Note that it is, in general, not monotonic in the entered monitors of the second argument.\<close>
