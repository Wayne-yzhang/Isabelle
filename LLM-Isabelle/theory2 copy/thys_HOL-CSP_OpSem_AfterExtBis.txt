theory  AfterExtBis
  imports After
begin




      In order to make the constructions available for these refinements, we
      will slightly modify the definition of AfterExt.\<close>
text \<open>If the event is \<^term>\<open>\<checkmark>\<close> we obtain \<^const>\<open>STOP\<close>
      anyway, even if the process was \<^term>\<open>\<bottom>\<close>. 
      that even if a process if diverging, after accepting \<^term>\<open>\<checkmark>\<close> it has to stop.\<close>
definition AfterExt :: \<open>['\<alpha> process, '\<alpha> event] \<Rightarrow> '\<alpha> process\<close> (infixl \<open>afterExt\<close> 77)
  where \<open>P afterExt e \<equiv> case e of ev x \<Rightarrow> P after x | \<checkmark> \<Rightarrow> STOP\<close>
lemma not_ready_AfterExt: \<open>e \<notin> ready_set P \<Longrightarrow> P afterExt e = STOP\<close>
  \<open>ready_set (P afterExt e) = (if e = \<checkmark> then {} else {a. e # [a] \<in> \<T> P})\<close>
subsection \<open>Projections\<close>
  \<open>\<F> (P afterExt e) = 
   (   if e \<in> ready_set P then {(tl s, X)| s X. (s, X) \<in> \<F> P \<and> s \<noteq> [] \<and> hd s = e}
     else {(s, X). s = []})\<close>
  (is \<open>_ = ?rhs\<close>)
  show \<open>e = ev x \<Longrightarrow> \<F> (P after x) = ?rhs\<close> for x
  show \<open>e = \<checkmark> \<Longrightarrow> \<F> STOP = ?rhs\<close>
lemma D_AfterExt: \<open>\<D> (P afterExt e) = (  if e = \<checkmark> \<and> P = \<bottom> then {} 
                                        else {tl s| s . s \<in> \<D> P \<and> s \<noteq> [] \<and> hd s = e})\<close>
  (is \<open>_ = ?rhs\<close>)
  show \<open>e = ev x \<Longrightarrow> \<D> (P after x) = ?rhs\<close> for x
  show \<open>e = \<checkmark> \<Longrightarrow> \<D> STOP = ?rhs\<close>
lemma T_AfterExt: \<open>\<T> (P afterExt e) = (  if e = \<checkmark> \<and> P = \<bottom> then {[]} 
                                       else insert [] {tl s| s . s \<in> \<T> P \<and> s \<noteq> [] \<and> hd s = e})\<close>
  (is \<open>_ = ?rhs\<close>)
  show \<open>e = ev x \<Longrightarrow> \<T> (P after x) = ?rhs\<close> for x
  show \<open>e = \<checkmark> \<Longrightarrow> \<T> STOP = ?rhs\<close>
subsection \<open>Monotony\<close>
lemma mono_AfterExt : \<open>P \<sqsubseteq> Q \<Longrightarrow> P afterExt e \<sqsubseteq> Q afterExt e\<close>
lemma mono_AfterExt_T : \<open>P \<sqsubseteq>\<^sub>T Q \<Longrightarrow> P afterExt e \<sqsubseteq>\<^sub>T Q afterExt e\<close>
  \<open>P \<sqsubseteq>\<^sub>F Q \<Longrightarrow> ev e \<notin> ready_set P \<or> ev e \<in> ready_set Q \<Longrightarrow>
   P afterExt ev e \<sqsubseteq>\<^sub>F Q afterExt ev e\<close>
lemma mono_AfterExt_D : \<open>P \<sqsubseteq>\<^sub>D Q \<Longrightarrow> P afterExt e \<sqsubseteq>\<^sub>D Q afterExt e\<close>
  \<open>P \<sqsubseteq>\<^sub>F\<^sub>D Q \<Longrightarrow> e \<notin> ready_set P \<or> e \<in> ready_set Q \<Longrightarrow> 
   P afterExt e \<sqsubseteq>\<^sub>F\<^sub>D Q afterExt e\<close>
lemma mono_AfterExt_DT : \<open>P \<sqsubseteq>\<^sub>D\<^sub>T Q \<Longrightarrow> P afterExt e \<sqsubseteq>\<^sub>D\<^sub>T Q afterExt e\<close>
subsection \<open>Behaviour of @{const [source] \<open>AfterExt\<close>} with \<^const>\<open>STOP\<close>, \<^const>\<open>SKIP\<close> and \<^term>\<open>\<bottom>\<close>\<close>
lemma AfterExt_STOP: \<open>STOP afterExt e = STOP\<close>
  \<open>P afterExt e = STOP \<longleftrightarrow> P = \<bottom> \<and> e = \<checkmark> \<or> (\<forall>s. e # s \<in> \<T> P \<longrightarrow> s = [])\<close>
lemma AfterExt_SKIP: \<open>SKIP afterExt e = STOP\<close>
lemma AfterExt_BOT : \<open>\<bottom> afterExt e = (if e = \<checkmark> then STOP else \<bottom>)\<close>
lemma AfterExt_is_BOT_iff: \<open>P afterExt e = \<bottom> \<longleftrightarrow> e \<noteq> \<checkmark> \<and> [e] \<in> \<D> P\<close>
subsection \<open>Behaviour of @{const [source] \<open>AfterExt\<close>} with Operators of \<^session>\<open>HOL-CSP\<close>\<close>
text \<open>Here again, we lose determinism.\<close>
  \<open>(\<box>a \<in> A \<rightarrow> P a) afterExt e = (\<sqinter>a \<in> A \<rightarrow> P a) afterExt e\<close>
lemma AfterExt_Det_is_AfterExt_Ndet: \<open>P \<box> Q afterExt e = P \<sqinter> Q afterExt e\<close>
  \<open>P \<sqinter> Q afterExt e = ( case e of ev x \<Rightarrow>   if ev x \<in> ready_set P \<inter> ready_set Q
                                          then (P afterExt ev x) \<sqinter> (Q afterExt ev x)
                                          else   if ev x \<in> ready_set P
                                               then P afterExt ev x
                                               else Q afterExt ev x
                                | \<checkmark> \<Rightarrow> STOP)\<close>
  \<open>(\<box> a \<in> A \<rightarrow> P a) afterExt e =
   (case e of ev x \<Rightarrow> if x \<in> A then P x else STOP | \<checkmark> \<Rightarrow> STOP)\<close>
  \<open>(a \<rightarrow> P) afterExt e =
   (case e of ev x \<Rightarrow> if x = a then P else STOP | \<checkmark> \<Rightarrow> STOP)\<close>
lemma Renaming_is_BOT_iff: \<open>Renaming P f = \<bottom> \<longleftrightarrow> P = \<bottom>\<close>
lemma Renaming_is_STOP_iff: \<open>Renaming P f = STOP \<longleftrightarrow> P = STOP\<close>
  \<open>Renaming P f afterExt e =
   (case e of \<checkmark> \<Rightarrow> STOP 
            | ev a \<Rightarrow> if P = \<bottom> then \<bottom> else
    \<sqinter>a \<in> {a. ev a \<in> ready_set P \<and> ev (f a) = e}. Renaming (P afterExt ev a) f)\<close>
\<comment>\<open>Move this result in \<^session>\<open>HOL-CSP\<close>\<close>
lemma Seq_is_BOT_iff: \<open>P \<^bold>; Q = \<bottom> \<longleftrightarrow> P = \<bottom> \<or> ([\<checkmark>] \<in> \<T> P \<and> Q = \<bottom>)\<close>
  \<open>(P \<^bold>; Q) afterExt e = 
   (     if e \<notin> ready_set P \<and> e \<notin> ready_set Q then STOP
    else if e \<notin> ready_set Q then P afterExt e \<^bold>; Q
    else if e \<notin> ready_set P then if \<checkmark> \<in> ready_set P then Q afterExt e else STOP 
    else if \<checkmark> \<in> ready_set P then (P afterExt e \<^bold>; Q) \<sqinter> (Q afterExt e)
    else P afterExt e \<^bold>; Q)\<close>
  \<open>(P \<lbrakk>S\<rbrakk> Q) afterExt e = 
   (  case e of \<checkmark> \<Rightarrow> STOP
                 | ev x \<Rightarrow>   if P = \<bottom> \<or> Q = \<bottom> then \<bottom>  
                           else if e \<in> ready_set P \<and> e \<in> ready_set Q
                           then   if x \<in> S 
                                then P afterExt e \<lbrakk>S\<rbrakk> Q afterExt e
                                else (P afterExt e \<lbrakk>S\<rbrakk> Q) \<sqinter> (P \<lbrakk>S\<rbrakk> Q afterExt e)
                           else   if e \<in> ready_set P
                                then   if x \<in> S then STOP else P afterExt e \<lbrakk>S\<rbrakk> Q
                                else   if e \<in> ready_set Q
                                     then   if x \<in> S then STOP else P \<lbrakk>S\<rbrakk> Q afterExt e
                                     else STOP)\<close>
  \<open>e \<in> B \<Longrightarrow> (P \ B) \<sqsubseteq>\<^sub>F\<^sub>D (P afterExt ev e \ B)\<close>
  \<open>e \<notin> B \<Longrightarrow> (P \ B) afterExt ev e \<sqsubseteq>\<^sub>F\<^sub>D (P afterExt ev e \ B)\<close>
  if ready: \<open>ev e \<in> ready_set P\<close>
  \<open>\<lbrakk>ev e \<in> ready_set P; e \<in> B\<rbrakk> \<Longrightarrow> (P \ B) \<sqsubseteq>\<^sub>D\<^sub>T (P afterExt ev e \ B)\<close>
  \<open>\<lbrakk>ev e \<in> ready_set P; e \<notin> B\<rbrakk> \<Longrightarrow> (P \ B) afterExt ev e \<sqsubseteq>\<^sub>D\<^sub>T (P afterExt ev e \ B)\<close>
subsection \<open>Behaviour of @{const [source] \<open>AfterExt\<close>} with Operators of \<^session>\<open>HOL-CSPM\<close>\<close>
  \<open>finite A \<Longrightarrow> (\<^bold>\<box> a \<in> A. P a) afterExt e = (\<Sqinter> a \<in> A. P a) afterExt e\<close>
  \<open>(\<sqinter> a \<in> A. P a) afterExt e =
   (  if e = \<checkmark> \<or> e \<notin> (\<Union>a \<in> A. ready_set (P a)) then STOP
    else (\<sqinter> a \<in> {a \<in> A. e \<in> ready_set (P a)}. P a) afterExt e)\<close>
  \<open>finite A \<Longrightarrow> (\<Sqinter> a \<in> A. P a) afterExt e = 
   (  if e = \<checkmark> \<or> e \<notin> (\<Union>a \<in> A. ready_set (P a)) then STOP
    else (\<Sqinter> a \<in> {a \<in> A. e \<in> ready_set (P a)}. P a) afterExt e)\<close>
  \<open>finite A \<Longrightarrow> (\<^bold>\<box> a \<in> A. P a) afterExt e = 
   (  if e = \<checkmark> \<or> e \<notin> (\<Union>a \<in> A. ready_set (P a)) then STOP
    else (\<Sqinter> a \<in> {a \<in> A. e \<in> ready_set (P a)}. P a) afterExt e)\<close>
subsection \<open>Behaviour of @{const [source] \<open>AfterExt\<close>} with Operators of \<^session>\<open>HOL-CSP_OpSem\<close>\<close>
  \<open>P \<rhd> Q afterExt e = P \<sqinter> Q afterExt e\<close>
  \<open>(P \<Theta> a \<in> A. Q a) afterExt e = 
   (case e of \<checkmark> \<Rightarrow> STOP
            | ev x \<Rightarrow>   if P = \<bottom> then \<bottom> 
                      else    if ev x \<in> ready_set P then if x \<in> A then Q x
                           else (P after x) \<Theta> a \<in> A. Q a else STOP)\<close>
  \<open>(P \<triangle> Q) afterExt e = 
   (case e of \<checkmark> \<Rightarrow> STOP
            | ev x \<Rightarrow>   if P = \<bottom> \<or> Q = \<bottom> then \<bottom>
                      else   if ev x \<in> ready_set P \<and> ev x \<in> ready_set Q
                           then (Q after x) \<sqinter> (P after x \<triangle> Q)
                           else   if ev x \<in> ready_set P \<and> ev x \<notin> ready_set Q
                                then P after x \<triangle> Q
                                else   if ev x \<notin> ready_set P \<and> ev x \<in> ready_set Q
                                     then Q after x 
                                     else STOP)\<close>
subsection \<open>Behaviour of @{const [source] \<open>AfterExt\<close>} with Reference Processes\<close>
  \<open>DF A afterExt e =
   (case e of ev x \<Rightarrow> if x \<in> A then DF A else STOP | \<checkmark> \<Rightarrow> STOP)\<close>
  \<open>DF\<^sub>S\<^sub>K\<^sub>I\<^sub>P A afterExt e =
   (case e of ev x \<Rightarrow> if x \<in> A then DF\<^sub>S\<^sub>K\<^sub>I\<^sub>P A else STOP | \<checkmark> \<Rightarrow> STOP)\<close>
  \<open>RUN A afterExt e =
   (case e of ev x \<Rightarrow> if x \<in> A then RUN A else STOP | \<checkmark> \<Rightarrow> STOP)\<close>
  \<open>CHAOS A afterExt e =
   (case e of ev x \<Rightarrow> if x \<in> A then CHAOS A else STOP | \<checkmark> \<Rightarrow> STOP)\<close>
  \<open>CHAOS\<^sub>S\<^sub>K\<^sub>I\<^sub>P A afterExt e =
   (case e of ev x \<Rightarrow> if x \<in> A then CHAOS\<^sub>S\<^sub>K\<^sub>I\<^sub>P A else STOP | \<checkmark> \<Rightarrow> STOP)\<close>
  \<open>DF A \<sqsubseteq>\<^sub>F\<^sub>D P \<Longrightarrow> e \<in> ready_set P \<Longrightarrow> DF A \<sqsubseteq>\<^sub>F\<^sub>D P afterExt e\<close>
  \<open>DF\<^sub>S\<^sub>K\<^sub>I\<^sub>P A \<sqsubseteq>\<^sub>F\<^sub>D P \<Longrightarrow> ev e \<in> ready_set P \<Longrightarrow> DF\<^sub>S\<^sub>K\<^sub>I\<^sub>P A \<sqsubseteq>\<^sub>F\<^sub>D P afterExt ev e\<close>
  \<open>deadlock_free P \<Longrightarrow> deadlock_free (P afterExt e) \<longleftrightarrow> 
                       (if e \<in> ready_set P \<and> e \<noteq> \<checkmark> then True else False)\<close>
  \<open>deadlock_free\<^sub>S\<^sub>K\<^sub>I\<^sub>P P \<Longrightarrow> deadlock_free\<^sub>S\<^sub>K\<^sub>I\<^sub>P (P afterExt e) \<longleftrightarrow> 
                          (if e \<in> ready_set P \<and> e \<noteq> \<checkmark> then True else False)\<close>
