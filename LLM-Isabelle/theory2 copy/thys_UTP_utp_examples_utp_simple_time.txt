
theory utp_simple_time imports "../utp" begin




alphabet 's st_time = 
  clock :: nat  st :: 's


type_synonym 's time_rel = "'s st_time hrel"


definition Wait :: "nat \<Rightarrow> 's time_rel" where
[upred_defs]: "Wait(n) = ($clock\<acute> =\<^sub>u $clock + \<guillemotleft>n\<guillemotright> \<and> $st\<acute> =\<^sub>u $st)"



definition HT :: "'s time_rel \<Rightarrow> 's time_rel" where
[upred_defs]: "HT(P) = (P \<and> $clock \<le>\<^sub>u $clock\<acute>)"


theorem HT_idem: "HT(HT(P)) = HT(P)" by rel_auto

theorem HT_mono: "P \<sqsubseteq> Q \<Longrightarrow> HT(P) \<sqsubseteq> HT(Q)" by rel_auto

theorem HT_continuous: "Continuous HT" by rel_auto


interpretation time_theory: utp_theory_continuous HT
  rewrites "P \<in> carrier time_theory.thy_order \<longleftrightarrow> P is HT"
  and "carrier time_theory.thy_order \<rightarrow> carrier time_theory.thy_order \<equiv> \<lbrakk>HT\<rbrakk>\<^sub>H \<rightarrow> \<lbrakk>HT\<rbrakk>\<^sub>H"
  and "le time_theory.thy_order = (\<sqsubseteq>)"
  and "eq time_theory.thy_order = (=)"  
proof -
  show "utp_theory_continuous HT"
  proof
    show "\<And>P. HT (HT P) = HT P"
      by (simp add: HT_idem)
    show "Continuous HT"
      by (simp add: HT_continuous)
  qed
qed (simp_all)


notation time_theory.utp_top ("\<top>\<^sub>t")
notation time_theory.utp_bottom ("\<bottom>\<^sub>t")
notation time_theory.utp_lfp ("\<mu>\<^sub>t")


thm time_theory.bottom_healthy
thm time_theory.top_higher
thm time_theory.meet_bottom
thm time_theory.LFP_unfold



lemma HT_Wait: "HT(Wait(n)) = Wait(n)" by (rel_auto)

lemma HT_Wait_closed [closure]: "Wait(n) is HT"
  by (simp add: HT_Wait Healthy_def)


lemma HT_skip_closed [closure]: "II is HT"
  by (rel_auto)


lemma HT_seqr_closed [closure]:
  "\<lbrakk> P is HT; Q is HT \<rbrakk> \<Longrightarrow> P ;; Q is HT"


lemma HT_assign_closed [closure]: "\<lbrakk> vwb_lens x; clock \<bowtie> x \<rbrakk> \<Longrightarrow> x := v is HT"
  by (rel_auto, metis (mono_tags, lifting) eq_iff lens.select_convs(1) lens_indep_get st_time.select_convs(1))


lemma HT_assign_closed' [closure]: "\<lbrakk> vwb_lens x; x \<subseteq>\<^sub>L st \<rbrakk> \<Longrightarrow> x := v is HT"
  by (rel_auto)



theorem Wait_skip: "Wait(0) = II" by (rel_auto)
    
theorem Wait_Wait: "Wait(m) ;; Wait(n) = Wait (m + n)" by (rel_auto)

theorem Wait_cond: "Wait(m) ;; (P \<triangleleft> b \<triangleright>\<^sub>r Q) = (Wait m ;; P) \<triangleleft> b\<lbrakk>&clock+\<guillemotleft>m\<guillemotright>/&clock\<rbrakk> \<triangleright>\<^sub>r (Wait m ;; Q)"
  by (rel_auto)

end