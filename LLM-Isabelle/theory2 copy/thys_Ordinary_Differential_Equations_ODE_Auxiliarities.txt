theory ODE_Auxiliarities
imports
  "HOL-Analysis.Analysis"
  "HOL-Library.Float"
  "List-Index.List_Index"
  Affine_Arithmetic.Affine_Arithmetic_Auxiliarities
  Affine_Arithmetic.Executable_Euclidean_Space
begin

instantiation prod :: (zero_neq_one, zero_neq_one) zero_neq_one
begin

definition "1 = (1, 1)"

instance by standard (simp add: zero_prod_def one_prod_def)
end


lemma (in real_inner) parallelogram_law: "(norm (x + y))\<^sup>2 + (norm (x - y))\<^sup>2 = 2 * (norm x)\<^sup>2 + 2 * (norm y)\<^sup>2"
proof -
  have "(norm (x + y))\<^sup>2 + (norm (x - y))\<^sup>2 = inner (x + y) (x + y) + inner (x - y) (x - y)"
    by (simp add: norm_eq_sqrt_inner)
  also have "\<dots> = 2 * (norm x)\<^sup>2 + 2 * (norm y)\<^sup>2"
    by (simp add: algebra_simps norm_eq_sqrt_inner)
  finally show ?thesis .
qed

locale no_real_inner
begin

lift_definition fstzero::"(real*real) \<Rightarrow>\<^sub>L (real*real)" is "\<lambda>(x, y). (x, 0)"
  by (auto intro!: bounded_linearI')

lemma [simp]: "fstzero (a, b) = (a, 0)"
  by transfer simp

lift_definition zerosnd::"(real*real) \<Rightarrow>\<^sub>L (real*real)" is "\<lambda>(x, y). (0, y)"
  by (auto intro!: bounded_linearI')

lemma [simp]: "zerosnd (a, b) = (0, b)"
  by transfer simp

lemma fstzero_add_zerosnd: "fstzero + zerosnd = id_blinfun"
  by transfer auto

lemma norm_fstzero_zerosnd: "norm fstzero = 1" "norm zerosnd = 1" "norm (fstzero - zerosnd) = 1"
  by (rule norm_blinfun_eqI[where x="(1, 0)"]) (auto simp: norm_Pair blinfun.bilinear_simps
    intro: norm_blinfun_eqI[where x="(0, 1)"] norm_blinfun_eqI[where x="(1, 0)"])


lemma "(norm (fstzero + zerosnd))\<^sup>2 + (norm (fstzero - zerosnd))\<^sup>2 \<noteq>
    2 * (norm fstzero)\<^sup>2 + 2 * (norm zerosnd)\<^sup>2"
  by (simp add: fstzero_add_zerosnd norm_fstzero_zerosnd)

end



lemma ex_norm_eq_1: "\<exists>x. norm (x::'a::{real_normed_vector, perfect_space}) = 1"
  by (metis vector_choose_size zero_le_one)



  not sure that inequalities are ``simpler'' than set membership (distorts automatic reasoning
  when only sets are involved)\<close>
subsection \<open>Boundedness\<close>
subsection \<open>Intervals\<close>
subsection \<open>Extended Real Intervals\<close>
subsection \<open>Euclidean Components\<close>
subsection \<open>Operator Norm\<close>
subsection \<open>Limits\<close>
subsection \<open>Continuity\<close>
subsection \<open>Derivatives\<close>
    using \<open>distinct E\<close> distinct_card by fastforce
    by (metis \<open>length E = DIM('a)\<close> \<open>set E = Basis\<close> nth_mem that)
    by (metis \<open>distinct E\<close> \<open>length E = DIM('a)\<close> \<open>set E = Basis\<close> bij_betw_def bij_betw_nth)
    with \<open>e > 0\<close> have B_thms: "B > 0" "2 * DIM('a) * B < e" "B \<ge> 0"
    have "B' > 0" by (simp add: B'_def \<open>0 < B\<close>)
      subgoal premises prems using df_cont[OF prems, THEN tendstoD, OF \<open>0 < B'\<close>] .
      using \<open>0 < B'\<close>
      by (cases "x' = x", auto simp add: \<open>0 < B'\<close>)
      by (rule tendstoD[OF tendsto_ident_at \<open>d > 0\<close>])
        using \<open>convex ?S\<close> assms(3)
      from distinct_Ex1[OF \<open>distinct E\<close>, unfolded \<open>set E = Basis\<close> Ex1_def \<open>length E = _\<close>]
        using unique[OF that] index[OF \<open>i \<in> Basis\<close>]
        apply (rule le_less_trans[OF _ \<open>norm (x' - x) < d\<close>])
            using closed_segment_commute \<open>E ! j \<in> Basis\<close> csc_subset apply blast
            using closed_segment_commute \<open>\<And>j. j < DIM('a) \<Longrightarrow> E ! j \<in> Basis\<close> csc_subset j apply blast
          using closed_segment_commute \<open>\<And>j. j < DIM('a) \<Longrightarrow> E ! j \<in> Basis\<close> csc_subset j apply blast
        by (auto simp add: algebra_simps inner_Basis z dist_norm \<open>0 < d\<close>
        apply (auto intro!: mult_right_mono \<open>0 \<le> B\<close>)
        by (metis (full_types) \<open>\<And>j. j < DIM('a) \<Longrightarrow> E ! j \<in> Basis\<close> inner_diff_left norm_bound_Basis_le order_refl)
         apply (metis (full_types) \<open>\<And>j. j < DIM('a) \<Longrightarrow> E ! j \<in> Basis\<close> inner_diff_left norm_bound_Basis_le order_refl)
        using \<open>B \<ge> 0\<close>
subsection \<open>Integration\<close>
      using \<open>x \<in> _\<close>
    using \<open>0 \<in> {l .. u}\<close>
    using assms \<open>0 \<in> {l .. u}\<close>
subsection \<open>conditionally complete lattice\<close>
subsection \<open>Lists\<close>
  then show ?r using \<open>?l\<close>
  then show "those (map Some ys) = Some ys" using \<open>?r\<close>
subsection \<open>Set(sum)\<close>
subsection \<open>Max\<close>
subsection \<open>Uniform Limit\<close>
subsection \<open>Bounded Linear Functions\<close>
lift_definition comp3::\<comment> \<open>TODO: name?\<close>
lift_definition comp12::\<comment> \<open>TODO: name?\<close>
subsection \<open>Order Transitivity Attributes\<close>
attribute_setup le = \<open>Scan.succeed (Thm.rule_attribute [] (fn context => fn thm => thm RS @{thm order_trans}))\<close>
attribute_setup ge = \<open>Scan.succeed (Thm.rule_attribute [] (fn context => fn thm => thm RS @{thm order_trans[rotated]}))\<close>
subsection \<open>point reflection\<close>
