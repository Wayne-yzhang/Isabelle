theory FIPS198_1
  imports  Words
           PKCS1v2_2_Interpretations
          
begin



locale HMAC = 
  fixes   H   ::  "octets \<Rightarrow> octets"
  and     B L ::   nat
  assumes Hlen:   "\<forall>x. length (H x) = L"
  and     LlessB: "L < B"
begin
         
definition ipad :: octets where
  "ipad = replicate B 0x36"

definition opad :: octets where
  "opad = replicate B 0x5c"

definition computeK0 :: "octets \<Rightarrow> octets" where
  "computeK0 K = 
   (  let l = length K in
     ( if l = B then K else (
       if l > B then (H K) @ (replicate (B-L) 0) else (
                        K  @ (replicate (B-l) 0)
     )))
   )" 

lemma K0_len: "length (computeK0 K) = B" 
proof-
  let ?l = "length (computeK0 K)"
  have 1: "?l = B \<longrightarrow> ?thesis"  using computeK0_def by argo
  have 2: "?l > B \<longrightarrow> ?thesis"         
    by (smt (verit, ccfv_threshold) le_add_diff_inverse le_eq_less_or_eq length_append 
            length_replicate not_less computeK0_def Hlen LlessB) 
  have 3: "?l < B \<longrightarrow> ?thesis"        
    by (smt (verit, ccfv_threshold) le_add_diff_inverse le_eq_less_or_eq length_append 
            length_replicate not_less computeK0_def Hlen LlessB) 
  show ?thesis  using 1 2 3 by fastforce
qed

definition HMAC :: "octets \<Rightarrow> octets \<Rightarrow> octets" where
  "HMAC K text = 
  ( let K0 = computeK0 K in
    H ( (xor_octets K0 opad) @ (H ((xor_octets K0 ipad) @ text)) ) 
  )" 

lemma HMAC_len: "length (HMAC K text) = L"
  by (metis Hlen HMAC_def) 




global_interpretation HMAC_SHA1_loc: HMAC SHA1octets 64 20
  defines HMAC_SHA1            = "HMAC_SHA1_loc.HMAC"
  and     HMAC_SHA1_ipad       = "HMAC_SHA1_loc.ipad"
  and     HMAC_SHA1_opad       = "HMAC_SHA1_loc.opad"
  and     HMAC_SHA1_computeK0  = "HMAC_SHA1_loc.computeK0"
proof -
  have "(20::nat) < 64" by simp 
  then show "HMAC SHA1octets 64 20" using SHA1octets_len HMAC_def by blast
qed

global_interpretation HMAC_SHA224_loc: HMAC SHA224octets 64 28
  defines HMAC_SHA224            = "HMAC_SHA224_loc.HMAC"
  and     HMAC_SHA224_ipad       = "HMAC_SHA224_loc.ipad"
  and     HMAC_SHA224_opad       = "HMAC_SHA224_loc.opad"
  and     HMAC_SHA224_computeK0  = "HMAC_SHA224_loc.computeK0"
proof -
  have "(28::nat) < 64" by simp 
  then show "HMAC SHA224octets 64 28" using SHA224octets_len HMAC_def by blast
qed

global_interpretation HMAC_SHA256_loc: HMAC SHA256octets 64 32
  defines HMAC_SHA256            = "HMAC_SHA256_loc.HMAC"
  and     HMAC_SHA256_ipad       = "HMAC_SHA256_loc.ipad"
  and     HMAC_SHA256_opad       = "HMAC_SHA256_loc.opad"
  and     HMAC_SHA256_computeK0  = "HMAC_SHA256_loc.computeK0"
proof -
  have "(32::nat) < 64" by simp 
  then show "HMAC SHA256octets 64 32" using SHA256octets_len HMAC_def by blast
qed

global_interpretation HMAC_SHA384_loc: HMAC SHA384octets 128 48
  defines HMAC_SHA384            = "HMAC_SHA384_loc.HMAC"
  and     HMAC_SHA384_ipad       = "HMAC_SHA384_loc.ipad"
  and     HMAC_SHA384_opad       = "HMAC_SHA384_loc.opad"
  and     HMAC_SHA384_computeK0  = "HMAC_SHA384_loc.computeK0"
proof -
  have "(48::nat) < 128" by simp 
  then show "HMAC SHA384octets 128 48" using SHA384octets_len HMAC_def by blast
qed

global_interpretation HMAC_SHA512_loc: HMAC SHA512octets 128 64
  defines HMAC_SHA512            = "HMAC_SHA512_loc.HMAC"
  and     HMAC_SHA512_ipad       = "HMAC_SHA512_loc.ipad"
  and     HMAC_SHA512_opad       = "HMAC_SHA512_loc.opad"
  and     HMAC_SHA512_computeK0  = "HMAC_SHA512_loc.computeK0"
proof -
  have "(64::nat) < 128" by simp 
  then show "HMAC SHA512octets 128 64" using SHA512octets_len HMAC_def by blast
qed

global_interpretation HMAC_SHA512_224_loc: HMAC SHA512_224octets 128 28
  defines HMAC_SHA512_224            = "HMAC_SHA512_224_loc.HMAC"
  and     HMAC_SHA512_224_ipad       = "HMAC_SHA512_224_loc.ipad"
  and     HMAC_SHA512_224_opad       = "HMAC_SHA512_224_loc.opad"
  and     HMAC_SHA512_224_computeK0  = "HMAC_SHA512_224_loc.computeK0"
proof -
  have "(28::nat) < 128" by simp 
  then show "HMAC SHA512_224octets 128 28" using SHA512_224octets_len HMAC_def by blast
qed

global_interpretation HMAC_SHA512_256_loc: HMAC SHA512_256octets 128 32
  defines HMAC_SHA512_256            = "HMAC_SHA512_256_loc.HMAC"
  and     HMAC_SHA512_256_ipad       = "HMAC_SHA512_256_loc.ipad"
  and     HMAC_SHA512_256_opad       = "HMAC_SHA512_256_loc.opad"
  and     HMAC_SHA512_256_computeK0  = "HMAC_SHA512_256_loc.computeK0"
proof -
  have "(32::nat) < 128" by simp 
  then show "HMAC SHA512_256octets 128 32" using SHA512_256octets_len HMAC_def by blast
qed

end
