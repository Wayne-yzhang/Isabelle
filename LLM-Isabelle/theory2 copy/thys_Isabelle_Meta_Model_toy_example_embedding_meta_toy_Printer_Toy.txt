theory  Printer_Toy
imports Meta_Toy
        "../../../meta_isabelle/Printer_Pure"
begin

context Print
begin

declare[[cartouche_type' = "abr_string"]]

definition "concatWith l =
 (if l = [] then
    id
  else

declare[[cartouche_type' = "fun\<^sub>p\<^sub>r\<^sub>i\<^sub>n\<^sub>t\<^sub>f"]]

fun of_ctxt2_term_aux where "of_ctxt2_term_aux l e =
 (\<lambda> T_pure pure \<Rightarrow> concatWith l (of_pure_term [] pure)
  | T_to_be_parsed _ s \<Rightarrow> concatWith l (To_string s)
  | T_lambda s c \<Rightarrow> of_ctxt2_term_aux (s # l) c) e"
definition "of_ctxt2_term = of_ctxt2_term_aux []"

                                     String.literal) ctxt = 
              (of_ctxt2_term s) in
        floor
        (case Ctxt_param ctxt of
        (To_string (ty_obj_to_string (Ctxt_ty ctxt)))
        (To_string (Ctxt_fun_name ctxt))
          (L.map
            (Ctxt_fun_ty_arg ctxt)))
          (L.map
                (of_ctxt2_term s)
             | T_invariant inva \<Rightarrow> f_inv inva)
            (Ctxt_expr ctxt)))
          | Ctxt_inv inva \<Rightarrow> f_inv inva)
         (Ctxt_clause ctxt))))\<close>
  \<comment> \<open>def\<close>
  \<comment> \<open>fun\<close>
