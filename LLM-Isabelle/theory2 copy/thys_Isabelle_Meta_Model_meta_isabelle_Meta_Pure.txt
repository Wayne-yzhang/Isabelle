theory  Meta_Pure
imports "../Init"
begin


type_synonym indexname = "string \<times> nat"
type_synonym "class" = string
type_synonym sort = "class list"
datatype "typ" =
  Type string "typ list" |
  TFree string sort |
  TVar indexname sort
datatype "term" =
  Const string "typ" |
  Free string "typ" |
  Var indexname "typ" |
  Bound nat |
  Abs string "typ" "term" |
  App "term" "term" (infixl "$" 200)


fun map_Const where
   "map_Const f expr = (\<lambda> Const s ty \<Rightarrow> Const (f s ty) ty
                        | Free s ty \<Rightarrow> Free s ty
                        | Var i ty \<Rightarrow> Var i ty
                        | Bound n \<Rightarrow> Bound n
                        | Abs s ty term \<Rightarrow> Abs s ty (map_Const f term)
                        | App term1 term2 \<Rightarrow> App (map_Const f term1)
                                                         (map_Const f term2))
                        expr"

fun fold_Const where
   "fold_Const f accu expr = (\<lambda> Const s _ \<Rightarrow> f accu s 
                              | Abs _ _ term \<Rightarrow> fold_Const f accu term
                              | App term1 term2 \<Rightarrow> fold_Const f (fold_Const f accu term1) term2
                              | _ \<Rightarrow> accu)
                               expr"

fun fold_Free where
   "fold_Free f accu expr = (\<lambda> Free s _ \<Rightarrow> f accu s 
                             | Abs _ _ term \<Rightarrow> fold_Free f accu term
                             | App term1 term2 \<Rightarrow> fold_Free f (fold_Free f accu term1) term2
                             | _ \<Rightarrow> accu)
                              expr"

end
