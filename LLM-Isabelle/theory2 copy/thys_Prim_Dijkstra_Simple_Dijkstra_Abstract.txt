theory Dijkstra_Abstract
imports Directed_Graph
begin


type_synonym 'v estimate = "'v \<Rightarrow> enat"
locale Dijkstra = WGraph w for w :: "('v) wgraph" +
  fixes s :: 'v
begin

definition relax_outgoing :: "'v \<Rightarrow> 'v estimate \<Rightarrow> 'v estimate"
  where "relax_outgoing u D \<equiv> \<lambda>v. min (D v) (D u + w (u,v))"

definition "initD \<equiv> (\<lambda>_. \<infinity>)(s:=0)"
definition "initS \<equiv> {}"  
  
      
lemma relax_mono: "relax_outgoing u D v \<le> D v"
  by (auto simp: relax_outgoing_def)


definition "all_dnodes \<equiv> Set.insert s { v . \<exists>u. w (u,v)\<noteq>\<infinity> }"
definition "unfinished_dnodes S \<equiv> all_dnodes - S "

lemma unfinished_nodes_subset: "unfinished_dnodes S \<subseteq> all_dnodes"
  by (auto simp: unfinished_dnodes_def)

end  

  
locale Dijkstra_Invar = Dijkstra w s for w and s :: 'v +
  fixes D :: "'v estimate" and S :: "'v set"
    finished, or we are in initial state\<close>  
  assumes S_precise: "u\<in>S \<Longrightarrow> D u = \<delta> s u" \<comment> \<open>Finished nodes have precise 
    estimate\<close>
  assumes S_relaxed: \<open>v\<in>S \<Longrightarrow> D u \<le> \<delta> s v + w (v,u)\<close> \<comment> \<open>Outgoing edges of 
          path to \<open>y\<close> ends with edge \<open>(x,y)\<close> \<close>  
        and \<open>\<delta> s u < \<infinity>\<close> DECOMP 
    text \<open>Upon adding \<open>x\<close> to \<open>S\<close>, this edge has been relaxed with the precise
       estimate for \<open>x\<close>. At this point the estimate for \<open>y\<close> has become 
  we pick a node \<open>u\<notin>S\<close> with least finite estimate, relax the outgoing 
  edges of \<open>u\<close>, and add \<open>u\<close> to \<open>S\<close>.\<close>    
  apply (cases \<open>s\<in>S\<close>)
text \<open>When the algorithm is finished, i.e., when there are 
  no unfinished nodes with finite estimates left,
  then all estimates are accurate.\<close>  
  assume "u\<in>S" text \<open>The estimates of finished nodes are accurate\<close>
  assume \<open>u\<notin>S\<close> text \<open>\<open>D u\<close> is minimal, and minimal estimates are precise\<close>
text \<open>A step decreases the set of unfinished nodes.\<close>
  text \<open>There is a path to \<open>u\<close>\<close>
  text \<open>Thus, \<open>u\<close> is among \<open>all_dnodes\<close>\<close>
      using \<open>\<delta> s u < \<infinity>\<close> by auto
    with \<open>u\<notin>S\<close> show ?thesis 
  text \<open>Which implies the proposition\<close>
  with \<open>u\<notin>S\<close> show ?thesis by (auto simp: unfinished_dnodes_def)
subsection \<open>Refinement by Priority Map and Map\<close>
text \<open>
  maps finished nodes.

  Note that this implementation is slightly non-standard: 
  infinite weight.
  
  We chose this implementation because it avoids enumerating all nodes of 
  lookup to check whether the node is finished. 
\<close>  
subsubsection \<open>Implementing \<open>enat\<close> by Option\<close>
text \<open>Our maps are functions to \<open>nat option\<close>,which are interpreted as \<open>enat\<close>,
  \<open>None\<close> being \<open>\<infinity>\<close>\<close>
subsubsection \<open>Implementing \<open>D,S\<close> by Priority Map and Map\<close>
text \<open>We define a coupling relation, that connects the concrete with the 
  abstract data. \<close>
text \<open>Note that our coupling relation is functional.\<close>
text \<open>The concrete version of the invariant.\<close>  
text \<open>Refinement of \<open>relax-outgoing\<close>\<close>
text \<open>A step preserves the coupling relation.\<close>
text \<open>Refinement of initial state\<close>
text \<open>Termination argument: Refinement of unfinished nodes.\<close>  
subsubsection \<open>Implementing graph by successor list\<close>  
    by (all \<open>force simp: aux2 assms\<close>)
