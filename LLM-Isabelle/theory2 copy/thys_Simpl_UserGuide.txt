theory UserGuide
imports HeapList Vcg
  "HOL-Statespace.StateSpaceSyntax" "HOL-Library.LaTeXsugar"
begin

syntax
 "_statespace_updates" :: "('a \<Rightarrow> 'b) \<Rightarrow> updbinds \<Rightarrow> ('a \<Rightarrow> 'b)" ("_\<langle>_\<rangle>" [900,0] 900)







hoarestate vars =
  A :: nat
  I :: nat
  M :: nat
  N :: nat
  R :: nat
  S :: nat



lemma (in vars) "\<Gamma>\<turnstile> \<lbrace>\<acute>N = 5\<rbrace> \<acute>N :== 2 * \<acute>N \<lbrace>\<acute>N = 10\<rbrace>"
  apply vcg
  apply simp
  done

\texttt{in vars} directive.  The verification condition generator is
subgoal that can be proved by simplification.\<close>
text (in vars) \<open>
 If we refer to components (variables) of the state-space of the program
 program itself). It is the acute-symbol and is present on
 most keyboards. The assertions of the Hoare tuple are
 ordinary Isabelle sets. As we usually want to refer to the state space
 in the assertions, we provide special brackets for them. They can be written
 marking variables has two effects. First of all we refer to the implicit
 So the assertion @{term "{|\<acute>N = 5|}"} internally gets expanded to
 An empty context and an empty postcondition for abrupt termination can be
 omitted. The lemma above is a shorthand for
\<close>
text \<open>We can step through verification condition generation by the
\<close>
  txt \<open>@{subgoals}\<close>
  txt \<open>The last step of verification condition generation,
         transforms the inclusion of state sets to the corresponding
         predicate on components of the state space.
\<close>
  txt \<open>@{subgoals}\<close>
text \<open>
Although our assertions work semantically on the state space, stepping
through verification condition generation ``feels'' like the expected
syntactic substitutions of traditional Hoare logic. This is achieved
by light simplification on the assertions calculated by the Hoare rules.
\<close>
  txt \<open>@{subgoals}\<close>
  txt \<open>@{subgoals}\<close>
    \<open>Hoare.BasicSimpTac @{context} Hoare.Function false
       [] (K all_tac) 1\<close>)
  txt \<open>@{subgoals}\<close>
text \<open>The next example shows how we deal with the while loop. Note the
invariant annotation.
\<close>
  txt \<open>@{subgoals [display]}\<close>
  txt \<open>The verification condition generator gives us three proof obligations,
         stemming from the path from the precondition to the invariant,
         from the invariant together with loop condition through the
         loop body to the invariant, and finally from the invariant together
         with the negated loop condition to the postcondition.\<close>
subsection \<open>Procedures\<close>
subsubsection \<open>Declaration\<close>
text \<open>
Our first procedure is a simple square procedure. We provide the
command \isacommand{procedures}, to declare and define a
procedure.
\<close>
text \<open>A procedure is given by the signature of the procedure
followed by the procedure body.  The signature consists of the name of
the procedure and a list of parameters together with their types. The
behind the pipe are the result parameters. Value parameters model call
by value semantics. The value of a result parameter at the end of the
procedure is passed back to the caller. Local variables follow the
in\<close> can be omitted. The variable @{term "I"} is actually unused in
The locale the user deals with is named \<open>Square_impl\<close>.
(named \<open>Square_body\<close>) and the statespaces for parameters and local and
either write \<open>CALL Square(\<acute>I,\<acute>R)\<close> or @{term "\<acute>I :== CALL
call for the specification; \<open>\<acute>R :== PROC Square(\<acute>N)\<close> is syntactic sugar
for \<open>Call Square_'proc\<close>. This emphasises that the specification
The following precondition fixes the current value \<open>\<acute>N\<close> to the logical
is the following: The \<open>1\<close> expresses that we look at one
 procedure, and \<open>NoRec\<close> that the procedure is non
