theory Value imports Subtype begin

  
type_synonym JavaInt = int
type_synonym JavaShort = int
type_synonym JavaByte = int
type_synonym JavaBoolean = bool


type_synonym ObjectId = nat

boolean, int, short and byte. Additionally, they can be an object reference,
an array reference or the value null.\<close>
               | objV   CTypeId ObjectId   \<comment> \<open>typed object reference\<close>
               | arrV   Arraytype ObjectId \<comment> \<open>typed array reference\<close>
text \<open>Arrays are modeled as references just like objects. So they
can be viewed as special kinds of objects, like in Java.\<close>
subsection \<open>Discriminator Functions\<close>
text \<open>To test values, we define the following discriminator functions.\<close>
subsection \<open>Selector Functions\<close>
subsection\<open>Determining the Type of a Value\<close>
text \<open>To determine the type of a value, we define the function
often written as $\tau$ in theoretical texts, therefore we add
the appropriate syntax support.\<close>
subsection \<open>Default Initialization Values for Types\<close>
text \<open>The function \<open>init\<close> yields the default initialization values for each 
