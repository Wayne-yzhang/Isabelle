theory Probability_Tools
  imports "HOL-Probability.Probability"
begin



  by (simp add: tuples_def)

  by (simp add: tuples_def)

  by (auto simp add: tuples_def)

  by (fastforce simp add: tuples_def image_def Suc_length_conv dest: sym)

  by (induction n) (auto simp add: tuples_Zero tuples_Suc)

  by (auto simp add: tuples_def dest: finite_lists_length_eq)



  using assms
  by (simp add: measure_pmf.finite_measure_eq_AE AE_measure_pmf_iff)

lemma prob_mono: 
  using assms
  by (simp add: measure_pmf.finite_measure_mono_AE AE_measure_pmf_iff)



lemma prob_empty: 
  using assms

lemma prob_pmf_of_set_geq_1:
  assumes "finite S" and "S \<noteq> {}"
  shows "measure_pmf.prob (pmf_of_set S) A \<ge> 1 \<longleftrightarrow> S \<subseteq> A" using assms
  by (auto simp add: measure_pmf.measure_ge_1_iff measure_pmf.prob_eq_1 AE_measure_pmf_iff)



lemma prob_disjoint_union:
  using assms
  by (fact measure_pmf.finite_measure_Union[simplified])

lemma prob_finite_Union:
  using assms
  by (intro measure_pmf.finite_measure_finite_Union) (simp_all)

lemma prob_disjoint_cases:
proof - 
    by (auto intro: prob_cong)
    by (simp add: prob_disjoint_union)
  finally show ?thesis .
qed

lemma prob_finite_disjoint_cases:
proof - 
    by (auto intro: prob_cong) 
    by (intro prob_finite_Union) 
  finally show ?thesis .
qed



  "pmf_of_set (A \<times> B) = pair_pmf (pmf_of_set A) (pmf_of_set B)"
  if "finite A" "finite B" "A \<noteq> {}" "B \<noteq> {}"   
  by(rule pmf_eqI)(auto simp add: that pmf_pair indicator_def)


lemma prob_tuples_hd_tl_indep:
  shows
    (is "?lhs = ?rhs")
  have *: "pmf_of_set (tuples S (Suc n)) 
         = map_pmf (\<lambda>(x :: 'a, xs). x # xs) (pair_pmf (pmf_of_set S) (pmf_of_set (tuples S n)))"
    by (auto simp add: map_pmf_of_set_inj[symmetric] inj_on_def pmf_of_set_Times) 
  have "?lhs = measure_pmf.prob (pair_pmf (pmf_of_set S) (pmf_of_set (tuples S n))) 
                                ((\<lambda>(x :: 'a, xs). x # xs) -` {r # rs | r rs. P r \<and> Q rs})"
    unfolding * measure_map_pmf by (rule refl)

  also have "((\<lambda>(x, xs). x # xs) -` {r # rs | r rs. P r \<and> Q rs}) = {r. P r} \<times> {rs. Q rs}" by auto
  also have "measure_pmf.prob (pair_pmf (pmf_of_set S) (pmf_of_set (tuples S n))) \<dots> =
               measure_pmf.prob (pmf_of_set S) {r. P r} 
             * measure_pmf.prob (pmf_of_set (tuples S n)) {rs. Q rs}"
   by(rule measure_pmf_prob_product) simp_all

  finally show ?thesis .
qed

lemma prob_tuples_fixed_hd:
  (is "?lhs = ?rhs")
proof -
  {
    fix a
      by (intro prob_cong) (auto simp add: tuples_Suc)
      by (intro prob_tuples_hd_tl_indep) simp
      by (simp add: measure_pmf_single)
    finally 
  }
  note A1 = this

    by (intro prob_finite_disjoint_cases) (auto simp add: disjoint_family_on_def)
    by (simp add: sum_divide_distrib)
  finally show ?thesis .
qed


end
