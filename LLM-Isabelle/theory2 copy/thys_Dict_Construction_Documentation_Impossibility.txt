theory Impossibility
imports Main
begin

axiomatization of_prop :: "prop \<Rightarrow> bool" where
of_prop_Trueprop [simp]: "of_prop (Trueprop P) \<longleftrightarrow> P" and
Trueprop_of_prop [simp]: "Trueprop (of_prop Q) \<equiv> PROP Q"


definition is_sg :: "'a itself \<Rightarrow> bool" where
"is_sg TYPE('a) = of_prop OFCLASS('a, semigroup_add_class)"



definition sg :: "('a \<Rightarrow> 'a \<Rightarrow> 'a) \<Rightarrow> bool" where
"sg plus \<longleftrightarrow> plus = Groups.plus \<and> is_sg TYPE('a)" for plus


typedef (overloaded) 'a Sg = "Collect sg :: ('a \<Rightarrow> 'a \<Rightarrow> 'a) set"
  morphisms the_plus Sg
  unfolding sg_def[abs_def]
  apply (simp add: is_sg_def)


oops

end
