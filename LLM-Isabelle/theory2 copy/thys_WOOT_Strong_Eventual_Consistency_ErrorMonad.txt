theory ErrorMonad
  imports
    "Certification_Monads.Error_Monad"
begin


fun non_constructible_function where
  "non_constructible_function f = (if (\<exists>n. f n = 0) then 1 else 0)"


type_synonym error = String.literal

fun assert :: "bool \<Rightarrow> error + unit"
  where
    "assert False = error (STR ''Assertion failed.'')" |
    "assert True = return ()"

fun fromSingleton :: "'a list \<Rightarrow> error + 'a"
  where
    "fromSingleton [] = error (STR ''Expected list of length 1'')" |
    "fromSingleton (x # []) = return x" |
    "fromSingleton (x # y # ys) = error (STR ''Expected list of length 1'')"


end
