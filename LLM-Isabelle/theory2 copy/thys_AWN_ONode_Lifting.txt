theory ONode_Lifting
imports AWN OAWN_SOS OInvariants
begin

lemma node_net_state':
  assumes "s \<in> oreachable (\<langle>i : T : R\<^sub>i\<rangle>\<^sub>o) S U"
    shows "\<exists>\<sigma> \<zeta> R. s = (\<sigma>, NodeS i \<zeta> R)"
  using assms proof induction
    fix s
    assume "s \<in> init (\<langle>i : T : R\<^sub>i\<rangle>\<^sub>o)"
    then obtain \<sigma> \<zeta> where "s = (\<sigma>, NodeS i \<zeta> R\<^sub>i)"
      by (auto simp: onode_comps)
    thus "\<exists>\<sigma> \<zeta> R. s = (\<sigma>, NodeS i \<zeta> R)" by auto
  next
    fix s a \<sigma>'
    assume rt: "s \<in> oreachable (\<langle>i : T : R\<^sub>i\<rangle>\<^sub>o) S U"
       and ih: "\<exists>\<sigma> \<zeta> R. s = (\<sigma>, NodeS i \<zeta> R)"
       and "U (fst s) \<sigma>'"
    then obtain \<sigma> \<zeta> R
      where "(\<sigma>, NodeS i \<zeta> R)  \<in> oreachable (\<langle>i : T : R\<^sub>i\<rangle>\<^sub>o) S U"
        and "U \<sigma> \<sigma>'" and "snd s = NodeS i \<zeta> R" by auto
    from this(1-2)
      have "(\<sigma>', NodeS i \<zeta> R) \<in> oreachable (\<langle>i : T : R\<^sub>i\<rangle>\<^sub>o) S U"
        by - (erule(1) oreachable_other')
  next
    fix s a s'
    assume rt: "s \<in> oreachable (\<langle>i : T : R\<^sub>i\<rangle>\<^sub>o) S U"
       and ih: "\<exists>\<sigma> \<zeta> R. s = (\<sigma>, NodeS i \<zeta> R)"
       and tr: "(s, a, s') \<in> trans (\<langle>i : T : R\<^sub>i\<rangle>\<^sub>o)"
       and "S (fst s) (fst s') a"
     from ih obtain \<sigma> \<zeta> R where "s = (\<sigma>, NodeS i \<zeta> R)" by auto
     with tr have "((\<sigma>, NodeS i \<zeta> R), a, s') \<in> onode_sos (trans T)"
       by (simp add: onode_comps)
     then obtain \<sigma>' \<zeta>' R' where "s' = (\<sigma>', NodeS i \<zeta>' R')"
       using onode_sos_dest_is_net_state' by metis
       by simp
  qed

lemma node_net_state:
  assumes "(\<sigma>, s) \<in> oreachable (\<langle>i : T : R\<^sub>i\<rangle>\<^sub>o) S U"
    shows "\<exists>\<zeta> R. s = NodeS i \<zeta> R"
  using assms
  by (metis Pair_inject node_net_state')

lemma node_net_state_trans [elim]:
  assumes sor: "(\<sigma>, s) \<in> oreachable (\<langle>i : \<zeta>\<^sub>i : R\<^sub>i\<rangle>\<^sub>o) S U"
      and str: "((\<sigma>, s), a, (\<sigma>', s')) \<in> trans (\<langle>i : \<zeta>\<^sub>i : R\<^sub>i\<rangle>\<^sub>o)"
  obtains \<zeta> R \<zeta>' R'
    where "s = NodeS i \<zeta> R"
      and "s' = NodeS i \<zeta>' R'"
  proof -
    assume *: "\<And>\<zeta> R \<zeta>' R'. s = NodeS i \<zeta> R \<Longrightarrow> s' = NodeS i \<zeta>' R' \<Longrightarrow> thesis"
    from sor obtain \<zeta> R where "s = NodeS i \<zeta> R"
      by (metis node_net_state)
    moreover with str obtain \<zeta>' R' where "s' = NodeS i \<zeta>' R'"
      by (simp only: onode_comps)
         (metis onode_sos_dest_is_net_state'')
    ultimately show thesis by (rule *)
