theory 
  IntegerPort
  imports 
    NetworkCore
begin


type_synonym 
  address = int

type_synonym 
  port = int

type_synonym 
  adr\<^sub>i\<^sub>p = "address \<times> port" 

overloading src_port_int \<equiv> "src_port :: ('\<alpha>::adr,'\<beta>) packet \<Rightarrow> '\<gamma>::port" 
begin 
definition 
  "src_port_int (x::(adr\<^sub>i\<^sub>p,'\<beta>) packet)  \<equiv> (snd o fst  o snd) x"
end 

overloading dest_port_int \<equiv> "dest_port :: ('\<alpha>::adr,'\<beta>) packet \<Rightarrow> '\<gamma>::port"
begin
definition 
  "dest_port_int (x::(adr\<^sub>i\<^sub>p,'\<beta>) packet) \<equiv> (snd o fst o  snd o snd) x"
end 

overloading subnet_of_int \<equiv> "subnet_of :: '\<alpha>::adr \<Rightarrow> '\<alpha> net"
begin 
definition
  "subnet_of_int (x::(adr\<^sub>i\<^sub>p)) \<equiv> {{(a,b::int). a = fst x}}" 
end

lemma src_port: "src_port (a,x::adr\<^sub>i\<^sub>p,d,e) = snd x"
  by (simp add: src_port_int_def in_subnet)

lemma dest_port: "dest_port (a,d,x::adr\<^sub>i\<^sub>p,e) = snd x"
  by (simp add: dest_port_int_def in_subnet)

lemmas adr\<^sub>i\<^sub>pLemmas = src_port dest_port src_port_int_def dest_port_int_def

end
