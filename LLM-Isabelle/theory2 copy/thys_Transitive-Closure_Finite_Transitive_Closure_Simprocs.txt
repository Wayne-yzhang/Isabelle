theory Finite_Transitive_Closure_Simprocs
imports Transitive_Closure_List_Impl
begin

lemma rtrancl_Image_eq:
  assumes "r = set r'" and "x = set x'"
  shows "r\<^sup>* `` x = set (rtrancl_list_impl r' x')"
  using assms by (auto simp: rtrancl_list_impl)

lemma trancl_Image_eq:
  assumes "r = set r'" and "x = set x'"
  shows "r\<^sup>+ `` x = set (trancl_list_impl r' x')"
  using assms by (auto simp: trancl_list_impl)






lemma
  "{(1::nat, 2), (2, 3), (3, 4), (4, 5)}\<^sup>* `` {1} = {1, 2, 3, 4, 5}"
  "{(1::nat, 2), (2, 3), (3, 4), (4, 5)}\<^sup>+ `` {1} = {2, 3, 4, 5}"
  apply simp_all
  apply auto
done

lemma
  "{(x, y)}\<^sup>* `` {x} = {x, y}"
  oops

end

