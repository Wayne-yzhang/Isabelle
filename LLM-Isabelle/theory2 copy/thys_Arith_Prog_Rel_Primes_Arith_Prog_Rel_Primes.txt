theory Arith_Prog_Rel_Primes
  imports
    Complex_Main 
    "HOL-Number_Theory.Number_Theory"
begin



lemma even_and_odd_parts:
  fixes n::nat
proof-
    by simp    
  thus ?thesis
    using prime_power_canonical[where p = "2" and m = "n"]
      assms semiring_normalization_rules(7) by auto    
qed

lemma only_one_odd_div_power2:
  fixes n::nat
  by (metis even_and_odd_parts assms(1) assms(2) dvd_triv_left semiring_normalization_rules(11)
      semiring_normalization_rules(7))

lemma coprime_power2:
  fixes n::nat
proof-
    for x
    by (metis neq0_conv One_nat_def Suc_1 Suc_lessI assms(1) assms(2) coprime_left_2_iff_odd
        dvd_refl linorder_neqE_nat nat_dvd_1_iff_1 nat_dvd_not_less not_coprimeI)
  thus ?thesis
    using assms(1) only_one_odd_div_power2 
    by auto 
qed



theorem arith_prog_rel_primes_solution:
  fixes n :: nat
proof-
  proof
    show "\<exists>b m. m \<noteq> 0 \<and> {x |x. x < n \<and> coprime x n} = {1 + j * b |j. j < m}"
      if "prime n \<or> (\<exists>k. n = 2 ^ k) \<or> n = 6"
    proof-
      have "\<exists>b m. m \<noteq> 0 \<and> {x |x. x < n \<and> coprime x n} = {1 + j * b |j. j < m}"
        if "prime n"
      proof-
        proof-
          proof
            show "{x |x. x < n \<and> coprime x n} \<subseteq> {x |x. x \<noteq> 0 \<and> x < n}"
              by (smt Collect_mono not_le ord_0_nat ord_eq_0 order_refl prime_gt_1_nat that zero_neq_one)
            show "{x |x. x \<noteq> 0 \<and> x < n} \<subseteq> {x |x. x < n \<and> coprime x n}"
              using coprime_commute prime_nat_iff'' that 
              by fastforce              
          qed
            using add.commute assms less_imp_add_positive by blast
            by auto
            by auto
            by blast
          thus ?thesis by blast
        qed
          by auto
        thus ?thesis
          by blast 
      qed
      moreover have "\<exists>b m. m \<noteq> 0 \<and> {x |x. x < n \<and> coprime x n} = {1 + j * b |j. j < m}"
        if "\<exists>k. n = 2 ^ k"
      proof-
        proof
          show "{x |x. x < n \<and> coprime x n} \<subseteq> {1 + j * 2 |j. j < 2^t}"
          proof
            fix x
              by blast
              by blast
              by auto 
              by (metis add.commute add.left_commute left_add_twice mult_2_right oddE)
              by linarith
              by blast
              by blast
          qed
          show "{1 + j * 2 |j. j < 2 ^ t} \<subseteq> {x |x. x < n \<and> coprime x n}"
          proof
            fix x::nat
              by blast
              by linarith              
              by blast
          qed
        qed
          by simp
          by auto
          by auto
        show ?thesis by blast
      qed
      moreover have "\<exists>b m. m \<noteq> 0 \<and> {x |x. x < n \<and> coprime x n} = {1 + j * b |j. j < m}"
        if "n = 6"
      proof-
        proof-
          proof
            show "{u. \<exists>x. u = (x::nat) \<and> x < 6 \<and> coprime x 6} \<subseteq> {1, 5}"
            proof
              fix u::nat
                by blast
                by blast
                by fastforce
                by auto
              proof-
                  by auto
                thus ?thesis 
                      numeral_eq_one_iff semiring_norm(86))
              qed
              proof-
                  by (metis (no_types, lifting) add_numeral_left gcd_add1 gcd_add2 gcd_nat.idem
                      numeral_Bit0 numeral_One one_plus_numeral semiring_norm(4) semiring_norm(5))
                thus ?thesis
                  by auto 
              qed
                by auto
                by blast
            qed
            show "{1::nat, 5} \<subseteq> {x |x. x < 6 \<and> coprime x 6}"
            proof-
                by simp                
                by (metis Suc_numeral coprime_Suc_right_nat less_add_one mem_Collect_eq
                    numeral_plus_one semiring_norm(5) semiring_norm(8))                
              ultimately show ?thesis 
                by blast
            qed
          qed
            by auto
          ultimately show ?thesis by auto
        qed
          by simp          
          by blast
        thus ?thesis
          using that 
          by auto 
      qed
      ultimately show ?thesis
        using that 
        by blast 
    qed
    show "prime n \<or> (\<exists>k. n = 2 ^ k) \<or> n = 6"
      if "\<exists>b m. m \<noteq> 0 \<and> {x |x. x < n \<and> coprime x n} = {1 + j * b |j. j < m}"
    proof-
        by auto
      show ?thesis
        case True
        thus ?thesis
          by auto 
      next
        case False
          case True
          show ?thesis
          proof(rule classical)
              using le_less_linear 
              by blast
              by blast
              by linarith
            proof-
                by auto
                by blast
                by blast
                by linarith
                by auto
                by blast
                by blast
                by linarith
                by linarith
                by linarith
                by auto
                by blast
              thus ?thesis 
                by auto
            qed
              by auto
              by fastforce
              by blast
              by blast
              by simp
              by blast
              by linarith
              by blast 
              by blast
              by blast 
              by linarith
            thus ?thesis 
              by simp
          qed
        next
          case False
            by simp
          show ?thesis
          proof(rule classical)
              using le_less_linear 
              by blast
              by blast
              by linarith
            proof-
                by auto
                by blast
                by blast
                by linarith
                by auto
                by blast
                by blast
                by linarith
                by linarith
                by linarith
                by auto
                by blast
              thus ?thesis 
                by auto
            qed
              by blast
              by simp
            show ?thesis
              case True
                by (metis odd_two_times_div_two_nat)
                by auto
                by linarith
                by auto 
                by blast 
                by auto
              thus ?thesis 
            next
              case False
              thus ?thesis
                case True
                  by blast
                  by simp
                    coprime_right_2_iff_odd odd_one 
                  by blast
                      add_gr_0 add_mono_thms_linordered_semiring(1) dvd_add_left_iff dvd_add_triv_left_iff dvd_imp_le le_add2 le_neq_implies_less less_numeral_extra(1) mult_2 odd_one)
                  by blast
                  by blast
                  by blast
                  by simp
                thus ?thesis 
              next
                case False
                  by (smt add_numeral_left coprime_common_divisor coprime_right_2_iff_odd dvd_add_left_iff not_coprimeE numeral_Bit1 numeral_One numeral_plus_one one_add_one)
                  by blast
                  by blast 
                  by blast  
                  by simp
                thus ?thesis 
                      dvd_triv_right mult_2 nat_neq_iff numeral_Bit0)
              qed
            qed
          qed
        qed
        proof (rule classical)
            by blast
            by blast
          proof-
              by auto
              by blast
              by blast
              by linarith
              by auto
              by blast
              by blast
              by linarith
              by linarith
              by linarith
              by auto
              by blast
            thus ?thesis 
              by auto
          qed
            by linarith
            by simp
            by force
            by auto
            by blast
            by auto
            by blast
            by blast
            by auto
            by blast
            by blast
            by blast
            by auto
            by auto
          thus ?thesis
            using nat_dvd_1_iff_1 numeral_eq_one_iff 
            by blast
        qed
          by auto
        proof-
            by auto
            by blast
          proof-
              by auto
              by blast
              by blast
              by simp
            thus ?thesis 
              by blast
          qed
            by auto
          thus ?thesis
            by blast 
        qed
        proof-
            for x
          proof-
              by (metis (full_types) Suc_eq_plus1  add_mono1 less_Suc_eq_0_disj  nat.simps(3) plus_1_eq_Suc )
              by auto
              by auto
              by auto
              by blast
              by auto
              by blast
              by blast
              by linarith
              by blast
              by blast
            thus ?thesis 
              by blast
          qed
          thus ?thesis
            using assms coprime_commute nat_neq_iff prime_nat_iff'' by auto 
        qed
        proof-
            by auto
            for x::nat
          proof-
            proof-
                by blast
                by blast
              thus ?thesis
                by simp
            qed
            proof-
                by linarith
              proof-
                  by auto
                proof-
                    by auto
                    by blast
                    by blast
                    by linarith
                    by blast
                    by blast
                    by linarith
                    by linarith
                    by linarith
                  proof-
                      by simp
                    thus ?thesis
                      by blast 
                  qed
                    by blast
                  thus ?thesis 
                qed
                thus  ?thesis 
              qed
                by linarith
                by blast
                by blast
              thus ?thesis 
                by blast
            qed
            ultimately show ?thesis 
              by blast
          qed
          thus ?thesis 
            using coprime_power2 assms 
            by auto
        qed
        proof-
          proof(rule classical)
              by auto
            proof-
                by auto
                by blast
                by blast
                by linarith
                by auto
                by blast
                by blast
                by linarith
                by linarith
                by linarith
              proof-
                thus ?thesis
                  by blast 
              qed
                by blast
              thus ?thesis 
            qed
              by auto
              by force
              by force
              by blast
              by auto
              by blast
              by auto
              by (metis coprime_commute coprime_mult_right_iff dvd_def)
                  coprime_self numeral_2_eq_2 numeral_3_eq_3 less_numeral_extra(1) nat_dvd_not_less)
              by blast
              by blast
              by blast  
              by linarith
              by linarith
              by simp
            thus ?thesis 
              using odd_one 
              by blast
          qed
          thus ?thesis
            by (simp add: False)            
        qed
        ultimately show ?thesis 
          by blast
      qed
    qed
  qed
  proof
    show "\<exists>a b m. m \<noteq> 0 \<and> {x |x. x < n \<and> coprime x n} = {a + j * b |j. j < m}"
      if "\<exists>b m. m \<noteq> 0 \<and> {x |x. x < n \<and> coprime x n} = {1 + j * b |j. j < m}"
      using that
      by blast 
    show "\<exists>b m. m \<noteq> 0 \<and> {x |x. x < n \<and> coprime x n} = {1 + j * b |j. j < m}"
      if "\<exists>a b m. m \<noteq> 0 \<and> {x |x. x < n \<and> coprime x n} = {a + j * b |j. j < m}"
    proof-
        by auto        
      proof-
        proof-
            by auto            
          proof-
              by auto
              by auto
              by fastforce
              by blast
              by blast
              by auto
            thus ?thesis 
                antisym by blast
          qed
          proof -
            have f1: "\<exists>n. a = a + n * b \<and> n < m"
              by auto
            have f2: "\<exists>n. 1 = a + n * b \<and> n < m"
              by blast
            have f3: "\<exists>na. a = na \<and> na < n \<and> coprime na n"
            have "n \<noteq> 1"
              by (metis (lifting) assms less_irrefl_nat)
            then have "\<not> coprime 0 n"
              by simp
            then show ?thesis
          qed
          thus ?thesis 
            by linarith
        qed
        thus ?thesis
          by blast 
      qed
        by auto
    qed
  qed 
  ultimately show ?thesis
    by simp 
qed

end