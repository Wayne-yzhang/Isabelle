theory Propaedeutics
imports Complex_Main "HOL-Library.Countable"
begin

declare [[goals_limit = 20]]



subsection "Introduction"



subsection "Propaedeutic definitions"


type_synonym key = nat

type_synonym pri_agrk = rat

type_synonym pub_agrk = int


datatype agent = CA | Card nat | User nat


datatype msg =
  Agent     agent |
  Number    nat |
  Nonce     nat |
  Key       key |
  Hash      msg |
  Passwd    nat |
  Pri_AgrK  pri_agrk |
  Pub_AgrK  pub_agrk |
  Auth_Data pri_agrk pri_agrk |
  Crypt     key msg |
  MPair     msg msg

syntax
  "_MTuple" :: "['a, args] \<Rightarrow> 'a * 'b"  ("(2\<lbrace>_,/ _\<rbrace>)")

translations
  "\<lbrace>x, y, z\<rbrace>" \<rightleftharpoons> "\<lbrace>x, \<lbrace>y, z\<rbrace>\<rbrace>"
  "\<lbrace>x, y\<rbrace>" \<rightleftharpoons> "CONST MPair x y"


datatype event = Says nat nat nat agent agent msg


record session =
  NonceS   :: "pri_agrk option"
  IntMapK :: "pri_agrk option"
  ExtMapK :: "pri_agrk option"
  IntAgrK :: "pri_agrk option"
  ExtAgrK :: "pri_agrk option"


type_synonym state = "agent \<times> nat \<times> nat \<Rightarrow> session"


consts bad :: "nat set"


consts invK :: "key \<Rightarrow> key"


consts agrK :: "pri_agrk \<Rightarrow> pub_agrk"


consts sesK :: "pri_agrk \<Rightarrow> key"


consts symK :: "nat \<Rightarrow> key"


consts priAK :: "nat \<Rightarrow> pri_agrk"


consts priSK :: "agent \<Rightarrow> key"


abbreviation Spy :: agent where
"Spy \<equiv> User 0"


abbreviation pubAK :: "pri_agrk \<Rightarrow> msg" where
"pubAK a \<equiv> Pub_AgrK (agrK a)"

abbreviation pubSK :: "agent \<Rightarrow> key" where
"pubSK X \<equiv> invK (priSK X)"


abbreviation start_S :: state where
"start_S \<equiv> \<lambda>x. \<lparr>NonceS = None, IntMapK = None, ExtMapK = None,
  IntAgrK = None, ExtAgrK = None\<rparr>"


abbreviation start_A :: "msg set" where
"start_A \<equiv> insert (Passwd 0) (Key ` symK ` bad \<union> Key ` range pubSK \<union> pubAK ` range priAK)"


abbreviation start_U :: "msg set" where
"start_U \<equiv> range Passwd \<union> Key ` range symK \<union> Key ` range priSK \<union> Key ` range pubSK \<union>
  Pri_AgrK ` range priAK \<union> pubAK ` range priAK"


fun spies :: "event list \<Rightarrow> msg set" where
"spies [] = {}" |
"spies (Says i j k A B X # evs) = insert X (spies evs)"


specification (bad invK agrK sesK symK priSK)
agrK_inj:     "inj agrK"
sesK_inj:     "inj sesK"
priSK_pubSK:  "priSK X \<noteq> pubSK X'"
priSK_symK:   "priSK X \<noteq> symK n"
pubSK_symK:   "pubSK X \<noteq> symK n"
invK_sesK:    "invK (sesK a) = sesK a"
invK_symK:    "invK (symK n) = symK n"
symK_bad:     "m \<in> bad \<Longrightarrow> symK n = symK m \<Longrightarrow> n \<in> bad"
apply (rule_tac x = "{}" in exI)
apply (rule_tac x = "\<lambda>n. if even n then n else Suc n" in exI)
apply (rule_tac x = "\<lambda>x. int (inv nat_to_rat_surj x)" in exI)
apply (rule_tac x = "\<lambda>x. 2 * inv nat_to_rat_surj x" in exI)
apply (rule_tac x = "\<lambda>n. 0" in exI)
apply (rule_tac x = "\<lambda>X. Suc 0" in exI)
proof (simp add: inj_on_def, (rule allI)+, rule impI)
  fix x y
  have "surj nat_to_rat_surj"
   by (rule surj_nat_to_rat_surj)
  hence "inj (inv nat_to_rat_surj)"
   by (rule surj_imp_inj_inv)
  moreover assume "inv nat_to_rat_surj x = inv nat_to_rat_surj y"
  ultimately show "x = y"
   by (rule injD)
qed


inductive_set parts :: "msg set \<Rightarrow> msg set" for H :: "msg set" where
Inj:      "X \<in> H \<Longrightarrow> X \<in> parts H" |
Fst:      "\<lbrace>X, Y\<rbrace> \<in> parts H \<Longrightarrow> X \<in> parts H" |
Snd:      "\<lbrace>X, Y\<rbrace> \<in> parts H \<Longrightarrow> Y \<in> parts H" |
Body:     "Crypt K X \<in> parts H \<Longrightarrow> X \<in> parts H" |
Auth_Fst: "Auth_Data x y \<in> parts H \<Longrightarrow> Pri_AgrK x \<in> parts H" |
Auth_Snd: "Auth_Data x y \<in> parts H \<Longrightarrow> Pri_AgrK y \<in> parts H"

inductive_set items :: "msg set \<Rightarrow> msg set" for H :: "msg set" where
Inj:      "X \<in> H \<Longrightarrow> X \<in> items H" |
Fst:      "\<lbrace>X, Y\<rbrace> \<in> items H \<Longrightarrow> X \<in> items H" |
Snd:      "\<lbrace>X, Y\<rbrace> \<in> items H \<Longrightarrow> Y \<in> items H" |
Body:     "Crypt K X \<in> items H \<Longrightarrow> X \<in> items H" |
Auth_Fst: "\<lbrakk>Auth_Data x y \<in> items H; Pri_AgrK y \<in> items H\<rbrakk> \<Longrightarrow> Pri_AgrK x \<in> items H" |
Auth_Snd: "\<lbrakk>Auth_Data x y \<in> items H; Pri_AgrK x \<in> items H\<rbrakk> \<Longrightarrow> Pri_AgrK y \<in> items H"

inductive_set analz :: "msg set \<Rightarrow> msg set" for H :: "msg set" where
Inj:      "X \<in> H \<Longrightarrow> X \<in> analz H" |
Fst:      "\<lbrace>X, Y\<rbrace> \<in> analz H \<Longrightarrow> X \<in> analz H" |
Snd:      "\<lbrace>X, Y\<rbrace> \<in> analz H \<Longrightarrow> Y \<in> analz H" |
Decrypt:  "\<lbrakk>Crypt K X \<in> analz H; Key (invK K) \<in> analz H\<rbrakk> \<Longrightarrow> X \<in> analz H" |
Auth_Fst: "\<lbrakk>Auth_Data x y \<in> analz H; Pri_AgrK y \<in> analz H\<rbrakk> \<Longrightarrow> Pri_AgrK x \<in> analz H" |
Auth_Snd: "\<lbrakk>Auth_Data x y \<in> analz H; Pri_AgrK x \<in> analz H\<rbrakk> \<Longrightarrow> Pri_AgrK y \<in> analz H"

inductive_set synth :: "msg set \<Rightarrow> msg set" for H :: "msg set" where
Inj:      "X \<in> H \<Longrightarrow> X \<in> synth H" |
Agent:    "Agent X \<in> synth H" |
Number:   "Number n \<in> synth H" |
Hash:     "X \<in> synth H \<Longrightarrow> Hash X \<in> synth H" |
MPair:    "\<lbrakk>X \<in> synth H; Y \<in> synth H\<rbrakk> \<Longrightarrow> \<lbrace>X, Y\<rbrace> \<in> synth H" |
Crypt:    "\<lbrakk>X \<in> synth H; Key K \<in> H\<rbrakk> \<Longrightarrow> Crypt K X \<in> synth H" |
Auth:     "\<lbrakk>Pri_AgrK x \<in> H; Pri_AgrK y \<in> H\<rbrakk> \<Longrightarrow> Auth_Data x y \<in> synth H"


subsection "Propaedeutic lemmas"


lemma set_spies [rule_format]:
 "Says i j k A B X \<in> set evs \<longrightarrow> X \<in> spies evs"
apply (induction evs rule: spies.induct)
 apply simp_all
done

lemma parts_subset:
 "H \<subseteq> parts H"
by (rule subsetI, rule parts.Inj)

lemma parts_idem:
 "parts (parts H) = parts H"
apply (rule equalityI)
 apply (rule subsetI)
 apply (erule parts.induct)
      apply assumption
     apply (erule parts.Fst)
    apply (erule parts.Snd)
   apply (erule parts.Body)
  apply (erule parts.Auth_Fst)
 apply (erule parts.Auth_Snd)
apply (rule parts_subset)
done

lemma parts_simp:
 "H \<subseteq> range Agent \<union>
    range Number \<union>
    range Nonce \<union>
    range Key \<union>
    range Hash \<union>
    range Passwd \<union>
    range Pri_AgrK \<union>
    range Pub_AgrK \<Longrightarrow>
  parts H = H"
apply (rule equalityI [OF _ parts_subset])
apply (rule subsetI)
apply (erule parts.induct)
     apply blast+
done

lemma parts_mono:
 "G \<subseteq> H \<Longrightarrow> parts G \<subseteq> parts H"
apply (rule subsetI)
apply (erule parts.induct)
     apply (drule subsetD)
      apply assumption
     apply (erule parts.Inj)
    apply (erule parts.Fst)
   apply (erule parts.Snd)
  apply (erule parts.Body)
 apply (erule parts.Auth_Fst)
apply (erule parts.Auth_Snd)
done

lemma parts_insert:
 "insert X (parts H) \<subseteq> parts (insert X H)"
apply (rule subsetI)
apply simp
apply (erule disjE)
 apply simp
 apply (rule parts.Inj)
 apply simp
apply (erule rev_subsetD)
apply (rule parts_mono)
apply blast
done

lemma parts_simp_insert:
 "X \<in> range Agent \<union>
    range Number \<union>
    range Nonce \<union>
    range Key \<union>
    range Hash \<union>
    range Passwd \<union>
    range Pri_AgrK \<union>
    range Pub_AgrK \<Longrightarrow>
  parts (insert X H) = insert X (parts H)"
apply (rule equalityI [OF _ parts_insert])
apply (rule subsetI)
apply (erule parts.induct)
     apply simp_all
     apply (rotate_tac [!])
     apply (erule disjE)
      apply simp
     apply (rule disjI2)
     apply (erule parts.Inj)
    apply (erule disjE)
     apply blast
    apply (rule disjI2)
    apply (erule parts.Fst)
   apply (erule disjE)
    apply blast
   apply (rule disjI2)
   apply (erule parts.Snd)
  apply (erule disjE)
   apply blast
  apply (rule disjI2)
  apply (erule parts.Body)
 apply (erule disjE)
  apply blast
 apply (rule disjI2)
 apply (erule parts.Auth_Fst)
apply (erule disjE)
 apply blast
apply (rule disjI2)
apply (erule parts.Auth_Snd)
done

lemma parts_auth_data_1:
 "parts (insert (Auth_Data x y) H) \<subseteq>
    {Pri_AgrK x, Pri_AgrK y, Auth_Data x y} \<union> parts H"
apply (rule subsetI)
apply (erule parts.induct)
     apply simp_all
     apply (erule disjE)
      apply simp
     apply (rule_tac [1-4] disjI2)+
     apply (erule parts.Inj)
    apply (erule parts.Fst)
   apply (erule parts.Snd)
  apply (erule parts.Body)
 apply (erule disjE)
  apply simp
 apply (rule disjI2)+
 apply (erule parts.Auth_Fst)
apply (erule disjE)
 apply simp
apply (rule disjI2)+
apply (erule parts.Auth_Snd)
done

lemma parts_auth_data_2:
 "{Pri_AgrK x, Pri_AgrK y, Auth_Data x y} \<union> parts H \<subseteq>
    parts (insert (Auth_Data x y) H)"
apply (rule subsetI)
apply simp
apply (erule disjE)
 apply simp
 apply (rule parts.Auth_Fst [of _ y])
 apply (rule parts.Inj)
 apply simp
apply (erule disjE)
 apply simp
 apply (rule parts.Auth_Snd [of x])
 apply (rule parts.Inj)
 apply simp
apply (erule disjE)
 apply simp
 apply (rule parts.Inj)
 apply simp
apply (erule rev_subsetD)
apply (rule parts_mono)
apply blast
done

lemma parts_auth_data:
 "parts (insert (Auth_Data x y) H) =
    {Pri_AgrK x, Pri_AgrK y, Auth_Data x y} \<union> parts H"
by (rule equalityI, rule parts_auth_data_1, rule parts_auth_data_2)

lemma parts_crypt_1:
 "parts (insert (Crypt K X) H) \<subseteq> insert (Crypt K X) (parts (insert X H))"
apply (rule subsetI)
apply (erule parts.induct)
     apply simp_all
     apply (erule disjE)
      apply simp
     apply (rule_tac [1-3] disjI2)
     apply (rule parts.Inj)
     apply simp
    apply (erule parts.Fst)
   apply (erule parts.Snd)
  apply (erule disjE)
   apply simp
   apply (rule parts.Inj)
   apply simp
  apply (rule disjI2)
  apply (erule parts.Body)
 apply (erule parts.Auth_Fst)
apply (erule parts.Auth_Snd)
done

lemma parts_crypt_2:
 "insert (Crypt K X) (parts (insert X H)) \<subseteq> parts (insert (Crypt K X) H)"
apply (rule subsetI)
apply simp
apply (erule disjE)
 apply simp
 apply (rule parts.Inj)
 apply simp
apply (subst parts_idem [symmetric])
apply (erule rev_subsetD)
apply (rule parts_mono)
apply (rule subsetI)
apply simp
apply (erule disjE)
 apply simp
 apply (rule parts.Body [of K])
 apply (rule parts.Inj)
 apply simp
apply (rule parts.Inj)
apply simp
done

lemma parts_crypt:
 "parts (insert (Crypt K X) H) = insert (Crypt K X) (parts (insert X H))"
by (rule equalityI, rule parts_crypt_1, rule parts_crypt_2)

lemma parts_mpair_1:
 "parts (insert \<lbrace>X, Y\<rbrace> H) \<subseteq> insert \<lbrace>X, Y\<rbrace> (parts ({X, Y} \<union> H))"
apply (rule subsetI)
apply (erule parts.induct)
     apply simp_all
     apply (erule disjE)
      apply simp
     apply (rule_tac [1-4] disjI2)
     apply (rule parts.Inj)
     apply simp
    apply (erule disjE)
     apply simp
     apply (rule parts.Inj)
     apply simp
    apply (erule parts.Fst)
   apply (erule disjE)
    apply simp
    apply (rule parts.Inj)
    apply simp
   apply (erule parts.Snd)
  apply (erule parts.Body)
 apply (erule parts.Auth_Fst)
apply (erule parts.Auth_Snd)
done

lemma parts_mpair_2:
 "insert \<lbrace>X, Y\<rbrace> (parts ({X, Y} \<union> H)) \<subseteq> parts (insert \<lbrace>X, Y\<rbrace> H)"
apply (rule subsetI)
apply simp
apply (erule disjE)
 apply (rule parts.Inj)
 apply simp
apply (subst parts_idem [symmetric])
apply (erule rev_subsetD)
apply (rule parts_mono)
apply (rule subsetI)
apply simp
apply (erule disjE)
 apply simp
 apply (rule parts.Fst [of _ Y])
 apply (rule parts.Inj)
 apply simp
apply (erule disjE)
 apply simp
 apply (rule parts.Snd [of X])
 apply (rule parts.Inj)
 apply simp
apply (rule parts.Inj)
apply simp
done

lemma parts_mpair:
 "parts (insert \<lbrace>X, Y\<rbrace> H) = insert \<lbrace>X, Y\<rbrace> (parts ({X, Y} \<union> H))"
by (rule equalityI, rule parts_mpair_1, rule parts_mpair_2)

lemma items_subset:
 "H \<subseteq> items H"
by (rule subsetI, rule items.Inj)

lemma items_idem:
 "items (items H) = items H"
apply (rule equalityI)
 apply (rule subsetI)
 apply (erule items.induct)
      apply assumption
     apply (erule items.Fst)
    apply (erule items.Snd)
   apply (erule items.Body)
  apply (erule items.Auth_Fst)
  apply assumption
 apply (erule items.Auth_Snd)
 apply assumption
apply (rule items_subset)
done

lemma items_parts_subset:
 "items H \<subseteq> parts H"
apply (rule subsetI)
apply (erule items.induct)
     apply (erule parts.Inj)
    apply (erule parts.Fst)
   apply (erule parts.Snd)
  apply (erule parts.Body)
 apply (erule parts.Auth_Fst)
apply (erule parts.Auth_Snd)
done

lemma items_simp:
 "H \<subseteq> range Agent \<union>
    range Number \<union>
    range Nonce \<union>
    range Key \<union>
    range Hash \<union>
    range Passwd \<union>
    range Pri_AgrK \<union>
    range Pub_AgrK \<Longrightarrow>
  items H = H"
apply (rule equalityI)
 apply (subst (3) parts_simp [symmetric])
  apply assumption
 apply (rule items_parts_subset)
apply (rule items_subset)
done

lemma items_mono:
 "G \<subseteq> H \<Longrightarrow> items G \<subseteq> items H"
apply (rule subsetI)
apply (erule items.induct)
     apply (drule subsetD)
      apply assumption
     apply (erule items.Inj)
    apply (erule items.Fst)
   apply (erule items.Snd)
  apply (erule items.Body)
 apply (erule items.Auth_Fst)
 apply assumption
apply (erule items.Auth_Snd)
apply assumption
done

lemma items_insert:
 "insert X (items H) \<subseteq> items (insert X H)"
apply (rule subsetI)
apply simp
apply (erule disjE)
 apply simp
 apply (rule items.Inj)
 apply simp
apply (erule rev_subsetD)
apply (rule items_mono)
apply blast
done

lemma items_simp_insert_1:
 "X \<in> items H \<Longrightarrow> items (insert X H) = items H"
apply (rule equalityI)
 apply (rule subsetI)
 apply (erule items.induct [of _ "insert X H"])
      apply simp
      apply (erule disjE)
       apply simp
      apply (erule items.Inj)
     apply (erule items.Fst)
    apply (erule items.Snd)
   apply (erule items.Body)
  apply (erule items.Auth_Fst)
  apply assumption
 apply (erule items.Auth_Snd)
 apply assumption
apply (rule items_mono)
apply blast
done

lemma items_simp_insert_2:
 "X \<in> range Agent \<union>
    range Number \<union>
    range Nonce \<union>
    range Key \<union>
    range Hash \<union>
    range Passwd \<union>
    range Pub_AgrK \<Longrightarrow>
  items (insert X H) = insert X (items H)"
apply (rule equalityI [OF _ items_insert])
apply (rule subsetI)
apply (erule items.induct)
     apply simp_all
     apply (rotate_tac [!])
     apply (erule disjE)
      apply simp
     apply (rule disjI2)
     apply (erule items.Inj)
    apply (erule disjE)
     apply blast
    apply (rule disjI2)
    apply (erule items.Fst)
   apply (erule disjE)
    apply blast
   apply (rule disjI2)
   apply (erule items.Snd)
  apply (erule disjE)
   apply blast
  apply (rule disjI2)
  apply (erule items.Body)
 apply (erule disjE)
  apply blast
 apply (erule disjE)
  apply blast
 apply (rule disjI2)
 apply (erule items.Auth_Fst)
 apply assumption
apply (erule disjE)
 apply blast
apply (erule disjE)
 apply blast
apply (rule disjI2)
apply (erule items.Auth_Snd)
apply assumption
done

lemma items_pri_agrk_out:
 "Pri_AgrK x \<notin> parts H \<Longrightarrow>
    items (insert (Pri_AgrK x) H) = insert (Pri_AgrK x) (items H)"
apply (rule equalityI [OF _ items_insert])
apply (rule subsetI)
apply (erule items.induct)
     apply simp_all
     apply (erule disjE)
      apply simp
     apply (rule_tac [1-4] disjI2)
     apply (erule items.Inj)
    apply (erule items.Fst)
   apply (erule items.Snd)
  apply (erule items.Body)
 apply (erule disjE)
  apply simp
  apply (drule subsetD [OF items_parts_subset [of H]])
  apply (drule parts.Auth_Snd)
  apply simp
 apply (rule disjI2)
 apply (erule items.Auth_Fst)
 apply assumption
apply (erule disjE)
 apply simp
 apply (drule subsetD [OF items_parts_subset [of H]])
 apply (drule parts.Auth_Fst)
 apply simp
apply (rule disjI2)
apply (erule items.Auth_Snd)
apply assumption
done

lemma items_auth_data_in_1:
 "items (insert (Auth_Data x y) H) \<subseteq>
    insert (Auth_Data x y) (items ({Pri_AgrK x, Pri_AgrK y} \<union> H))"
apply (rule subsetI)
apply (erule items.induct)
     apply simp_all
     apply (erule disjE)
      apply simp
     apply (rule_tac [1-4] disjI2)
     apply (rule items.Inj)
     apply simp
    apply (erule items.Fst)
   apply (erule items.Snd)
  apply (erule items.Body)
 apply (erule disjE)
  apply simp
  apply (rule items.Inj)
  apply simp
 apply (erule items.Auth_Fst)
 apply assumption
apply (erule disjE)
 apply simp
 apply (rule items.Inj)
 apply simp
apply (erule items.Auth_Snd)
apply assumption
done

lemma items_auth_data_in_2:
 "Pri_AgrK x \<in> items H \<or> Pri_AgrK y \<in> items H \<Longrightarrow>
    insert (Auth_Data x y) (items ({Pri_AgrK x, Pri_AgrK y} \<union> H)) \<subseteq>
      items (insert (Auth_Data x y) H)"
apply (rule subsetI)
apply simp
apply rotate_tac
apply (erule disjE)
 apply (rule items.Inj)
 apply simp
apply (subst items_idem [symmetric])
apply (erule rev_subsetD)
apply (rule items_mono)
apply (rule subsetI)
apply simp
apply rotate_tac
apply (erule disjE)
 apply simp
 apply (erule disjE)
  apply (erule rev_subsetD)
  apply (rule items_mono)
  apply blast
 apply (rule items.Auth_Fst [of _ y])
  apply (rule items.Inj)
  apply simp
 apply (erule rev_subsetD)
 apply (rule items_mono)
 apply blast
apply rotate_tac
apply (erule disjE)
 apply simp
 apply (erule disjE)
  apply (rule items.Auth_Snd [of x])
   apply (rule items.Inj)
   apply simp
  apply (erule rev_subsetD)
  apply (rule items_mono)
  apply blast
 apply (erule rev_subsetD)
 apply (rule items_mono)
 apply blast
apply (rule items.Inj)
apply simp
done

lemma items_auth_data_in:
 "Pri_AgrK x \<in> items H \<or> Pri_AgrK y \<in> items H \<Longrightarrow>
    items (insert (Auth_Data x y) H) =
      insert (Auth_Data x y) (items ({Pri_AgrK x, Pri_AgrK y} \<union> H))"
by (rule equalityI, rule items_auth_data_in_1, rule items_auth_data_in_2)

lemma items_auth_data_out:
 "\<lbrakk>Pri_AgrK x \<notin> items H; Pri_AgrK y \<notin> items H\<rbrakk> \<Longrightarrow>
    items (insert (Auth_Data x y) H) = insert (Auth_Data x y) (items H)"
apply (rule equalityI [OF _ items_insert])
apply (rule subsetI)
apply (erule items.induct)
     apply simp_all
     apply (erule disjE)
      apply simp
     apply (rule_tac [1-4] disjI2)
     apply (erule items.Inj)
    apply (erule items.Fst)
   apply (erule items.Snd)
  apply (erule items.Body)
 apply (erule disjE)
  apply simp
 apply (erule items.Auth_Fst)
 apply assumption
apply (erule disjE)
 apply simp
apply (erule items.Auth_Snd)
apply assumption
done

lemma items_crypt_1:
 "items (insert (Crypt K X) H) \<subseteq> insert (Crypt K X) (items (insert X H))"
apply (rule subsetI)
apply (erule items.induct)
     apply simp_all
     apply (erule disjE)
      apply simp
     apply (rule_tac [1-4] disjI2)
     apply (rule items.Inj)
     apply simp
    apply (erule items.Fst)
   apply (erule items.Snd)
  apply (erule disjE)
   apply simp
   apply (rule items.Inj)
   apply simp
  apply (erule items.Body)
 apply (erule items.Auth_Fst)
 apply assumption
apply (erule items.Auth_Snd)
apply assumption
done

lemma items_crypt_2:
 "insert (Crypt K X) (items (insert X H)) \<subseteq> items (insert (Crypt K X) H)"
apply (rule subsetI)
apply simp
apply (erule disjE)
 apply simp
 apply (rule items.Inj)
 apply simp
apply (erule items.induct)
     apply simp
     apply (erule disjE)
      apply simp
      apply (rule items.Body [of K])
      apply (rule items.Inj)
      apply simp
     apply (rule items.Inj)
     apply simp
    apply (erule items.Fst)
   apply (erule items.Snd)
  apply (erule items.Body)
 apply (erule items.Auth_Fst)
 apply assumption
apply (erule items.Auth_Snd)
apply assumption
done

lemma items_crypt:
 "items (insert (Crypt K X) H) = insert (Crypt K X) (items (insert X H))"
by (rule equalityI, rule items_crypt_1, rule items_crypt_2)

lemma items_mpair_1:
 "items (insert \<lbrace>X, Y\<rbrace> H) \<subseteq> insert \<lbrace>X, Y\<rbrace> (items ({X, Y} \<union> H))"
apply (rule subsetI)
apply (erule items.induct)
     apply simp_all
     apply (erule disjE)
      apply simp
     apply (rule_tac [1-4] disjI2)
     apply (rule items.Inj)
     apply simp
    apply (erule disjE)
     apply simp
     apply (rule items.Inj)
     apply simp
    apply (erule items.Fst)
   apply (erule disjE)
    apply simp
    apply (rule items.Inj)
    apply simp
   apply (erule items.Snd)
  apply (erule items.Body)
 apply (erule items.Auth_Fst)
 apply assumption
apply (erule items.Auth_Snd)
apply assumption
done

lemma items_mpair_2:
 "insert \<lbrace>X, Y\<rbrace> (items ({X, Y} \<union> H)) \<subseteq> items (insert \<lbrace>X, Y\<rbrace> H)"
apply (rule subsetI)
apply simp
apply (erule disjE)
 apply (rule items.Inj)
 apply simp
apply (erule items.induct)
     apply simp
     apply (erule disjE)
      apply simp
      apply (rule items.Fst [of _ Y])
      apply (rule items.Inj)
      apply simp
     apply (erule disjE)
      apply simp
      apply (rule items.Snd [of X])
      apply (rule items.Inj)
      apply simp
     apply (rule items.Inj)
     apply simp
    apply (erule items.Fst)
   apply (erule items.Snd)
  apply (erule items.Body)
 apply (erule items.Auth_Fst)
 apply assumption
apply (erule items.Auth_Snd)
apply assumption
done

lemma items_mpair:
 "items (insert \<lbrace>X, Y\<rbrace> H) = insert \<lbrace>X, Y\<rbrace> (items ({X, Y} \<union> H))"
by (rule equalityI, rule items_mpair_1, rule items_mpair_2)

lemma analz_subset:
 "H \<subseteq> analz H"
by (rule subsetI, rule analz.Inj)

lemma analz_idem:
 "analz (analz H) = analz H"
apply (rule equalityI)
 apply (rule subsetI)
 apply (erule analz.induct)
      apply assumption
     apply (erule analz.Fst)
    apply (erule analz.Snd)
   apply (erule analz.Decrypt)
   apply assumption
  apply (erule analz.Auth_Fst)
  apply assumption
 apply (erule analz.Auth_Snd)
 apply assumption
apply (rule analz_subset)
done

lemma analz_parts_subset:
 "analz H \<subseteq> parts H"
apply (rule subsetI)
apply (erule analz.induct)
     apply (erule parts.Inj)
    apply (erule parts.Fst)
   apply (erule parts.Snd)
  apply (erule parts.Body)
 apply (erule parts.Auth_Fst)
apply (erule parts.Auth_Snd)
done

lemma analz_items_subset:
 "analz H \<subseteq> items H"
apply (rule subsetI)
apply (erule analz.induct)
     apply (erule items.Inj)
    apply (erule items.Fst)
   apply (erule items.Snd)
  apply (erule items.Body)
 apply (erule items.Auth_Fst)
 apply assumption
apply (erule items.Auth_Snd)
apply assumption
done

lemma analz_simp:
 "H \<subseteq> range Agent \<union>
    range Number \<union>
    range Nonce \<union>
    range Key \<union>
    range Hash \<union>
    range Passwd \<union>
    range Pri_AgrK \<union>
    range Pub_AgrK \<Longrightarrow>
  analz H = H"
apply (rule equalityI)
 apply (subst (3) parts_simp [symmetric])
  apply assumption
 apply (rule analz_parts_subset)
apply (rule analz_subset)
done

lemma analz_mono:
 "G \<subseteq> H \<Longrightarrow> analz G \<subseteq> analz H"
apply (rule subsetI)
apply (erule analz.induct)
     apply (drule subsetD)
      apply assumption
     apply (erule analz.Inj)
    apply (erule analz.Fst)
   apply (erule analz.Snd)
  apply (erule analz.Decrypt)
  apply assumption
 apply (erule analz.Auth_Fst)
 apply assumption
apply (erule analz.Auth_Snd)
apply assumption
done

lemma analz_insert:
 "insert X (analz H) \<subseteq> analz (insert X H)"
apply (rule subsetI)
apply simp
apply (erule disjE)
 apply simp
 apply (rule analz.Inj)
 apply simp
apply (erule rev_subsetD)
apply (rule analz_mono)
apply blast
done

lemma analz_simp_insert_1:
 "X \<in> analz H \<Longrightarrow> analz (insert X H) = analz H"
apply (rule equalityI)
 apply (rule subsetI)
 apply (erule analz.induct [of _ "insert X H"])
      apply simp
      apply (erule disjE)
       apply simp
      apply (erule analz.Inj)
     apply (erule analz.Fst)
    apply (erule analz.Snd)
   apply (erule analz.Decrypt)
   apply assumption
  apply (erule analz.Auth_Fst)
  apply assumption
 apply (erule analz.Auth_Snd)
 apply assumption
apply (rule analz_mono)
apply blast
done

lemma analz_simp_insert_2:
 "X \<in> range Agent \<union>
    range Number \<union>
    range Nonce \<union>
    range Hash \<union>
    range Passwd \<union>
    range Pub_AgrK \<Longrightarrow>
  analz (insert X H) = insert X (analz H)"
apply (rule equalityI [OF _ analz_insert])
apply (rule subsetI)
apply (erule analz.induct)
     apply simp_all
     apply (rotate_tac [!])
     apply (erule disjE)
      apply simp
     apply (rule disjI2)
     apply (erule analz.Inj)
    apply (erule disjE)
     apply blast
    apply (rule disjI2)
    apply (erule analz.Fst)
   apply (erule disjE)
    apply blast
   apply (rule disjI2)
   apply (erule analz.Snd)
  apply (erule disjE)
   apply blast
  apply (erule disjE)
   apply blast
  apply (rule disjI2)
  apply (erule analz.Decrypt)
  apply assumption
 apply (erule disjE)
  apply blast
 apply (erule disjE)
  apply blast
 apply (rule disjI2)
 apply (erule analz.Auth_Fst)
 apply assumption
apply (erule disjE)
 apply blast
apply (erule disjE)
 apply blast
apply (rule disjI2)
apply (erule analz.Auth_Snd)
apply assumption
done

lemma analz_auth_data_in_1:
 "analz (insert (Auth_Data x y) H) \<subseteq>
    insert (Auth_Data x y) (analz ({Pri_AgrK x, Pri_AgrK y} \<union> H))"
apply (rule subsetI)
apply (erule analz.induct)
     apply simp_all
     apply (erule disjE)
      apply simp
     apply (rule_tac [1-4] disjI2)
     apply (rule analz.Inj)
     apply simp
    apply (erule analz.Fst)
   apply (erule analz.Snd)
  apply (erule analz.Decrypt)
  apply assumption
 apply (erule disjE)
  apply simp
  apply (rule analz.Inj)
  apply simp
 apply (erule analz.Auth_Fst)
 apply assumption
apply (erule disjE)
 apply simp
 apply (rule analz.Inj)
 apply simp
apply (erule analz.Auth_Snd)
apply assumption
done

lemma analz_auth_data_in_2:
 "Pri_AgrK x \<in> analz H \<or> Pri_AgrK y \<in> analz H \<Longrightarrow>
    insert (Auth_Data x y) (analz ({Pri_AgrK x, Pri_AgrK y} \<union> H)) \<subseteq>
      analz (insert (Auth_Data x y) H)"
apply (rule subsetI)
apply simp
apply rotate_tac
apply (erule disjE)
 apply (rule analz.Inj)
 apply simp
apply (subst analz_idem [symmetric])
apply (erule rev_subsetD)
apply (rule analz_mono)
apply (rule subsetI)
apply simp
apply rotate_tac
apply (erule disjE)
 apply simp
 apply (erule disjE)
  apply (erule rev_subsetD)
  apply (rule analz_mono)
  apply blast
 apply (rule analz.Auth_Fst [of _ y])
  apply (rule analz.Inj)
  apply simp
 apply (erule rev_subsetD)
 apply (rule analz_mono)
 apply blast
apply rotate_tac
apply (erule disjE)
 apply simp
 apply (erule disjE)
  apply (rule analz.Auth_Snd [of x])
   apply (rule analz.Inj)
   apply simp
  apply (erule rev_subsetD)
  apply (rule analz_mono)
  apply blast
 apply (erule rev_subsetD)
 apply (rule analz_mono)
 apply blast
apply (rule analz.Inj)
apply simp
done

lemma analz_auth_data_in:
 "Pri_AgrK x \<in> analz H \<or> Pri_AgrK y \<in> analz H \<Longrightarrow>
    analz (insert (Auth_Data x y) H) =
      insert (Auth_Data x y) (analz ({Pri_AgrK x, Pri_AgrK y} \<union> H))"
by (rule equalityI, rule analz_auth_data_in_1, rule analz_auth_data_in_2)

lemma analz_auth_data_out:
 "\<lbrakk>Pri_AgrK x \<notin> analz H; Pri_AgrK y \<notin> analz H\<rbrakk> \<Longrightarrow>
    analz (insert (Auth_Data x y) H) = insert (Auth_Data x y) (analz H)"
apply (rule equalityI [OF _ analz_insert])
apply (rule subsetI)
apply (erule analz.induct)
     apply simp_all
     apply (erule disjE)
      apply simp
     apply (rule_tac [1-4] disjI2)
     apply (erule analz.Inj)
    apply (erule analz.Fst)
   apply (erule analz.Snd)
  apply (erule analz.Decrypt)
  apply assumption
 apply (erule disjE)
  apply simp
 apply (erule analz.Auth_Fst)
 apply assumption
apply (erule disjE)
 apply simp
apply (erule analz.Auth_Snd)
apply assumption
done

lemma analz_crypt_in_1:
 "analz (insert (Crypt K X) H) \<subseteq> insert (Crypt K X) (analz (insert X H))"
apply (rule subsetI)
apply (erule analz.induct)
     apply simp_all
     apply (erule disjE)
      apply simp
     apply (rule_tac [1-4] disjI2)
     apply (rule analz.Inj)
     apply simp
    apply (erule analz.Fst)
   apply (erule analz.Snd)
  apply (erule disjE)
   apply simp
   apply (rule analz.Inj)
   apply simp
  apply (erule analz.Decrypt)
  apply assumption
 apply (erule analz.Auth_Fst)
 apply assumption
apply (erule analz.Auth_Snd)
apply assumption
done

lemma analz_crypt_in_2:
 "Key (invK K) \<in> analz H \<Longrightarrow>
    insert (Crypt K X) (analz (insert X H)) \<subseteq> analz (insert (Crypt K X) H)"
apply (rule subsetI)
apply simp
apply (erule disjE)
 apply simp
 apply (rule analz.Inj)
 apply simp
apply rotate_tac
apply (erule analz.induct)
     apply simp
     apply (erule disjE)
      apply simp
      apply (rule analz.Decrypt [of K])
       apply (rule analz.Inj)
       apply simp
      apply (erule rev_subsetD)
      apply (rule analz_mono)
      apply blast
     apply (rule analz.Inj)
     apply simp
    apply (erule analz.Fst)
   apply (erule analz.Snd)
  apply (erule analz.Decrypt)
  apply assumption
 apply (erule analz.Auth_Fst)
 apply assumption
apply (erule analz.Auth_Snd)
apply assumption
done

lemma analz_crypt_in:
 "Key (invK K) \<in> analz H \<Longrightarrow>
    analz (insert (Crypt K X) H) = insert (Crypt K X) (analz (insert X H))"
by (rule equalityI, rule analz_crypt_in_1, rule analz_crypt_in_2)

lemma analz_crypt_out:
 "Key (invK K) \<notin> analz H \<Longrightarrow>
    analz (insert (Crypt K X) H) = insert (Crypt K X) (analz H)"
apply (rule equalityI [OF _ analz_insert])
apply (rule subsetI)
apply (erule analz.induct)
     apply simp_all
     apply (erule disjE)
      apply simp
     apply (rule_tac [1-4] disjI2)
     apply (erule analz.Inj)
    apply (erule analz.Fst)
   apply (erule analz.Snd)
  apply (erule disjE)
   apply simp
  apply (erule analz.Decrypt)
  apply assumption
 apply (erule analz.Auth_Fst)
 apply assumption
apply (erule analz.Auth_Snd)
apply assumption
done

lemma analz_mpair_1:
 "analz (insert \<lbrace>X, Y\<rbrace> H) \<subseteq> insert \<lbrace>X, Y\<rbrace> (analz ({X, Y} \<union> H))"
apply (rule subsetI)
apply (erule analz.induct)
     apply simp_all
     apply (erule disjE)
      apply simp
     apply (rule_tac [1-4] disjI2)
     apply (rule analz.Inj)
     apply simp
    apply (erule disjE)
     apply simp
     apply (rule analz.Inj)
     apply simp
    apply (erule analz.Fst)
   apply (erule disjE)
    apply simp
    apply (rule analz.Inj)
    apply simp
   apply (erule analz.Snd)
  apply (erule analz.Decrypt)
  apply assumption
 apply (erule analz.Auth_Fst)
 apply assumption
apply (erule analz.Auth_Snd)
apply assumption
done

lemma analz_mpair_2:
 "insert \<lbrace>X, Y\<rbrace> (analz ({X, Y} \<union> H)) \<subseteq> analz (insert \<lbrace>X, Y\<rbrace> H)"
apply (rule subsetI)
apply simp
apply (erule disjE)
 apply (rule analz.Inj)
 apply simp
apply (erule analz.induct)
     apply simp
     apply (erule disjE)
      apply simp
      apply (rule analz.Fst [of _ Y])
      apply (rule analz.Inj)
      apply simp
     apply (erule disjE)
      apply simp
      apply (rule analz.Snd [of X])
      apply (rule analz.Inj)
      apply simp
     apply (rule analz.Inj)
     apply simp
    apply (erule analz.Fst)
   apply (erule analz.Snd)
  apply (erule analz.Decrypt)
  apply assumption
 apply (erule analz.Auth_Fst)
 apply assumption
apply (erule analz.Auth_Snd)
apply assumption
done

lemma analz_mpair:
 "analz (insert \<lbrace>X, Y\<rbrace> H) = insert \<lbrace>X, Y\<rbrace> (analz ({X, Y} \<union> H))"
by (rule equalityI, rule analz_mpair_1, rule analz_mpair_2)

lemma synth_simp_intro:
 "X \<in> synth H \<Longrightarrow>
    X \<in> range Nonce \<union>
      range Key \<union>
      range Passwd \<union>
      range Pri_AgrK \<union>
      range Pub_AgrK \<Longrightarrow>
  X \<in> H"
by (erule synth.cases, blast+)

lemma synth_auth_data:
 "Auth_Data x y \<in> synth H \<Longrightarrow>
    Auth_Data x y \<in> H \<or> Pri_AgrK x \<in> H \<and> Pri_AgrK y \<in> H"
by (erule synth.cases, simp_all)

lemma synth_crypt:
 "Crypt K X \<in> synth H \<Longrightarrow> Crypt K X \<in> H \<or> X \<in> synth H \<and> Key K \<in> H"
by (erule synth.cases, simp_all)

lemma synth_mpair:
 "\<lbrace>X, Y\<rbrace> \<in> synth H \<Longrightarrow> \<lbrace>X, Y\<rbrace> \<in> H \<or> X \<in> synth H \<and> Y \<in> synth H"
by (erule synth.cases, simp_all)

lemma synth_analz_fst:
 "\<lbrace>X, Y\<rbrace> \<in> synth (analz H) \<Longrightarrow> X \<in> synth (analz H)"
proof (drule_tac synth_mpair, erule_tac disjE)
qed (drule analz.Fst, erule synth.Inj, erule conjE)

lemma synth_analz_snd:
 "\<lbrace>X, Y\<rbrace> \<in> synth (analz H) \<Longrightarrow> Y \<in> synth (analz H)"
proof (drule_tac synth_mpair, erule_tac disjE)
qed (drule analz.Snd, erule synth.Inj, erule conjE)

end
