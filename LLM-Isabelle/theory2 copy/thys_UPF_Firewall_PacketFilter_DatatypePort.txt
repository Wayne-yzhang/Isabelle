theory 
  DatatypePort
  imports 
    NetworkCore
begin


datatype DatatypeAddress = dmz_adr | intranet_adr | internet_adr

type_synonym  
  port = int
type_synonym  
  DatatypePort =  "(DatatypeAddress \<times> port)"

instance DatatypeAddress :: adr ..

definition
  dmz::"DatatypePort net" where
  "dmz = {{(a,b). a = dmz_adr}}"
definition
  intranet::"DatatypePort net" where
  "intranet = {{(a,b). a = intranet_adr}}"
definition
  internet::"DatatypePort net" where
  "internet = {{(a,b). a = internet_adr}}"

overloading src_port_datatype \<equiv> "src_port :: ('\<alpha>::adr,'\<beta>) packet \<Rightarrow> '\<gamma>::port" 
begin 
definition 
  "src_port_datatype (x::(DatatypePort,'\<beta>) packet)  \<equiv> (snd o fst o snd) x"
end 

overloading dest_port_datatype \<equiv> "dest_port :: ('\<alpha>::adr,'\<beta>) packet \<Rightarrow> '\<gamma>::port"
begin
definition 
  "dest_port_datatype (x::(DatatypePort,'\<beta>) packet)  \<equiv>(snd o fst o snd o snd) x"
end 

overloading subnet_of_datatype \<equiv> "subnet_of :: '\<alpha>::adr \<Rightarrow> '\<alpha> net"
begin 
definition
  "subnet_of_datatype (x::DatatypePort) \<equiv> {{(a,b::int). a = fst x}}" 
end

lemma src_port : "src_port ((a,x,d,e)::(DatatypePort,'\<beta>) packet) = snd x"
  by (simp add: src_port_datatype_def in_subnet)

lemma dest_port : "dest_port ((a,d,x,e)::(DatatypePort,'\<beta>) packet) = snd x"
  by (simp add: dest_port_datatype_def in_subnet)
    
lemmas DatatypePortLemmas = src_port dest_port src_port_datatype_def dest_port_datatype_def 

end
