theory TopoS_Interface_impl
imports "Lib/FiniteGraph" "Lib/FiniteListGraph" TopoS_Interface TopoS_Helper
begin

  

   We will always require the stricter @{const wf_list_graph}, which implies @{const wf_graph}.
\<close>
      spec: "SecurityInvariant sinvar_spec default_node_properties receiver_violation" \<comment> \<open>specification is valid\<close>
  subsection \<open>Security Invariants Packed\<close>
  text \<open>We pack all necessary functions and properties of a security invariant in a struct-like data structure.\<close>
   text\<open>The packed list implementation must comply with the formal definition.\<close>
    fixes m :: "('v::vertex, 'a) TopoS_packed" \<comment> \<open>concrete model implementation\<close>
    and sinvar_spec::"('v::vertex) graph \<Rightarrow> ('v::vertex \<Rightarrow> 'a) \<Rightarrow> bool" \<comment> \<open>specification\<close>
  subsection\<open>Helpful Lemmata\<close>
  text\<open>show that @{term "sinvar"} complies\<close>
subsection \<open>Helper lemmata\<close>
  text\<open>Provide @{term sinvar} function and get back a function that computes the list of offending flows
  
  Exponential time!
\<close>
  text\<open>proof rule: if @{term sinvar} complies, @{const Generic_offending_list} complies\<close>
  text\<open>With @{const minimalize_offending_overapprox}, we can get one offending flow\<close>
section\<open>Security Invariant Library\<close>
