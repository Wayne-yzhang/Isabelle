theory Corecursive_Prop
  imports
    SymbolicPrimitive
    Operational
    Denotational

begin


fun TESL_interpretation_atomic_stepwise
where

lemma TESL_interp_unfold_stepwise_sporadicon:
by auto

lemma TESL_interp_unfold_stepwise_tagrelgen:
by auto

lemma TESL_interp_unfold_stepwise_implies:
by auto

lemma TESL_interp_unfold_stepwise_implies_not:
by auto

lemma TESL_interp_unfold_stepwise_timedelayed:
by auto

lemma TESL_interp_unfold_stepwise_weakly_precedes:
by auto

lemma TESL_interp_unfold_stepwise_strictly_precedes:
by auto

lemma TESL_interp_unfold_stepwise_kills:
by auto

theorem TESL_interp_unfold_stepwise_positive_atoms:
proof -
  from positive_atom.elims(2)[OF assms]
  with TESL_interp_unfold_stepwise_sporadicon show ?thesis by simp
qed

theorem TESL_interp_unfold_stepwise_negative_atoms:
proof (cases \<phi>)
  case SporadicOn thus ?thesis using assms by simp
next
  case TagRelation
    thus ?thesis using TESL_interp_unfold_stepwise_tagrelgen by simp
next
  case Implies
    thus ?thesis using TESL_interp_unfold_stepwise_implies by simp
next
  case ImpliesNot
    thus ?thesis using TESL_interp_unfold_stepwise_implies_not by simp
next
  case TimeDelayedBy
    thus ?thesis using TESL_interp_unfold_stepwise_timedelayed by simp
next
  case WeaklyPrecedes
    thus ?thesis
      using TESL_interp_unfold_stepwise_weakly_precedes by simp
next
  case StrictlyPrecedes
    thus ?thesis
      using TESL_interp_unfold_stepwise_strictly_precedes by simp
next
  case Kills
    thus ?thesis
      using TESL_interp_unfold_stepwise_kills by simp
qed

lemma forall_nat_expansion:
proof -
    using le_less by blast
  finally show ?thesis using Suc_le_eq by simp
qed

lemma exists_nat_expansion:
proof -
    using le_less by blast
  finally show ?thesis using Suc_le_eq by simp
qed

proof
next
qed

proof
      using Suc_le_eq antisym_conv2 by fastforce
next
qed


lemma TESL_interp_stepwise_sporadicon_coind_unfold:
by (simp add: Collect_conj_eq)


lemma TESL_interp_stepwise_tagrel_coind_unfold:
     \<lbrakk> \<lfloor>\<tau>\<^sub>v\<^sub>a\<^sub>r(K\<^sub>1, n), \<tau>\<^sub>v\<^sub>a\<^sub>r(K\<^sub>2, n)\<rfloor> \<in> R \<rbrakk>\<^sub>p\<^sub>r\<^sub>i\<^sub>m
     \<inter> \<lbrakk> time-relation \<lfloor>K\<^sub>1, K\<^sub>2\<rfloor> \<in> R \<rbrakk>\<^sub>T\<^sub>E\<^sub>S\<^sub>L\<^bsup>\<ge> Suc n\<^esup>\<close>
  have \<open>{\<rho>. \<forall>m\<ge>n. R (time ((Rep_run \<rho>) m K\<^sub>1), time ((Rep_run \<rho>) m K\<^sub>2))}
       = {\<rho>. R (time ((Rep_run \<rho>) n K\<^sub>1), time ((Rep_run \<rho>) n K\<^sub>2))}
       \<inter> {\<rho>. \<forall>m\<ge>Suc n. R (time ((Rep_run \<rho>) m K\<^sub>1), time ((Rep_run \<rho>) m K\<^sub>2))}\<close>
    using forall_nat_set_suc[of \<open>n\<close> \<open>\<lambda>x y. R (time ((Rep_run x) y K\<^sub>1),
     (   \<lbrakk> master \<not>\<Up> n \<rbrakk>\<^sub>p\<^sub>r\<^sub>i\<^sub>m                     \<comment> \<open>rule @{term implies_e1}\<close>
       \<union> \<lbrakk> master \<Up> n \<rbrakk>\<^sub>p\<^sub>r\<^sub>i\<^sub>m \<inter> \<lbrakk> slave \<Up> n \<rbrakk>\<^sub>p\<^sub>r\<^sub>i\<^sub>m)  \<comment> \<open>rule @{term implies_e2}\<close>
