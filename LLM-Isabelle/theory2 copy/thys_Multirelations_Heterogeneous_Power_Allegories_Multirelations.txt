theory Power_Allegories_Multirelations

imports Multirelations_Basics

begin


lemma eta_s_id: "\<eta> = s_id"
  unfolding s_id_def eta_set by force

lemma Lambda_empty [simp]: "\<Lambda> {} = p_id"
  unfolding Lambda_def p_id_def by blast

lemma alpha_pid [simp]: "\<alpha> p_id = {}"
  unfolding alpha_def epsiloff_def p_id_def by force



definition plift :: "('a,'b) mrel \<Rightarrow> ('a set,'b set) rel" ("_\<^sub>*" [1000] 999) where
  "R\<^sub>* = {(A,B). \<exists>f. (\<forall>a \<in> A. (a,f(a)) \<in> R) \<and> B = \<Union>(f ` A)}"

lemma pcomp_plift: "R \<cdot> S = R ; S\<^sub>*"
  unfolding s_prod_def plift_def relcomp_unfold by simp

lemma det_plift_klift: "deterministic R \<Longrightarrow> R\<^sub>* = (R)\<^sub>\<P>"
  unfolding deterministic_set plift_def klift_set_var
  apply (simp add: set_eq_iff)
  apply safe
  by metis+

lemma plift_ext2 [simp]: "\<eta> ; R\<^sub>* = R"
  by (metis eta_s_id pcomp_plift s_prod_idl)

lemma pliftext_3 [simp]: "\<eta>\<^sub>* = Id"
  by (simp add: det_eta det_plift_klift)

lemma d_dom_plift: "(Dom R)\<^sub>* = dom (R\<^sub>*)"
