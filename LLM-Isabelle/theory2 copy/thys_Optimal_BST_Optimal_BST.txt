theory Optimal_BST
imports Weighted_Path_Length Monad_Memo_DP.OptBST
begin


It iterates over a list and returns the rightmost element that minimizes a given function:

@{thm [display] argmin.simps}
\<close>
text \<open>An optimized version that avoids repeated computation of \<open>f x\<close>:\<close>
subsection \<open>The `Cubic' Algorithm\<close>
text \<open>We hide the details of the access frequencies \<open>a\<close> and \<open>b\<close> by working with an abstract
version of function \<open>w\<close> definied above (summing \<open>a\<close> and \<open>b\<close>). Later we interpret \<open>w\<close> accordingly.\<close>
subsubsection \<open>Functions \<open>wpl\<close> and \<open>min_wpl\<close>\<close>
text \<open>Function \<open>min_wpl i j\<close> computes the minimal weighted path length of any tree \<open>t\<close>
where @{prop"inorder t = [i..j]"}. It simply tries all possible indices between \<open>i\<close> and \<open>j\<close>
