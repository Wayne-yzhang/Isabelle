theory Launchbury
imports Terms Substitution
begin


\begin{itemize}
\item Explicit freshness requirements for bound variables in the application and the Let rule.
\item An additional parameter that stores variables that have to be avoided, but do not occur
\end{itemize}
\<close>
subsubsection \<open>Example evaluations\<close>
subsubsection \<open>Better introduction rules\<close>
text \<open>
This variant do not require freshness.
\<close>
    using \<open>atom y' \<sharp> _\<close>
    have "atom y' \<sharp> e'" using \<open>atom y' \<sharp> _\<close> by simp
    have [simp]: "(y' \<leftrightarrow> y) \<bullet> x = x" using \<open>atom y \<sharp> _\<close>  \<open>atom y' \<sharp> _\<close>
      using \<open>atom y \<sharp> _\<close>  \<open>atom y' \<sharp> _\<close>
  have "atom y' \<sharp> (\<Gamma>, e, x, L, \<Delta>, \<Theta>, z)" using  \<open>atom y' \<sharp> _\<close> by (simp add: fresh_Pair)
text \<open>
A single rule for values
\<close>
subsubsection \<open>Properties of the semantics\<close>
text \<open>
Heap entries are never removed.
\<close>
text \<open>
Live variables are not added to the heap.
\<close>
text \<open>
Fresh variables either stay fresh or are added to the heap.
\<close>
    thus ?thesis using Application.hyps(5) \<open>atom x \<sharp> (\<Delta>, Lam [y]. e')\<close> by auto
  from fresh_map_of[OF this  \<open>atom x \<sharp> \<Gamma>\<close>]
  hence "atom x \<sharp> e" using \<open>map_of \<Gamma> v = Some e\<close> by simp
  thus ?case using \<open>atom x \<sharp> v\<close> by (auto simp add: fresh_Pair fresh_Cons fresh_at_base)
  from \<open>atom x \<sharp> (\<Gamma>, scrut ? e\<^sub>1 : e\<^sub>2)\<close>
    assume "atom x \<sharp> (\<Delta>, Bool b)" with \<open>atom x \<sharp> (e\<^sub>1, e\<^sub>2)\<close>
    with reds_doesnt_forget[OF \<open>\<Delta> : (if b then e\<^sub>1 else e\<^sub>2) \<Down>\<^bsub>L\<^esub> \<Theta> : z\<close>]
        using Let.prems \<open>atom x \<sharp> \<Delta>\<close> False
text \<open>
Reducing the set of variables to avoid is always possible.
\<close> 
text \<open>Things are evaluated to a lambda expression, and the variable can be freely chose.\<close>
