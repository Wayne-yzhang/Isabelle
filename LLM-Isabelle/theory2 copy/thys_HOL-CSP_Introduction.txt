theory Introduction
  imports HOLCF
begin






  solve the sender/receiver problem. 

  Hoare proposed 3 denotational semantics for CSP:
    to distinguish non-deterministic choice from deterministic one, neither to distinguish deadlock 
    from infinite internal chatter,
    different maximum refusal sets, which is however cannot differentiate deadlock from infinite 
    internal chatter,   


In the sequel, we explain these two problems in more detail, giving some
motivation for the daunting complexity of the latter model.
It is this complexity which finally raises general interest in a 
formal verification.
\<close>
subsection\<open>Non-Determinism\<close>
text\<open>
   Let a and b be any two events in some set of events @{term "\<Sigma>"}. The two processes

   \<^descr>    @{term   "(a \<rightarrow> Stop) \<box> (b \<rightarrow> Stop)"}   \hspace{7cm}            (1)

   and

   \<^descr>    @{term   "(a \<rightarrow> Stop) \<sqinter> (b \<rightarrow> Stop)"}  \hspace{7cm}            (2)


\<close>
text\<open>
   cannot be distinguished under the trace semantics, in which both processes 
   are capable of performing the same sequences of events, i.e. both have the 
   same set of traces @{term "{{},{a},{b}}"}. This is because both processes can either 
   engage in @{term "a"} and then @{term "Stop"}, or engage in @{term "b"} and 
   then @{term "Stop"}. We would, however, like to distinguish between @{term "a"} 
   
   
   This can be done by considering the events that a process can refuse to engage 
   in when these events are offered by the environment; it cannot refuse either, 
   so we say its maximal refusal set is the set containing all elements of @{term "\<Sigma>"} other 
   than @{term "a"} and @{term "b"}, written @{term "\<Sigma>-{a,b}"}, i.e. it can 
   refuse all elements in @{term "\<Sigma>"} other than @{term "a"} or @{term "b"}. In the case 
   of the non-deterministic process (2), however, we wish to express that if the environment 
   offers the event @{term "a"} say, the process non-deterministically chooses either to engage in 
   @{term "a"}, to refuse it and engage in @{term "b"} (likewise for @{term "b"}). We say 
   therefore, that process (2) has two maximal refusal sets, @{term "\<Sigma>-{a}"} and 
   @{term "\<Sigma>-{b}"}, because it can refuse to engage in either @{term "a"} or 
   @{term "b"}, but not both. The notion of refusal sets is in this way used to distinguish 
   non-determinism from determinism in choices.
\<close>
subsection\<open>Infinite Chatter\<close>
text\<open>
   Consider the infinite process @{term "\<mu> X. a \<rightarrow> X"}
   which performs an infinite stream of @{term "a"}'s. If one now conceals the event a in 
   this process by writing
   \<^descr>      @{term "(\<mu> X. a \<rightarrow> X) \<setminus> a"}    \hspace{7.8cm}            (3)
\<close>   
text\<open>
   it no longer becomes possible to distinguish the behaviour of this process 
   from that of the deadlock process Stop. We would like to be able to make such 
   a distinction, since the former process has clearly not stopped but is engaging 
   in an unbounded sequence of internal actions invisible to the environment. We say 
   the process has diverged, and introduce the notion of a divergence set to denote 
   all sequences events that can cause a process to diverge. Hence, the process Stop 
   is assigned the divergence set @{term "{}"}, since it can not diverge, whereas the process 
   (3) above diverges on any sequence of events since the process begins to diverge 
   immediately, i.e. its divergence set is @{term "\<Sigma>\<^sup>*"} , where @{term "\<Sigma>\<^sup>*"} denotes the 
   set of all  sequences with elements in @{term "\<Sigma>"}. Divergence is undesirable and so 
   it is essential to be able to express it to ensure that it is avoided.
\<close>
subsection\<open>The Global Architecture of HOL-CSP 2.0\<close>
text\<open>
   The global architecture of HOL-CSP 2.0 has been substantially simplified compared 
   to HOL-CSP 1.0: the fixpoint reasoning is now entirely based on HOLCF (which meant that
   the continuity proofs for CSP operators had basically been re-done).\<close>
text\<open>
   tickfree-ness, the type definitions for failures and divergences as well as the
   global constraints on them (called the "axioms" in Hoare's Book.) captured in a 
   makes  the concepts of complete partial order, continuity, fixpoint-induction and general 





no_notation dummyPrefix  (infixr  "\<rightarrow>" 50)
no_notation dummyDet     (infixr  "\<box>" 50)
no_notation dummyNDet    (infixr  "\<sqinter>" 50)
no_notation dummyHide    (infixr  "\<setminus>" 50)

end
