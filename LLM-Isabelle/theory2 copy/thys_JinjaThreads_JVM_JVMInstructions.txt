theory JVMInstructions
imports
  JVMState
  "../Common/BinOp"
begin

datatype 'addr instr 

abbreviation CmpEq :: "'addr instr"
where "CmpEq \<equiv> BinOpInstr Eq"

abbreviation CmpLeq :: "'addr instr"
where "CmpLeq \<equiv> BinOpInstr LessOrEqual"

abbreviation CmpGeq :: "'addr instr"
where "CmpGeq \<equiv> BinOpInstr GreaterOrEqual"

abbreviation CmpLt :: "'addr instr"
where "CmpLt \<equiv> BinOpInstr LessThan"

abbreviation CmpGt :: "'addr instr"
where "CmpGt \<equiv> BinOpInstr GreaterThan"

abbreviation IAdd :: "'addr instr"
where "IAdd \<equiv> BinOpInstr Add"

abbreviation ISub :: "'addr instr"
where "ISub \<equiv> BinOpInstr Subtract"

abbreviation IMult :: "'addr instr"
where "IMult \<equiv> BinOpInstr Mult"

abbreviation IDiv :: "'addr instr"
where "IDiv \<equiv> BinOpInstr Div"

abbreviation IMod :: "'addr instr"
where "IMod \<equiv> BinOpInstr Mod"

abbreviation IShl :: "'addr instr"
where "IShl \<equiv> BinOpInstr ShiftLeft"

abbreviation IShr :: "'addr instr"
where "IShr \<equiv> BinOpInstr ShiftRightSigned"

abbreviation IUShr :: "'addr instr"
where "IUShr \<equiv> BinOpInstr ShiftRightZeros"

abbreviation IAnd :: "'addr instr"
where "IAnd \<equiv> BinOpInstr BinAnd"

abbreviation IOr :: "'addr instr"
where "IOr \<equiv> BinOpInstr BinOr"

abbreviation IXor :: "'addr instr"
where "IXor \<equiv> BinOpInstr BinXor"

type_synonym
  'addr bytecode = "'addr instr list"

type_synonym
  ex_entry = "pc \<times> pc \<times> cname option \<times> pc \<times> nat" 

type_synonym
  ex_table = "ex_entry list"

type_synonym
  'addr jvm_method = "nat \<times> nat \<times> 'addr bytecode \<times> ex_table"

type_synonym
  'addr jvm_prog = "'addr jvm_method prog" 

end
