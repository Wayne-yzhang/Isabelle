theory Tableau imports Common begin


  by (simp add: Order)

  by (simp add: Order insert_commute)


  by (rule Shift, simp) (rule Basic)

theorem AndAnd:
  apply (rule AlphaAnd)
  apply (rule Shift, rule Shift, simp)
  apply (rule BetaNegAnd)
   apply (rule Shift, rule Shift, simp)
   apply (rule Basic)
  apply (rule Swap)
  apply (rule Basic)
  done


lemma TC_soundness:
proof (induct G arbitrary: f rule: TC.induct)
  case (DeltaExists A n G)
  show ?case
  proof (rule ccontr)
      by simp

      by simp

      using DeltaExists by fast
    then consider
      by auto
    then show False
    proof cases
      case 1
      then show ?thesis
        using ** ..
    next
      case 2
        by blast
      then show ?thesis
    qed
  qed
next
  case (DeltaNegForall A n G)
  show ?case
  proof (rule ccontr)
      by simp

      by simp

      using DeltaNegForall by fast
    then consider
      by auto
    then show False
    proof cases
      case 1
      then show ?thesis
        using ** ..
    next
      case 2
        by blast
      then show ?thesis
    qed
  qed
qed auto

theorem tableau_soundness:
  using TC_soundness unfolding tableauproof_def list_all_def by fastforce


  by (simp add: ex_in_conv infinite_imp_nonempty)

theorem TCd_consistency:
  unfolding consistency_def
proof (intro conjI allI impI notI)
    by blast

  { fix p ts
    then show False

    then show False

    then show False

  { fix Z
      by (metis insert_absorb list.set(2))
      using * by simp
      by blast }

  { fix A B
      by (metis insert_absorb list.set(2))
      using * by simp
      by blast }

  { fix A B
      by (metis insert_absorb list.set(2))
      using * by simp
      by blast }

  { fix A B
      by (metis insert_absorb list.set(2))
      using * by simp
      by blast }

  { fix A B
      by (metis insert_absorb list.set(2))
      using * by auto }

  { fix A B
      by (metis insert_absorb list.set(2))
      using * by auto }

  { fix A B
      by (metis insert_absorb list.set(2))
      using * by auto }

      by (metis insert_absorb list.set(2))
      using * by simp
      by blast }

      by (metis insert_absorb list.set(2))
      using * by simp
      by blast }

  { fix P
      by simp
      using inf_param Diff_infinite_finite finite_compl infinite_UNIV_listI by blast
      using infinite_imp_nonempty by blast
      using Ball_set_list_all by auto
      by (metis insert_absorb list.set(2))
      using * by simp
      by blast }

  { fix P
      by simp
      using inf_param Diff_infinite_finite finite_compl infinite_UNIV_listI by blast
      using infinite_imp_nonempty by blast
      using Ball_set_list_all by auto
      by (metis insert_absorb list.set(2))
      using * by simp
      by blast }
qed

theorem tableau_completeness':
proof (rule ccontr)
  fix e

  let ?f = HApp

    by (simp add: list_all_iff)

  { fix x
      using TCd_consistency by blast
      by (simp add: Compl_eq_Diff_UNIV infinite_UNIV_listI)
      using model_existence by blast }
    by (simp add: list_all_iff)
    using calculation by simp
    using calculation by simp
    using mod by blast
  ultimately show False by simp
qed


lemma TC_psubst:
proof (induct G arbitrary: f rule: TC.induct)
  case (DeltaExists A n G)

    by simp
    using ex_new_if_finite inf_params
    by (metis finite.emptyI finite.insertI finite_UnI finite_imageI)


    using DeltaExists by blast
    using * new_psubst_image news_psubst by (fastforce simp add: image_Un)+
    using DeltaExists
    by (metis (mono_tags, lifting) Ball_set insertCI list.set(2) map_eq_conv psubst_upd)

    using DeltaExists by (metis list.simps(9))
    by simp
    by simp
    using TC.DeltaExists by fastforce
  then show ?case
    using DeltaExists G by simp
next
  case (DeltaNegForall A n G)

    by simp
    using ex_new_if_finite inf_params
    by (metis finite.emptyI finite.insertI finite_UnI finite_imageI)


    using DeltaNegForall by blast
    using * new_psubst_image news_psubst by (fastforce simp add: image_Un)+
    using DeltaNegForall
    by (metis (mono_tags, lifting) Ball_set insertCI list.set(2) map_eq_conv psubst_upd)

    using DeltaNegForall by (metis list.simps(9))
    by simp
    by simp
    using TC.DeltaNegForall by fastforce
  then show ?case
    using DeltaNegForall G by simp
next
  case (Order G G')
  then show ?case
    using Order TC.Order set_map by metis
qed (auto intro: TC.intros)

  by (induct G) simp_all

lemma TC_subcs:
proof (induct G arbitrary: c s rule: TC.induct)
  case (GammaForall A t G)

    by simp
    using ex_new_if_finite inf_params by metis


    using fresh psubst_new_away' by simp
    using fresh by simp
    using fun_upd_apply id_def subc_psubst UnCI fresh params.simps(8) by metis
    using fresh by auto
    using fresh by (induct G) simp_all
    using s A by (simp add: subcs_psubst)

    using fresh psubst_new_free' by fast
    using GammaForall by (metis new_subc_put subcs.simps(2))
    by simp
    by simp
    using TC.GammaForall by simp
    using TC_psubst inf_params by blast
    using G by simp
next
  case (GammaNegExists A t G)

    by simp
    using ex_new_if_finite inf_params by metis


    using fresh psubst_new_away' by simp
    using fresh by simp
    using fun_upd_apply id_def subc_psubst UnCI fresh params.simps(7,9) by metis

    using fresh by auto
    using fresh by (induct G) simp_all
    using s A by (simp add: subcs_psubst)

    using fresh psubst_new_free' by fast
    using GammaNegExists by (metis new_subc_put subc.simps(4) subcs.simps(2))
    by simp
    by simp
    using TC.GammaNegExists by simp
    using TC_psubst inf_params by blast
    using G by simp
next
  case (DeltaExists A n G)
  then show ?case
    case True
      using DeltaExists TC.DeltaExists by metis
      using DeltaExists True by simp_all
    ultimately show ?thesis
      by (simp add: subcs_news)
  next
    case False

      by simp
      using ex_new_if_finite inf_params by metis


      using fresh by simp

      using fresh psubst_new_free' by fast
      by (metis fun_upd_twist psubstt_upd(1))
      using fresh psubst_new_away' by simp

      using False fresh by auto

      by (simp add: subc_psubst)
      using DeltaExists fresh by simp

      using DeltaExists by simp
      using fresh by (induct G) simp_all
      by (induct G) simp_all
      by auto

      using DeltaExists by simp
      using TC_psubst inf_params DeltaExists.hyps(3) by fastforce
      using psubst_G by simp
      using psubst_A by simp

      using fresh by simp
      by simp
      using fresh new_subc by simp
      using TC.DeltaExists sub_A by fastforce
  qed
next
  case (DeltaNegForall A n G)
  then show ?case
    case True
      using DeltaNegForall TC.DeltaNegForall by metis
      using DeltaNegForall True by simp_all
    ultimately show ?thesis
      by (simp add: subcs_news)
  next
    case False

      by simp
      using ex_new_if_finite inf_params by metis


      using fresh by simp

      using fresh psubst_new_free' by fast
      using fun_upd_twist psubstt_upd(1) by metis
      using fresh psubst_new_away' by simp

      using False fresh by auto

      by (simp add: subc_psubst)
      using DeltaNegForall fresh by simp

      using DeltaNegForall by simp
      using fresh by (induct G) simp_all
      by (induct G) simp_all
      by auto

      using DeltaNegForall by simp
      using TC_psubst inf_params DeltaNegForall.hyps(3) by fastforce
      using psubst_G by simp
      using psubst_A by simp

      using fresh by simp
      by simp
      using fresh new_subc by simp
      using TC.DeltaNegForall sub_A by fastforce
  qed
next
  case (Order G G')
  then show ?case
    using TC.Order set_map subcs_map by metis
qed (auto intro: TC.intros)

lemma TC_map_subc:
  using assms TC_subcs subcs_map by metis

proof (induct G)
  case Nil
  then show ?case
    by simp
next
  case (Cons a G)
  then show ?case
    unfolding list_all_def
    using ex_closed closed_mono
    by (metis Ball_set list_all_simps(1) nat_le_linear)
qed


lemma valid_sub_consts:
  using assms by (induct cs arbitrary: p) simp_all

lemma closed_sub' [simp]:
  using assms by (induct t and l rule: closedt.induct closedts.induct) auto

  by (induct p arbitrary: m k) simp_all

proof (induct cs arbitrary: k p)
  case Nil
  then show ?case
    by simp
next
  case (Cons c cs)
  then show ?case
    using closed_sub by fastforce
qed

  by (induct G) simp_all


  by (induct G) simp_all

lemma valid_sub:
  using assms by simp

lemma eval_sub_consts:
  using assms
proof (induct cs arbitrary: p q)
  case Nil
  then show ?case
    by simp
next
  case (Cons c cs)
  then show ?case
    by (metis sub_consts.simps(2) subst_lemma)
qed

  by (induct cs arbitrary: p q) simp_all

lemma sub_consts_conjoin:
proof (induct G)
  case Nil
  then show ?case
    by (induct cs) simp_all
next
  case (Cons p G)
  then show ?case
    using sub_consts_And by simp
qed

lemma all_sub_consts_conjoin:
  by (induct G) (simp_all add: valid_sub_consts)

lemma valid_all_sub_consts:
  using assms eval_conjoin eval_sub_consts all_sub_consts_conjoin by metis

lemma TC_vars_for_consts:
proof (induct cs)
  case Nil
  then show ?case
    by simp
next
  case (Cons c cs)
    by simp
    unfolding comp_def by simp
    by simp
  finally show ?case
    using Cons TC_map_subc assms by metis
qed

lemma vars_for_consts_sub_consts:
proof (induct cs arbitrary: p)
  case (Cons c cs)
  then show ?case
    using subst_new_all closed_sub by force
qed simp

lemma all_vars_for_consts_sub_consts:
  using vars_for_consts_sub_consts unfolding list_all_def
  by (induct G) fastforce+

  by (induct G) simp_all

lemma all_fresh_constants:
proof -
    using assms fresh_constants by blast
  then show ?thesis
    using new_conjoin unfolding list_all_def by metis
qed

  by (induct cs arbitrary: p) simp_all


theorem tableau_completeness:
proof -
    using ex_all_closed by blast
  moreover obtain cs where **:
    using all_fresh_constants by blast
    using closed_sub_consts by fastforce

    using assms valid_all_sub_consts by blast
    using tableau_completeness' unfolding tableauproof_def by simp
    by (simp add: sub_consts_Neg)
    using TC_vars_for_consts by blast
  then show ?thesis
    unfolding tableauproof_def
qed

corollary
  using assms tableau_completeness unfolding tableauproof_def by simp

end
