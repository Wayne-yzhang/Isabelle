theory Pure_States
  imports Quantum_Extra2 "HOL-Eisbach.Eisbach"
begin


lemma pure_state_target_vector_eqI:
  by (simp add: assms pure_state_target_vector_def)

  by (simp add: pure_state_target_vector_def that)

lemma
proof -
    by (metis butterfly_0_right complex_vector.scale_zero_right inj_selfbutter_upto_phase)
    by (auto simp: complex_vector.linear_0)
    by (meson cblinfun_eq_0_on_UNIV_span complex_vector.span_UNIV)
    using \<psi>' apply (auto simp add: norm_inverse)
    by (metis cblinfun.scaleC_right rangeI)
  then show ?range
    by (metis (mono_tags, lifting) pure_state_target_vector_def verit_sko_ex')
  show ?norm
    apply (simp add: pure_state_target_vector_def)
    using ex by (metis (mono_tags, lifting) verit_sko_ex')
qed


lemma pure_state_target_vector_correct: 
proof -
    apply atomize_elim
    using pure_state_target_vector_in_range[OF assms]
    by (smt (verit, best) image_iff top_ccsubspace.rep_eq top_set_def)

    by auto

    using pure_state_target_vector_norm[OF assms]
    by auto

    by (simp add: \<psi>)
    by (simp flip: cblinfun_apply_cblinfun_compose add: register_mult register_scaleC n_def)
    by (simp add: \<psi>)
    by auto
  finally show ?thesis
    by -
qed



nonterminal pure_tensor

translations
  "_pure_tensor2 F \<psi> G \<phi>" \<rightharpoonup> "CONST pure_state (F; G) (\<psi> \<otimes>\<^sub>s \<phi>)"
  "_pure_tensor F \<psi> (CONST pure_state G \<phi>)" \<rightharpoonup> "CONST pure_state (F; G) (\<psi> \<otimes>\<^sub>s \<phi>)"
  "_pure_tensor_start x" \<rightharpoonup> "x"

  "_pure_tensor_start (_pure_tensor2 F \<psi> G \<phi>)" \<leftharpoondown> "CONST pure_state (F; G) (\<psi> \<otimes>\<^sub>s \<phi>)"
  "_pure_tensor F \<psi> (_pure_tensor2 G \<phi> H \<eta>)" \<leftharpoondown> "_pure_tensor2 F \<psi> (G;H) (\<phi> \<otimes>\<^sub>s \<eta>)"


  by (auto simp: default_prod_def simp flip: tensor_ell2_ket tensor_butterfly register_pair_apply)

lemma pure_state_eqI:
proof -
    by (rule pure_state_target_vector_eqI)
  with assms(2)
  show ?thesis
    unfolding pure_state'_def
    by simp
qed



lemma regular_registerI:
proof -
    using assms by (simp add: complements_def)
    apply atomize_elim
    by (meson Laws_Complement_Quantum.complement_unique equivalent_registers_def equivalent_registers_sym)
    using cFI by (auto simp: register_pair_apply)
    by (rule eq)
  finally show ?thesis
    unfolding regular_register_def by auto
qed

lemma regular_register_pair:
proof -
    using assms(1) compatible_def complement_is_complement complements_def iso_register_bij by blast+
    using assms(1) complement_is_complement complements_def iso_register_bij pair_is_register by blast
    using assms(1) unfolding compatible_def by auto

    by (metis assms(2) compatible_complement_right invI pair_is_register register_inj regular_register_def)
    by (metis assms(3) complement_is_complement complements_def inj_iff inv_f_f iso_register_inv_comp1 regular_register_def)


    apply (rule complements_complement_pair)
    by simp
    using Laws_Complement_Quantum.complement_unique equivalent_registers_sym by blast
    by (metis equivalent_registers_def)
    by (meson iso_register_is_register)
    by (rule iso_register_bij, simp)
    by auto

    unfolding t2_def I
    apply (subst o_inv_distrib[symmetric]) 
    by (auto simp: pair_o_tensor)
    apply auto
    by simp

    apply (rule complements_complement_pair')
    by simp
    using complements_def by blast
    using complement_unique equivalent_registers_sym by blast
    by (metis equivalent_registers_def)
    by (meson iso_register_is_register)
    by (rule iso_register_bij, simp)
    by auto

    unfolding t3_def I
    apply (subst o_inv_distrib[symmetric]) 
    by (auto simp: pair_o_tensor)
    apply auto
    by simp

    apply (rule tensor_extensionality3)
    by (auto simp: register_pair_apply  compatible_complement_pair1 compatible_complement_pair2)
    unfolding t1_def t2_def *[symmetric] apply (subst o_inv_distrib)
    by auto

    apply (rule tensor_extensionality3)
      apply (auto intro!: register_comp register_tensor_is_register pair_is_register complements_complement_pair
        simp: register_pair_apply compatible_complement_pair1)
    by (metis assms(1) cblinfun_assoc_left(1) swap_registers_left)
    unfolding t1_def t3_def *[symmetric] apply (subst o_inv_distrib)
    by (auto intro!: bij_comp simp: iso_register_bij o_inv_distrib)

    by (simp add: t2' t3')

    by auto
    by (simp add: *)
