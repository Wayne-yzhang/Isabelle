theory MultiDet
  imports Patch PreliminaryWork
begin






translations "\<^bold>\<box> p \<in> A. P"  \<rightleftharpoons>  "CONST MultiDet A (\<lambda>p. P)"




  by(simp add: MultiDet_def)

  unfolding MultiDet_def
  by (simp_all add: comp_fun_commute_on_def


lemma MultiDet_in_id[simp]:
  unfolding MultiDet_def by (simp add: insert_absorb)


lemma MultiDet_insert[simp]:
  unfolding MultiDet_def
  unfolding comp_fun_commute_on_def comp_def
     apply (metis Det_assoc Det_commute)
  by (auto simp: comp_fun_commute_on_def Det_commute Det_assoc comp_def)


lemma MultiDet_insert'[simp]:


lemma mono_MultiDet_eq:
  by (induct A rule: induct_subset_empty_single, simp, simp)
     (metis MultiDet_insert' insertCI)




proof -
qed


lemma test_MultiDet':
  by (metis Un_insert_right atMost_atLeast0 boolean_algebra_cancel.sup0
            image_Suc_lessThan insert_absorb2 insert_is_Un lessThan_Suc
            lessThan_Suc_atMost lessThan_Suc_eq_insert_0)




lemma MultiDet_cont[simp]:
  by (rule Finite_Set.finite_subset_induct[of A A], simp+)




lemma MultiDet_factorization_union:
  apply (erule finite_induct, simp_all)
  by (metis Det_commute Det_STOP)
     (metis MultiDet_insert MultiDet_insert' Det_assoc finite_UnI)




lemma MultiDet_BOT_absorb:
  apply(rule rev_mp[OF dom], rule rev_mp[OF bot]) 
  by (metis Det_commute MultiDet_insert' Det_BOT fin insert_absorb)


lemma MultiDet_is_BOT_iff:
  by (induct A rule: finite_induct) (auto simp add: STOP_neq_BOT Det_is_BOT_iff)




  by (erule finite_set_induct_nonempty, simp_all add: Det_id)




lemma MultiDet_STOP_neutral:
  by (metis Det_commute MultiDet_insert' Det_STOP)


lemma MultiDet_is_STOP_iff:
  by (induct rule: finite_induct) (auto simp add: Det_is_STOP_iff)




lemma MultiDet_Det:
proof (induct A rule: finite_induct)
  case empty show ?case by (simp add: Det_id)
next
  case (insert x F)
    by (metis (no_types, lifting) Det_assoc Det_commute insert.hyps(3))
qed




lemma MultiDet_sets_commute:
  by (induct A rule: finite_induct) (simp_all add: MultiDet_STOP_id MultiDet_Det)




lemma inj_on_mapping_over_MultiDet:
proof (induct A rule: induct_subset_empty_single)
  case 1
  thus ?case by force
next
  case 2
  thus ?case by force
next
  case (3 F a)
  show ?case
    apply (simp add: "3.hyps"(2) "3.hyps"(4) f1 del: MultiDet_insert)
    apply (subst "3.hyps"(5), rule inj_on_subset[OF "3.prems" subset_insertI])
    apply (rule mono_MultiDet_eq, simp add: "3.hyps"(2))
    using "3.prems" by fastforce
qed




  by (induct rule: finite_induct) (simp_all add: D_Det D_STOP)

lemma T_MultiDet:
  apply (simp add: T_STOP, intro impI, rotate_tac)
  by (induct rule: finite_set_induct_nonempty) (simp_all add: T_Det T_STOP)




lemma MultiDet_cartprod_\<sigma>s_set_\<sigma>s_set:
         simp_all add: inj_on_def)
  apply (subst prem_Multi_cartprod(1)[simplified, symmetric])
  apply (rule mono_MultiDet_eq, simp add: finite_image_set2)
  by (metis (no_types, lifting) case_prod_unfold f_inv_into_f)


lemma MultiDet_cartprod_s_set_\<sigma>s_set:
         simp_all add: inj_on_def) 
  apply (subst prem_Multi_cartprod(2)[simplified, symmetric])
  apply (rule mono_MultiDet_eq, simp add: finite_image_set2)
  by (metis (no_types, lifting) case_prod_unfold f_inv_into_f)


lemma MultiDet_cartprod_s_set_s_set:
         simp_all add: inj_on_def) 
  apply (subst prem_Multi_cartprod(3)[simplified, symmetric])
  apply (rule mono_MultiDet_eq, simp add: finite_image_set2)
  by (metis (no_types, lifting) case_prod_unfold f_inv_into_f)


lemma MultiDet_cartprod: 
  supply MultiDet_insert[simp del]
  case (1 A B)
    by (metis card_Diff1_less_iff ex_in_conv insert_Diff)
  proof cases
      by simp
  next
      by (simp add: MultiDet_STOP_id[OF "1.prems"(1)])
  next
    then obtain mA mB a b A' B'
      apply (subst MultiDet_factorization_union[symmetric], simp_all)
      apply (subst "1"(1)[rule_format, OF "*"(5, 3)], simp_all)
      apply (simp add: MultiDet_Det[symmetric])
      apply (subst Det_assoc, rule arg_cong_Det)
      apply (subst (3) Det_commute, rule arg_cong_Det)
             simp_all add: inj_on_def "**")
      apply (rule mono_MultiDet_eq)
       apply (simp; fail)
      by (metis "**" case_prod_conv f_inv_into_f)
  qed
qed



end