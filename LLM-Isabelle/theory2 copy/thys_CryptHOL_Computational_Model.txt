theory Computational_Model imports 
  Generative_Probabilistic_Value
begin

type_synonym security = nat
type_synonym advantage = "security \<Rightarrow> real"

type_synonym ('\<sigma>, 'call, 'ret) oracle' = "'\<sigma> \<Rightarrow> 'call \<Rightarrow> ('ret \<times> '\<sigma>) spmf"
type_synonym ('\<sigma>, 'call, 'ret) "oracle" = "security \<Rightarrow> ('\<sigma>, 'call, 'ret) oracle' \<times> '\<sigma>"

  let
    fun tr' [Const (@{type_syntax nat}, _), 
      Const (@{type_syntax prod}, _) $ 
        (Const (@{type_syntax fun}, _) $ s1 $ 
          (Const (@{type_syntax fun}, _) $ call $
            (Const (@{type_syntax pmf}, _) $
              (Const (@{type_syntax option}, _) $
                (Const (@{type_syntax prod}, _) $ ret $ s2))))) $
        s3] =
      if s1 = s2 andalso s1 = s3 then Syntax.const @{type_syntax oracle} $ s1 $ call $ ret
      else raise Match;
  in [(@{type_syntax "fun"}, K tr')]
  end
\<close>
subsection \<open>Shared state\<close>
    then show "I s'" using \<open>I s\<close> by(rule plus.callee_invariant)(simp add: \<open>x \<in> outs_\<I> \<I>l\<close>)
    then show "I s'" using \<open>I s\<close> by(rule plus.callee_invariant)(simp add: \<open>x \<in> outs_\<I> \<I>r\<close>)
  interpret left: callee_invariant_on left I \<I>l using \<open>?rhs\<close> by simp
  interpret right: callee_invariant_on right I \<I>r using \<open>?rhs\<close> by simp
    then show "I s'" using \<open>I s\<close> 
subsection \<open>Shared state with aborts\<close>
subsection \<open>Disjoint state\<close>
subsection \<open>Indexed oracles\<close>
subsection \<open>State extension\<close>
section \<open>Combining GPVs\<close>
subsection \<open>Shared state without interrupts\<close>
subsection \<open>Shared state with interrupts\<close>
subsection \<open>One-sided shifts\<close>
