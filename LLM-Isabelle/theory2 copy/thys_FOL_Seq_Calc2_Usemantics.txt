theory Usemantics imports SeCaV begin


primrec usemantics where



  by (induct p arbitrary: e) auto

  the function interpretation or not.\<close>
lemma uupd_lemma [iff]: \<open>n \<notin> params p \<Longrightarrow> usemantics u e (f(n := x)) g p \<longleftrightarrow> usemantics u e f g p\<close>
text \<open>The semantics of substituting variable i by term t in formula a are well-defined\<close>
  \<open>usemantics u e f g (subst a t i) \<longleftrightarrow> usemantics u (SeCaV.shift e i (semantics_term e f t)) f g a\<close>
subsubsection \<open>Soundness of SeCaV with regards to the bounded semantics\<close>
text \<open>We would like to prove that the SeCaV proof system is sound under the bounded semantics.\<close>
text \<open>If the environment and the function interpretation are well-formed, the semantics of terms
lemma usemantics_term [simp]:
  using assms by (induct t and ts rule: semantics_term.induct semantics_list.induct)
    (simp_all add: is_env_def is_fdenot_def)

  unfolding is_fdenot_def SeCaV.shift_def by simp

theorem sound_usemantics:
  using assms
proof (induct arbitrary: f rule: sequent_calculus.induct)
  case (10 i p z)
  then show ?case
    case False
      using 10 is_fdenot_shift by metis
      by fastforce
      using 10 by simp
    ultimately show ?thesis
      using 10 Ball_set insert_iff list.set(2) uupd_lemma by metis
  qed simp
next
  case (11 i p z)
  then show ?case
    case False
    moreover have
      using 11 is_fdenot_shift by metis
      by fastforce
      using 11 by simp
    ultimately show ?thesis
      using 11 Ball_set insert_iff list.set(2) uupd_lemma by metis
  qed simp
qed fastforce+

end
