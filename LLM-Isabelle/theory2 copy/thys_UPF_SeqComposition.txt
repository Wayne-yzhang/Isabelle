theory  
  SeqComposition
  imports 
    ElementaryPolicies
begin


fun    flat_orA :: "('\<alpha> decision) decision \<Rightarrow> ('\<alpha> decision)"
where "flat_orA(allow(allow y)) = allow y"
     |"flat_orA(allow(deny y))  = allow y"
     |"flat_orA(deny(allow y))  = allow y"
     |"flat_orA(deny(deny y))   = deny y"
       
lemma flat_orA_deny[dest]:"flat_orA x = deny y \<Longrightarrow> x = deny(deny y)"
  apply (case_tac "x")
   apply (rename_tac \<alpha>)
   apply (case_tac "\<alpha>", simp_all)[1]
  apply (rename_tac \<alpha>)
  apply (case_tac "\<alpha>", simp_all)[1]
  done

lemma flat_orA_allow[dest]: "flat_orA x = allow y \<Longrightarrow> x = allow(allow y) 
                                                    \<or> x = allow(deny y) 
                                                    \<or> x = deny(allow y)"
  apply (case_tac "x")
   apply (rename_tac \<alpha>)
   apply (case_tac "\<alpha>", simp_all)[1]
  apply (rename_tac \<alpha>)
  apply (case_tac "\<alpha>", simp_all)[1]
  done

fun    flat_orD :: "('\<alpha> decision) decision \<Rightarrow> ('\<alpha> decision)"
where "flat_orD(allow(allow y)) = allow y"
     |"flat_orD(allow(deny y))  = deny y"
     |"flat_orD(deny(allow y))  = deny y"
     |"flat_orD(deny(deny y))   = deny y"
       
lemma flat_orD_allow[dest]: "flat_orD x = allow y \<Longrightarrow> x = allow(allow y)"
  apply (case_tac "x")
   apply (rename_tac \<alpha>)
   apply (case_tac "\<alpha>", simp_all)[1]
  apply (rename_tac \<alpha>)
  apply (case_tac "\<alpha>", simp_all)[1]
  done

lemma flat_orD_deny[dest]: "flat_orD x = deny y \<Longrightarrow>  x = deny(deny y) 
                                                   \<or> x = allow(deny y) 
                                                   \<or> x = deny(allow y)"
  apply (case_tac "x")
   apply (rename_tac \<alpha>)
   apply (case_tac "\<alpha>", simp_all)[1]
  apply (rename_tac \<alpha>)
  apply (case_tac "\<alpha>", simp_all)[1]
  done

fun    flat_1 :: "('\<alpha> decision) decision \<Rightarrow> ('\<alpha> decision)"
where "flat_1(allow(allow y)) = allow y"
     |"flat_1(allow(deny y))  = allow y"
     |"flat_1(deny(allow y))  = deny y"
     |"flat_1(deny(deny y))   = deny y"

lemma flat_1_allow[dest]: "flat_1 x = allow y \<Longrightarrow> x = allow(allow y) \<or> x = allow(deny y)"
  apply (case_tac "x")
   apply (rename_tac \<alpha>)
   apply (case_tac "\<alpha>", simp_all)[1]
  apply (rename_tac \<alpha>)
  apply (case_tac "\<alpha>", simp_all)[1]
  done

lemma flat_1_deny[dest]: "flat_1 x = deny y \<Longrightarrow>  x = deny(deny y) \<or> x = deny(allow y)"
  apply (case_tac "x")
   apply (rename_tac \<alpha>)
   apply (case_tac "\<alpha>", simp_all)[1]
  apply (rename_tac \<alpha>)
  apply (case_tac "\<alpha>", simp_all)[1]
  done

fun    flat_2 :: "('\<alpha> decision) decision \<Rightarrow> ('\<alpha> decision)"
where "flat_2(allow(allow y)) = allow y"
     |"flat_2(allow(deny y))  = deny y"
     |"flat_2(deny(allow y))  = allow y"
     |"flat_2(deny(deny y))   = deny y"

lemma flat_2_allow[dest]: "flat_2 x = allow y \<Longrightarrow> x = allow(allow y) \<or> x = deny(allow y)"
  apply (case_tac "x")
   apply (rename_tac \<alpha>)
   apply (case_tac "\<alpha>", simp_all)[1]
  apply (rename_tac \<alpha>)
  apply (case_tac "\<alpha>", simp_all)[1]
done

lemma flat_2_deny[dest]: "flat_2 x = deny y \<Longrightarrow>  x = deny(deny y) \<or> x = allow(deny y)"
  apply (case_tac "x")
   apply (rename_tac \<alpha>)
   apply (case_tac "\<alpha>", simp_all)[1]
  apply (rename_tac \<alpha>)
  apply (case_tac "\<alpha>", simp_all)[1]
  done


fun lift :: "('\<alpha> \<mapsto> '\<beta>) \<Rightarrow> ('\<alpha> decision \<mapsto>'\<beta> decision)"  
where "lift f (deny s)  = (case f s of 
                             \<lfloor>y\<rfloor> \<Rightarrow> \<lfloor>deny y\<rfloor>
                           | \<bottom> \<Rightarrow> \<bottom>)"
    | "lift f (allow s) = (case f s of 
                              \<lfloor>y\<rfloor> \<Rightarrow> \<lfloor>allow y\<rfloor>
                           | \<bottom> \<Rightarrow> \<bottom>)"

lemma lift_mt [simp]: "lift \<emptyset> = \<emptyset>"
  apply (rule ext)
  subgoal for x 
    apply (case_tac "x")
     apply (simp_all)  
    done
  done

definition
  comp_orA :: "['\<beta>\<mapsto>'\<gamma>, '\<alpha>\<mapsto>'\<beta>] \<Rightarrow> '\<alpha>\<mapsto>'\<gamma>"  (infixl "o'_orA" 55) where
  "p2 o_orA p1 \<equiv> (map_option flat_orA) o (lift p2 \<circ>\<^sub>m p1)"

notation
  comp_orA  (infixl "\<circ>\<^sub>\<or>\<^sub>A" 55)

lemma comp_orA_mt[simp]:"p \<circ>\<^sub>\<or>\<^sub>A \<emptyset> = \<emptyset>"
  by(simp add: comp_orA_def)

lemma mt_comp_orA[simp]:"\<emptyset> \<circ>\<^sub>\<or>\<^sub>A p = \<emptyset>"
  by(simp add: comp_orA_def)

definition
  comp_orD :: "['\<beta>\<mapsto>'\<gamma>, '\<alpha>\<mapsto>'\<beta>] \<Rightarrow> '\<alpha>\<mapsto>'\<gamma>"  (infixl "o'_orD" 55) where
  "p2 o_orD p1 \<equiv> (map_option flat_orD) o (lift p2 \<circ>\<^sub>m p1)"

notation
  comp_orD  (infixl "\<circ>\<^sub>orD" 55)

lemma comp_orD_mt[simp]:"p o_orD \<emptyset> = \<emptyset>"
  by(simp add: comp_orD_def)

lemma mt_comp_orD[simp]:"\<emptyset> o_orD p = \<emptyset>"
  by(simp add: comp_orD_def)

definition
  comp_1 :: "['\<beta>\<mapsto>'\<gamma>, '\<alpha>\<mapsto>'\<beta>] \<Rightarrow> '\<alpha>\<mapsto>'\<gamma>"  (infixl "o'_1" 55) where
  "p2 o_1 p1 \<equiv> (map_option flat_1) o (lift p2 \<circ>\<^sub>m p1)"

notation
  comp_1  (infixl "\<circ>\<^sub>1" 55)

lemma comp_1_mt[simp]:"p \<circ>\<^sub>1 \<emptyset> = \<emptyset>"
  by(simp add: comp_1_def)

lemma mt_comp_1[simp]:"\<emptyset> \<circ>\<^sub>1 p = \<emptyset>"
  by(simp add: comp_1_def)

definition
  comp_2 :: "['\<beta>\<mapsto>'\<gamma>, '\<alpha>\<mapsto>'\<beta>] \<Rightarrow> '\<alpha>\<mapsto>'\<gamma>"  (infixl "o'_2" 55) where
  "p2 o_2 p1 \<equiv> (map_option flat_2) o (lift p2 \<circ>\<^sub>m p1)"

notation
  comp_2  (infixl "\<circ>\<^sub>2" 55)

lemma comp_2_mt[simp]:"p \<circ>\<^sub>2 \<emptyset> = \<emptyset>"
  by(simp add: comp_2_def)

lemma mt_comp_2[simp]:"\<emptyset> \<circ>\<^sub>2 p = \<emptyset>"
  by(simp add: comp_2_def)

end
