theory Agents imports Main 
begin




  agent = Server | Agent nat

consts 

specification (bad)
  Server_not_bad [iff]: "Server \<notin> bad"
    by (rule exI [of _ "{Agent 0}"], simp)

abbreviation 
  good :: "agent set"
where
  "good \<equiv> -bad"

abbreviation 
  Sv :: "agent"
where
  "Sv \<equiv> Server"




typedecl fid_t

datatype fresh_t = 
  mk_fresh "fid_t" "nat"      (infixr "$" 65) 

fun fid :: "fresh_t \<Rightarrow> fid_t" where
  "fid (f $ n) = f"

fun num :: "fresh_t \<Rightarrow> nat" where
  "num (f $ n) = n"



type_synonym 
  nonce = "fresh_t"


end
