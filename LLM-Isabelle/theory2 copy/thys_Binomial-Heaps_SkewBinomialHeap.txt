theory SkewBinomialHeap
imports Main "HOL-Library.Multiset"
begin

  are a data structure for priority queues with worst case O(1) {\em findMin}, 
  {\em insert}, and {\em meld} operations, and worst-case logarithmic 
  {\em deleteMin} operation.
  They are derived from priority queues in three steps:
    \begin{enumerate}
      \item Skew binomial trees are used to eliminate the possibility of 
            cascading links during insert operations. This reduces the complexity
            of an insert operation to $O(1)$.
      \item The current minimal element is cached. This approach, known as 
            {\em global root}, reduces the cost of a {\em findMin}-operation to
            O(1).
      \item By allowing skew binomial queues to contain skew binomial queues,
            the cost for meld-operations is reduced to $O(1)$. This approach
            is known as {\em data-structural bootstrapping}.
    \end{enumerate}

  In this theory, we combine Steps~2 and 3, i.e. we first implement skew binomial
  queues, and then bootstrap them. The bootstrapping implicitly introduces a 
  global root, such that we also get a constant time findMin operation.
\<close>
text \<open>Returns a multiset with all (element, priority) pairs from a queue\<close>
text \<open>Link two trees of rank $r$ to a new tree of rank $r+1$\<close>
text \<open>Link two trees of rank $r$ and a new element to a new tree of 
  rank $r+1$\<close>
text \<open>
  The invariant for trees claims that a tree labeled rank $0$ has no children, 
  and a tree labeled rank $r + 1$ is the result of an ordinary link or 
  a skew link of two trees with rank $r$.\<close>
text \<open>A heap satisfies the invariant, if all contained trees satisfy the 
  invariant, the ranks of the trees in the heap are distinct, except that the
  first two trees may have same rank, and the ranks are ordered in ascending 
  order.\<close>
text \<open>First part: All trees inside the queue satisfy the invariant.\<close>
text \<open>Second part: The ranks of the trees in the heap are distinct, 
  except that the first two trees may have same rank, and the ranks are 
  ordered in ascending order.\<close>
text \<open>For tail of queue\<close>
text \<open>For whole queue: First two elements may have same rank\<close>
  from \<open>tail_invar (a # bq)\<close> have "tail_invar bq" 
text \<open>The invariant for trees implies heap order.\<close>
text \<open>
  Although complexity of HOL-functions cannot be expressed within 
  HOL, we can express the height and length of a binomial heap.
  By showing that both, height and length, are logarithmic in the number 
  of contained elements, we give strong evidence that our functions have
  logarithmic complexity in the number of elements.
\<close>
text \<open>Height of a tree and queue\<close>
text \<open>A skew binomial tree of height $h$ contains at most  $2^{h+1} - 1$
  elements\<close>
text \<open>A skew binomial tree of height $h$ contains at least  $2^{h}$ elements\<close>
text \<open>
  A skew binomial heap of length $l$ contains at least $2^{l-1} - 1$ elements. 
\<close>
text \<open>Inserts a tree into the queue, such that two trees of same rank get 
  linked and are recursively inserted. This is the same definition as for 
  binomial queues and is used for melding.\<close>
text \<open>Insert an element with priority into a queue using skewlinks.\<close>
text \<open>Remove duplicate tree ranks by inserting the first tree of the 
  queue into the rest of the queue.\<close>
text \<open>Meld two uniquified queues using the same definition as for 
  binomial queues.\<close>
text \<open>Meld two queues using above functions.\<close>
text \<open>Ins operation satisfies rank invariant, see binomial queues\<close>
  next \<comment> \<open>analog\<close>
    from \<open>rank_invar (t1 # bq1)\<close> have "bq1 \<noteq> [] \<Longrightarrow> rank t1 < rank (hd bq1)" 
    from \<open>rank_invar (t2 # bq2)\<close> have r2: "bq2 \<noteq> [] \<Longrightarrow> rank t2 < rank (hd bq2)"
    with \<open>rank_invar (meldUniq bq1 bq2)\<close> r 
text \<open>Find the tree containing the minimal element.\<close>
text \<open>Find the minimal Element in the queue.\<close>
text \<open>Insert the roots of a given queue into an other queue.\<close>
text \<open>Remove the first tree, which has the priority $a$ within his root.\<close>
text \<open>Return the queue without the minimal element found by findMin\<close>
text \<open>
  In this section, we implement datastructural bootstrapping, to
  reduce the complexity of meld-operations to $O(1)$.
  The bootstrapping also contains a {\em global root}, caching the
  minimal element of the queue, and thus also reducing the complexity of
  findMin-operations to $O(1)$.

  Bootstrapping adds one more level of recursion:
  An {\em element} is an entry and a priority queues of elements.

  functors and recursive structures are used to elegantly implement bootstrapped
  heaps on top of ordinary heaps. However, such concepts are not supported in
  Isabelle/HOL, nor in Standard ML. Hence we have to use the 
  We manually specialize the heap datastructure, and re-implement the functions
  on the specialized data structure.

  The correctness proofs are done by defining a mapping from teh specialized to 
  the original data structure, and reusing the correctness statements of the 
  original data structure.
\<close>
text \<open>
  We first have to state some auxiliary lemmas and functions, mainly
  about multisets.
\<close>
text \<open>Finding the preimage of an element\<close>
text \<open>Very special lemma for images multisets of pairs, where the second
  component is a function of the first component\<close>
text \<open>We manually specialize the binomial tree to contain elements, that, in, 
  turn, may contain trees.
  Note that we specify nodes without explicit priority,
  as the priority is contained in the elements stored in the nodes.
\<close>
text \<open>
  In this section, we re-define the functions
  on the specialized priority queues, and show there correctness.
  This is done by defining a mapping to original priority queues,
  and re-using the correctness lemmas proven there.
\<close>
text \<open>Mapping to original binomial trees and queues\<close>
text \<open>Invariant and mapping to multiset are defined via the mapping\<close>
text \<open>Now starts the re-implementation of the functions\<close>
text \<open>Link two trees of rank $r$ and a new element to a new tree of 
  rank $r+1$\<close>
text \<open>Insert an element with priority into a queue using skewlinks.\<close>
text \<open>
  In this section, we define the ticked versions
  These functions work on elements, i.e. only on 
  heaps that contain at least one entry.
  Additionally, we define an invariant for elements, and
  a mapping to multisets of entries, and prove correct
  the ticked functions.
\<close>
text \<open>
  Size-function for termination proofs
\<close>
text \<open>
  Invariant for elements
\<close>
text \<open>
  Abstraction to multisets
\<close>
text \<open>
  In this phase, we extend the ticked versions to also work with
  empty priority queues.
\<close>
  text \<open>
    We don't use equality here, to prevent the code-generator
    Instead we use a case-distinction to check for emptiness.
\<close>
  text \<open>Correctness lemmas to be used with simplifier\<close>
text \<open>
   \underline{@{term_type "SkewBinomialHeap.to_mset"}}\\
        Abstraction to multiset.\\


    \underline{@{term_type "SkewBinomialHeap.empty"}}\\
        The empty heap. ($O(1)$)\\
    @{thm [display] SkewBinomialHeap.empty_correct[no_vars]}


    \underline{@{term_type "SkewBinomialHeap.isEmpty"}}\\
        Checks whether heap is empty. Mainly used to work around
    code-generation issues. ($O(1)$)\\
    @{thm [display] SkewBinomialHeap.isEmpty_correct[no_vars]}


    \underline{@{term "SkewBinomialHeap.insert"}}
    @{term_type [display] "SkewBinomialHeap.insert"}
        Inserts element ($O(1)$)\\
    @{thm [display] SkewBinomialHeap.insert_correct[no_vars]}


    \underline{@{term_type "SkewBinomialHeap.findMin"}}\\
        Returns a minimal element ($O(1)$)\\
    @{thm [display] SkewBinomialHeap.findMin_correct[no_vars]}


    \underline{@{term "SkewBinomialHeap.deleteMin"}}
    @{term_type [display] "SkewBinomialHeap.deleteMin"}
        Deletes {\em the} element that is returned by {\em find\_min}. $O(\log(n))$\\
    @{thm [display] SkewBinomialHeap.deleteMin_correct[no_vars]}


    \underline{@{term "SkewBinomialHeap.meld"}}
    @{term_type [display] "SkewBinomialHeap.meld"}
        Melds two heaps ($O(1)$)\\
    @{thm [display] SkewBinomialHeap.meld_correct[no_vars]}

\<close>
