theory TopoS_withOffendingFlows
imports TopoS_Interface
begin






context SecurityInvariant_withOffendingFlows
begin
  
  @{term "(\<And> nP N E' E. wf_graph \<lparr> nodes = N, edges = E \<rparr>  \<Longrightarrow> E' \<subseteq> E \<Longrightarrow> sinvar \<lparr> nodes = N, edges = E \<rparr> nP \<Longrightarrow> sinvar \<lparr> nodes = N, edges = E' \<rparr> nP )"}
  
  Having a valid invariant, removing edges retains the validity. I.e.\ prohibiting more, is more or equally secure.
\<close>
  text\<open>
    If one can show @{const sinvar_mono}, then the instantiation of the @{term SecurityInvariant_preliminaries} locale is tremendously simplified. 
\<close>
   text\<open>Invariant violations do not disappear if we add more flows.\<close>
   from delete_edges_wf[OF \<open>wf_graph G\<close>] have valid_G_delete: "wf_graph \<lparr>nodes = nodes G, edges = edges G - X\<rparr>" by(simp add: delete_edges_simp2)
   from \<open>X \<subseteq> Y\<close> have "edges G - Y \<subseteq> edges G - X" by blast
   with \<open>sinvar_mono\<close> sinvar_mono_def valid_G_delete have
   with \<open>\<not> sinvar (delete_edges G Y) nP\<close> show ?thesis by blast
subsection \<open>Offending Flows Not Empty Helper Lemmata\<close>
  text \<open>Give an over-approximation of offending flows (e.g. all edges) and get back a
          minimal set\<close>
  text\<open>The graph we check in @{const minimalize_offending_overapprox},
  We add @{term f} and remove it.\<close>
    \<comment> \<open>@{term "sinvar"} holds if we delete @{term "ff"}.
        With the following generalized statement, we show that it also holds if we delete @{term "minimalize_offending_overapprox ff []"}\<close>
      \<comment> \<open>Generalized for arbitrary @{term keeps}\<close>
    \<comment> \<open>@{term "keeps = []"}\<close>
    from \<open>sinvar (delete_edges G (set ff)) nP\<close> minimalize_offending_overapprox_maintains_evalmodel have
    txt\<open>We need to show minimality of @{term "minimalize_offending_overapprox ff []"}.
      Minimality means @{term "\<forall>(e1, e2)\<in>?minset. \<not> sinvar (add_edge e1 e2 (delete_edges G ?minset)) nP"}.
      We show the following generalized fact.
\<close>
        let ?goal="?case" \<comment> \<open>we show this by case distinction\<close>
           { \<comment> \<open>a lemma we only need once here\<close>
                from not_model_mono_imp_addedge_mono[OF mono vG \<open>(fst a, snd a) \<in> edges G\<close> this 1] show ?thesis
   text\<open>
   To show that @{const set_offending_flows} is not empty, the previous corollary @{thm mono_imp_set_offending_flows_not_empty} is very useful.
   Just select @{term "set ff = edges G"}.
\<close>
   text\<open>
   If there exists a security violations,
   there a means to fix it if and only if the network in which nobody communicates with anyone fulfills the security requirement
\<close>
  text\<open>
  @{const minimalize_offending_overapprox} not only computes a set where @{const is_offending_flows_min_set} holds, but it also returns a subset of the input.
\<close>
    text\<open>@{const sinvar_mono} naturally holds in @{const SecurityInvariant_preliminaries}\<close>
    text\<open>Note: due to monotonicity, the minimality also holds for arbitrary subsets\<close>
      from sinvar_mono_imp_negative_delete_edge_mono[OF sinvar_monoI \<open>wf_graph G\<close>] have negative_delete_edge_mono: 
      with \<open>wf_graph G\<close> have min: "(\<forall>(e1, e2)\<in>F. \<not> sinvar \<lparr> nodes = nodes G, edges = ((edges G) - F) \<union> {(e1,e2)} \<rparr> nP)"
      from \<open>E \<noteq> {}\<close> obtain e where "e \<in> E" by blast
      with min \<open>E \<subseteq> F\<close> have mine: "\<not> sinvar \<lparr> nodes = nodes G, edges = ((edges G) - F) \<union> {e} \<rparr> nP" by fast
      have e1: "edges G - (F - {e}) = insert e (edges G - F)" using DiffD2 \<open>e \<in> E\<close> assms(3) assms(4) by auto 
      from negative_delete_edge_mono[where Y="F - {e}" and X="F - E"] \<open>e \<in> E\<close> have
    text\<open>The algorithm @{const minimalize_offending_overapprox} is correct\<close>
    text\<open>
      If @{term "\<not> sinvar G nP"}
      Given a list ff, (ff is distinct and a subset of G's edges)
      @{const minimalize_offending_overapprox} minimizes ff such that we get an offending flows
      Note: choosing ff = edges G is a good choice!
\<close>
text\<open>A version which acts on configured security invariants.
      I.e. there is no type @{typ 'a} for the host attributes in it.\<close>
    text\<open>If there is a violation and there are no offending flows, there does not exist a possibility to fix the violation by 
          tightening the policy. @{thm valid_empty_edges_iff_exists_offending_flows} already hints this.\<close>
            from \<open>f \<subseteq> edges G\<close> wfG have "finite f" apply(simp add: wf_graph_def) by (metis rev_finite_subset)
            from e1e2cond \<open>f \<subseteq> edges G\<close> have Geq:
            from listf \<open>f \<subseteq> edges G\<close> have c2: "set listf \<subseteq> edges G" by simp
subsection \<open>Monotonicity of offending flows\<close>
    text\<open>If there is some @{term "F'"} in the offending flows of a small graph and you have a bigger graph, 
          you can extend @{term "F'"} by some @{term "Fadd"} and minimality in @{term F} is preserved\<close>
      from \<open>F' \<subseteq> E'\<close> a1[simplified wf_graph_def] a2 have FinV1: "fst ` F' \<subseteq> V" and FinV2: "snd ` F' \<subseteq> V"
        with \<open>F' \<subseteq> E'\<close> a2 show "fst ` F' \<subseteq> V" by fast
        with \<open>F' \<subseteq> E'\<close> a2 show "snd ` F' \<subseteq> V" by fast
       from \<open>F' \<subseteq> E'\<close> this have Fadd_notinF: "\<And>Fadd. Fadd \<inter> E' = {} \<Longrightarrow>  F' \<inter> Fadd = {}" by blast
        case 2 thus ?case using Eadd_prop a2 \<open>E' \<inter> Eadd = {}\<close> by blast
    text\<open>The minimality condition of the offending flows also holds if we increase the graph.\<close>
    text\<open>all sets in the set of offending flows are monotonic, hence, for a larger graph, they can be extended to match the smaller graph. I.e. everything is monotonic.\<close>
        \<comment> \<open>Idea: @{text "F = F' \<union> minimize (E - E')"}\<close>
          using Eadd_prop \<open>E' \<inter> Eadd = {}\<close> \<open>F' \<subseteq> E'\<close> by fast
          from \<open>finite E'\<close> \<open>F' \<subseteq> E'\<close> obtain F'_list where "set F'_list = F'" and "distinct F'_list" by (metis finite_distinct_list rev_finite_subset)
          have "E' - F' \<union> Eadd - Eadd = E' - F'" using Eadd_prop \<open>E' \<inter> Eadd = {}\<close> \<open>F' \<subseteq> E'\<close> by blast
          from minimalize_offending_overapprox_sound[OF wf2 this _ \<open>distinct Eadd_list\<close>] have
            using \<open>E' \<inter> Eadd = {}\<close> Eadd_prop \<open>F' \<subseteq> E'\<close> by blast
          from \<open>E' \<inter> Eadd = {}\<close> \<open>Fadd \<subseteq> Eadd\<close> have "Fadd \<inter> E' = {}" by blast
          from minimality_offending_flows_mono_edges_graph_extend[OF a1 \<open>E' \<subseteq> E\<close> \<open>Fadd \<inter> E' = {}\<close> a4]
           from Eadd_prop \<open>Fadd \<subseteq> Eadd\<close> \<open>F' \<subseteq> E'\<close> have goal_subset: "F' \<subseteq> E \<and> Fadd \<subseteq> E" by blast
          from this  \<open>F' \<subseteq> E'\<close> \<open>E' \<inter> Eadd = {}\<close>  have "sinvar \<lparr>nodes = V, edges = E - F'\<rparr> nP"
          from Eadd_prop \<open>F' \<subseteq> E'\<close> have goal_subset: "F' \<subseteq> E" by(blast)
    text\<open>The offending flows are monotonic.\<close>
    \<comment> \<open>combines powerset of A with B\<close>
      from \<open>F' \<subseteq> X\<close> \<open>F' \<subseteq> E\<close> disj \<open>{} \<noteq> F'\<close>
    text\<open>Knowing that the \<open>\<Union> offending is \<subseteq> X\<close>, removing something from the graphs's edges, 
