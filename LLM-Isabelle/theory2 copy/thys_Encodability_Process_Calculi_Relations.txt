theory Relations
  imports Main "HOL-Library.LaTeXsugar" "HOL-Library.OptionalSugar"
begin




abbreviation "preorder Rel \<equiv> preorder_on UNIV Rel"
abbreviation "equivalence Rel \<equiv> equiv UNIV Rel"


lemma symm_preorder_is_equivalence:
  fixes Rel :: "('a \<times> 'a) set"
  assumes "preorder Rel"
      and "sym Rel"
  shows "equivalence Rel"
      using assms
      unfolding preorder_on_def equiv_def
    by simp


definition symcl :: "('a \<times> 'a) set \<Rightarrow> ('a \<times> 'a) set" where
  "symcl Rel = Rel \<union> Rel\<inverse>"


lemma elem_of_symcl:
  fixes Rel :: "('a \<times> 'a) set"
    and a b :: "'a"
  assumes elem: "(a, b) \<in> Rel"
  shows "(a, b) \<in> symcl Rel"
    and "(b, a) \<in> symcl Rel"
    by (auto simp add: elem symcl_def)


lemma sym_symcl:
  fixes Rel :: "('a \<times> 'a) set"
  shows "sym (symcl Rel)"
    by (simp add: symcl_def sym_Un_converse)


lemma refl_symm_closure_is_symm_refl_closure:
  fixes Rel :: "('a \<times> 'a) set"
  shows "symcl (Rel\<^sup>=) = (symcl Rel)\<^sup>="
    by (auto simp add: symcl_def refl)


lemma refl_symcl_of_refl_rel:
  fixes Rel :: "('a \<times> 'a) set"
    and A   :: "'a set"
  assumes "refl_on A Rel"
  shows "refl_on A (symcl Rel)"
      using assms
    by (auto simp add: refl_on_def' symcl_def)


lemma refl_symm_trans_closure_is_symm_refl_trans_closure:
  fixes Rel :: "('a \<times> 'a) set"
  shows "(symcl (Rel\<^sup>=))\<^sup>+ = (symcl Rel)\<^sup>*"
      using refl_symm_closure_is_symm_refl_closure[where Rel="Rel"]
    by simp


lemma sym_reflcl_of_symm_rel:
  fixes Rel :: "('a \<times> 'a) set"
  assumes "sym Rel"
  shows "sym (Rel\<^sup>=)"
      using assms
    by (simp add: sym_Id sym_Un)


lemma reflcl_of_refl_rel:
  fixes Rel :: "('a \<times> 'a) set"
  assumes "refl Rel"
  shows "Rel\<^sup>= = Rel"
      using assms
      unfolding refl_on_def
    by auto


lemma symm_closure_of_symm_rel:
  fixes Rel :: "('a \<times> 'a) set"
  assumes "sym Rel"
  shows "symcl Rel = Rel"
      using assms
      unfolding symcl_def sym_def
    by auto


lemma rtrancl_of_preorder:
  fixes Rel :: "('a \<times> 'a) set"
  assumes "preorder Rel"
  shows "Rel\<^sup>* = Rel"
      using assms reflcl_of_refl_rel[of Rel] trancl_id[of "Rel\<^sup>="] trancl_reflcl[of Rel]
      unfolding preorder_on_def
    by auto


lemma refl_trans_closure_subset_of_refl_symm_trans_closure:
  fixes Rel :: "('a \<times> 'a) set"
  shows "Rel\<^sup>* \<subseteq> (symcl (Rel\<^sup>=))\<^sup>+"
proof clarify
  fix a b
  assume "(a, b) \<in> Rel\<^sup>*"
  hence "(a, b) \<in> (symcl Rel)\<^sup>*"
      using in_rtrancl_UnI[of "(a, b)" "Rel" "Rel\<inverse>"]
    by (simp add: symcl_def)
  thus "(a, b) \<in> (symcl (Rel\<^sup>=))\<^sup>+"
      using refl_symm_trans_closure_is_symm_refl_trans_closure[of Rel]
    by simp
qed


lemma symm_closure_of_preorder_is_trans:
  fixes Rel :: "('a \<times> 'a) set"
  assumes condA: "\<forall>a b c. (a, b) \<in> Rel \<and> (c, b) \<in> Rel \<and> (a, c) \<notin> Rel
                  \<longrightarrow> (b, a) \<in> Rel \<or> (b, c) \<in> Rel"
      and condB: "\<forall>a b c. (a, b) \<in> Rel \<and> (a, c) \<in> Rel \<and> (b, c) \<notin> Rel
                  \<longrightarrow> (b, a) \<in> Rel \<or> (c, a) \<in> Rel"
      and reflR: "refl Rel"
      and tranR: "trans Rel"
  shows "trans (symcl Rel)"
    unfolding trans_def
proof clarify
  fix a b c
  have "\<lbrakk>(a, b) \<in> Rel; (b, c) \<in> Rel\<rbrakk> \<Longrightarrow> (a, c) \<in> symcl Rel"
  proof -
    assume "(a, b) \<in> Rel" and "(b, c) \<in> Rel"
    with tranR have "(a, c) \<in> Rel"
        unfolding trans_def
      by blast
    thus "(a, c) \<in> symcl Rel"
      by (simp add: symcl_def)
  qed
  moreover have "\<lbrakk>(a, b) \<in> Rel; (c, b) \<in> Rel; (a, c) \<notin> Rel\<rbrakk> \<Longrightarrow> (a, c) \<in> symcl Rel"
  proof -
    assume A1: "(a, b) \<in> Rel" and A2: "(c, b) \<in> Rel" and "(a, c) \<notin> Rel"
    with condA have "(b, a) \<in> Rel \<or> (b, c) \<in> Rel"
      by blast
    thus "(a, c) \<in> symcl Rel"
    proof auto
      assume "(b, a) \<in> Rel"
      with A2 tranR have "(c, a) \<in> Rel"
          unfolding trans_def
        by blast
      thus "(a, c) \<in> symcl Rel"
        by (simp add: symcl_def)
    next
      assume "(b, c) \<in> Rel"
      with A1 tranR have "(a, c) \<in> Rel"
          unfolding trans_def
        by blast
      thus "(a, c) \<in> symcl Rel"
        by (simp add: symcl_def)
    qed
  qed
  moreover have "\<lbrakk>(b, a) \<in> Rel; (b, c) \<in> Rel; (a, c) \<notin> Rel\<rbrakk> \<Longrightarrow> (a, c) \<in> symcl Rel"
  proof -
    assume B1: "(b, a) \<in> Rel" and B2: "(b, c) \<in> Rel" and "(a, c) \<notin> Rel"
    with condB have "(a, b) \<in> Rel \<or> (c, b) \<in> Rel"
      by blast
    thus "(a, c) \<in> symcl Rel"
    proof auto
      assume "(a, b) \<in> Rel"
      with B2 tranR have "(a, c) \<in> Rel"
          unfolding trans_def
        by blast
      thus "(a, c) \<in> symcl Rel"
        by (simp add: symcl_def)
    next
      assume "(c, b) \<in> Rel"
      with B1 tranR have "(c, a) \<in> Rel"
          unfolding trans_def
        by blast
      thus "(a, c) \<in> symcl Rel"
        by (simp add: symcl_def)
    qed
  qed
  moreover have "\<lbrakk>(b, a) \<in> Rel; (c, b) \<in> Rel\<rbrakk> \<Longrightarrow> (a, c) \<in> symcl Rel"
  proof -
    assume "(c, b) \<in> Rel" and "(b, a) \<in> Rel"
    with tranR have "(c, a) \<in> Rel"
        unfolding trans_def
      by blast
    thus "(a, c) \<in> symcl Rel"
      by (simp add: symcl_def)
  qed
  moreover assume "(a, b) \<in> symcl Rel" and "(b, c) \<in> symcl Rel"
  ultimately show "(a, c) \<in> symcl Rel"
    by (auto simp add: symcl_def)
qed



abbreviation rel_preserves_pred :: "('a \<times> 'a) set \<Rightarrow> ('a \<Rightarrow> bool) \<Rightarrow> bool" where
  "rel_preserves_pred Rel Pred \<equiv> \<forall>a b. (a, b) \<in> Rel \<and> Pred a \<longrightarrow> Pred b"

abbreviation rel_preserves_binary_pred :: "('a \<times> 'a) set \<Rightarrow> ('a \<Rightarrow> 'b \<Rightarrow> bool) \<Rightarrow> bool" where
  "rel_preserves_binary_pred Rel Pred \<equiv> \<forall>a b x. (a, b) \<in> Rel \<and> Pred a x \<longrightarrow> Pred b x"


abbreviation rel_reflects_pred :: "('a \<times> 'a) set \<Rightarrow> ('a \<Rightarrow> bool) \<Rightarrow> bool" where
  "rel_reflects_pred Rel Pred \<equiv> \<forall>a b. (a, b) \<in> Rel \<and> Pred b \<longrightarrow> Pred a"

abbreviation rel_reflects_binary_pred :: "('a \<times> 'a) set \<Rightarrow> ('a \<Rightarrow> 'b \<Rightarrow> bool) \<Rightarrow> bool" where
  "rel_reflects_binary_pred Rel Pred \<equiv> \<forall>a b x. (a, b) \<in> Rel \<and> Pred b x \<longrightarrow> Pred a x"


abbreviation rel_respects_pred :: "('a \<times> 'a) set \<Rightarrow> ('a \<Rightarrow> bool) \<Rightarrow> bool" where
  "rel_respects_pred Rel Pred \<equiv> rel_preserves_pred Rel Pred \<and> rel_reflects_pred Rel Pred"

abbreviation rel_respects_binary_pred :: "('a \<times> 'a) set \<Rightarrow> ('a \<Rightarrow> 'b \<Rightarrow> bool) \<Rightarrow> bool" where
  "rel_respects_binary_pred Rel Pred \<equiv>
   rel_preserves_binary_pred Rel Pred \<and> rel_reflects_binary_pred Rel Pred"


lemma symm_relation_impl_preservation_equals_reflection:
  fixes Rel  :: "('a \<times> 'a) set"
    and Pred :: "'a \<Rightarrow> bool"
  assumes symm: "sym Rel"
  shows "rel_preserves_pred Rel Pred = rel_reflects_pred Rel Pred"
    and "rel_preserves_pred Rel Pred = rel_respects_pred Rel Pred"
    and "rel_reflects_pred Rel Pred = rel_respects_pred Rel Pred"
      using symm
      unfolding sym_def
    by blast+

lemma symm_relation_impl_preservation_equals_reflection_of_binary_predicates:
  fixes Rel  :: "('a \<times> 'a) set"
    and Pred :: "'a \<Rightarrow> 'b \<Rightarrow> bool"
  assumes symm: "sym Rel"
  shows "rel_preserves_binary_pred Rel Pred = rel_reflects_binary_pred Rel Pred"
    and "rel_preserves_binary_pred Rel Pred = rel_respects_binary_pred Rel Pred"
    and "rel_reflects_binary_pred Rel Pred = rel_respects_binary_pred Rel Pred"
      using symm
      unfolding sym_def
    by blast+


lemma preservation_and_closures:
  fixes Rel  :: "('a \<times> 'a) set"
    and Pred :: "'a \<Rightarrow> bool"
  assumes preservation: "rel_preserves_pred Rel Pred"
  shows "rel_preserves_pred (Rel\<^sup>=) Pred"
    and "rel_preserves_pred (Rel\<^sup>+) Pred"
    and "rel_preserves_pred (Rel\<^sup>*) Pred"
