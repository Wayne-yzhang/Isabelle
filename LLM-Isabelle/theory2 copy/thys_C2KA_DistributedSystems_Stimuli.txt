theory Stimuli
  imports Main
begin


class plus_ord =
  fixes leq::"'a \<Rightarrow> 'a \<Rightarrow> bool" ("(_/ \<le>\<^sub>\<S> _)"  [51, 51] 50)
  fixes add::"'a \<Rightarrow> 'a \<Rightarrow> 'a" (infixl "\<oplus>" 65)
  assumes leq_def: "x \<le>\<^sub>\<S> y \<longleftrightarrow> x \<oplus> y = y"
  and add_assoc: "(x \<oplus> y) \<oplus> z = x \<oplus> (y \<oplus> z)"
  and add_comm: "x \<oplus> y = y \<oplus> x"
begin

notation
  leq  ("'(\<le>')") and
  leq ("(_/ \<le>\<^sub>\<S> _)"  [51, 51] 50)

end

class stimuli = plus_ord +
  fixes seq_comp::"'a \<Rightarrow> 'a \<Rightarrow> 'a" (infixl "\<odot>" 70)
  fixes neutral :: 'a ("\<nn>")
  and deactivation :: 'a ("\<dd>")
  and basic :: "'a set" ("\<S>\<^sub>a")
  assumes stim_idem [simp]: "x \<oplus> x = x"
  and seq_nl [simp]: "\<nn> \<odot> x = x"
  and seq_nr [simp]: "x \<odot> \<nn> = x"
  and add_zero [simp]: "\<dd> \<oplus> x = x"
  and absorbingl [simp]: "\<dd> \<odot> x = \<dd>"
  and absorbingr [simp]: "x \<odot> \<dd> = \<dd>"
  and zero_not_basic: "\<dd> \<notin> \<S>\<^sub>a"
begin 

lemma inf_add_S_right: "x \<le>\<^sub>\<S> y \<Longrightarrow> x \<le>\<^sub>\<S> y \<oplus> z"
  unfolding leq_def
  by (simp add: add_assoc [symmetric])

lemma inf_add_S_left: "x \<le>\<^sub>\<S> y \<Longrightarrow> x \<le>\<^sub>\<S> z \<oplus> y"
  by (simp add: add_comm inf_add_S_right)

lemma leq_refl [simp]: "x \<le>\<^sub>\<S> x"
  unfolding leq_def
  by simp

end

end
