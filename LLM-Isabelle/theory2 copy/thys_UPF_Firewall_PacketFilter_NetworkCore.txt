theory 
  NetworkCore
  imports 
    Main
begin


type_synonym id = int

class adr

type_synonym    '\<alpha> src  = "'\<alpha>"
type_synonym    '\<alpha> dest = "'\<alpha>"

instance int ::adr ..
instance nat ::adr ..

instance "fun" :: (adr,adr) adr ..
instance prod :: (adr,adr) adr ..

type_synonym '\<beta> content = "'\<beta>"

 
datatype DummyContent = data


type_synonym ('\<alpha>,'\<beta>) packet = "id \<times> '\<alpha> src \<times> '\<alpha> dest \<times> '\<beta> content"


definition src :: "('\<alpha>::adr,'\<beta>) packet \<Rightarrow> '\<alpha>"
  where "src  = fst o snd "


class port

instance int ::port ..
instance nat :: port ..
instance "fun" :: (port,port) port ..
instance "prod" :: (port,port) port ..

definition id :: "('\<alpha>::adr,'\<beta>) packet \<Rightarrow> id" 
  where "id = fst"

definition dest :: "('\<alpha>::adr,'\<beta>) packet \<Rightarrow> '\<alpha> dest"
  where "dest = fst o snd o snd"

definition content :: "('\<alpha>::adr,'\<beta>) packet \<Rightarrow> '\<beta> content"
  where "content = snd o snd o snd"

datatype protocol = tcp | udp

lemma either: "\<lbrakk>a \<noteq> tcp;a \<noteq> udp\<rbrakk> \<Longrightarrow> False"
  by (case_tac "a",simp_all)

lemma either2[simp]: "(a \<noteq> tcp) = (a = udp)"
  by (case_tac "a",simp_all)                 

lemma either3[simp]: "(a \<noteq> udp) = (a = tcp)"
  by (case_tac "a",simp_all)                


consts src_port :: "('\<alpha>::adr,'\<beta>) packet \<Rightarrow> '\<gamma>::port" 
consts dest_port :: "('\<alpha>::adr,'\<beta>) packet \<Rightarrow> '\<gamma>::port"
consts src_protocol :: "('\<alpha>::adr,'\<beta>) packet \<Rightarrow> protocol"
consts dest_protocol :: "('\<alpha>::adr,'\<beta>) packet \<Rightarrow> protocol"


type_synonym '\<alpha> net = "'\<alpha> set set"
 

definition
  in_subnet :: "'\<alpha>::adr \<Rightarrow> '\<alpha> net \<Rightarrow> bool"  (infixl "\<sqsubset>" 100)  where
  "in_subnet a S = (\<exists> s \<in> S. a \<in> s)"



lemma in_subnet: 
  "(a, e) \<sqsubset> {{(x1,y). P x1 y}} = P a e"
  by (simp add: in_subnet_def)

lemma src_in_subnet: 
  "src(q,(a,e),r,t) \<sqsubset> {{(x1,y). P x1 y}} = P a e"
  by (simp add: in_subnet_def in_subnet src_def)

lemma dest_in_subnet: 
  "dest (q,r,((a),e),t) \<sqsubset> {{(x1,y). P x1 y}} = P a e"
  by (simp add: in_subnet_def in_subnet dest_def)


consts subnet_of :: "'\<alpha>::adr \<Rightarrow> '\<alpha> net"

lemmas packet_defs = in_subnet_def id_def content_def src_def dest_def

end
