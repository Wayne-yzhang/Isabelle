theory Separata
imports Main Separation_Algebra.Separation_Algebra "HOL-Eisbach.Eisbach_Tools"
 "HOL-Library.Multiset"
begin



class heap_sep_algebra = cancellative_sep_algebra +
  assumes sep_add_ind_unit: "\<lbrakk>x + y = 0; x ## y\<rbrakk> \<Longrightarrow> x = 0"
  assumes sep_add_disj: "x##x \<Longrightarrow>x= 0 "   
  assumes sep_add_cross_split: 
    "\<lbrakk>a + b = w; c + d = w; a ## b; c ## d\<rbrakk> \<Longrightarrow>
    \<exists> e f g h. e + f = a \<and> g + h = b \<and> e + g = c \<and> f + h = d \<and> 
    e ## f \<and> g ## h \<and> e ## g \<and> f ## h"
  assumes disj_dstri: "\<lbrakk>x ## y; y ## z; x ## z\<rbrakk> \<Longrightarrow> x ## (y + z)"
begin



definition tern_rel:: "'a \<Rightarrow> 'a \<Rightarrow> 'a \<Rightarrow> bool" ("(_,_\<triangleright>_)" 25) where
  "tern_rel a b c \<equiv> a ## b \<and> a + b = c"
  
lemma exist_comb: "x ## y \<Longrightarrow> \<exists>z. (x,y\<triangleright>z)"
  by (simp add: tern_rel_def)

lemma disj_comb: 
  assumes a1: "(x,y\<triangleright>z)" 
  assumes a2: "x ## w" 
  assumes a3: "y ## w"
  shows "z ## w"
proof -
  from a1 have f1: "x ## y \<and> x + y = z"
    by (simp add: tern_rel_def)
  then show ?thesis using a2 a3
    using local.disj_dstri local.sep_disj_commuteI by blast      
qed


lemma (in -) lspasl_id: 
  "Gamma \<and> (A h) \<Longrightarrow> (A h) \<or> Delta"
  by simp

lemma (in -) lspasl_botl: 
  "Gamma \<and> (sep_false h) \<Longrightarrow> Delta"
  by simp

lemma (in -) lspasl_topr: 
  "gamma \<Longrightarrow> (sep_true h) \<or> Delta"
  by simp

lemma lspasl_empl: 
  "Gamma \<and> (h = 0) \<longrightarrow> Delta \<Longrightarrow> 
  Gamma \<and> (sep_empty h) \<longrightarrow> Delta"
  by (simp add: local.sep_empty_def)

lemma lspasl_empl_inv:
  "Gamma \<and> (sep_empty h) \<longrightarrow> Delta \<Longrightarrow>  
  Gamma \<and> (h = 0) \<longrightarrow> Delta"
  by simp


lemma lspasl_empl_der: "sep_empty h \<Longrightarrow> h = 0"
  by (simp add: local.sep_empty_def)

lemma lspasl_empl_eq: "(sep_empty h) = (h = 0)"
  by (simp add: local.sep_empty_def)

lemma lspasl_empr: 
  "Gamma \<longrightarrow> (sep_empty 0) \<or> Delta"
  by simp

end

lemma lspasl_notl: 
  "Gamma \<longrightarrow> (A h) \<or> Delta \<Longrightarrow> 
  Gamma \<and> ((not A) h) \<longrightarrow> Delta"
  by auto

lemma lspasl_notl_inv:
  "Gamma \<and> ((not A) h) \<longrightarrow> Delta \<Longrightarrow>
  Gamma \<longrightarrow> (A h) \<or> Delta"
  by auto

lemma lspasl_notr: 
  "Gamma \<and> (A h) \<longrightarrow> Delta \<Longrightarrow> 
  Gamma \<longrightarrow> ((not A) h) \<or> Delta"
  by simp

lemma lspasl_notr_inv:
  "Gamma \<longrightarrow> ((not A) h) \<or> Delta \<Longrightarrow>
  Gamma \<and> (A h) \<longrightarrow> Delta"
  by simp

lemma lspasl_andl: 
  "Gamma \<and> (A h) \<and> (B h) \<longrightarrow> Delta \<Longrightarrow> 
  Gamma \<and> ((A and B) h) \<longrightarrow> Delta"
  by simp

lemma lspasl_andl_inv:
  "Gamma \<and> ((A and B) h) \<longrightarrow> Delta \<Longrightarrow> 
  Gamma \<and> (A h) \<and> (B h) \<longrightarrow> Delta"
  by simp

lemma lspasl_andr: 
  "\<lbrakk>Gamma \<longrightarrow> (A h) \<or> Delta; Gamma \<longrightarrow> (B h) \<or> Delta\<rbrakk> \<Longrightarrow>
  Gamma \<longrightarrow> ((A and B) h) \<or> Delta"
  by auto

lemma lspasl_andr_inv:
  "Gamma \<longrightarrow> ((A and B) h) \<or> Delta \<Longrightarrow>
  (Gamma \<longrightarrow> (A h) \<or> Delta) \<and> (Gamma \<longrightarrow> (B h) \<or> Delta)"
  by auto

lemma lspasl_orl:
  "\<lbrakk>Gamma \<and> (A h) \<longrightarrow> Delta; Gamma \<and> (B h) \<longrightarrow> Delta\<rbrakk> \<Longrightarrow>
  Gamma \<and> (A or B) h \<longrightarrow> Delta"
  by auto

lemma lspasl_orl_inv:
  "Gamma \<and> (A or B) h \<longrightarrow> Delta \<Longrightarrow>
  (Gamma \<and> (A h) \<longrightarrow> Delta) \<and> (Gamma \<and> (B h) \<longrightarrow> Delta)"
  by simp

lemma lspasl_orr:
  "Gamma \<longrightarrow> (A h) \<or> (B h) \<or> Delta \<Longrightarrow>
  Gamma \<longrightarrow> ((A or B) h) \<or> Delta"
  by simp

lemma lspasl_orr_inv:
  "Gamma \<longrightarrow> ((A or B) h) \<or> Delta \<Longrightarrow>
  Gamma \<longrightarrow> (A h) \<or> (B h) \<or> Delta"
  by simp

lemma lspasl_impl:
  "\<lbrakk>Gamma \<longrightarrow> (A h) \<or> Delta; Gamma \<and> (B h) \<longrightarrow> Delta\<rbrakk> \<Longrightarrow>
  Gamma \<and> ((A imp B) h) \<longrightarrow> Delta"
  by auto

lemma lspasl_impl_inv:
  "Gamma \<and> ((A imp B) h) \<longrightarrow> Delta \<Longrightarrow>
  (Gamma \<longrightarrow> (A h) \<or> Delta) \<and> (Gamma \<and> (B h) \<longrightarrow> Delta)"    
  by auto

lemma lspasl_impr:
  "Gamma \<and> (A h) \<longrightarrow> (B h) \<or> Delta \<Longrightarrow>
  Gamma \<longrightarrow> ((A imp B) h) \<or> Delta"
  by simp

lemma lspasl_impr_inv:
  "Gamma \<longrightarrow> ((A imp B) h) \<or> Delta \<Longrightarrow>
  Gamma \<and> (A h) \<longrightarrow> (B h) \<or> Delta"
  by simp

context heap_sep_algebra
begin


lemma lspasl_starl:
  "(\<exists>h1 h2. (Gamma \<and> (h1,h2\<triangleright>h0) \<and> (A h1) \<and> (B h2))) \<longrightarrow> Delta \<Longrightarrow>
  Gamma \<and> ((A ** B) h0) \<longrightarrow> Delta"
  using local.sep_conj_def by (auto simp add: tern_rel_def)

lemma lspasl_starl_inv:
  "Gamma \<and> ((A ** B) h0) \<longrightarrow> Delta \<Longrightarrow>
  (\<exists>h1 h2. (Gamma \<and> (h1,h2\<triangleright>h0) \<and> (A h1) \<and> (B h2))) \<longrightarrow> Delta"
  using local.sep_conjI by (auto simp add: tern_rel_def)

lemma lspasl_starl_der:
  "((A ** B) h0) \<Longrightarrow> (\<exists>h1 h2. (h1,h2\<triangleright>h0) \<and> (A h1) \<and> (B h2))"
  by (metis lspasl_starl)

lemma lspasl_starl_eq:
  "((A ** B) h0) = (\<exists>h1 h2. (h1,h2\<triangleright>h0) \<and> (A h1) \<and> (B h2))"
  by (metis lspasl_starl lspasl_starl_inv)

lemma lspasl_starr:
  "\<lbrakk>Gamma \<and> (h1,h2\<triangleright>h0) \<longrightarrow> (A h1) \<or> ((A ** B) h0) \<or> Delta; 
  Gamma \<and> (h1,h2\<triangleright>h0) \<longrightarrow> (B h2) \<or> ((A ** B) h0) \<or> Delta\<rbrakk> \<Longrightarrow>
  Gamma \<and> (h1,h2\<triangleright>h0) \<longrightarrow> ((A ** B) h0) \<or> Delta"
  using local.sep_conjI by (auto simp add: tern_rel_def)

lemma lspasl_starr_inv:
  "Gamma \<and> (h1,h2\<triangleright>h0) \<longrightarrow> ((A ** B) h0) \<or> Delta \<Longrightarrow> 
  (Gamma \<and> (h1,h2\<triangleright>h0) \<longrightarrow> (A h1) \<or> ((A ** B) h0) \<or> Delta) \<and> 
  (Gamma \<and> (h1,h2\<triangleright>h0) \<longrightarrow> (B h2) \<or> ((A ** B) h0) \<or> Delta)"
  by simp


definition starr_applied:: "'a \<Rightarrow> 'a \<Rightarrow> 'a \<Rightarrow> ('a \<Rightarrow> bool) \<Rightarrow> bool" where
  "starr_applied h1 h2 h0 F \<equiv> (h1,h2\<triangleright>h0) \<and> \<not>(F h0)"
  
lemma lspasl_starr_der:
  "(h1,h2\<triangleright>h0) \<Longrightarrow> \<not> ((A ** B) h0) \<Longrightarrow> 
  ((h1,h2\<triangleright>h0) \<and> \<not> ((A h1) \<or> ((A ** B) h0)) \<and> (starr_applied h1 h2 h0 (A ** B))) \<or> 
  ((h1,h2\<triangleright>h0) \<and> \<not> ((B h2) \<or> ((A ** B) h0)) \<and> (starr_applied h1 h2 h0 (A ** B)))"
  by (simp add: lspasl_starl_eq starr_applied_def)


lemma lspasl_starr_eq: 
  "((h1,h2\<triangleright>h0) \<and> \<not> ((A ** B) h0)) = 
  (((h1,h2\<triangleright>h0) \<and> \<not> ((A h1) \<or> ((A ** B) h0))) \<or> ((h1,h2\<triangleright>h0) \<and> \<not> ((B h2) \<or> ((A ** B) h0))))"
  using lspasl_starr_der by blast

lemma lspasl_magicl:
  "\<lbrakk>Gamma \<and> (h1,h2\<triangleright>h0) \<and> ((A \<longrightarrow>* B) h2) \<longrightarrow> (A h1) \<or> Delta;
  Gamma \<and> (h1,h2\<triangleright>h0) \<and> ((A \<longrightarrow>* B) h2) \<and> (B h0) \<longrightarrow> Delta\<rbrakk> \<Longrightarrow>
  Gamma \<and> (h1,h2\<triangleright>h0) \<and> ((A \<longrightarrow>* B) h2) \<longrightarrow> Delta"
  using local.sep_add_commute local.sep_disj_commuteI local.sep_implD tern_rel_def
  by fastforce

lemma lspasl_magicl_inv:
  "Gamma \<and> (h1,h2\<triangleright>h0) \<and> ((A \<longrightarrow>* B) h2) \<longrightarrow> Delta \<Longrightarrow>
  (Gamma \<and> (h1,h2\<triangleright>h0) \<and> ((A \<longrightarrow>* B) h2) \<longrightarrow> (A h1) \<or> Delta) \<and> 
  (Gamma \<and> (h1,h2\<triangleright>h0) \<and> ((A \<longrightarrow>* B) h2) \<and> (B h0) \<longrightarrow> Delta)"
  by simp


definition magicl_applied:: "'a \<Rightarrow> 'a \<Rightarrow> 'a \<Rightarrow> ('a \<Rightarrow> bool) \<Rightarrow> bool" where
  "magicl_applied h1 h2 h0 F \<equiv> (h1,h2\<triangleright>h0) \<and> (F h2)"
  
lemma lspasl_magicl_der:
  "(h1,h2\<triangleright>h0) \<Longrightarrow> ((A \<longrightarrow>* B) h2) \<Longrightarrow>
  ((h1,h2\<triangleright>h0) \<and> \<not>(A h1) \<and> ((A \<longrightarrow>* B) h2) \<and> (magicl_applied h1 h2 h0 (A \<longrightarrow>* B))) \<or> 
  ((h1,h2\<triangleright>h0) \<and> (B h0) \<and> ((A \<longrightarrow>* B) h2) \<and> (magicl_applied h1 h2 h0 (A \<longrightarrow>* B)))"
  by (metis lspasl_magicl magicl_applied_def)

lemma lspasl_magicl_eq:
  "((h1,h2\<triangleright>h0) \<and> ((A \<longrightarrow>* B) h2)) =
  (((h1,h2\<triangleright>h0) \<and> \<not>(A h1) \<and> ((A \<longrightarrow>* B) h2)) \<or> ((h1,h2\<triangleright>h0) \<and> (B h0) \<and> ((A \<longrightarrow>* B) h2)))"
  using lspasl_magicl_der by blast

lemma lspasl_magicr:
  "(\<exists>h1 h0. Gamma \<and> (h1,h2\<triangleright>h0) \<and> (A h1) \<and> ((not B) h0)) \<longrightarrow> Delta \<Longrightarrow>
  Gamma \<longrightarrow> ((A \<longrightarrow>* B) h2) \<or> Delta"
  using local.sep_add_commute local.sep_disj_commute local.sep_impl_def tern_rel_def
  by auto

lemma lspasl_magicr_inv:
  "Gamma \<longrightarrow> ((A \<longrightarrow>* B) h2) \<or> Delta \<Longrightarrow>
  (\<exists>h1 h0. Gamma \<and> (h1,h2\<triangleright>h0) \<and> (A h1) \<and> ((not B) h0)) \<longrightarrow> Delta"
  by (metis lspasl_magicl)

lemma lspasl_magicr_der:
  "\<not> ((A \<longrightarrow>* B) h2) \<Longrightarrow> 
  (\<exists>h1 h0. (h1,h2\<triangleright>h0) \<and> (A h1) \<and> ((not B) h0))"
  by (metis lspasl_magicr)

lemma lspasl_magicr_eq:
  "(\<not> ((A \<longrightarrow>* B) h2)) = 
  ((\<exists>h1 h0. (h1,h2\<triangleright>h0) \<and> (A h1) \<and> ((not B) h0)))"
  by (metis lspasl_magicl lspasl_magicr)

lemma lspasl_eq: 
  "Gamma \<and> (0,h2\<triangleright>h2) \<and> h1 = h2 \<longrightarrow> Delta \<Longrightarrow>
  Gamma \<and> (0,h1\<triangleright>h2) \<longrightarrow> Delta"
  by (simp add: tern_rel_def)

lemma lspasl_eq_inv:
  "Gamma \<and> (0,h1\<triangleright>h2) \<longrightarrow> Delta \<Longrightarrow>
  Gamma \<and> (0,h2\<triangleright>h2) \<and> h1 = h2 \<longrightarrow> Delta"
  by simp

lemma lspasl_eq_der: "(0,h1\<triangleright>h2) \<Longrightarrow> ((0,h1\<triangleright>h1) \<and> h1 = h2)"
  using lspasl_eq by auto

lemma lspasl_eq_eq: "(0,h1\<triangleright>h2) = ((0,h1\<triangleright>h1) \<and> (h1 = h2))"
  by (simp add: tern_rel_def)

lemma lspasl_u:
  "Gamma \<and> (h,0\<triangleright>h) \<longrightarrow> Delta \<Longrightarrow>
  Gamma \<longrightarrow> Delta"
  by (simp add: tern_rel_def)

lemma lspasl_u_inv:
  "Gamma \<longrightarrow> Delta \<Longrightarrow>
  Gamma \<and> (h,0\<triangleright>h) \<longrightarrow> Delta"
  by simp

lemma lspasl_u_der: "(h,0\<triangleright>h)"
  using lspasl_u by auto

lemma lspasl_e:
  "Gamma \<and> (h1,h2\<triangleright>h0) \<and> (h2,h1\<triangleright>h0) \<longrightarrow> Delta \<Longrightarrow>
  Gamma \<and> (h1,h2\<triangleright>h0) \<longrightarrow> Delta"
  by (simp add: local.sep_add_commute local.sep_disj_commute tern_rel_def)

lemma lspasl_e_inv:
  "Gamma \<and> (h1,h2\<triangleright>h0) \<longrightarrow> Delta \<Longrightarrow>
  Gamma \<and> (h1,h2\<triangleright>h0) \<and> (h2,h1\<triangleright>h0) \<longrightarrow> Delta"
  by simp

lemma lspasl_e_der: "(h1,h2\<triangleright>h0) \<Longrightarrow> (h1,h2\<triangleright>h0) \<and> (h2,h1\<triangleright>h0)"
  using lspasl_e by blast           

lemma lspasl_e_eq: "(h1,h2\<triangleright>h0) = ((h1,h2\<triangleright>h0) \<and> (h2,h1\<triangleright>h0))"
  using lspasl_e by blast

lemma lspasl_a_der: 
  assumes a1: "(h1,h2\<triangleright>h0)"
    and a2: "(h3,h4\<triangleright>h1)"
  shows "(\<exists>h5. (h3,h5\<triangleright>h0) \<and> (h2,h4\<triangleright>h5) \<and> (h1,h2\<triangleright>h0) \<and> (h3,h4\<triangleright>h1))"
proof -
  have f1: "h1 ## h2"
    using a1 by (simp add: tern_rel_def)    
  have f2: "h3 ## h4"
    using a2 by (simp add: tern_rel_def)    
  have f3: "h3 + h4 = h1"
    using a2 by (simp add: tern_rel_def)    
  then have "h3 ## h2"
    using f2 f1 by (metis local.sep_disj_addD1 local.sep_disj_commute)
  then have f4: "h2 ## h3"
    by (metis local.sep_disj_commute)
  then have f5: "h2 + h4 ## h3"
    using f3 f2 f1 by (metis (no_types) local.sep_add_commute local.sep_add_disjI1)
  have "h4 ## h2"
    using f3 f2 f1 by (metis local.sep_add_commute local.sep_disj_addD1 local.sep_disj_commute)
  then show ?thesis
    using f5 f4 by (metis (no_types) assms tern_rel_def local.sep_add_assoc local.sep_add_commute local.sep_disj_commute)
qed

lemma lspasl_a:
  "(\<exists>h5. Gamma \<and> (h3,h5\<triangleright>h0) \<and> (h2,h4\<triangleright>h5) \<and> (h1,h2\<triangleright>h0) \<and> (h3,h4\<triangleright>h1)) \<longrightarrow> Delta \<Longrightarrow>
  Gamma \<and> (h1,h2\<triangleright>h0) \<and> (h3,h4\<triangleright>h1) \<longrightarrow> Delta"
  using lspasl_a_der by blast

lemma lspasl_a_inv:
  "Gamma \<and> (h1,h2\<triangleright>h0) \<and> (h3,h4\<triangleright>h1) \<longrightarrow> Delta \<Longrightarrow>
  (\<exists>h5. Gamma \<and> (h3,h5\<triangleright>h0) \<and> (h2,h4\<triangleright>h5) \<and> (h1,h2\<triangleright>h0) \<and> (h3,h4\<triangleright>h1)) \<longrightarrow> Delta"
  by auto

lemma lspasl_a_eq: 
  "((h1,h2\<triangleright>h0) \<and> (h3,h4\<triangleright>h1)) = 
  (\<exists>h5. (h3,h5\<triangleright>h0) \<and> (h2,h4\<triangleright>h5) \<and> (h1,h2\<triangleright>h0) \<and> (h3,h4\<triangleright>h1))"
  using lspasl_a_der by blast

lemma lspasl_p:
  "Gamma \<and> (h1,h2\<triangleright>h0) \<and> h0 = h3 \<longrightarrow> Delta \<Longrightarrow>
  Gamma \<and> (h1,h2\<triangleright>h0) \<and> (h1,h2\<triangleright>h3) \<longrightarrow> Delta"
  by (auto simp add: tern_rel_def)

lemma lspasl_p_inv:
  "Gamma \<and> (h1,h2\<triangleright>h0) \<and> (h1,h2\<triangleright>h3) \<longrightarrow> Delta \<Longrightarrow>
  Gamma \<and> (h1,h2\<triangleright>h0) \<and> h0 = h3 \<longrightarrow> Delta"
  by auto

lemma lspasl_p_der:
  "(h1,h2\<triangleright>h0) \<Longrightarrow> (h1,h2\<triangleright>h3) \<Longrightarrow> (h1,h2\<triangleright>h0) \<and> h0 = h3"
  by (simp add: tern_rel_def)

lemma lspasl_p_eq: 
  "((h1,h2\<triangleright>h0) \<and> (h1,h2\<triangleright>h3)) = ((h1,h2\<triangleright>h0) \<and> h0 = h3)"
  using lspasl_p_der by auto

lemma lspasl_c:
  "Gamma \<and> (h1,h2\<triangleright>h0) \<and> h2 = h3 \<longrightarrow> Delta \<Longrightarrow>
  Gamma \<and> (h1,h2\<triangleright>h0) \<and> (h1,h3\<triangleright>h0) \<longrightarrow> Delta"
  by (metis local.sep_add_cancelD local.sep_add_commute tern_rel_def
      local.sep_disj_commuteI)

lemma lspasl_c_inv:
  "Gamma \<and> (h1,h2\<triangleright>h0) \<and> (h1,h3\<triangleright>h0) \<longrightarrow> Delta \<Longrightarrow>
  Gamma \<and> (h1,h2\<triangleright>h0) \<and> h2 = h3 \<longrightarrow> Delta"
  by auto

lemma lspasl_c_der:
  "(h1,h2\<triangleright>h0) \<Longrightarrow> (h1,h3\<triangleright>h0) \<Longrightarrow> (h1,h2\<triangleright>h0) \<and> h2 = h3"
  using lspasl_c by blast

lemma lspasl_c_eq:
  "((h1,h2\<triangleright>h0) \<and> (h1,h3\<triangleright>h0)) = ((h1,h2\<triangleright>h0) \<and> h2 = h3)"
  using lspasl_c_der by auto

lemma lspasl_iu:
  "Gamma \<and> (0,h2\<triangleright>0) \<and> h1 = 0 \<longrightarrow> Delta \<Longrightarrow>
  Gamma \<and> (h1,h2\<triangleright>0) \<longrightarrow> Delta"
  using local.sep_add_ind_unit tern_rel_def by blast

lemma lspasl_iu_inv:
  "Gamma \<and> (h1,h2\<triangleright>0) \<longrightarrow> Delta \<Longrightarrow>
  Gamma \<and> (0,h2\<triangleright>0) \<and> h1 = 0 \<longrightarrow> Delta"
  by simp

lemma lspasl_iu_der:
  "(h1,h2\<triangleright>0) \<Longrightarrow> ((0,0\<triangleright>0) \<and> h1 = 0 \<and> h2 = 0)"
  using lspasl_eq_der lspasl_iu by (auto simp add: tern_rel_def) 

lemma lspasl_iu_eq:
  "(h1,h2\<triangleright>0) = ((0,0\<triangleright>0) \<and> h1 = 0 \<and> h2 = 0)"
  using lspasl_iu_der by blast 

lemma lspasl_d:
  "Gamma \<and> (0,0\<triangleright>h2) \<and> h1 = 0 \<longrightarrow> Delta \<Longrightarrow>
  Gamma \<and> (h1,h1\<triangleright>h2) \<longrightarrow> Delta"
  using local.sep_add_disj tern_rel_def by fastforce

lemma lspasl_d_inv:
  "Gamma \<and> (h1,h1\<triangleright>h2) \<longrightarrow> Delta \<Longrightarrow>
  Gamma \<and> (0,0\<triangleright>h2) \<and> h1 = 0 \<longrightarrow> Delta"
  by blast

lemma lspasl_d_der:
  "(h1,h1\<triangleright>h2) \<Longrightarrow> (0,0\<triangleright>0) \<and> h1 = 0 \<and> h2 = 0"
  using lspasl_d lspasl_eq_der by blast

lemma lspasl_d_eq:
  "(h1,h1\<triangleright>h2) = ((0,0\<triangleright>0) \<and> h1 = 0 \<and> h2 = 0)"
  using lspasl_d_der by blast

lemma lspasl_cs_der: 
  assumes a1: "(h1,h2\<triangleright>h0)" 
    and a2: "(h3,h4\<triangleright>h0)" 
  shows "(\<exists>h5 h6 h7 h8. (h5,h6\<triangleright>h1) \<and> (h7,h8\<triangleright>h2) \<and>(h5,h7\<triangleright>h3) \<and> (h6,h8\<triangleright>h4)
    \<and> (h1,h2\<triangleright>h0) \<and> (h3,h4\<triangleright>h0))"
proof -
  from a1 a2 have "h1 + h2 = h0 \<and> h3 + h4 = h0 \<and> h1 ## h2 \<and> h3 ## h4"
    by (simp add: tern_rel_def)
  then have "\<exists>h5 h6 h7 h8. h5 + h6 = h1 \<and> h7 + h8 = h2 \<and>
    h5 + h7 = h3 \<and> h6 + h8 = h4 \<and> h5 ## h6 \<and> h7 ## h8 \<and>
    h5 ## h7 \<and> h6 ## h8"
    using local.sep_add_cross_split by auto
  then have "\<exists>h5 h6 h7 h8. (h5,h6\<triangleright>h1) \<and> h7 + h8 = h2 \<and>
    h5 + h7 = h3 \<and> h6 + h8 = h4 \<and> h7 ## h8 \<and>
    h5 ## h7 \<and> h6 ## h8"
    by (auto simp add: tern_rel_def)
  then have "\<exists>h5 h6 h7 h8. (h5,h6\<triangleright>h1) \<and> (h7,h8\<triangleright>h2) \<and>
    h5 + h7 = h3 \<and> h6 + h8 = h4 \<and> h5 ## h7 \<and> h6 ## h8"
    by (auto simp add: tern_rel_def)
  then have "\<exists>h5 h6 h7 h8. (h5,h6\<triangleright>h1) \<and> (h7,h8\<triangleright>h2) \<and>
    (h5,h7\<triangleright>h3) \<and> h6 + h8 = h4 \<and> h6 ## h8"
    by (auto simp add: tern_rel_def)
  then show ?thesis using a1 a2 tern_rel_def by blast 
qed

lemma lspasl_cs:
  "(\<exists>h5 h6 h7 h8. Gamma \<and> (h5,h6\<triangleright>h1) \<and> (h7,h8\<triangleright>h2) \<and>(h5,h7\<triangleright>h3) \<and> (h6,h8\<triangleright>h4) \<and> (h1,h2\<triangleright>h0) \<and> (h3,h4\<triangleright>h0)) \<longrightarrow> Delta \<Longrightarrow>
  Gamma \<and> (h1,h2\<triangleright>h0) \<and> (h3,h4\<triangleright>h0) \<longrightarrow> Delta"
  using lspasl_cs_der by auto

lemma lspasl_cs_inv:
  "Gamma \<and> (h1,h2\<triangleright>h0) \<and> (h3,h4\<triangleright>h0) \<longrightarrow> Delta \<Longrightarrow>
  (\<exists>h5 h6 h7 h8. Gamma \<and> (h5,h6\<triangleright>h1) \<and> (h7,h8\<triangleright>h2) \<and>(h5,h7\<triangleright>h3) \<and> (h6,h8\<triangleright>h4) \<and> (h1,h2\<triangleright>h0) \<and> (h3,h4\<triangleright>h0)) \<longrightarrow> Delta"
  by auto

lemma lspasl_cs_eq: 
  "((h1,h2\<triangleright>h0) \<and> (h3,h4\<triangleright>h0)) =
  (\<exists>h5 h6 h7 h8. (h5,h6\<triangleright>h1) \<and> (h7,h8\<triangleright>h2) \<and>(h5,h7\<triangleright>h3) \<and> (h6,h8\<triangleright>h4) \<and> 
  (h1,h2\<triangleright>h0) \<and> (h3,h4\<triangleright>h0))"
  using lspasl_cs_der by auto 

end



lemma sep_substate_tran: 
  "x \<preceq> y \<and> y \<preceq> z \<Longrightarrow> x \<preceq> z" 
  unfolding sep_substate_def
proof -
  assume "(\<exists>z. x ## z \<and> x + z = y) \<and> (\<exists>za. y ## za \<and> y + za = z)"
  then obtain x' y' where  fixed:"(x ## x' \<and> x + x' = y) \<and> (y ## y' \<and> y + y' = z)"
    by auto
  then have disj_x:"x ## y' \<and> x' ## y'" 
    using sep_disj_addD sep_disj_commute by blast 
  then have p1:"x ## (x' + y')" using fixed sep_disj_commute sep_disj_addI3 
    by blast
  then have "x + (x' + y') = z" using disj_x by (metis (no_types) fixed sep_add_assoc) 
  thus "\<exists>za. x ## za \<and> x + za = z" using p1 by auto
qed

lemma precise_sep_conj: 
  assumes a1:"precise I" and
    a2:"precise I'"
  shows "precise (I \<and>* I')"
proof  (clarsimp simp: precise_def)
  fix hp hp' h
  assume hp:"hp \<preceq> h" and hp': "hp' \<preceq> h" and ihp: "(I \<and>* I') hp" and ihp': "(I \<and>* I') hp'"
  obtain hp1 hp2 where ihpex: "hp1 ## hp2 \<and> hp = hp1 + hp2 \<and> I hp1 \<and> I' hp2" using ihp sep_conjD by blast
  obtain hp1' hp2' where ihpex': "hp1' ## hp2' \<and> hp' = hp1' + hp2' \<and> I hp1' \<and> I' hp2'" using ihp' sep_conjD by blast
  have f3: "hp2' ## hp1'"
    by (simp add: ihpex' sep_disj_commute)
  have f4: "hp2 ## hp1"
    using ihpex sep_disj_commute by blast
  have f5:"\<And>a. \<not> a \<preceq> hp \<or> a \<preceq> h"
    using hp sep_substate_tran by blast
  have f6:"\<And>a. \<not> a \<preceq> hp' \<or> a \<preceq> h"
    using hp' sep_substate_tran by blast    
  thus "hp = hp'"
    using f4 f3 f5 a2 a1 a1 a2 ihpex ihpex' 
    unfolding precise_def by (metis sep_add_commute sep_substate_disj_add')  
qed

lemma unique_subheap:
  "(\<sigma>1,\<sigma>2\<triangleright>\<sigma>) \<Longrightarrow> \<exists>!\<sigma>2'.(\<sigma>1,\<sigma>2'\<triangleright>\<sigma>)"
  using lspasl_c_der by blast

lemma sep_split_substate:
  "(\<sigma>1, \<sigma>2\<triangleright> \<sigma>) \<Longrightarrow> 
  (\<sigma>1  \<preceq> \<sigma>) \<and> (\<sigma>2  \<preceq> \<sigma>)"
proof-
  assume a1:"(\<sigma>1, \<sigma>2\<triangleright> \<sigma>)"  
  thus "(\<sigma>1  \<preceq> \<sigma>) \<and> (\<sigma>2  \<preceq> \<sigma>)"
    by (auto simp add: sep_disj_commute 
        tern_rel_def 
        sep_substate_disj_add 
        sep_substate_disj_add')   
qed

abbreviation sep_septraction :: "(('a::sep_algebra) \<Rightarrow> bool) \<Rightarrow> ('a \<Rightarrow> bool) \<Rightarrow> ('a \<Rightarrow> bool)" (infixr "\<longrightarrow>\<oplus>" 25)
  where
    "P \<longrightarrow>\<oplus> Q \<equiv>  not (P \<longrightarrow>* not Q)"
  

method try_lspasl_empl = (
    match premises in P[thin]:"sep_empty ?h" \<Rightarrow> 
    simp?
    )

method try_lspasl_starl = (
    match premises in P[thin]:"(?A ** ?B) ?h" \<Rightarrow> 
    simp?
    )

method try_lspasl_magicr = (
    match premises in P[thin]:"\<not>(?A \<longrightarrow>* ?B) ?h" \<Rightarrow> 
    simp?
    )


method try_lspasl_eq = (
    match premises in P[thin]:"(0,?h1\<triangleright>?h2)" \<Rightarrow> 
