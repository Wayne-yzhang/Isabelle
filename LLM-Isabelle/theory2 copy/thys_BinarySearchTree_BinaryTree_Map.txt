theory BinaryTree_Map imports BinaryTree begin




type_synonym 
  'a tarray = "(index * 'a) Tree"

definition valid_tmap :: "'a tarray => bool" where
  "valid_tmap t == sortedTree fst t"

declare valid_tmap_def [simp]

definition mapOf :: "'a tarray => index => 'a option" where
  "mapOf t i == 
   (case (tlookup fst i t) of
     None => None
   | Some ia => Some (snd ia))"


lemma mapOf_lookup1: "tlookup fst i t = None ==> mapOf t i = None"
by (simp add: mapOf_def)

lemma mapOf_lookup2: "tlookup fst i t = Some (j,a) ==> mapOf t i = Some a"
by (simp add: mapOf_def)

lemma assumes h: "mapOf t i = None"
      shows mapOf_lookup3: "tlookup fst i t = None"
proof (cases "tlookup fst i t")
case None from this show ?thesis by assumption
next case (Some ia) note tsome = this
  from this have o1: "tlookup fst i t = Some (fst ia, snd ia)" by simp
  have "mapOf t i = Some (snd ia)"
  by (insert mapOf_lookup2 [of i t "fst ia" "snd ia"], simp add: o1)
  from this have "mapOf t i ~= None" by simp
qed

lemma assumes v: "valid_tmap t"
      assumes h: "mapOf t i = Some a"
      shows mapOf_lookup4: "tlookup fst i t = Some (i,a)"
proof (cases "tlookup fst i t")
case None 
  from this mapOf_lookup1 have "mapOf t i = None" by auto
next case (Some ia) note tsome = this
  have tlookup_some_inst: "sortedTree fst t & (tlookup fst i t = Some ia) --> 
        ia : setOf t & fst ia = i" by (simp add: tlookup_some)
  from tlookup_some_inst tsome v have "ia : setOf t" by simp
  from tsome have "mapOf t i = Some (snd ia)" by (simp add: mapOf_def)
  from this h have o1: "snd ia = a" by simp
  from tlookup_some_inst tsome v have o2: "fst ia = i" by simp
  from o1 o2 have "ia = (i,a)" by auto
  from this tsome show "tlookup fst i t = Some (i, a)" by simp
qed

              a relation between the set and map abstraction of the tree\<close>
  \<comment> \<open>==>\<close>
  \<comment> \<open><==\<close>
    from this h show ?thesis by auto \<comment> \<open>contradiction\<close>
  \<comment> \<open>==>\<close>
  \<comment> \<open><==\<close>
section \<open>Empty Map\<close>
section \<open>Map Update Operation\<close>
section \<open>Map Remove Operation\<close>
