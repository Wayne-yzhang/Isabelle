theory ETTS_Examples
  imports 
    ETTS_Syntax
    Complex_Main
begin




















ctr
  relativization
  synthesis ctr_simps
  assumes [transfer_domain_rule]: "Domainp A = (\<lambda>x. x \<in> U)"
    and [transfer_rule]: "right_total A" "bi_unique A"
  trp (?'a A)
  in topological_space_ow: class.topological_space_def
    and closed_ow: closed.with_def




tts_context
begin

tts_lemmas? in closed_Un' = topological_space_class.closed_Un

tts_lemma closed_Un':
  assumes "U \<noteq> {}"
    and "\<forall>x\<in>S. x \<in> U"
    and "\<forall>x\<in>T. x \<in> U"
    and "topological_space_ow U opena"
    and "closed_ow U opena S"
    and "closed_ow U opena T"
  shows "closed_ow U opena (S \<union> T)"
    is topological_space_class.closed_Un.


end

lemma closed_Un'':
  assumes "S \<subseteq> U"
    and "T \<subseteq> U"
    and "topological_space_ow U \<tau>"
    and "closed_ow U \<tau> S"
    and "closed_ow U \<tau> T"
  shows "closed_ow U \<tau> (S \<union> T)"
  using assms
  unfolding topological_space_ow_def 
tts_context
begin

tts_lemma closed_Un''':
  assumes "S \<subseteq> U"
    and "T \<subseteq> U"
    and "topological_space_ow U \<tau>"
    and "closed_ow U \<tau> S"
    and "closed_ow U \<tau> T"
  shows "closed_ow U \<tau> (S \<union> T)"
    given topological_space_class.closed_Un    
  case False assume prems[OF False]:
    "\<lbrakk> 
      U \<noteq> {}; 
      \<forall>x\<in>S. x \<in> U;
      \<forall>x\<in>T. x \<in> U; 
      topological_space_ow U \<tau>;  
      closed_ow U \<tau> S;
      closed_ow U \<tau> T 
     \<rbrakk> \<Longrightarrow> closed_ow U \<tau> (S \<union> T)"
    for U :: "'a set" and S T \<tau>
  from prems show ?thesis using assms by blast
qed simp
  
end
tts_context
  rewriting ctr_simps
  applying[of _ _ _ \<tau>]
begin

tts_lemma closed_Un'''':
  assumes "S \<subseteq> U"
    and "T \<subseteq> U"
    and "topological_space_ow U \<tau>"
    and "closed_ow U \<tau> S"
    and "closed_ow U \<tau> T"
  shows "closed_ow U \<tau> (S \<union> T)"
    is topological_space_class.closed_Un.

end



end