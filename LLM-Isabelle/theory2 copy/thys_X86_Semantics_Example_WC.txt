theory Example_WC
  imports SymbolicExecution X86_Parse
begin




context unknowns
begin

definition EXTERNAL_FUNCTION_feof :: "state \<Rightarrow> state"
  where "EXTERNAL_FUNCTION_feof \<sigma> \<equiv> 
          let ptr = ucast (operand_read \<sigma> (QWORD PTR [''rdi'']\<^sub>1));
              val = mem_read \<sigma> ptr 1 in
            (semantics_RET  o 
             semantics_MOV (Reg ''eax'') (Imm (fromBool (val = 0))))
              \<sigma>"

declare EXTERNAL_FUNCTION_feof_def [simp]

definition EXTERNAL_FUNCTION__IO_getc :: "state \<Rightarrow> state"
  where "EXTERNAL_FUNCTION__IO_getc \<sigma> \<equiv>
          let ptr = ucast (operand_read \<sigma> (QWORD PTR [''rdi'']\<^sub>1));
              val = mem_read \<sigma> ptr 1 in
            (semantics_RET  o 
              semantics_MOV (Reg ''rax'') (Imm (if val = 0 then -1 else val)) o
              semantics_INC (QWORD PTR [''rdi'']\<^sub>1))
              \<sigma>"

declare EXTERNAL_FUNCTION__IO_getc_def [simp]

definition "EXTERNAL_FUNCTION_fopen \<sigma> = 
      semantics_RET (\<sigma> with [''rax'' :=\<^sub>r 100,
                             \<lbrakk>100,8\<rbrakk> :=\<^sub>m 108,
                             \<lbrakk>108,6\<rbrakk> :=\<^sub>m 0x006E6C6C6548])"

declare EXTERNAL_FUNCTION_fopen_def [simp]

definition EXTERNAL_FUNCTION_isword :: "state \<Rightarrow> state"
  where "EXTERNAL_FUNCTION_isword = operand_write (Reg ''rax'') 1 o semantics_RET"

declare EXTERNAL_FUNCTION_isword_def [simp]

definition EXTERNAL_FUNCTION_fclose :: "state \<Rightarrow> state"
  where "EXTERNAL_FUNCTION_fclose = semantics_RET"

declare EXTERNAL_FUNCTION_fclose_def [simp]

definition EXTERNAL_FUNCTION_report :: "state \<Rightarrow> state"
  where "EXTERNAL_FUNCTION_report = semantics_RET"

declare EXTERNAL_FUNCTION_report_def [simp]

end



context unknowns
begin
end

context wc_objdump
begin
find_theorems fetch


schematic_goal counter:
  assumes "\<sigma>\<^sub>I = \<sigma> with [setRip 0xcf3]" 
  shows "assumptions ?A \<Longrightarrow> run 0xde4 fetch \<sigma>\<^sub>I ?\<sigma>'"
  apply (subst assms)

  apply (repeat_n 8 se_step)
  apply se_step

  apply (repeat_n 12 se_step)
  apply se_step


  apply (repeat_n 13 se_step)
  apply se_step

  apply (repeat_n 32 se_step)
  apply se_step

  apply (repeat_n 18 se_step)
  apply se_step

  apply (repeat_n 18 se_step)
  apply se_step

  apply (repeat_n 18 se_step)
  apply se_step

  apply (repeat_n 18 se_step)
  apply se_step

  apply (repeat_n 9 se_step)

  apply (repeat_n 5 se_step)
  apply se_step

  apply (repeat_n 6 se_step)
  apply se_step

  apply (repeat_n 15 se_step)
  apply (subst eq_def,simp)
  done

thm counter





end
end