theory CakeML_Correctness
imports
  CakeML_Backend
  "../Rewriting/Big_Step_Value_ML"
begin

context cakeml' begin

lemma mk_rec_env_related:
  assumes "fmrel (\<lambda>cs (n, e). related_fun cs n e) css (fmap_of_list (map (map_prod Name (map_prod Name id)) funs))"
  assumes "fmrel_on_fset (fbind (fmran css) (ids \<circ> Sabs)) related_v \<Gamma>\<^sub>\<Lambda> (fmap_of_ns (sem_env.v env\<^sub>\<Lambda>))"
  shows "fmrel related_v (mk_rec_env css \<Gamma>\<^sub>\<Lambda>) (cake_mk_rec_env funs env\<^sub>\<Lambda>)"
proof (rule fmrelI)
  fix name
  have "rel_option (\<lambda>cs (n, e). related_fun cs n e) (fmlookup css name) (map_of (map (map_prod Name (map_prod Name id)) funs) name)"
    using assms by (auto simp: fmap_of_list.rep_eq)

  then have "rel_option (\<lambda>cs (n, e). related_fun cs (Name n) e) (fmlookup css name) (map_of funs (as_string name))"
    unfolding name.map_of_rekey'
    by cases auto

  have *: "related_v (Vrecabs css name \<Gamma>\<^sub>\<Lambda>) (Recclosure env\<^sub>\<Lambda> funs (as_string name))"
    using assms by (auto intro: related_v.rec_closure)

  show "rel_option related_v (fmlookup (mk_rec_env css \<Gamma>\<^sub>\<Lambda>) name) (fmlookup (cake_mk_rec_env funs env\<^sub>\<Lambda>) name)"
    unfolding mk_rec_env_def cake_mk_rec_env_def fmap_of_list.rep_eq
    apply (simp add: map_of_map_keyed name.map_of_rekey option.rel_map)
    apply (rule option.rel_mono_strong)
     apply fact
    apply (rule *)
