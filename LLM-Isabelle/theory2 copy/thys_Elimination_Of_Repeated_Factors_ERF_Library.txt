theory ERF_Library
imports
  Mason_Stothers.Mason_Stothers
  Berlekamp_Zassenhaus.Berlekamp_Type_Based
  Perfect_Fields.Perfect_Fields 
begin


hide_const (open) Formal_Power_Series.radical



lemma normalize_prod_monics:
  assumes "\<forall>x\<in>A. monic x"
  shows "normalize (\<Prod>x\<in>A. x^(e x)) = (\<Prod>x\<in>A. x^(e x))"
  by (simp add: assms monic_power monic_prod normalize_monic)

lemma prime_monic:
  fixes p :: "'a :: {euclidean_ring_gcd,field} poly"
  assumes "p\<noteq>0" "prime p" shows "monic p"
  using normalize_prime[OF assms(2)] monic_normalize[OF assms(1)] by auto



lemma pderiv_exp_prod_monic: 
assumes "p = prod_mset fs" 
shows "pderiv p = (sum (\<lambda> fi. let ei = count fs fi in
    Polynomial.smult (of_nat ei) (pderiv fi) * fi^(ei-1) * prod (\<lambda> fj. fj^(count fs fj)) 
    ((set_mset fs) - {fi})) (set_mset fs))"
proof -
  have pderiv_fi: "pderiv (fi ^ count fs fi) = 
    Polynomial.smult (of_nat (count fs fi)) (pderiv fi * (fi ^ (count fs fi - Suc 0)))" 
    if "fi \<in># fs" for fi
  proof -
    show ?thesis unfolding i[symmetric] by (subst pderiv_power_Suc) (auto simp add: algebra_simps)
  qed
  show ?thesis unfolding assms prod_mset_multiplicity pderiv_prod sum_distrib_left Let_def
    by (rule sum.cong[OF refl]) (auto simp add: algebra_simps pderiv_fi)
qed


a unit itself. Careful: This does not mean that $p=c$ since there could be another unit $u$ such 
that $p = u*c$.\<close>
text \<open>A prime polynomial has degree greater than zero. This is clear since any polynomial of 
degree 0 is constant and thus also a unit.\<close>
text \<open>This lemma helps to reason that if a sum is zero, under some conditions we can follow that 
the summands must also be zero.\<close>
subsection \<open>Lemmas for the \<open>radical\<close> of polynomials\<close>
text \<open>Properties of the function \<open>radical\<close>. 
Note: The radical polynomial in algebra denotes something else. Here, \<open>radical\<close> denotes the 
(i.e.\ the functions \<open>squarefree\<close> and \<open>square_free\<close>). Over fields, they differ only in their 
