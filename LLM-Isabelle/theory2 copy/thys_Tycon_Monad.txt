theory Monad
imports Functor
begin




monomorphic versions of the class axioms.\<close>
text \<open>Because the monad laws imply the composition rule for \<open>fmap\<close>, we declare \<open>prefunctor\<close> as the superclass, and separately
prove a subclass relationship with \<open>functor\<close>.\<close>
text \<open>As with \<open>fmap\<close>, we define the polymorphic \<open>return\<close>
and \<open>bind\<close> by coercion from the monomorphic \<open>returnU\<close> and
\<open>bindU\<close>.\<close>
subsection \<open>Naturality of bind and return\<close>
text \<open>The three class axioms imply naturality properties of \<open>returnU\<close> and \<open>bindU\<close>, i.e., that both commute with \<open>fmapU\<close>.\<close>
subsection \<open>Polymorphic versions of class assumptions\<close>
subsection \<open>Derived rules\<close>
text \<open>The following properties can be derived using only the
abstract monad laws.\<close>
text \<open>Bind is strict in its first argument, if its second argument
is a strict function.\<close>
subsection \<open>Laws for join\<close>
subsection \<open>Equivalence of monad laws and fmap/join laws\<close>
subsection \<open>Simplification of coercions\<close>
text \<open>We configure rewrite rules that push coercions inwards, and
reduce them to coercions on simpler types.\<close>
