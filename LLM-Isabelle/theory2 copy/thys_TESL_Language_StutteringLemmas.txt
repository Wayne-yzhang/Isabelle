theory StutteringLemmas

imports StutteringDefs

begin

lemma bounded_suc_ind:
proof (induction k)
  case 0
    with assms(1)[of 0] show ?case by simp
next
  case (Suc k')
qed



lemma dilating_fun_injects:
using assms dilating_fun_def strict_mono_imp_inj_on by blast

lemma dilating_injects:
using assms dilating_def dilating_fun_injects by blast

lemma ticks_image:
using dilating_fun_def assms by blast

lemma ticks_image_sub:
using assms dilating_def ticks_image by blast

lemma ticks_image_sub':
using ticks_image_sub[OF assms(1)] assms(2) by blast



lemma dilating_fun_image_strict:
proof
      using ticks_image[OF assms] by blast
      using assms dilating_fun_def strict_mono_less by blast
next
qed

lemma dilating_fun_image_left:
proof
      using ticks_image[OF assms] by blast
      using assms dilating_fun_def strict_mono_less strict_mono_less_eq by fastforce
next
      using assms dilating_fun_def strict_mono_less strict_mono_less_eq by fastforce
qed

lemma dilating_fun_image_right:
proof
      using ticks_image[OF assms] by blast
      using assms dilating_fun_def strict_mono_less strict_mono_less_eq by fastforce
next
      using assms dilating_fun_def strict_mono_less strict_mono_less_eq by fastforce
qed

lemma dilating_fun_image:
proof
      using ticks_image[OF assms] by blast
      using assms dilating_fun_def strict_mono_less_eq by blast
next
qed

lemma ticks_as_often_strict:
proof -
  from inj_on_iff_eq_card[OF this] calculation
  ultimately show ?thesis by auto
qed

lemma ticks_as_often_left:
proof -
  from inj_on_iff_eq_card[OF this] calculation
  ultimately show ?thesis by auto
qed

lemma ticks_as_often_right:
proof -
  from inj_on_iff_eq_card[OF this] calculation
  ultimately show ?thesis by auto
qed

lemma ticks_as_often:
proof -
  from inj_on_iff_eq_card[OF this] calculation
  ultimately show ?thesis by auto
qed


lemma ticks_tag_image:
proof -
    by (simp add: dilating_def) 
  ultimately show ?thesis by blast
qed


lemma ticks_sub:
using assms by (simp add: dilating_def)

lemma no_tick_sub:
using assms dilating_def dilating_fun_def by blast


where

lemma tick_set_sub:
proof
  }
next
  }
qed

lemma Least_strict_mono:
using Least_mono[OF strict_mono_mono, OF assms] .

lemma Least_nat_ex:
by (induction n rule: nat_less_induct, insert not_le_imp_less, blast)

lemma Least_sub:
proof -
    using Least_nat_ex ..
  from Least_strict_mono[OF this least] have
qed

lemma ticks_imp_ticks_sub:
proof -
  with ticks_image_sub[OF assms(1)] ticks_sub[OF assms(1)] show ?thesis by blast
qed

lemma ticks_imp_ticks_subk:
proof -
  moreover with ticks_sub[OF assms(1)] assms(2)
  ultimately show ?thesis by blast
qed

lemma dilated_ticks_strict:
proof
      by (simp add: dilating_def dilating_fun_def strict_monoD strict_mono_less_eq)
next
    from ticks_imp_ticks_subk[OF assms this]
      using strict_mono_less strict_mono_less_eq by blast
qed

lemma dilated_ticks_left:
proof
      by (simp add: dilating_def dilating_fun_def strict_monoD strict_mono_less_eq)
next
    from ticks_imp_ticks_subk[OF assms this]
      using strict_mono_less strict_mono_less_eq by blast
qed

lemma dilated_ticks_right:
proof
      by (simp add: dilating_def dilating_fun_def strict_monoD strict_mono_less_eq)
next
    from ticks_imp_ticks_subk[OF assms this]
      using strict_mono_less strict_mono_less_eq by blast
qed

lemma dilated_ticks:
proof
      using assms by (simp add: dilating_def dilating_fun_def strict_mono_less_eq)
next
    from ticks_imp_ticks_subk[OF assms this]
qed



lemma empty_dilated_prefix:
proof -
  from assms have False by (simp add: dilating_def dilating_fun_def)
  thus ?thesis ..
qed

corollary empty_dilated_prefix':
proof -
    by auto
     using empty_dilated_prefix[OF assms] by blast
  finally show ?thesis by simp
qed

corollary dilated_prefix:
proof -
    using dilated_ticks[OF assms] empty_dilated_prefix'[OF assms] by blast
  thus ?thesis by simp
qed

corollary dilated_strict_prefix:
proof -
    using f0 by simp
    using assms dilating_def by blast
  finally show ?thesis by simp
qed

lemma nat_sing_prop:
by auto

proof (induction n)
  case 0
      by (simp add: tick_count_def)
    finally show ?case .
next
  case (Suc k)
    show ?case
      case True
          by (simp add: tick_count_def)
        thus ?thesis by (simp add: True)
    next
      case False
          using le_Suc_eq by auto
          by (simp add: tick_count_def)
        thus ?thesis using Suc.IH by (simp add: False)
    qed
qed

  unfolding tick_count_def tick_count_strict_def using less_Suc_eq_le by auto

lemma tick_count_strict_is_fun[code]:
  case True
      using run_tick_count_strictly.simps(1)[symmetric] .
    finally show ?thesis using True by simp
next
  case False
      using tick_count_strict_suc by simp
      using run_tick_count_strictly.simps(2)[symmetric] .
    finally show ?thesis using * by simp
qed

lemma strictly_precedes_alt_def1:
by auto

lemma zero_gt_all:
  using assms neq0_conv by blast

lemma strictly_precedes_alt_def2:
proof
      by simp
      using tick_count_is_fun[symmetric, of r] tick_count_strict_is_fun[symmetric, of r]
      by simp
      by simp
      by (simp add: tick_count_is_fun)
      by (simp add: tick_count_is_fun) 
      using gr0_implies_Suc by blast
      by (simp add: tick_count_is_fun tick_count_strict_is_fun)
qed

lemma run_tick_count_suc:
by simp

corollary tick_count_suc:
by (simp add: tick_count_is_fun)

lemma card_suc:
proof -
  ultimately show ?thesis
qed

lemma card_le_leq:
proof -
  moreover with assms have
  by auto
  ultimately show ?thesis
qed

lemma card_le_leq_0:
proof -
  ultimately show ?thesis
qed

lemma card_mnm:
proof -
    using less_trans by auto
  hence 2:
  from card_Un_disjoint[OF 3 4 1] 2 show ?thesis by simp
qed

lemma card_mnm':
proof -
    using less_trans by auto
  hence 2:
  from card_Un_disjoint[OF 3 4 1] 2 show ?thesis by simp
qed

lemma nat_interval_union:
using assms le_cases nat_less_le by auto

  case True
next
  case False
qed

lemma card_prop_mono:
proof -
  ultimately show ?thesis by (simp add: card_mono)
qed


lemma no_tick_before_suc:
proof -
    hence False using smf not_less_eq strict_mono_less by blast
  } thus ?thesis using assms(2) by blast
qed

lemma tick_count_fsuc:
proof -
    by (simp add: nat_interval_union strict_mono_less_eq)
     by auto
    by (simp add: * card_Un_disjoint)
  moreover from no_tick_before_suc[OF assms] have
    using smf strict_mono_less by fastforce
  ultimately show ?thesis by (simp add: tick_count_def)
qed

corollary tick_count_f_suc:
using tick_count_fsuc[OF assms]

corollary tick_count_f_suc_suc:
using tick_count_f_suc[OF assms] by simp

lemma tick_count_f_suc_sub:
using tick_count_f_suc_suc[OF assms] assms by (simp add: dilating_def)

lemma tick_count_latest:
proof -
    by (simp add: disjoint_iff_not_equal)
    using no_tick_sub by fastforce
  with union and partition show ?thesis by (simp add: tick_count_def)
qed

lemma tick_count_sub:
proof -
    using assms dilating_def dilating_injects[OF assms] by (simp add: card_image)
  finally show ?thesis .
qed

corollary run_tick_count_sub:
proof -
  finally show ?thesis .
qed

lemma tick_count_strict_0:
proof -
  thus ?thesis unfolding tick_count_strict_def by simp
qed

lemma tick_count_strict_stable:
proof -
  with no_tick_before_suc[OF assms(1)] have
  from tick_count_strict_def have
  also have
    using card_mnm' assms(2) by simp
  finally show ?thesis by (simp add: tick_count_strict_def)
qed

lemma tick_count_strict_sub:
proof -
    using assms dilating_def dilating_injects[OF assms] by (simp add: card_image)
  finally show ?thesis .
qed


lemma mono_tick_count:
proof
  { fix x y::nat
      unfolding tick_count_def by simp
qed

lemma greatest_prev_image:
proof (induction n)
  case 0
    thus ?case using "0.prems" by blast
next
  case (Suc n)
  show ?case
    case True
        using Suc.prems Suc_leI le_antisym by blast
      thus ?thesis by blast
  next
    case False
    from Suc.IH[OF this] obtain n\<^sub>p
      using le_Suc_eq by auto
    thus ?thesis by blast
  qed
qed

lemma strict_mono_suc:
proof -
  proof -
      with assms(2) have False by simp
    } thus ?thesis using not_less by blast
  qed
  ultimately show ?thesis by (simp add: Suc_leI)
qed

lemma next_non_stuttering:
proof -
  proof -
      with * have False using smf strict_mono_less by blast
    } thus ?thesis using not_less by blast
  qed
  with ** show ?thesis by simp
qed

lemma dil_tick_count:
proof -
  show ?thesis
  proof (induction n)
    case 0 
      with run_tick_count_sub[OF *, of _ 0] have
      ultimately show ?case by simp
  next
    case (Suc n') thus ?case 
      case True
        show ?thesis
          case True
              using assms(2) run_tick_count_sub[OF *] by simp
            thus ?thesis by (simp add: fn0)
        next
          case False
              using * fn0 ticks_sub by fastforce
            thus ?thesis by (simp add: Suc.IH le_SucI)
        qed
    next
      case False
        thus ?thesis  using * Suc.IH no_tick_sub by fastforce
    qed
  qed
qed

lemma stutter_no_time:
proof -
    using assms(1) by (simp add: dilating_def dilating_fun_def)
  ultimately show ?thesis by simp
qed

lemma time_stuttering:
proof -
    using  stutter_no_time[OF assms(1,3,4)] by blast
  finally show ?thesis .
qed

lemma first_time_image:
proof
  with before_first_time[OF this]
      by (simp add: first_time_def)
      using assms(1) by (simp add: dilating_def)
  ultimately have **:
    by simp
  proof -
      case True
          by (simp add: dilating_def dilating_fun_def strict_mono_less)
        thus ?thesis by (simp add: mm0 m0n **)
