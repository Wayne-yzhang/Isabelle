theory Sequent2 imports Sequent begin


  by (metis compl.simps(1))

definition compl' where

lemma comp'_sem:
  by (smt compl'_def compl.simps(1) compl eval.simps(7) someI_ex)

  by (induct ps) (use comp'_sem in auto)

theorem SC_completeness':
proof -
    by (induct ps arbitrary: ps') (simp, smt compl'_def compl.simps(1) list.simps(9) someI_ex)
    by auto
    unfolding ps'_def using comp'_sem_list by blast
    by (metis Ball_set Bex_set)
    using SC_completeness by blast
  then show ?thesis
qed

corollary
  using assms SC_completeness' by (cases ps) auto

end
