theory GaleStewartGames
  imports AlternatingLists MorePrefix MoreENat
begin



locale GSgame =
  fixes A N
  assumes length:"\<forall>e\<in>A. llength e = 2*N"
begin

definition "position" where
  "position (e::'a list) \<equiv> length e \<le> 2*N"

lemma position_maxlength_cannotbe_augmented:
assumes "length p = 2*N"
shows "\<not> position (p @ [m])"
 by (auto simp:position_def assms[symmetric])

definition "play" where
  "play (e::'a llist) \<equiv> llength e = 2*N"

lemma plays_are_positions_conv:
  shows "play (llist_of p) \<longleftrightarrow> position p \<and> length p = 2*N" 
unfolding play_def position_def by auto

lemma finite_plays_are_positions:
  assumes "play p" "lfinite p"
  shows "position (list_of p)"
using assms 
unfolding play_def position_def by (cases "lfinite p";auto simp:length_list_of)

end



definition joint_strategy  :: "('b list \<Rightarrow> 'a) \<Rightarrow> ('b list \<Rightarrow> 'a) \<Rightarrow> ('b list \<Rightarrow> 'a)" where
  "joint_strategy \<sigma>\<^sub>e \<sigma>\<^sub>o p = (if even (length p) then \<sigma>\<^sub>e p else \<sigma>\<^sub>o p)"


definition strategy_progression where
  "strategy_progression \<sigma> p = lappend (llist_of (prefixes p)) (ltl (iterates (augment_list \<sigma>) p))"

lemma induced_play_infinite:
  "\<not> lfinite (strategy_progression \<sigma> p)"
unfolding strategy_progression_def by auto

lemma plays_from_strategy_lengths[simp]:
  "length (strategy_progression \<sigma> p $ i) = i"
proof(induct i)
  case 0
  then show ?case by(cases p;auto simp:strategy_progression_def lnth_lappend take_map ltake_lappend)
next
  case (Suc i)
  then show ?case
    by (cases "i<length p") (auto simp:strategy_progression_def lnth_lappend length_augment_list tl_prefixes_idx)
qed

lemma length_plays_from_strategy[simp]:
  "llength (strategy_progression \<sigma> p) = \<infinity>"
  unfolding strategy_progression_def by auto
lemma length_ltl_plays_from_strategy[simp]:
  "llength (ltl (strategy_progression \<sigma> p)) = \<infinity>"
  unfolding strategy_progression_def by auto

lemma plays_from_strategy_chain_Suc:
  shows "prefix (strategy_progression \<sigma> p  $  n) (strategy_progression \<sigma> p  $  Suc n)"
  unfolding strategy_progression_def
  by (auto simp:take_Suc_prefix nth_prefixes lnth_lappend nth_prefixes_is_prefix_tl
                augment_list_prefix)

lemma plays_from_strategy_chain:
  shows "n \<le> m \<Longrightarrow> prefix (strategy_progression \<sigma> p  $  n) (strategy_progression \<sigma> p  $  m)"
proof (induct "m-n" arbitrary:m n)
  case (Suc x)
  hence [simp]:"Suc (x + n) = m" by auto
  from Suc.hyps(2) 
    prefix_order.trans[OF Suc.hyps(1)[of "x + n" n] plays_from_strategy_chain_Suc[of _ _ "x+n"]]
  show ?case by auto
qed auto

lemma plays_from_strategy_remains_const:
  assumes "n \<le> i"
  shows "take n (strategy_progression \<sigma> p  $  i)  =  strategy_progression \<sigma> p  $  n"
  apply(rule sym,subst prefix_same_length_eq[symmetric])
  using assms plays_from_strategy_chain[OF assms] 
  by (auto intro!:prefix_takeI)

lemma infplays_augment_one[simp]:
  "strategy_progression \<sigma> (p @ [\<sigma> p]) = strategy_progression \<sigma> p"
proof(induct p)
  note defs = strategy_progression_def
  {
    case Nil
    then show ?case
      by (auto simp:defs iterates.code[of _ "[\<sigma> []]"])
  next
    case (Cons a p)
    then show ?case
      by (auto simp:defs iterates.code[of _ "a # p @ [\<sigma> (a # p)]"] lappend_llist_of_LCons)
  }
qed

lemma infplays_augment_many[simp]:
  "strategy_progression \<sigma> ((augment_list \<sigma> ^^ n) p) = strategy_progression \<sigma> p"
by(induct n,auto)

lemma infplays_augment_one_joint[simp]:
  "even (length p) \<Longrightarrow> strategy_progression (joint_strategy \<sigma>\<^sub>e \<sigma>\<^sub>o) (augment_list \<sigma>\<^sub>e p)
                     = strategy_progression (joint_strategy \<sigma>\<^sub>e \<sigma>\<^sub>o) p"
  "odd (length p)  \<Longrightarrow> strategy_progression (joint_strategy \<sigma>\<^sub>e \<sigma>\<^sub>o) (augment_list \<sigma>\<^sub>o p)
                     = strategy_progression (joint_strategy \<sigma>\<^sub>e \<sigma>\<^sub>o) p"
using infplays_augment_one[of "joint_strategy \<sigma>\<^sub>e \<sigma>\<^sub>o" p]
unfolding joint_strategy_def by auto

lemma infplays_eq:
  assumes "\<And> p'. prefix p p' \<Longrightarrow> augment_list s1 p' = augment_list s2 p'"
  shows "strategy_progression s1 p = strategy_progression s2 p"
proof -
  from assms[of p] have [intro]:"s1 p = s2 p" by auto
  have "(augment_list s1 ^^ n) (augment_list s1 p) =
          (augment_list s2 ^^ n) (augment_list s2 p)" for n
    proof(induct n)
    case (Suc n)
    with assms[OF prefix_order.trans[OF _ prefix_augment]]
    show ?case by (auto)
  qed auto
  hence "strategy_progression s1 p $ n = strategy_progression s2 p $ n"
  thus ?thesis by(intro coinductive_eq_I,auto)
qed


context GSgame
begin


definition induced_play where
  "induced_play \<sigma> \<equiv> ltake (2*N) o lmap last o ltl o strategy_progression \<sigma>"

lemma induced_play_infinite_le[simp]:
  "enat x < llength (strategy_progression \<sigma> p)"
  "enat x < llength (lmap f (strategy_progression \<sigma> p))"
  "enat x < llength (ltake (2*N) (lmap f (strategy_progression \<sigma> p))) \<longleftrightarrow> x < 2*N"
using induced_play_infinite by auto

lemma induced_play_is_lprefix:
  assumes "position p"
  shows "lprefix (llist_of p) (induced_play \<sigma> p)"
proof -
  have l:"llength (llist_of p) \<le> 2 * N" using assms unfolding position_def by auto
  have "lprefix (llist_of p) (lmap last (ltl (llist_of (prefixes p))))" by auto
  hence "lprefix (llist_of p) ((lmap last o ltl o strategy_progression \<sigma>) p)"
    unfolding strategy_progression_def by(auto simp add: lmap_lappend_distrib lprefix_lappend)
  thus ?thesis unfolding induced_play_def o_def
    using lprefix_ltakeI[OF _ l] by blast
qed

lemma length_induced_play[simp]:
  "llength (induced_play s p) = 2 * N"
  unfolding induced_play_def by auto

  assumes "length (p::'a list) \<ge> 2 * N"
  shows "induced_play \<sigma> p = ltake (2 * N) (llist_of p)"
proof(cases "N")
  case (enat nat)
  let ?p = "take (2 * nat) p"
  from assms have [intro]:"2 * N \<le> enat (length p)" by auto
  have [intro]:"2 * N \<le> enat (min (length p) (2 * nat))" unfolding enat
    by (metis assms enat min.orderI min_def numeral_eq_enat times_enat_simps(1))
  have [intro]:"enat (min (length p) (2 * nat)) = 2 * N"
    by (metis (mono_tags, lifting) assms enat min.absorb2 min_enat_simps(1)
        numeral_eq_enat times_enat_simps(1))
  have n:"2 * N \<le> llength (llist_of p)" "2 * N \<le> llength (llist_of (take (2 * nat) p))" by auto
  have pp:"position ?p"
    by (metis (no_types, lifting) assms dual_order.order_iff_strict enat llength_llist_of
               llength_ltake' ltake_llist_of numeral_eq_enat take_all times_enat_simps(1))
  have lp:"lprefix (llist_of ?p) (induced_play \<sigma> ?p)" by(rule induced_play_is_lprefix[OF pp])
  have "ltake (2 * N) (llist_of p) = ltake (2 * N) (llist_of (take (2 * nat) p))"
    unfolding ltake_llist_of[symmetric] enat ltake_ltake numeral_eq_enat by auto
  hence eq:"induced_play \<sigma> p = induced_play \<sigma> ?p"
    unfolding induced_play_def strategy_progression_def
    by(auto simp add: lmap_lappend_distrib n[THEN ltake_lappend1])
  have "llist_of (take (2 * nat) p) = induced_play \<sigma> p"
    by(rule lprefix_llength_eq_imp_eq[OF lp[folded eq]],auto)
  then show ?thesis
               numeral_eq_enat times_enat_simps(1) by metis
next
  case infinity
  hence "2 * N = \<infinity>" by (simp add: imult_is_infinity)
  then show ?thesis using assms by auto
qed

lemma infplays_augment_many_lprefix[simp]:
  shows "lprefix (llist_of ((augment_list \<sigma> ^^ n) p)) (induced_play \<sigma> p)
        = position ((augment_list \<sigma> ^^ n) p)" (is "?lhs = ?rhs")
proof
  assume ?lhs
  from lprefix_llength_le[OF this] show ?rhs unfolding induced_play_def
    by (auto simp:position_def length_augment_list) next
  assume assm:?rhs
  from induced_play_is_lprefix[OF this, of "\<sigma>"]
  show ?lhs unfolding induced_play_def by simp
qed


definition strategy_winning_by_Even where
  "strategy_winning_by_Even \<sigma>\<^sub>e p \<equiv> (\<forall> \<sigma>\<^sub>o. induced_play (joint_strategy \<sigma>\<^sub>e \<sigma>\<^sub>o) p \<in> A)"
definition strategy_winning_by_Odd where
  "strategy_winning_by_Odd \<sigma>\<^sub>o p \<equiv> (\<forall> \<sigma>\<^sub>e. induced_play (joint_strategy \<sigma>\<^sub>e \<sigma>\<^sub>o) p \<notin> A)"

lemma at_most_one_player_winning:
shows "\<not> (\<exists> \<sigma>\<^sub>e. strategy_winning_by_Even \<sigma>\<^sub>e p) \<or> \<not> (\<exists> \<sigma>\<^sub>o. strategy_winning_by_Odd \<sigma>\<^sub>o p)"
  unfolding strategy_winning_by_Even_def strategy_winning_by_Odd_def by auto


lemma any_moves_remain_winning_Even:
  assumes "odd (length p)" "strategy_winning_by_Even \<sigma> p"
  shows "strategy_winning_by_Even \<sigma> (p @ [m])"
unfolding strategy_winning_by_Even_def proof
  fix \<sigma>\<^sub>o
  let ?s = "\<sigma>\<^sub>o(p:=m)"
  have prfx:"prefix (p @ [m]) p' \<Longrightarrow>
             p' @ [joint_strategy \<sigma> \<sigma>\<^sub>o p'] = p' @ [joint_strategy \<sigma> ?s p']"
    for p' by (auto simp: joint_strategy_def)
  from assms(2)[unfolded strategy_winning_by_Even_def,rule_format,of ?s]
       infplays_augment_one_joint(2)[OF assms(1)]
  have "induced_play (joint_strategy \<sigma> ?s) (augment_list ?s p) \<in> A"
    by (metis (mono_tags, lifting) induced_play_def comp_apply)
  thus "induced_play (joint_strategy \<sigma> \<sigma>\<^sub>o) (p @ [m]) \<in> A"
    unfolding induced_play_def o_def
    using infplays_eq[OF prfx] by auto
qed

lemma any_moves_remain_winning_Odd:
  assumes "even (length p)" "strategy_winning_by_Odd \<sigma> p"
  shows "strategy_winning_by_Odd \<sigma> (p @ [m])"
unfolding strategy_winning_by_Odd_def proof
  fix \<sigma>\<^sub>e
  let ?s = "\<sigma>\<^sub>e(p:=m)"
  have prfx:"prefix (p @ [m]) p' \<Longrightarrow>
             p' @ [joint_strategy \<sigma>\<^sub>e \<sigma> p'] = p' @ [joint_strategy ?s \<sigma> p']"
    for p' by (auto simp:joint_strategy_def)
  from assms(2)[unfolded strategy_winning_by_Odd_def,rule_format,of ?s]
       infplays_augment_one_joint(1)[OF assms(1)]
  have "induced_play (joint_strategy ?s \<sigma>) (augment_list ?s p) \<notin> A"
    by (metis (mono_tags, lifting) induced_play_def comp_apply)
  thus "induced_play (joint_strategy \<sigma>\<^sub>e \<sigma>) (p @ [m]) \<notin> A"
    unfolding induced_play_def o_def
    using infplays_eq[OF prfx] by auto
qed


lemma non_winning_moves_remains_non_winning_Even:
  assumes "even (length p)" "\<forall> \<sigma>. \<not> strategy_winning_by_Even \<sigma> p"
  shows "\<not> strategy_winning_by_Even \<sigma> (p @ [m])"
proof(rule contrapos_nn[of "\<exists> \<sigma>. strategy_winning_by_Even \<sigma> p"])
  assume a:"strategy_winning_by_Even \<sigma> (p @ [m])"
  let ?s = "\<sigma>(p:=m)"
  have prfx:"prefix (p @ [m]) p' \<Longrightarrow>
             p' @ [joint_strategy \<sigma> \<sigma>\<^sub>o p'] = p' @ [joint_strategy ?s \<sigma>\<^sub>o p']"
    for p' \<sigma>\<^sub>o by (auto simp:joint_strategy_def)
  from a infplays_eq[OF prfx]
  have "strategy_winning_by_Even ?s (p @ [m])"
    unfolding strategy_winning_by_Even_def induced_play_def by simp
  hence "strategy_winning_by_Even ?s p" 
    using infplays_augment_one_joint(1)[OF assms(1)] 
    unfolding strategy_winning_by_Even_def induced_play_def o_def
    by (metis fun_upd_same)
  thus "\<exists>\<sigma>. strategy_winning_by_Even \<sigma> p" by blast next
  from assms(2) show "\<not> (\<exists> \<sigma>. strategy_winning_by_Even \<sigma> p)" by meson
qed

lemma non_winning_moves_remains_non_winning_Odd:
  assumes "odd (length p)" "\<forall> \<sigma>. \<not> strategy_winning_by_Odd \<sigma> p"
  shows "\<not> strategy_winning_by_Odd \<sigma> (p @ [m])"
proof(rule contrapos_nn[of "\<exists> \<sigma>. strategy_winning_by_Odd \<sigma> p"])
  assume a:"strategy_winning_by_Odd \<sigma> (p @ [m])"
  let ?s = "\<sigma>(p:=m)"
  have prfx:"prefix (p @ [m]) p' \<Longrightarrow>
             p' @ [joint_strategy \<sigma>\<^sub>e \<sigma> p'] = p' @ [joint_strategy \<sigma>\<^sub>e ?s p']"
    for p' \<sigma>\<^sub>e by (auto simp:joint_strategy_def)
  from a infplays_eq[OF prfx]
  have "strategy_winning_by_Odd ?s (p @ [m])"
    unfolding strategy_winning_by_Odd_def induced_play_def by simp
  hence "strategy_winning_by_Odd ?s p" 
    using infplays_augment_one_joint(2)[OF assms(1)] 
    unfolding strategy_winning_by_Odd_def induced_play_def o_def
    by (metis fun_upd_same)
  thus "\<exists>\<sigma>. strategy_winning_by_Odd \<sigma> p" by blast next
  from assms(2) show "\<not> (\<exists> \<sigma>. strategy_winning_by_Odd \<sigma> p)" by meson
qed


lemma winning_moves_remain_winning_Even:
  assumes "even (length p)" "strategy_winning_by_Even \<sigma> p"
  shows "strategy_winning_by_Even \<sigma> (p @ [\<sigma> p])"
using assms infplays_augment_one
unfolding induced_play_def strategy_winning_by_Even_def by auto

lemma winning_moves_remain_winning_Odd:
  assumes "odd (length p)" "strategy_winning_by_Odd \<sigma> p"
  shows "strategy_winning_by_Odd \<sigma> (p @ [\<sigma> p])"
using assms infplays_augment_one
unfolding induced_play_def strategy_winning_by_Odd_def by auto


abbreviation winning_position_Even where
  "winning_position_Even p \<equiv> position p \<and> (\<exists> \<sigma>. strategy_winning_by_Even \<sigma> p)"
abbreviation winning_position_Odd where
  "winning_position_Odd p \<equiv> position p \<and> (\<exists> \<sigma>. strategy_winning_by_Odd \<sigma> p)"

lemma winning_position_can_remain_winning_Even:
  assumes "even (length p)" "\<forall> m. position (p @ [m])" "winning_position_Even p"
  shows "\<exists> m. winning_position_Even (p @ [m])"
using assms winning_moves_remain_winning_Even[OF assms(1)] by auto

lemma winning_position_can_remain_winning_Odd:
  assumes "odd (length p)" "\<forall> m. position (p @ [m])" "winning_position_Odd p"
  shows "\<exists> m. winning_position_Odd (p @ [m])"
using assms winning_moves_remain_winning_Odd[OF assms(1)] by auto

lemma winning_position_will_remain_winning_Even:
  assumes "odd (length p)" "position (p @ [m])" "winning_position_Even p"
  shows "winning_position_Even (p @ [m])"
using assms any_moves_remain_winning_Even[OF assms(1)] by auto

lemma winning_position_will_remain_winning_Odd:
  assumes "even (length p)" "position (p @ [m])" "winning_position_Odd p"
  shows "winning_position_Odd (p @ [m])"
using assms any_moves_remain_winning_Odd[OF assms(1)] by auto

lemma induced_play_eq:
assumes "\<forall> p'. prefix p p' \<longrightarrow> (augment_list s1) p' = (augment_list s2) p'"
shows "induced_play s1 p = induced_play s2 p"
unfolding induced_play_def by (auto simp:infplays_eq[OF assms[rule_format]])

end

end