theory Example_Propositional_Tableau imports Refutations begin


datatype 'p fm






lemma Weaken2:


  by (induct A rule: Calculus.induct) auto

  using soundness by fastforce

  using soundness by fastforce



interpretation MCS_No_Saturation consistent
proof
    unfolding consistent_def by fast
next
    unfolding consistent_def by blast
next
qed

interpretation Refutations_MCS Calculus consistent
proof
    using Weaken by meson
next
    unfolding consistent_def ..
qed



locale Hintikka =

lemma Hintikka_model:
  using assms by (induct p) (unfold Hintikka_def semantics.simps; blast)+

lemma MCS_Hintikka:
proof
  fix P
    by simp
    by blast
  ultimately show False
    using assms unfolding consistent_def by blast
next
  fix p
    using assms MCS_refute by blast
next
  fix p q
  proof (rule ccontr)
      by blast+
      using assms MCS_refute by blast+
      by blast
      using assms unfolding consistent_def by auto
    then show False
      using * ..
  qed
next
  fix p q
  proof (rule ccontr)
      by blast
    then show False
    proof cases
      case 1
        using assms MCS_refute by blast
        by fast
        using assms unfolding consistent_def by auto
      then show False
        using * ..
    next
      case 2
        using assms MCS_refute by blast
        using Weaken by (metis set_subset_Cons)
        by fast
        using assms unfolding consistent_def by auto
      then show False
        using * ..
    qed
  qed
qed

lemma truth_lemma:
  using Hintikka_model MCS_Hintikka assms by blast


theorem strong_completeness:
proof (rule ccontr)
    using refute_split1 by blast


    unfolding consistent_def using * by blast
    using MCS_Extend' by blast+
    using truth_lemma by fastforce
    using Extend_subset by blast
    by blast+
    using assms(1) by blast
  ultimately show False
    by simp
qed


theorem completeness:

  using completeness soundness' by blast

end
