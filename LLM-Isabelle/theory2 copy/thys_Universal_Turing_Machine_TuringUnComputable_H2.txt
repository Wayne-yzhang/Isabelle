   - Splitted and reordered theory file Uncomputable.thy into
     several smaller theory files.

   - Completed the proof of the undecidability of the Halting problem H2.

     The original version by Jian Xu, Xingyuan Zhang, and Christian Urban
     only formalizes a weaker version of the undecidability result.
     Their formalization just shows that the set H2 is not
     decidable by any composable (aka well-formed) Turing machine.

     However, the set H2 might be decidable by some none composable TM.
     We close this gap in the following and show that no Turing machine,
     may it be composable or not, is able to decide the set H2.

   - Corrected the presentation of the theory.

     The entire hierarchy of theories formalized in HOL is based on the
     principle of Conservative Theory Extension.

     One major law of this principle is that for every locale there must be at least
     one instance proof in order to ensure that the locale is inhabited (has models).

     The original version of the theory TuringUnComputable_H2 intentionally used
     locale axioms that have no model.
     There is not a single valid reason to justify this miss-use of the locale concept!

     In our version, we present the theory in accordance with the principle of
     Conservative Theory Extension.
 *)
(*
declare adjust.simps[simp del]

declare seq_tm.simps [simp del] 
declare shift.simps[simp del]
declare composable_tm.simps[simp del]
declare step.simps[simp del]
declare steps.simps[simp del]
*)
fun dummy_code :: "tprog0 \<Rightarrow> nat"  (* the witness for the instantiation of class hph2 *)
  (* Interestingly, the detailed definition of the coding function @{text "code"}
     for Turing machines does not affect the final result.

     In the proof there is no need to appeal on properties of the coding function
     like e.g. injectivity! *)
(* FABR Note about the old formalization:

    * The first axiom states that the Turing machine H is well-formed (composable).
    * However, this manifests a principle weakness of the old modelling of the locale!
    *
    * Due to this locale axiom, we only prove that there exists no composable TM H
    * that is able to decide the Halting problem 'TMC_has_num_res M ns'
    *
    * See theories ComposableTMs.thy and HaltingProblems_K_H.thy for a fix by FABR.

    These are the old locale axioms, which we do not use any longer.

    assumes h_composable[intro]: "composable_tm0 H"

    and h_case:
    "\<And> M ns.  TMC_has_num_res M ns
        \<Longrightarrow> \<lbrace>(\<lambda>tap. tap = ([Bk], <(code M, ns)>))\<rbrace> H \<lbrace>(\<lambda>tap. \<exists>k. tap = (Bk \<up> k, <0::nat>))\<rbrace>"

    and nh_case:
    "\<And> M ns. \<not>  TMC_has_num_res M ns 
     \<Longrightarrow> \<lbrace>(\<lambda>tap. tap = ([Bk], <(code M, ns)>))\<rbrace> H \<lbrace>(\<lambda>tap. \<exists>k. tap = (Bk \<up> k, <1::nat>))\<rbrace>"

    An additional weakness of these locale axioms are the post-conditions used:

    \<lbrace>(\<lambda>tap. \<exists>k. tap = (Bk \<up> k, <0::nat>))\<rbrace>"
    \<lbrace>(\<lambda>tap. \<exists>k. tap = (Bk \<up> k, <1::nat>))\<rbrace>"

    These need to be relaxed into: 

    \<lbrace>\<lambda>tap. \<exists>k l. tap = (Bk \<up> k, <0::nat> @Bk\<up>l)\<rbrace>)
    \<lbrace>\<lambda>tap. \<exists>k l. tap = (Bk \<up> k, <1::nat> @Bk\<up>l)\<rbrace>)

    Otherwise, there might simply be no TM that is able to compute just the output
    <0::nat> or <1:nat> without any further trailing blanks.

*)
definition H2 :: "((instr list) \<times> (nat list)) set"  (* behold the type of the set *)
(* first, create a composable version of the arbitrary and thus potentially non-composable machine H2D0' *)
(* here we obtain the composable variant H2D0 of  H2D0' *)
(* define the culprit tm_contra from the diagonal by using tm_copy and tm_dither *)
(* the stage is set: now, we derive the contradiction *)
    show False  (* (tm_contra, [code tm_contra]) \<in> H2  \<Longrightarrow> (tm_contra, [code tm_contra]) \<notin> H2 *)
      (* assertions *)
(* the play book for derivation of the contradiction,
   for the case: (tm_contra, [code tm_contra]) \<in> H2

         \<lbrace>P1\<rbrace> tm_copy \<lbrace>P2\<rbrace>  \<lbrace>P2\<rbrace> H2D0 \<lbrace>Q3\<rbrace>
         ---------------------------------
         first: \<lbrace>P1\<rbrace> (tm_copy |+| H2D0) \<lbrace>Q3\<rbrace>    second: \<lbrace>Q3\<rbrace> tm_dither loops
         -------------------------------------------------------------------
                        \<lbrace>P1\<rbrace> tm_contra loops
*)
(* from \<lbrace>P1\<rbrace> tm_copy \<lbrace>P2\<rbrace>  \<lbrace>P2\<rbrace> H2D0 \<lbrace>Q3\<rbrace>   show  first: \<lbrace>P1\<rbrace> (tm_copy |+| H2D0) \<lbrace>Q3\<rbrace> *)
        case A_halt (* of tm_copy *)
        case B_halt (* of H2D0 *)
(* second: \<lbrace>P3\<rbrace> tm_dither loops *)
(* from first and second show  \<lbrace>P1\<rbrace> tm_contra loops *)
(* from \<lbrace>P1\<rbrace> tm_contra \<up>   show  \<not>TMC_has_num_res tm_contra [code tm_contra] *)
(* thus have contradiction *)
    show False  (* (tm_contra, [code tm_contra]) \<notin> H2 \<Longrightarrow> (tm_contra, [code tm_contra]) \<in> H2 *)
      (* assertions *)
(* the play book for derivation of the contradiction,
   for the case: (tm_contra, [code tm_contra]) \<notin> H2

         \<lbrace>P1\<rbrace> tm_copy \<lbrace>P2\<rbrace>  \<lbrace>P2\<rbrace> H2D0 \<lbrace>P3\<rbrace> 
         --------------------------------
         first: \<lbrace>P1\<rbrace> (tm_copy |+| H2D0) \<lbrace>P3\<rbrace>   second: \<lbrace>P3\<rbrace> tm_dither \<lbrace>P3\<rbrace>
         ----------------------------------------------------------------
                           \<lbrace>P1\<rbrace> tm_contra \<lbrace>P3\<rbrace>
*)
(* from \<lbrace>P1\<rbrace> tm_copy \<lbrace>P2\<rbrace>  \<lbrace>P2\<rbrace> H2D0 \<lbrace>P3\<rbrace>     show    first: \<lbrace>P1\<rbrace> (tm_copy |+| H2D0) \<lbrace>P3\<rbrace> *)
        case A_halt (* of tm_copy *)
        case B_halt (* of H2D0 *)
(* second: \<lbrace>P3\<rbrace> tm_dither \<lbrace>P3\<rbrace> *)
(* from first and second show  \<lbrace>P1\<rbrace> tm_contra \<lbrace>P3\<rbrace> *)
(* from  \<lbrace>P1\<rbrace> tm_contra \<lbrace>P3\<rbrace>    show    TMC_has_num_res tm_contra [code tm_contra] *)
(* thus have contradiction *)
end (* locale uncomputable *)
