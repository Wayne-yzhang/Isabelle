theory Example_Propositional_SC imports Derivations begin


datatype 'p fm







  by (metis Axiom Cut ImpR WeakenR append_self_conv2 self_append_conv set_subset_Cons)


  by (induct A B rule: Calculus.induct) auto

  using soundness by fastforce

  using soundness by fastforce



interpretation MCS_No_Saturation consistent
proof
    unfolding consistent_def by fast
next
    unfolding consistent_def by blast
next
qed

proof
    using WeakenL by blast
next
    unfolding consistent_def ..
next
    by (metis Axiom WeakenL set_ConsD subsetI)
next
    using Cut by fastforce
qed





theorem Hintikka_model':
  case 1
  then show ?case ..
next
  case (2 x)
  then show ?case
    using assms[of x] by (cases x) simp_all
qed

lemma Hintikka_Extend:
proof (cases p)
  case Fls
    using assms MCS_derive consistent_def by blast
  then show ?thesis
    using Fls by simp
next
  case (Imp p q)
    by (meson ImpR WeakenL set_subset_Cons)
    by (meson FlsR ImpR WeakenR set_subset_Cons)
    using Cut by (metis Axiom ImpL append_Nil append_Nil2)
    using assms MCS_derive MCS_derive_fls Axiom
    by (metis append_Cons append_Nil insert_subset list.simps(15))
  then show ?thesis
    using Imp by simp
qed simp

proof
    by (induct p) auto
next
    using Hintikka_model' by auto
next
    using Hintikka_Extend by auto
qed


theorem strong_completeness:
proof (rule ccontr)
    using Boole by blast
    by fast
    using derive_split1 by blast


    unfolding consistent_def using * by blast
    using MCS_Extend' by blast+
    using truth_lemma_no_saturation by fastforce
    using Extend_subset by blast
    by blast+
    using assms(1) by blast
  ultimately show False
    by simp
qed


theorem completeness:

  using completeness soundness' by blast

end
