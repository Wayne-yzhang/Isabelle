theory Concrete_Multivariate_Polynomials
  imports 
    "../Generalized_Sumcheck_Protocol/Sumcheck_as_Public_Coin_Proof"
    Polynomial_Instantiation
    Roots_Bounds
begin

declare total_degree_zero [simp del]


lemma card_indep_bound: 
  assumes "P \<Longrightarrow> card {x. Q x} \<le> d"
  shows "card {x. P \<and> Q x} \<le> d" 
  using assms
  by (cases P) auto
 
lemma sum_point_neq_zero [simp]: "(\<Sum>x' | x' = x \<and> f x' \<noteq> 0. f x') = f x"
proof - 
    by (intro sum.cong) auto
    by (cases "f x = 0") (simp_all)
  finally show ?thesis .
qed






  by (simp add: vars_def zero_mpoly.rep_eq)

  by (auto simp add: vars_def inst_defs keys_def MPoly_inverse
                     finite_inst_fun_keys lookup_inst_monom_resid 
           elim!: sum.not_neutral_contains_not_neutral split: if_splits)  
   


  by(simp add: vars_def uminus_mpoly.rep_eq)

lemma vars_subtr: 
  by(simp add: vars_add[where ?p1.0 = "p" and ?p2.0 = "-q", simplified] vars_minus[where p = "q"])








proof - 
    by (simp add: total_degree.rep_eq plus_mpoly.rep_eq)
    by (intro Max_mono Set.insert_mono image_mono Poly_Mapping.keys_add) (auto)
    by (simp add: image_Un)
    by (intro Max_Un) (auto)
    by (simp add: total_degree.rep_eq)
  finally show ?thesis .
qed

proof (transfer)
    by (auto simp add: keys_def inst_defs finite_inst_fun_keys lookup_inst_monom_resid
             elim!: sum.not_neutral_contains_not_neutral)
       (fastforce simp add: Max_ge_iff intro!: disjI2  intro: sum_mono2)
qed



  by(auto simp add: total_degree_def uminus_mpoly.rep_eq)

lemma deg_subtr:
  by(auto simp add: deg_add[where p = "p" and q = "-q", simplified] deg_minus[where p = "q"])






  by (fact insertion_zero)

  by (intro insertion_add)


proof (transfer, transfer)
  proof -

      using zero_less_iff_neq_zero by (fastforce simp add: in_keys_iff)
      for f :: "nat \<Rightarrow> 'a" and m :: "nat \<Rightarrow>\<^sub>0 nat" and P :: "nat \<Rightarrow> bool"
      by (auto intro: finite_subset[where B="keys m"])

    note fin_simps [simp] = fin this this[where P1="\<lambda>_. True", simplified]
    note map_add_simps [simp] = map_add_dom_app_simps(1,3)

      by (simp add: insertion_fun_def inst_fun_def)

      by (intro Sum_any.cong) (simp add: sum_distrib_right)

      by (intro Sum_any.cong sum.cong)
         (auto simp add: lookup_inst_monom_resid Prod_any.expand_set intro: arg_cong)

      by (simp add: inst_monom_coeff_def mult.assoc)

      by (intro Sum_any.cong sum.mono_neutral_right) (auto)

      by (subst prod.union_disjoint[symmetric])
         (auto  intro!: Sum_any.cong sum.cong prod.cong intro: arg_cong)

      apply (simp add: Prod_any.expand_set)
      apply (intro prod.cong, simp_all)
      by (metis (no_types, opaque_lifting) map_add_dom_app_simps(1,3))

      apply (intro Sum_any.cong sum.mono_neutral_right, simp_all)
       apply (safe, simp_all)
       subgoal for m v z    
         by (auto dest: Prod_any_not_zero[rotated, where a=v])
      subgoal for m' v
        by (auto simp add: domIff dest: Prod_any_not_zero[rotated, where a=v])
      done

      by (intro Sum_any.cong sum.cong) (auto)

      by (intro Sum_any.expand_superset) (auto elim: sum.not_neutral_contains_not_neutral)

      by (subst Sum_any.expand_set, subst sum.group) (auto)

      by (simp add: insertion_fun_def)
    finally show ?thesis .
  qed
qed


lemma eval_minus:
  using sum_negf[where f = "\<lambda>a . (lookup (mapping_of p) a * (\<Prod>aa. the (\<sigma> aa) ^ lookup a aa))"]
  by(auto simp add: uminus_mpoly.rep_eq insertion_def insertion_aux_def insertion_fun_def)
    (smt (verit) Collect_cong Sum_any.expand_set add.inverse_neutral neg_equal_iff_equal)

lemma eval_subtr:
  using assms
  by(auto simp add: vars_minus[where p = "q"] eval_minus[where p = "q"]
                    eval_add[where p = "p" and q = "-q", simplified])



lemma univariate_eval_as_insertion: 
  assumes "vars p \<subseteq> {x}"
  shows "eval p [x \<mapsto> r] = insertion (\<lambda>x. r) p"
  using assms 
  by (intro insertion_irrelevant_vars) auto

  fixes p::"'a::idom mpoly"
  using assms
  by (simp add: univariate_eval_as_insertion univariate_mpoly_roots_bound)

lemma mpoly_roots:
proof (intro card_indep_bound)
  proof -
      by (intro univariate_mpoly_roots_bound_eval subset_trans[OF vars_subtr]) (auto)
      by (intro le_trans[OF deg_subtr]) (simp)
    finally show ?thesis .
  qed
qed




lemmas multi_variate_polynomial_lemmas = 
  vars_finite vars_zero vars_add vars_inst 
  deg_zero deg_add deg_inst
  eval_zero eval_add eval_inst
  mpoly_roots

interpretation mpoly: 
  multi_variate_polynomial vars "deg :: 'a::{finite, idom} mpoly \<Rightarrow> nat" eval inst 
  by (unfold_locales) (auto simp add: multi_variate_polynomial_lemmas)


The completeness theorem for this type is @{thm [display] "mpoly.completeness"}
and the soundness theorem reads @{thm [display] "mpoly.soundness"}.
\<close>
