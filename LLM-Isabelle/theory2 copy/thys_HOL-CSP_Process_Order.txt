theory Process_Order
  imports Process Stop
begin










  by (simp_all add: failure_refine_def divergence_refine_def trace_refine_def
                    failure_divergence_refine_def trace_divergence_refine_def) 



  by (simp_all add: failure_refine_def le_approx_lemma_F trace_refine_def
                    le_approx1 divergence_refine_def le_approx_lemma_T)




  by (simp add: failure_divergence_refine_def)

  apply (simp add: trace_divergence_refine_def)
  oops 




  by (meson failure_refine_def order_trans, meson divergence_refine_def order_trans,
      meson trace_refine_def order_trans, meson failure_divergence_refine_def order_trans,
      meson divergence_refine_def order_trans trace_divergence_refine_def trace_refine_def)




  by (simp_all add: F_subset_imp_T_subset failure_refine_def trace_refine_def divergence_refine_def
                    trace_divergence_refine_def  failure_divergence_refine_def le_ref_def)
 



  by (simp_all add: leF_leD_imp_leFD leD_leT_imp_leDT)

  by (simp add: D_STOP leD_leT_imp_leDT Nil_elem_T T_STOP divergence_refine_def trace_refine_def)

  by (simp_all add: leDT_imp_leD leDT_imp_leT)




proof(auto simp add:cont2contlubE adm_def failure_refine_def)
  fix Y a b
    using F_LUB[OF ch2ch_cont[OF 1 3]] limproc_is_thelub[OF ch2ch_cont[OF 1 3]] 5 by force
qed

proof(auto simp add:cont2contlubE adm_def trace_refine_def)
  fix Y x
    using T_LUB[OF ch2ch_cont[OF 1 3]] limproc_is_thelub[OF ch2ch_cont[OF 1 3]] 5 by force
qed

proof(auto simp add:cont2contlubE adm_def divergence_refine_def)
  fix Y x
    using D_LUB[OF ch2ch_cont[OF 1 3]] limproc_is_thelub[OF ch2ch_cont[OF 1 3]] 5 by force
qed


lemmas le_FD_adm[simp] = le_adm[folded failure_divergence_refine_def]


  using adm_conj[OF le_T_adm[of u v] le_D_adm[of u v]] by (simp add: trace_divergence_refine_def)






end