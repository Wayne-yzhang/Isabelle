theory FOL_Axiomatic imports "HOL-Library.Countable" begin


datatype (params_tm: 'f) tm


datatype (params_fm: 'f, 'p) fm







  by (simp add: shift_def)



context fixes n m :: nat begin

  by (simp add: shift_def)

  by (simp add: shift_def)

  by (simp add: shift_def)

proof
  fix m
    unfolding shift_def by (cases m) simp_all
qed

end



  by (induct t) (auto cong: map_cong)

  by (induct p arbitrary: E) (auto cong: map_cong)

  by (induct t) simp_all

  by (induct p) simp_all





  by (induct t) (auto cong: map_cong)

  by (induct t) (auto cong: map_cong)

  by (induct p arbitrary: E m t) (auto cong: map_cong)



primrec size_fm where

  by (induct p arbitrary: m t) simp_all


primrec boolean where


  by simp

proof
  fix p
    by (induct p) simp_all
qed

  using boolean_semantics by metis

  by (metis boolean.simps(4) fm.simps(36) semantics_fm.simps(1,3,4))








proof (induct p arbitrary: F rule: Axiomatic.induct)
  case (GR q a p)
    by blast
  ultimately show ?case
    by fastforce
qed auto

  using soundness by fastforce


  by (auto intro: TA)


  by (meson Imp1 Imp2 MP)

  by (meson Imp1 Imp2 Tran' MP)

  by (meson Swap Tran' MP)


  by (meson Neg Swap Tran MP)

proof -
    using * Tran MP by metis
    using Neg Tran MP by metis
    using a by (auto intro: GR)
    using Tran MP by metis
  then show ?thesis
    using Neg Tran MP by metis
qed

proof (induct ps)
  case Nil
  then show ?case
    by (metis Imp1 Swap MP imply.simps(1))
next
  case (Cons r ps)
    by (meson Cons.hyps Imp1 Imp2 MP)
    by (meson Imp1 Imp2 MP)
  then show ?case
    by simp
qed

  using imply_ImpE MP by metis

  by (auto intro: MP Imp1)

  by (induct ps) (metis Imp1 Imp2 MP imply.simps, metis Imp1 Imp2 MP imply.simps(2))

  using imply_head by (metis MP imply.simps(2))

  using imply_head imply_Cons by (induct ps) fastforce+

  by (meson MP' imply_Cons imply_head)

  by (induct ps) simp_all

proof (induct qs arbitrary: ps)
  case Cons
  then show ?case
    by (metis deduct1 imply.simps(2) imply_append)
qed simp

  by (metis imply.simps imply_append imply_swap_append)

lemmas deduct [iff] = deduct1 deduct2

  by (meson MP' deduct(2) imply_Cons)

  by (meson MP' Neg add_imply deduct(2))

  by (induct ps arbitrary: q) (simp, metis MP' deduct(2) imply_mem insert_subset list.simps(15))



lemma UN_finite_bound:
  using assms
proof (induct rule: finite_induct)
  case (insert x A)
    by fast
    by fastforce
    using insert(4) by blast
    by auto
  then show ?case
    by blast
qed simp

lemma split_list:
  using assms by auto

  by (induct ps) auto

lemma inconsistent_fm:
proof -
    using assms unfolding consistent_def by blast
    using split_list by metis
  then show ?thesis
    using that S'' S'(1) Diff_insert_absorb Diff_subset_conv list.simps(15) by metis
qed

lemma consistent_add_witness:
  unfolding consistent_def
proof
    using assms inconsistent_fm unfolding consistent_def by metis
    by simp
    using assms(2-3) by auto
    by (simp add: imply_params_fm)
    using GR' by fast
    by simp
  ultimately show False
    using assms(1) unfolding consistent_def by blast
qed

lemma consistent_add_instance:
  unfolding consistent_def
proof
    using assms inconsistent_fm unfolding consistent_def by blast
    using IA by blast
    by (meson add_imply cut deduct(1))
  ultimately show False
    using assms(1) unfolding consistent_def by blast
qed


fun witness where

primrec extend where


  by (induct n) (fastforce simp: Let_def)+

  unfolding Extend_def by (metis Union_upper extend.simps(1) range_eqI)

  by (induct m) (simp_all add: atMost_Suc Let_def)

  by (induct used p rule: witness.induct) simp_all

  by (induct n) (simp_all add: Let_def Un_Diff)

  by blast

lemma infinite_params_extend:
proof -
    by simp
    using extend_subset by fast
    by simp
    by (simp add: Set_Diff_Un)
  finally show ?thesis
    using assms ..
qed

lemma consistent_witness:
  using assms
proof (induct used p rule: witness.induct)
  case (1 used p)
    using 1(4) by (meson Diff_iff finite_params_fm finite_subset subset_iff)
    by (metis someI_ex witness.simps(1))
    using 1(3) by fast
  then show ?case
    using 1(1-2) a(1) consistent_add_witness by metis
qed (auto simp: assms)

lemma consistent_extend:
proof (induct n)
  case (Suc n)
    using assms(2) infinite_params_extend by fast
    by (metis Set_Diff_Un Un_commute finite_Diff2)
    by (simp add: Let_def)
qed (use assms(1) in simp)

lemma consistent_Extend:
  unfolding consistent_def
proof
    unfolding consistent_def by blast
    unfolding Extend_def using UN_finite_bound by (metis finite_set)
    using extend_bound by blast
    using assms consistent_extend by blast
  ultimately show False
qed



lemma maximal_exactly_one:
proof
  proof
      by blast
    ultimately show False
  qed
next
    using Boole by blast
    unfolding consistent_def
  proof
      using assms inconsistent_fm unfolding consistent_def by blast
    ultimately show False
  qed
qed

lemma maximal_Extend:
  unfolding maximal_def
proof safe
  fix p
    using k by (auto simp: Let_def)
    unfolding Extend_def by blast
    unfolding consistent_def by auto
  then show False
qed



lemma saturated_Extend:
  unfolding saturated_def
proof safe
  fix p
    unfolding Extend_def by auto
    using assms(1) * unfolding consistent_def by blast
    using k by (auto simp: Let_def)
    unfolding Extend_def by blast
    by blast
qed


locale Hintikka =
  assumes



  by (induct t) (auto cong: map_cong)

  by (auto cong: map_cong)

theorem Hintikka_model:
  case 1
  then show ?case ..
next
  case (2 x)
  then show ?case
    using assms unfolding Hintikka_def by (cases x) auto
qed


lemma deriv_iff_MCS:
proof
    unfolding consistent_def using MP add_imply deduct1 imply.simps(1) imply_ImpE
    by (metis insert_absorb insert_mono list.simps(15))
next
    using imply_head by (metis empty_subsetI insert_absorb insert_mono list.set(1) list.simps(15))
qed

lemma Hintikka_Extend:
proof
    using assms deriv_iff_MCS unfolding consistent_def by fast
next
  fix p q
    using deriv_iff_MCS[OF assms(1-2)] maximal_exactly_one[OF assms(1-2)]
    by (metis Imp1 contraposition add_imply deduct1 insert_subset list.simps(15))
next
  fix p
    using assms consistent_add_instance maximal_exactly_one
    unfolding maximal_def saturated_def by metis
qed


instance tm :: (countable) countable
  by countable_datatype

instance fm :: (countable, countable) countable
  by countable_datatype


  by (simp add: Set_Diff_Un Un_commute)

theorem strong_completeness:
proof (rule ccontr)
    using Boole by blast


    unfolding consistent_def using * imply_Cons by metis
    using assms(2) finite_params_fm by (simp add: infinite_Diff_fin_Un)
    using consistent_Extend maximal_Extend surj_from_nat by blast+
    using saturated_Extend by fastforce
    using assms(2) Hintikka_Extend by blast

    by blast+
    using assms(1) by blast
  ultimately show False
    by simp
qed

theorem completeness:



  using completeness soundness by blast

end
