theory F4
  imports Macaulay_Matrix Algorithm_Schema
begin



context gd_term
begin

definition sym_preproc_aux_term1 :: "('a \<Rightarrow> nat) \<Rightarrow> ((('t \<Rightarrow>\<^sub>0 'b) list \<times> 't list \<times> 't list \<times> ('t \<Rightarrow>\<^sub>0 'b) list) \<times>
                                                (('t \<Rightarrow>\<^sub>0 'b) list \<times> 't list \<times> 't list \<times> ('t \<Rightarrow>\<^sub>0 'b) list)) set"
  where "sym_preproc_aux_term1 d =
            {((gs1, ks1, ts1, fs1), (gs2::('t \<Rightarrow>\<^sub>0 'b) list, ks2, ts2, fs2)). \<exists>t2\<in>set ts2. \<forall>t1\<in>set ts1. t1 \<prec>\<^sub>t t2}"

definition sym_preproc_aux_term2 :: "('a \<Rightarrow> nat) \<Rightarrow> ((('t \<Rightarrow>\<^sub>0 'b::zero) list \<times> 't list \<times> 't list \<times> ('t \<Rightarrow>\<^sub>0 'b) list) \<times>
                                                (('t \<Rightarrow>\<^sub>0 'b) list \<times> 't list \<times> 't list \<times> ('t \<Rightarrow>\<^sub>0 'b) list)) set"
  where "sym_preproc_aux_term2 d =
            {((gs1, ks1, ts1, fs1), (gs2::('t \<Rightarrow>\<^sub>0 'b) list, ks2, ts2, fs2)). gs1 = gs2 \<and>
                                              dgrad_set_le d (pp_of_term ` set ts1) (pp_of_term ` (Keys (set gs2) \<union> set ts2))}"

definition sym_preproc_aux_term
  where "sym_preproc_aux_term d = sym_preproc_aux_term1 d \<inter> sym_preproc_aux_term2 d"

lemma wfp_on_ord_term_strict:
  assumes "dickson_grading d"
  shows "wfp_on (\<prec>\<^sub>t) (pp_of_term -` dgrad_set d m)"
proof (rule wfp_onI_min)
  fix x Q
  assume "x \<in> Q" and "Q \<subseteq> pp_of_term -` dgrad_set d m"
    where "z \<in> Q" and *: "\<And>y. dickson_less_v d m y z \<Longrightarrow> y \<notin> Q" by (rule wfE_min[to_pred], blast)
  show "\<exists>z\<in>Q. \<forall>y \<in> pp_of_term -` dgrad_set d m. y \<prec>\<^sub>t z \<longrightarrow> y \<notin> Q"
  proof (intro bexI ballI impI, rule *)
