theory  After
  imports ReadySet
begin





  proof (split if_split, intro conjI impI)
      by (simp add: is_process_REP_STOP)
  next
      unfolding is_process_def FAILURES_def DIVERGENCES_def fst_conv snd_conv
    proof (intro conjI impI allI)
        using ready[unfolded ready_set_def T_F_spec[symmetric]] by force
    next
        by simp (metis butlast_rev butlast_tl front_tickFree_def is_processT2 tickFree_butlast)
    next
        by simp (metis (no_types, opaque_lifting) append_Cons is_processT3 
                                                  list.sel(1, 3) neq_Nil_conv)
    next
        using is_processT4 by simp blast
    next
        using ready[unfolded ready_set_def T_F_spec[symmetric]]
        by auto (metis Nil_is_append_conv hd_append2 is_processT5 tl_append2)
    next
        by simp (metis (no_types, lifting) Cons_eq_appendI is_processT6 list.collapse 
                                           list.distinct(1) list.sel(1, 3))
    next
        by simp (metis append_Cons event.distinct(1) is_processT7_S
                       list.sel(1, 3) neq_Nil_conv tickFree_Cons)
        apply simp 
    next
        using NF_ND by blast
    next
        by auto (metis Cons_eq_appendI is_processT9_S_swap list.sel(1, 3) neq_Nil_conv)
    qed
  qed
qed





lemma F_After:
  by (simp add: Failures_def After.rep_eq FAILURES_def)

lemma D_After:
  by (simp add: Divergences_def After.rep_eq DIVERGENCES_def)


lemma T_After:
  by (auto simp add: T_F_spec[symmetric] F_After)


  by (simp add: STOP_iff_T T_After)

  apply (simp add: T_After ready_set_def, safe)
    apply (metis list.exhaust_sel)
   apply (metis list.discI list.sel(1, 3))
  by (simp add: is_processT3_ST_pref le_list_def)




proof (subst le_approx_def, safe)
  from that[THEN anti_mono_ready_set] that[THEN le_approx1]
    by (simp add: D_After ready_set_def subset_iff split: if_split_asm) blast
next
  from that[THEN anti_mono_ready_set] that[THEN le_approx2]
    apply (simp add: Ra_def D_After F_After ready_set_def subset_iff split: if_split_asm)
    by (metis F_T append_Cons append_Nil is_processT3_ST list.exhaust_sel) blast
next
  from that[THEN anti_mono_ready_set] that[THEN le_approx2]
    apply (simp add: Ra_def D_After F_After ready_set_def subset_iff split: if_split_asm)
    by blast (metis T_F_spec list.distinct(1) list.sel(1, 3))
next
      by (simp add: BOT_iff_D D_After ready_set_BOT D_UU min_elems_def)
         (metis front_tickFree_single less_list_def list.distinct(1) list.sel(1, 3) nil_le)
  next
      by (simp add: D_After split: if_split_asm) (metis list.collapse)
        by (simp add: BOT_iff_D min_elems_def) (metis list.exhaust)
        by (simp add: le_list_def less_list_def D_After) 
           (metis Cons_in_T_imp_elem_ready_set D_T list.discI list.sel(1, 3))
      hence False by (metis assms(2) less_list_def min_elems_no)
    }
      by (simp add: T_After)
         (metis Cons_in_T_imp_elem_ready_set list.discI list.sel(1, 3))
  qed
qed


  by (auto simp add: trace_refine_def T_After ready_set_def)
     (metis list.distinct(1) list.sel(1, 3))

lemma mono_After_F :
  using F_subset_imp_T_subset 
  by (auto simp add: failure_refine_def F_After ready_set_def)

  by (auto simp add: divergence_refine_def D_After ready_set_def)
     (metis Cons_eq_appendI NT_ND append_self_conv2 is_processT3_ST list.collapse subset_iff)

lemma mono_After_FD :
  using F_subset_imp_T_subset
  by (simp add: failure_divergence_refine_def le_ref_def F_After D_After ready_set_def) blast

  by (simp add: mono_After_D mono_After_T trace_divergence_refine_def)


  



  by (simp add: STOP_iff_T T_After ready_set_STOP)

lemma After_is_STOP_iff:
  apply (simp add: STOP_iff_T T_After ready_set_def, safe)
     apply fastforce
    apply (metis list.collapse) 
  using is_processT3_ST by force+
  

  by (simp add: STOP_iff_T T_After ready_set_SKIP)

 
  by (force simp add: BOT_iff_D D_After ready_set_BOT D_UU)

  using hd_Cons_tl by (force simp add: BOT_iff_D D_After ready_set_def D_T)







lemma After_Mprefix_is_After_Mndetprefix:
  by (subst Process_eq_spec)
     (force simp add: ready_set_Mprefix ready_set_Mndetprefix F_After D_After 
                      F_Mprefix D_Mprefix F_Mndetprefix D_Mndetprefix write0_def)

  by (subst Process_eq_spec)
     (auto simp add: ready_set_Det ready_set_Ndet F_After D_After F_Det F_Ndet D_Det D_Ndet)


lemma After_Ndet: 
proof -
    by (simp add: Process_eq_spec F_After D_After ready_set_Ndet F_STOP D_STOP)
    by (auto simp add: Process_eq_spec F_After D_After F_Ndet D_Ndet ready_set_Ndet)
    by (auto simp add: Process_eq_spec F_After D_After F_Ndet D_Ndet ready_set_Ndet)
       (metis Cons_in_T_imp_elem_ready_set F_T list.collapse,
        metis Cons_in_T_imp_elem_ready_set D_T list.collapse)+
  ultimately show ?thesis by presburger
qed
  

  by (subst Process_eq_spec, auto simp add: F_After D_After ready_set_Mprefix
                                            F_Mprefix D_Mprefix F_STOP D_STOP)
     (metis image_eqI list.distinct(1) list.sel(1, 3))+


lemmas After_Det = After_Ndet[folded After_Det_is_After_Ndet]
   and After_Mndetprefix = After_Mprefix[unfolded After_Mprefix_is_After_Mndetprefix]




      However, we lose information with @{const [source] After}: in general,

proof (intro exI)
    by (metis Par_SKIP_SKIP SKIP_Neq_STOP prefix_Par_SKIP)
qed

proof (intro exI)
    by (simp add: ready_set_BOT Mprefix_neq_BOT write0_def)
qed

proof (intro exI)
    by (simp add: Det_is_BOT_iff Mprefix_neq_BOT P_def SKIP_neq_BOT write0_def)
       (simp add: P_def After_Det ready_set_SKIP ready_set_prefix After_prefix)
    by (simp add: P_def ready_set_Det ready_set_prefix ready_set_SKIP)
       (erule arg_cong)
qed





