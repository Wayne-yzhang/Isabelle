theory "Lem_string" 

imports
  Main
  "Lem_bool"
  "Lem_basic_classes"
  "Lem_list"

begin 




















function (sequential,domintros)  concat  :: " string \<Rightarrow>(string)list \<Rightarrow> string "  where 
     " concat sep ([]) = ( (''''))"
|" concat sep (s # ss') = (
      (case  ss' of
        [] => s
      | _ => s @ (sep @ concat sep ss')
      ))" 
by pat_completeness auto

end
