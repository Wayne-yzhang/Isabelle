theory Implicational_Logic imports Main begin

datatype form =




  by (induct p rule: Ax.induct) auto

proof -
    using MP PR Simp Tran by metis
  then show ?thesis
    using MP Tran by meson
qed

  using MP PR Simp Swap Tran by meson

  using MP MP Tran Tran Peirce .

  using MP Hilbert Simp .

  using MP Swap Tran .

  using MP MP Tran MP MP Tran Swap Tran' MP Tran' Hilbert .

  using MP Peirce Tran Tran' by meson

  using MP Tran MP Tran Simp .

  using MP Swap Tran by meson


fun pros where

  by (induct p) simp_all


  by (induct ps) simp_all


proof -
  then show ?thesis
    by simp
qed

  by (induct ps) (use MP Frege Simp imply.simps in metis)+

  by (induct ps) (use imply_Cons imply_head in auto)

proof (induct ps)
  case (Cons r ps)
    using MP Frege Simp by meson
  then show ?case
    by simp
qed (auto intro: Id)

  using MP imply_MP by metis

  by (induct qs arbitrary: ps) (simp, metis MP' imply_append imply_Cons imply_head imply.simps(2))

  using imply_append imply_swap_append imply.simps by metis

proof -
  note MP
    using imply_head by simp
  ultimately show ?thesis .
qed

  by (induct ps arbitrary: p) (simp, metis MP' imply_deduct imply_mem insert_subset list.set(2))



  using imply_weaken by (metis (no_types, lifting) image_mono set_map)

proof (induct p)
  case (Imp q r)
    by blast
  then show ?case
  proof cases
    case 1
      using Imp1 MP' add_imply by blast
    with 1 show ?thesis
      by simp
  next
    case 2
      using Imp2 MP' add_imply by blast
    with 2 show ?thesis
      by simp
  next
    case 3
      using Imp3 MP' add_imply by blast
    with 3 show ?thesis
      by simp
  qed
qed (auto intro: Id Ax.intros)

proof -
    using lifts_pros_lift[of I p p] by simp
  then show ?thesis
    using Id MP' add_imply by blast
qed

proof -
    by (induct l) blast+
  proof -
    proof
      fix I
        by blast+
        by simp
        by (simp_all cong: map_cong)
        using MP' imply_deduct by blast
        by blast
        by simp
    qed
  qed
    using lifts_pros distinct_pros by blast
  then show ?thesis
    by simp
qed

  using soundness completeness by blast



end
