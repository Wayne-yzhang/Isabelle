theory IMP2_Specification 
imports IMP2_Basic_Simpset IMP2_Program_Analysis IMP2_Var_Postprocessor IMP2_Var_Abs
keywords "ensures"
     and "returns" "variant" "relation"
     and "program_spec" :: thy_goal
     and "procedure_spec" :: thy_goal
     and "recursive_spec" :: thy_goal
begin

  

lemmas [named_ss vcg_bb cong] = refl[of "ANNOTATION _"]





  
syntax "_Htriple" :: "cartouche_position \<Rightarrow> cartouche_position \<Rightarrow> cartouche_position \<Rightarrow> logic" ("\<^htriple>_ _ _")
syntax "_Htriple_Partial" :: "cartouche_position \<Rightarrow> cartouche_position \<Rightarrow> cartouche_position \<Rightarrow> logic" ("\<^htriple_partial>_ _ _")


  
   




  
lemma HT_to_mod: "HT \<pi> P c Q = HT_mods \<pi> (ANALYZE (lhsv \<pi> c)) P c Q"
  by (auto simp: HT_mods_def BB_PROTECT_def HT_def intro: wp_strengthen_modset wp_conseq)

lemma HT_partial_to_mod: "HT_partial \<pi> P c Q = HT_partial_mods \<pi> (ANALYZE (lhsv \<pi> c)) P c Q"
  by (auto simp: HT_partial_mods_def BB_PROTECT_def HT_partial_def intro: wlp_strengthen_modset wlp_conseq)

lemma mk_lhsv_thm:  
  assumes "c \<equiv> cmd"
  shows "lhsv \<pi> c = ANALYZE (lhsv \<pi> cmd)" "lhsv' c = ANALYZE (lhsv' cmd)"
  using assms by simp_all
  
  
  
  
lemma adjust_assign_after:
  assumes "HT \<pi> P c Q"
  shows "HT \<pi> P (c;;x[]::=y) (\<lambda>s\<^sub>0 s. \<exists>vx. Q s\<^sub>0 (s(x:=vx,y:=s x)))"  
  using assms unfolding HT_def
  apply (auto simp: wp_eq[abs_def])
  by (metis (mono_tags, lifting) fun_upd_triv wp_conseq)

lemma adjust_assign_before:
  assumes HT: "HT \<pi> P c Q"  
  shows "HT \<pi> (\<lambda>s. P (s(x:=s y)) ) (x[]::=y;; c) (\<lambda>s\<^sub>0 s. Q (s\<^sub>0(x:=s\<^sub>0 y)) s)"
  unfolding HT_def
  apply (clarsimp simp: wp_eq)  
  using HT_def assms by auto
    
  
lemma adjust_scope:
  assumes HT: "HT \<pi> P c Q"
  shows "HT \<pi> (\<lambda>s. P (<<>|s>)) (SCOPE c) (\<lambda>s\<^sub>0 s. \<exists>l. Q (<<>|s\<^sub>0>) (<l|s>))"
  unfolding HT_def
  apply (clarsimp simp: wp_eq)  
  by (smt HT_def assms combine_collapse combine_nest(1) wp_conseq)

  
lemma adjust_assign_after_partial:
  assumes "HT_partial \<pi> P c Q"
  shows "HT_partial \<pi> P (c;;x[]::=y) (\<lambda>s\<^sub>0 s. \<exists>vx. Q s\<^sub>0 (s(x:=vx,y:=s x)))"  
  using assms unfolding HT_partial_def
  apply (auto simp: wlp_eq[abs_def])
  by (metis (mono_tags, lifting) fun_upd_triv wlp_conseq)

lemma adjust_assign_before_partial:
  assumes HT: "HT_partial \<pi> P c Q"  
  shows "HT_partial \<pi> (\<lambda>s. P (s(x:=s y)) ) (x[]::=y;; c) (\<lambda>s\<^sub>0 s. Q (s\<^sub>0(x:=s\<^sub>0 y)) s)"
  unfolding HT_partial_def
  apply (clarsimp simp: wlp_eq)  
  using HT_partial_def assms by auto
    
  
lemma adjust_scope_partial:
  assumes HT: "HT_partial \<pi> P c Q"
  shows "HT_partial \<pi> (\<lambda>s. P (<<>|s>)) (SCOPE c) (\<lambda>s\<^sub>0 s. \<exists>l. Q (<<>|s\<^sub>0>) (<l|s>))"
  unfolding HT_partial_def
  apply (clarsimp simp: wlp_eq)  
  by (smt HT_partial_def assms combine_collapse combine_nest(1) wlp_conseq)
    

definition "ADJUST_PRE_SCOPE P \<equiv> (\<lambda>s. P <<>|s>)"
definition "ADJUST_PRE_PARAM l G P \<equiv> (\<lambda>s. P (s(l:=s G)))"
definition "ADJUST_POST_SCOPE Q \<equiv> (\<lambda>s\<^sub>0 s. \<exists>l. Q (<<>|s\<^sub>0>) (<l|s>))"
definition "ADJUST_POST_PARAM l G Q \<equiv> (\<lambda>s\<^sub>0 s. Q (s\<^sub>0(l:=s\<^sub>0 G)) s)"
definition "ADJUST_POST_RETV G l Q \<equiv> (\<lambda>s\<^sub>0 s. \<exists>vx. Q s\<^sub>0 (s(G:=vx,l:=s G)))"

  
lemma HT_strengthen_modset:  
  assumes "HT \<pi> P c Q"
  shows "HT \<pi> P c (\<lambda>s\<^sub>0 s. Q s\<^sub>0 s \<and> modifies (lhsv \<pi> c) s s\<^sub>0)"
  using assms unfolding HT_def by (auto intro: wp_strengthen_modset)

lemma HT_partial_strengthen_modset:  
  assumes "HT_partial \<pi> P c Q"
  shows "HT_partial \<pi> P c (\<lambda>s\<^sub>0 s. Q s\<^sub>0 s \<and> modifies (lhsv \<pi> c) s s\<^sub>0)"
  using assms unfolding HT_partial_def by (auto intro: wlp_strengthen_modset)
      
    
context
  notes [abs_def, simp] = VAR_def 
    ADJUST_PRE_SCOPE_def ADJUST_PRE_PARAM_def ADJUST_POST_SCOPE_def ADJUST_POST_PARAM_def ADJUST_POST_RETV_def
  notes [simp] = combine_query
begin

  
  lemma ADJUST_PRE_SCOPE_unfolds:
    "\<And>P. ADJUST_PRE_SCOPE (\<lambda>_. P) = (\<lambda>_. P)"
    "\<And>P. ADJUST_PRE_SCOPE (\<lambda>s. VAR v (\<lambda>x. P x s)) = VAR v (\<lambda>x. ADJUST_PRE_SCOPE (\<lambda>s. P x s))"
    
    "\<And>P. is_global x \<Longrightarrow> ADJUST_PRE_SCOPE (\<lambda>s. VAR (s x i) (\<lambda>x. P x s)) = (\<lambda>s. VAR (s x i) (\<lambda>x. ADJUST_PRE_SCOPE (\<lambda>s. P x s) s))"
    "\<And>P. is_global x \<Longrightarrow> ADJUST_PRE_SCOPE (\<lambda>s. VAR (s x) (\<lambda>x. P x s)) = (\<lambda>s. VAR (s x) (\<lambda>x. ADJUST_PRE_SCOPE (\<lambda>s. P x s) s))"
    by auto
  
  lemma ADJUST_PRE_PARAM_unfolds:  
    "\<And>P. ADJUST_PRE_PARAM l G (\<lambda>_. P) = (\<lambda>_. P)"
    "\<And>P. ADJUST_PRE_PARAM l G (\<lambda>s. VAR v (\<lambda>x. P x s)) = VAR v (\<lambda>x. ADJUST_PRE_PARAM l G (\<lambda>s. P x s))"
    
    
    "\<And>P. ADJUST_PRE_PARAM l G (\<lambda>s. VAR (s l i) (\<lambda>x. P x s)) = (\<lambda>s. VAR (s G i) (\<lambda>x. ADJUST_PRE_PARAM l G (\<lambda>s. P x s) s))"
    "\<And>P. ADJUST_PRE_PARAM l G (\<lambda>s. VAR (s l) (\<lambda>x. P x s)) = (\<lambda>s. VAR (s G) (\<lambda>x. ADJUST_PRE_PARAM l G (\<lambda>s. P x s) s))"
    
    "\<And>P. x\<noteq>l \<Longrightarrow> ADJUST_PRE_PARAM l G (\<lambda>s. VAR (s x i) (\<lambda>x. P x s)) = (\<lambda>s. VAR (s x i) (\<lambda>x. ADJUST_PRE_PARAM l G (\<lambda>s. P x s) s))"
    "\<And>P. x\<noteq>l \<Longrightarrow> ADJUST_PRE_PARAM l G (\<lambda>s. VAR (s x) (\<lambda>x. P x s)) = (\<lambda>s. VAR (s x) (\<lambda>x. ADJUST_PRE_PARAM l G (\<lambda>s. P x s) s))"
    by auto
    
  lemma ADJUST_POST_SCOPE_unfolds:
    "\<And>P. ADJUST_POST_SCOPE (\<lambda>_ _. P) = (\<lambda>_ _. P)"
    
    "\<And>P. is_global x \<Longrightarrow> ADJUST_POST_SCOPE (\<lambda>s\<^sub>0 s. VAR (s\<^sub>0 x i) (\<lambda>x. P x s\<^sub>0 s)) = (\<lambda>s\<^sub>0 s. VAR (s\<^sub>0 x i) (\<lambda>x. ADJUST_POST_SCOPE (\<lambda>s\<^sub>0 s. P x s\<^sub>0 s) s\<^sub>0 s))"
    "\<And>P. is_global x \<Longrightarrow> ADJUST_POST_SCOPE (\<lambda>s\<^sub>0 s. VAR (s\<^sub>0 x) (\<lambda>x. P x s\<^sub>0 s)) = (\<lambda>s\<^sub>0 s. VAR (s\<^sub>0 x) (\<lambda>x. ADJUST_POST_SCOPE (\<lambda>s\<^sub>0 s. P x s\<^sub>0 s) s\<^sub>0 s))"
    
    "\<And>P. is_global x \<Longrightarrow> ADJUST_POST_SCOPE (\<lambda>s\<^sub>0 s. VAR (s x i) (\<lambda>x. P x s\<^sub>0 s)) = (\<lambda>s\<^sub>0 s. VAR (s x i) (\<lambda>x. ADJUST_POST_SCOPE (\<lambda>s\<^sub>0 s. P x s\<^sub>0 s) s\<^sub>0 s))"
    "\<And>P. is_global x \<Longrightarrow> ADJUST_POST_SCOPE (\<lambda>s\<^sub>0 s. VAR (s x) (\<lambda>x. P x s\<^sub>0 s)) = (\<lambda>s\<^sub>0 s. VAR (s x) (\<lambda>x. ADJUST_POST_SCOPE (\<lambda>s\<^sub>0 s. P x s\<^sub>0 s) s\<^sub>0 s))"
    by auto
  
  lemma ADJUST_POST_PARAM_unfolds: 
    "\<And>P. ADJUST_POST_PARAM l G (\<lambda>_ _. P) = (\<lambda>_ _. P)" 
    
    "\<And>P. ADJUST_POST_PARAM l G (\<lambda>s\<^sub>0 s. VAR (s\<^sub>0 l i) (\<lambda>x. P x s\<^sub>0 s)) = (\<lambda>s\<^sub>0 s. VAR (s\<^sub>0 G i) (\<lambda>x. ADJUST_POST_PARAM l G (\<lambda>s\<^sub>0 s. P x s\<^sub>0 s) s\<^sub>0 s))"
    "\<And>P. ADJUST_POST_PARAM l G (\<lambda>s\<^sub>0 s. VAR (s\<^sub>0 l) (\<lambda>x. P x s\<^sub>0 s)) = (\<lambda>s\<^sub>0 s. VAR (s\<^sub>0 G) (\<lambda>x. ADJUST_POST_PARAM l G (\<lambda>s\<^sub>0 s. P x s\<^sub>0 s) s\<^sub>0 s))"
  
    "\<And>P. x\<noteq>l \<Longrightarrow> ADJUST_POST_PARAM l G (\<lambda>s\<^sub>0 s. VAR (s\<^sub>0 x i) (\<lambda>x. P x s\<^sub>0 s)) = (\<lambda>s\<^sub>0 s. VAR (s\<^sub>0 x i) (\<lambda>x. ADJUST_POST_PARAM l G (\<lambda>s\<^sub>0 s. P x s\<^sub>0 s) s\<^sub>0 s))"
    "\<And>P. x\<noteq>l \<Longrightarrow> ADJUST_POST_PARAM l G (\<lambda>s\<^sub>0 s. VAR (s\<^sub>0 x) (\<lambda>x. P x s\<^sub>0 s)) = (\<lambda>s\<^sub>0 s. VAR (s\<^sub>0 x) (\<lambda>x. ADJUST_POST_PARAM l G (\<lambda>s\<^sub>0 s. P x s\<^sub>0 s) s\<^sub>0 s))"
    
    "\<And>P. ADJUST_POST_PARAM l G (\<lambda>s\<^sub>0 s. VAR (s x i) (\<lambda>x. P x s\<^sub>0 s)) = (\<lambda>s\<^sub>0 s. VAR (s x i) (\<lambda>x. ADJUST_POST_PARAM l G (\<lambda>s\<^sub>0 s. P x s\<^sub>0 s) s\<^sub>0 s))"
    "\<And>P. ADJUST_POST_PARAM l G (\<lambda>s\<^sub>0 s. VAR (s x) (\<lambda>x. P x s\<^sub>0 s)) = (\<lambda>s\<^sub>0 s. VAR (s x) (\<lambda>x. ADJUST_POST_PARAM l G (\<lambda>s\<^sub>0 s. P x s\<^sub>0 s) s\<^sub>0 s))"
    by auto
        
  lemma ADJUST_POST_RETV_unfolds:
    "\<And>P. ADJUST_POST_RETV G l (\<lambda>_ _. P) = (\<lambda>_ _. P)"
    
    "\<And>P. ADJUST_POST_RETV G l (\<lambda>s\<^sub>0 s. VAR (s\<^sub>0 x i) (\<lambda>x. P x s\<^sub>0 s)) = (\<lambda>s\<^sub>0 s. VAR (s\<^sub>0 x i) (\<lambda>x. ADJUST_POST_RETV G l (\<lambda>s\<^sub>0 s. P x s\<^sub>0 s) s\<^sub>0 s))"
    "\<And>P. ADJUST_POST_RETV G l (\<lambda>s\<^sub>0 s. VAR (s\<^sub>0 x) (\<lambda>x. P x s\<^sub>0 s)) = (\<lambda>s\<^sub>0 s. VAR (s\<^sub>0 x) (\<lambda>x. ADJUST_POST_RETV G l (\<lambda>s\<^sub>0 s. P x s\<^sub>0 s) s\<^sub>0 s))"
  
    "\<And>P. ADJUST_POST_RETV G l (\<lambda>s\<^sub>0 s. VAR (s l i) (\<lambda>x. P x s\<^sub>0 s)) = (\<lambda>s\<^sub>0 s. VAR (s G i) (\<lambda>x. ADJUST_POST_RETV G l (\<lambda>s\<^sub>0 s. P x s\<^sub>0 s) s\<^sub>0 s))"
    "\<And>P. ADJUST_POST_RETV G l (\<lambda>s\<^sub>0 s. VAR (s l) (\<lambda>x. P x s\<^sub>0 s)) = (\<lambda>s\<^sub>0 s. VAR (s G) (\<lambda>x. ADJUST_POST_RETV G l (\<lambda>s\<^sub>0 s. P x s\<^sub>0 s) s\<^sub>0 s))"
      
    "\<And>P. \<lbrakk>x\<noteq>G; x\<noteq>l\<rbrakk> \<Longrightarrow> ADJUST_POST_RETV G l (\<lambda>s\<^sub>0 s. VAR (s x i) (\<lambda>x. P x s\<^sub>0 s)) = (\<lambda>s\<^sub>0 s. VAR (s x i) (\<lambda>x. ADJUST_POST_RETV G l (\<lambda>s\<^sub>0 s. P x s\<^sub>0 s) s\<^sub>0 s))"
    "\<And>P. \<lbrakk>x\<noteq>G; x\<noteq>l\<rbrakk> \<Longrightarrow> ADJUST_POST_RETV G l (\<lambda>s\<^sub>0 s. VAR (s x) (\<lambda>x. P x s\<^sub>0 s)) = (\<lambda>s\<^sub>0 s. VAR (s x) (\<lambda>x. ADJUST_POST_RETV G l (\<lambda>s\<^sub>0 s. P x s\<^sub>0 s) s\<^sub>0 s))"
    by auto
  
  lemmas ADJUST_unfolds = ADJUST_PRE_SCOPE_unfolds ADJUST_PRE_PARAM_unfolds 
    ADJUST_POST_SCOPE_unfolds ADJUST_POST_PARAM_unfolds ADJUST_POST_RETV_unfolds
      
  lemma HT_mods_adjust_scope: 
    assumes "HT_mods \<pi> vs P c Q"
    shows "HT_mods \<pi> (Set.filter is_global vs) (ADJUST_PRE_SCOPE P) (SCOPE c) (ADJUST_POST_SCOPE Q)"
    using assms unfolding HT_mods_def 
    apply (drule_tac adjust_scope)
    apply simp
    apply (drule_tac HT_strengthen_modset)
    apply (erule HT_conseq)
     apply simp
    apply (clarsimp simp: modifies_split)
    apply (drule (1) modifies_join)
    apply (auto elim: modifies_mono[rotated])
    done
    
  lemma HT_mods_adjust_param: 
    assumes "HT_mods \<pi> vs P c Q"
    shows "HT_mods \<pi> (insert l vs) (ADJUST_PRE_PARAM l G P) (l[]::=G;; c) (ADJUST_POST_PARAM l G Q)"
    using assms unfolding HT_mods_def 
    apply (drule_tac adjust_assign_before[of \<pi> P c _ l G])
    apply (erule HT_conseq)
     apply simp
    apply (auto simp: modifies_def)
    done
    
  lemma HT_mods_adjust_retv:
    assumes "HT_mods \<pi> vs P c Q"
    shows "HT_mods \<pi> (insert G vs) P (c;; G[]::=l) (ADJUST_POST_RETV G l Q)"
    using assms unfolding HT_mods_def
    apply simp
    apply (unfold HT_def; clarsimp simp: wp_eq)
    apply (drule spec, erule (1) impE)
    apply (erule wp_conseq)
    apply (auto simp add: wp_eq modifies_def)
    by (metis fun_upd_triv)

  lemma HT_partial_mods_adjust_scope: 
    assumes "HT_partial_mods \<pi> vs P c Q"
    shows "HT_partial_mods \<pi> (Set.filter is_global vs) (ADJUST_PRE_SCOPE P) (SCOPE c) (ADJUST_POST_SCOPE Q)"
    using assms unfolding HT_partial_mods_def 
    apply (drule_tac adjust_scope_partial)
    apply (drule_tac HT_partial_strengthen_modset)
    apply (erule HT_partial_conseq)
     apply simp
    apply (clarsimp simp: modifies_split)
    apply (drule (1) modifies_join)
    apply (auto elim: modifies_mono[rotated])
    done
    
  lemma HT_partial_mods_adjust_param: 
    assumes "HT_partial_mods \<pi> vs P c Q"
    shows "HT_partial_mods \<pi> (insert l vs) (ADJUST_PRE_PARAM l G P) (l[]::=G;; c) (ADJUST_POST_PARAM l G Q)"
    using assms unfolding HT_partial_mods_def 
    apply (drule_tac adjust_assign_before_partial[of \<pi> P c _ l G])
    apply (erule HT_partial_conseq)
     apply simp
    apply (auto simp: modifies_def)
    done
    
  lemma HT_partial_mods_adjust_retv:
    assumes "HT_partial_mods \<pi> vs P c Q"
    shows "HT_partial_mods \<pi> (insert G vs) P (c;; G[]::=l) (ADJUST_POST_RETV G l Q)"
    using assms unfolding HT_partial_mods_def
    apply simp
    apply (unfold HT_partial_def; clarsimp simp: wlp_eq)
    apply (drule spec, erule (1) impE)
    apply (erule wlp_conseq)
    apply (auto simp add: wlp_eq modifies_def)
    by (metis fun_upd_triv)
    
        
end

lemma HT_generalize_penv:
  assumes "HT_mods Map.empty mods P c Q"
  shows "HT_mods \<pi> mods P c Q"
  using assms unfolding HT_mods_def HT_def wp_def
  apply auto 
  using big_step_mono_prog map_le_empty by blast

  
  
  
  
lemma HT_mods_fold_call:
  assumes "\<pi> p = Some c"
  assumes "HT_mods \<pi> mods P c Q"
  shows "HT_mods \<pi> mods P (PCall p) Q"
  using assms 
  unfolding HT_mods_def HT_def
  by (auto simp: wp_eq wp_pcall_eq)

    
lemma localize_HT_mods: 
  assumes "HT_mods \<pi> mods P (PCall p) Q"
  shows "HT_mods \<pi>' mods P (PScope \<pi> (PCall p)) Q"
  using assms unfolding HT_mods_def HT_def wp_def
  by (simp add: localize_recursion)

lemmas localize_HT_mods' = localize_HT_mods[where \<pi>'="Map.empty"]
  

definition "PROVE_\<Theta> \<pi> f\<^sub>0 s\<^sub>0 \<Theta> \<equiv> \<forall>P c Q. (f\<^sub>0,(P,c,Q))\<in>\<Theta> \<and> P s\<^sub>0 \<longrightarrow> wp \<pi> (c s\<^sub>0) (Q s\<^sub>0) s\<^sub>0"

lemma PROVE_\<Theta>I[vcg_preprocess_rules]:
  "PROVE_\<Theta> \<pi> f\<^sub>0 s\<^sub>0 {}" 
  "\<lbrakk>\<lbrakk>RENAMING f\<^sub>0 f; BB_PROTECT (P s\<^sub>0)\<rbrakk> \<Longrightarrow> wp \<pi> (c s\<^sub>0) (Q s\<^sub>0) s\<^sub>0; PROVE_\<Theta> \<pi> f\<^sub>0 s\<^sub>0 \<Theta>\<rbrakk> \<Longrightarrow> PROVE_\<Theta> \<pi> f\<^sub>0 s\<^sub>0 (insert (f,(P,c,Q)) \<Theta>)" 
  unfolding PROVE_\<Theta>_def BB_PROTECT_def RENAMING_def
  by auto 

  
definition "JOIN_VARS f g P \<equiv> P f g"  
lemma JOIN_VARS: 
  "\<And>v f g P. JOIN_VARS (VAR v (\<lambda>x. f x)) g P = VAR v (\<lambda>x. JOIN_VARS (f x) g P)"
  "\<And>v f g P. JOIN_VARS f (VAR v (\<lambda>x. g x)) P = VAR v (\<lambda>x. JOIN_VARS f (g x) P)"
  "\<And>f g P. JOIN_VARS (BB_PROTECT f) (BB_PROTECT g) P = P f g"
  by (auto simp: JOIN_VARS_def BB_PROTECT_def VAR_def)
  
  
  
definition "ASSUME_\<Theta> \<pi> f\<^sub>0 s\<^sub>0 R \<Theta> \<equiv> HT'set_r (\<lambda>f' s'. ((f' s'),(f\<^sub>0 s\<^sub>0))\<in>R ) \<pi> \<Theta>"
  
lemmas ASSUME_\<Theta>E1 = thin_rl[of "ASSUME_\<Theta> _ _ _ _ {}"]

lemma ASSUME_\<Theta>E2:
  assumes "ASSUME_\<Theta> \<pi> f\<^sub>0 s\<^sub>0 R (insert (f,(P,c,Q)) \<Theta>)"
  obtains "HT' \<pi> (\<lambda>s. JOIN_VARS (f s) (P s) (\<lambda>v P. BB_PROTECT ((v,(f\<^sub>0 s\<^sub>0))\<in>R \<and> P))) c Q" "ASSUME_\<Theta> \<pi> f\<^sub>0 s\<^sub>0 R \<Theta>"
  using assms unfolding ASSUME_\<Theta>_def HT'set_r_def JOIN_VARS_def BB_PROTECT_def by auto
  
lemmas ASSUME_\<Theta>E = ASSUME_\<Theta>E1 ASSUME_\<Theta>E2

lemma vcg_HT'setI:    
  assumes "wf R"
  assumes RL: "\<And>f\<^sub>0 s\<^sub>0. \<lbrakk> ASSUME_\<Theta> \<pi> f\<^sub>0 s\<^sub>0 R \<Theta> \<rbrakk> \<Longrightarrow> PROVE_\<Theta> \<pi> f\<^sub>0 s\<^sub>0 \<Theta>"
  shows "HT'set \<pi> \<Theta>"
  using assms HT'setI[of R \<pi> \<Theta>] 
  unfolding ASSUME_\<Theta>_def PROVE_\<Theta>_def HT'set_def 
  by auto

  

  









end
