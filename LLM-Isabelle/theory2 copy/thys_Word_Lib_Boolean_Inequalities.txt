theory Boolean_Inequalities
  imports Word_EqI
begin



context
  includes bit_operations_syntax
begin

definition all_bool_word_funs :: "('a::len word \<Rightarrow> 'a word \<Rightarrow> 'a word) list" where
  "all_bool_word_funs \<equiv> [
     \<lambda>x y. 0,
     \<lambda>x y. x AND y,
     \<lambda>x y. x AND NOT y,
     \<lambda>x y. x,
     \<lambda>x y. NOT x AND y,
     \<lambda>x y. y,
     \<lambda>x y. x XOR y,
     \<lambda>x y. x OR y,
     \<lambda>x y. NOT (x OR y),
     \<lambda>x y. NOT (x XOR y),
     \<lambda>x y. NOT y,
     \<lambda>x y. x OR NOT y,
     \<lambda>x y. NOT x,
     \<lambda>x y. NOT x OR y,
     \<lambda>x y. NOT (x AND y),
     \<lambda>x y. -1
   ]"



lemma
  "x AND y \<le> x" for x :: "'a::len word"
  by (rule word_bool_le_funs(1))

lemma
  "NOT x \<le> NOT x OR NOT y" for x :: "'a::len word"
  by (rule word_bool_le_funs(36))

lemma
  "x XOR y \<le> NOT x OR NOT y" for x :: "'a::len word"
  by (rule word_bool_le_funs)

lemma word_xor_le_nand:
  "x XOR y \<le> NOT (x AND y)" for x :: "'a::len word"
  by (simp add: word_bool_le_funs)

end

end