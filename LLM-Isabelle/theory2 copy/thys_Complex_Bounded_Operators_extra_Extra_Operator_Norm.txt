theory Extra_Operator_Norm
  imports "HOL-Analysis.Operator_Norm"
    Extra_General
    "HOL-Analysis.Bounded_Linear_Function"
    Extra_Vector_Spaces
begin


      additional useful facts about operator norms.\<close>
  shows \<open>onorm f = Sup {norm (f x) | x. norm x = 1}\<close>
proof(cases \<open>f = (\<lambda> _. 0)\<close>)
  have \<open>(UNIV::'a set) \<noteq> {0}\<close>
  hence \<open>\<exists>x::'a. norm x = 1\<close>
  have \<open>norm (f x) = 0\<close>
  hence \<open>{norm (f x) | x. norm x = 1} = {0}\<close>
    using \<open>\<exists>x. norm x = 1\<close> by auto
  hence v1: \<open>Sup {norm (f x) | x. norm x = 1} = 0\<close>
  have \<open>onorm f = 0\<close>
  have \<open>y \<in> {norm (f x) |x. norm x = 1} \<union> {0}\<close>
  proof(cases \<open>y = 0\<close>)
    have \<open>\<exists> x. y = norm (f x) / norm x\<close>
      using \<open>y \<in> {norm (f x) / norm x |x. True}\<close> by auto
    then obtain x where \<open>y = norm (f x) / norm x\<close>
    hence \<open>y = \<bar>(1/norm x)\<bar> * norm ( f x )\<close>
    hence \<open>y = norm ( (1/norm x) *\<^sub>R f x )\<close>
    hence \<open>y = norm ( f ((1/norm x) *\<^sub>R x) )\<close>
    moreover have \<open>norm ((1/norm x) *\<^sub>R x) = 1\<close>
      using False \<open>y = norm (f x) / norm x\<close> by auto
    ultimately have \<open>y \<in> {norm (f x) |x. norm x = 1}\<close>
    if \<open>y \<in> {norm (f x) |x. norm x = 1} \<union> {0}\<close>
  proof(cases \<open>y = 0\<close>)
    hence \<open>y \<notin> {0}\<close>
    hence \<open>y \<in> {norm (f x) |x. norm x = 1}\<close>
    hence \<open>\<exists> x. norm x = 1 \<and> y = norm (f x)\<close>
    then obtain x where \<open>norm x = 1\<close> and \<open>y = norm (f x)\<close>
    have \<open>y = norm (f x) / norm x\<close> using  \<open>norm x = 1\<close>  \<open>y = norm (f x)\<close>
  ultimately have \<open>{norm (f x) / norm x |x. True} = {norm (f x) |x. norm x = 1} \<union> {0}\<close>
  hence \<open>Sup {norm (f x) / norm x |x. True} = Sup ({norm (f x) |x. norm x = 1} \<union> {0})\<close>
  moreover have \<open>Sup {norm (f x) |x. norm x = 1} \<ge> 0\<close>
    have \<open>\<exists> x::'a. norm x = 1\<close>
    then obtain x::'a where \<open>norm x = 1\<close>
    have \<open>norm (f x) \<ge> 0\<close>
    hence \<open>\<exists> x::'a. norm x = 1 \<and> norm (f x) \<ge> 0\<close>
      using \<open>norm x = 1\<close> by blast
    hence \<open>\<exists> y \<in> {norm (f x) |x. norm x = 1}. y \<ge> 0\<close>
    then obtain y::real where \<open>y \<in> {norm (f x) |x. norm x = 1}\<close>
      and \<open>y \<ge> 0\<close>
    have \<open>{norm (f x) |x. norm x = 1} \<noteq> {}\<close>
      using \<open>y \<in> {norm (f x) |x. norm x = 1}\<close> by blast
    moreover have \<open>bdd_above {norm (f x) |x. norm x = 1}\<close>
    ultimately have \<open>y \<le> Sup {norm (f x) |x. norm x = 1}\<close>
      using \<open>y \<in> {norm (f x) |x. norm x = 1}\<close>
    thus ?thesis using \<open>y \<ge> 0\<close> by simp
  moreover have \<open>Sup ({norm (f x) |x. norm x = 1} \<union> {0}) = Sup {norm (f x) |x. norm x = 1}\<close>
    have \<open>{norm (f x) |x. norm x = 1} \<noteq> {}\<close>
    moreover have \<open>bdd_above {norm (f x) |x. norm x = 1}\<close>
    have \<open>{0::real} \<noteq> {}\<close>
    moreover have \<open>bdd_above {0::real}\<close>
    ultimately have \<open>Sup ({norm (f x) |x. norm x = 1} \<union> {(0::real)})
             = max (Sup {norm (f x) |x. norm x = 1}) (Sup {0::real})\<close>
      by (metis (lifting) \<open>0 \<le> Sup {norm (f x) |x. norm x = 1}\<close> \<open>bdd_above {0}\<close> \<open>bdd_above {norm (f x) |x. norm x = 1}\<close> \<open>{0} \<noteq> {}\<close> \<open>{norm (f x) |x. norm x = 1} \<noteq> {}\<close> cSup_singleton cSup_union_distrib max.absorb_iff1 sup.absorb_iff1)
    moreover have \<open>Sup {(0::real)} = (0::real)\<close>
    moreover have \<open>Sup {norm (f x) |x. norm x = 1} \<ge> 0\<close>
      by (simp add: \<open>0 \<le> Sup {norm (f x) |x. norm x = 1}\<close>)
  moreover have \<open>Sup ( {norm (f x) |x. norm x = 1} \<union> {0})
           = max (Sup {norm (f x) |x. norm x = 1}) (Sup {0}) \<close>
  have \<open>(SUP x. norm (f x) / (norm x)) = Sup {norm (f x) / norm x | x. True}\<close>
  also have \<open>... = Sup {norm (f x) | x. norm x = 1}\<close>
  ultimately  have \<open>(SUP x. norm (f x) / (norm x)) = Sup {norm (f x) | x. norm x = 1}\<close>
