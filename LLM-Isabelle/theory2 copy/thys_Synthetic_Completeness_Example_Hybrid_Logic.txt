theory Example_Hybrid_Logic imports Derivations begin


datatype (nominals_fm: 'i, 'p) fm





  by (induct p) simp_all

  by (cases p) (simp add: finite_nominals_fm)


datatype ('w, 'p) model =



  by (induct p arbitrary: w) auto

lemma semantics_fresh_lbd:
  by (induct p arbitrary: w) auto




  case (Nom A i k p)
  then show ?case
    by fastforce
next
  case (DiaE A i p k j q)
    by blast
    by auto
    using v fun_upd_same DiaE(3) semantics_fresh_lbd by fastforce+
    using DiaE.prems DiaE.hyps(3) semantics_fresh_lbd by (induct A) fastforce+
    by simp
    using DiaE.hyps by fast
  then show ?case
    using DiaE.hyps(3) semantics_fresh_lbd by fastforce
qed (auto simp: list_all_iff)

  using soundness semantics_fresh by (metis fun_upd_same list.pred_inject(1))

  using soundness' by fastforce


  by auto

  by (meson ImpE Weak Assm_head)

  using Clas FlsE by meson

proof (induct B)
  case (Cons b B)
  then show ?case
    by (cases b) (metis Cons Weak append_Cons)
qed simp

lemma ImpI':
  using assms
proof -
    using assms by fast
  then show ?thesis
    by (meson Assm_head ImpE ImpI SatE Weak)
qed

proof (induct A arbitrary: i p)
  case Nil
  then show ?case
    using Weak' by fastforce
next
  case (Cons kq A)
  then show ?case
  proof (cases kq)
    case (Pair k q)
    then show ?thesis
      using Cons by (meson Assm ImpI' ImpE SatI list.set_intros(1) set_subset_Cons subset_eq)
  qed
qed

interpretation Derivations Calculus
proof
    by (cases p) (metis Weaken)
qed



lemma consistent_add_witness:
  unfolding consistent_def
proof
    by (metis append_Cons append_Nil list.simps(15) set_empty)
    by fast
    by (fastforce intro: Weaken)
    by auto
    by fastforce
  ultimately show False
    using assms(1) unfolding consistent_def by blast
qed


lemma consistent_witness':
  using assms
  case (1 i p S)
    using 1(2) finite_nominals_lbd
    by (metis UN_Un finite.emptyI finite.insertI finite_UN_I infinite_Diff_fin_Un)
    by (simp add: not_finite_existsD set_diff_eq)
    by (rule someI_ex)
    by (simp add: Let_def)
  then show ?case
qed (auto simp: assms)

interpretation MCS_Saturation consistent nominals_lbd witness
proof
    unfolding consistent_def by fast
next
    unfolding consistent_def by blast
next
    using finite_nominals_fm by (cases ip) simp
next
    by (induct ip S rule: witness.induct) (auto simp: finite_nominals_fm Let_def)
next
    using consistent_witness' by (cases ip) simp
next
    using finite_prod by blast
qed

proof
    unfolding consistent_def by fast
next
    by (metis Assm surj_pair)
next
    by (simp_all add: derive_struct subsetI)
    by (cases p, cases q) (meson ImpE ImpI' SatI)
qed

  unfolding saturated_def by (metis insert_subset witness.simps(1))


lemma MCS_Nom_refl:
  using assms Ref by (metis MCS_derive MCS_derive_fls)

lemma MCS_Nom_sym:
  using assms Nom Ref by (metis MCS_derive)

lemma MCS_Nom_trans:
proof -
    using assms MCS_derive by blast
    by (metis Assm_head Calculus.intros(12) assms(4) insert_subset list.set(2))
    using Nom Ref by metis
  then show ?thesis
    using assms MCS_derive by blast
qed


  where




lemma hequiv_reflp:
  unfolding hequiv_def reflp_def using assms MCS_Nom_refl by fast

lemma hequiv_symp:
  unfolding hequiv_def symp_def using assms MCS_Nom_sym by fast

lemma hequiv_transp:
  unfolding hequiv_def transp_def using assms MCS_Nom_trans by fast

lemma hequiv_equivp:
  using assms by (simp add: equivpI hequiv_reflp hequiv_symp hequiv_transp)


lemma hequiv_ne:
  unfolding hequiv_def using assms MCS_Nom_refl by fast

lemma hequiv_assign:
  unfolding assign_def using assms hequiv_ne wo_rel.minim_in
  by (metis Field_card_of card_of_well_order_on mem_Collect_eq top.extremum wo_rel_def)

lemma hequiv_Nom:
proof -
    using assms MCS_derive by fast
    using assms(3) unfolding hequiv_def by (metis Assm_head Weak insert_subset list.simps(15))
    using Nom by fast
  then show ?thesis
    using assms MCS_derive by fast
qed



lemma Hintikka_model':
  case 1
  then show ?case ..
next
  case (2 x)
  then show ?case
    using assms[of i x] by (cases x) (auto simp: reach_def)
qed

lemma Hintikka_Extend':
proof (cases p)
  case Fls
    using assms(1-2) MCS_derive unfolding consistent_def by fast
  then show ?thesis
    using Fls by simp
next
  case (Pro P)
    unfolding val_def ..
  then show ?thesis
    using Pro by simp
next
  case (Nom k)
    using assms(1-2) hequiv_equivp hequiv_assign by (metis assign_def equivp_def hequiv_def)
  then show ?thesis
    using Nom by simp
next
  case (Imp p q)
    by (auto simp: Weak)
    using deduct1 .
    using assms(1-2) MCS_derive MCS_derive_fls by (metis insert_subset list.simps(15))
  then show ?thesis
    using Imp by simp
next
  case (Dia p)
  proof
      unfolding reach_def by fast
      by (metis assms(1-2) hequiv_Nom hequiv_assign hequiv_symp sympD)
      by (metis Assm_head Weak assms(1-2) MCS_derive insert_subset list.simps(15))
      by fast
      by (simp add: assms(1-2) MCS_derive)
  next
      using assms(3) saturated by fast
      by (meson assms(1-2) hequiv_Nom hequiv_assign)
      unfolding reach_def by fast
  qed
  then show ?thesis
    using Dia by simp
next
  case (Sat k p)
    by (metis SatE SatI assms(1-2) MCS_derive hequiv_Nom hequiv_assign hequiv_symp sympD)
  then show ?thesis
    using Sat by simp
qed

interpretation Truth_Saturation
proof unfold_locales
    by (cases M, induct p) auto
next
    using Hintikka_model' by fast
next
    using Hintikka_Extend' by fast
qed

lemma Truth_lemma:
proof -
    using truth_lemma_saturation assms by fastforce
  then show ?thesis
    using assms by (meson MCS_Nom_sym hequiv_Nom hequiv_assign hequiv_def)
qed


datatype marker = FlsM | ImpM | DiaM | SatM




  by (induct p) auto

proof (induct p arbitrary: q)
  case Fls
  then show ?case 
    by (cases q) auto
next
  case (Pro P)
  then show ?case 
    by (cases q) auto
next
  case (Nom i)
  then show ?case 
    by (cases q) auto
next
  case (Imp p1 p2)
  then show ?case 
    by (cases q) auto
next
  case (Dia p)
  then show ?case 
    by (cases q) auto
next
  case (Sat x1a p)
  then show ?case 
    by (cases q) auto
qed

  unfolding inj_def using inj_encode' by blast


  using inj_encode' by auto

  unfolding inj_def using inj_encode_lbd' by auto

proof -
    by (cases p) auto
  then show ?thesis
    by (meson ex_new_if_finite finite.emptyI finite_insert)
qed

lemma card_of_lbd:
proof -
    using finite_marker by (simp add: ordLess_imp_ordLeq)
    using assms by simp
    using card_of_params_marker_lists by blast
    using card_of_ordLeq inj_encode_lbd by blast
    using ordLeq_transitive by blast
  then show ?thesis
    unfolding csum_def by simp
qed


theorem strong_completeness:
proof (rule ccontr)
    using Boole FlsE by metis


    unfolding consistent_def using * derive_split1 by metis
    using assms(2-3)
    by (metis Cinfinite_csum Cnotzero_UNIV Field_card_of cinfinite_def cinfinite_mono)
    using assms(3) finite_nominals_lbd card_of_infinite_diff_finite
    by (metis ordIso_iff_ordLeq ordLeq_transitive)
    by (metis Set_Diff_Un)
    by (metis UN_insert insert_is_Un sup_commute)
    using assms card_of_lbd ordLeq_transitive by blast
    using MCS_Extend by fast+
    using Truth_lemma by fast
    using Extend_subset by blast
    by blast+
    using assms(1) by blast
  ultimately show False
    by simp
qed


theorem completeness:
proof -
    using assms(2-3) by (simp add: cinfinite_def csum_absorb1 ordIso_imp_ordLeq)
  then show ?thesis
qed

corollary completeness':
  using assms completeness[of p] by simp

theorem main:
  using assms completeness soundness' by metis

corollary main':
  using assms completeness' soundness' by metis

end
