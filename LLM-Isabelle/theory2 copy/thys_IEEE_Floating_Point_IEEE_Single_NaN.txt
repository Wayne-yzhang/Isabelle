theory IEEE_Single_NaN
  imports
    IEEE_Properties
begin


definition is_nan_equivalent :: "('e, 'f) float \<Rightarrow> ('e, 'f) float \<Rightarrow> bool"
  where "is_nan_equivalent a b \<equiv> a = b \<or> (is_nan a \<and> is_nan b)"

quotient_type (overloaded) ('e, 'f) floatSingleNaN = "('e, 'f) float" / is_nan_equivalent
  by (metis equivpI is_nan_equivalent_def reflpI sympI transpI)


syntax "_floatSingleNaN" :: "type \<Rightarrow> type \<Rightarrow> type" ("'(_, _') floatSingleNaN")





lift_definition fp :: "1 word \<Rightarrow> 'e word \<Rightarrow> 'f word \<Rightarrow> ('e, 'f) floatSingleNaN"
  is "\<lambda>s e f. IEEE.Abs_float (s, e, f)" .


lift_definition plus_infinity :: "('e, 'f) floatSingleNaN" ("\<infinity>") is IEEE.plus_infinity .

lift_definition minus_infinity :: "('e, 'f) floatSingleNaN" is IEEE.minus_infinity .


instantiation floatSingleNaN :: (len, len) zero begin

  lift_definition zero_floatSingleNaN :: "('a, 'b) floatSingleNaN" is 0 .

  instance ..

end

lift_definition minus_zero :: "('e, 'f) floatSingleNaN" is IEEE.minus_zero .


lift_definition NaN :: "('e, 'f) floatSingleNaN" is some_nan .





instantiation floatSingleNaN :: (len, len) abs
begin

  lift_definition abs_floatSingleNaN :: "('a, 'b) floatSingleNaN \<Rightarrow> ('a, 'b) floatSingleNaN" is abs
    unfolding is_nan_equivalent_def by (metis IEEE.abs_float_def is_nan_uminus)

  instance ..

end



instantiation floatSingleNaN :: (len, len) uminus
begin

  lift_definition uminus_floatSingleNaN :: "('a, 'b) floatSingleNaN \<Rightarrow> ('a, 'b) floatSingleNaN" is uminus
    unfolding is_nan_equivalent_def by (metis is_nan_uminus)

  instance ..

end


lift_definition fadd :: "roundmode \<Rightarrow> ('e ,'f) floatSingleNaN \<Rightarrow> ('e ,'f) floatSingleNaN \<Rightarrow> ('e ,'f) floatSingleNaN" is IEEE.fadd
  unfolding is_nan_equivalent_def by (metis IEEE.fadd_def)


lift_definition fsub :: "roundmode \<Rightarrow> ('e ,'f) floatSingleNaN \<Rightarrow> ('e ,'f) floatSingleNaN \<Rightarrow> ('e ,'f) floatSingleNaN" is IEEE.fsub
  unfolding is_nan_equivalent_def by (metis IEEE.fsub_def)


lift_definition fmul :: "roundmode \<Rightarrow> ('e ,'f) floatSingleNaN \<Rightarrow> ('e ,'f) floatSingleNaN \<Rightarrow> ('e ,'f) floatSingleNaN" is IEEE.fmul
  unfolding is_nan_equivalent_def by (metis IEEE.fmul_def)


lift_definition fdiv :: "roundmode \<Rightarrow> ('e ,'f) floatSingleNaN \<Rightarrow> ('e ,'f) floatSingleNaN \<Rightarrow> ('e ,'f) floatSingleNaN" is IEEE.fdiv
  unfolding is_nan_equivalent_def by (metis IEEE.fdiv_def)


lift_definition fmul_add :: "roundmode \<Rightarrow> ('e ,'f) floatSingleNaN \<Rightarrow> ('e ,'f) floatSingleNaN \<Rightarrow> ('e ,'f) floatSingleNaN \<Rightarrow> ('e ,'f) floatSingleNaN" is IEEE.fmul_add
  unfolding is_nan_equivalent_def by (smt (verit) IEEE.fmul_add_def)


lift_definition fsqrt :: "roundmode \<Rightarrow> ('e ,'f) floatSingleNaN \<Rightarrow> ('e ,'f) floatSingleNaN" is IEEE.fsqrt
  unfolding is_nan_equivalent_def by (metis IEEE.fsqrt_def)


lift_definition frem :: "roundmode \<Rightarrow> ('e ,'f) floatSingleNaN \<Rightarrow> ('e ,'f) floatSingleNaN \<Rightarrow> ('e ,'f) floatSingleNaN" is IEEE.frem
  unfolding is_nan_equivalent_def by (metis IEEE.frem_def)

lift_definition float_rem :: "('e ,'f) floatSingleNaN \<Rightarrow> ('e ,'f) floatSingleNaN \<Rightarrow> ('e ,'f) floatSingleNaN" is IEEE.float_rem
  unfolding is_nan_equivalent_def by (metis IEEE.frem_def IEEE.float_rem_def)


lift_definition fintrnd :: "roundmode \<Rightarrow> ('e ,'f) floatSingleNaN \<Rightarrow> ('e ,'f) floatSingleNaN" is IEEE.fintrnd
  unfolding is_nan_equivalent_def by (metis IEEE.fintrnd_def)




lift_definition fle :: "('e ,'f) floatSingleNaN \<Rightarrow> ('e ,'f) floatSingleNaN \<Rightarrow> bool" is IEEE.fle
  unfolding is_nan_equivalent_def by (smt (verit) IEEE.fcompare_def IEEE.fle_def)

lift_definition flt :: "('e ,'f) floatSingleNaN \<Rightarrow> ('e ,'f) floatSingleNaN \<Rightarrow> bool" is IEEE.flt
  unfolding is_nan_equivalent_def by (smt (verit) IEEE.fcompare_def IEEE.flt_def)

lift_definition fge :: "('e ,'f) floatSingleNaN \<Rightarrow> ('e ,'f) floatSingleNaN \<Rightarrow> bool" is IEEE.fge
  unfolding is_nan_equivalent_def by (smt (verit) IEEE.fcompare_def IEEE.fge_def)

lift_definition fgt :: "('e ,'f) floatSingleNaN \<Rightarrow> ('e ,'f) floatSingleNaN \<Rightarrow> bool" is IEEE.fgt
  unfolding is_nan_equivalent_def by (smt (verit) IEEE.fcompare_def IEEE.fgt_def)


lift_definition feq :: "('e ,'f) floatSingleNaN \<Rightarrow> ('e ,'f) floatSingleNaN \<Rightarrow> bool" is IEEE.feq
  unfolding is_nan_equivalent_def by (smt (verit) IEEE.fcompare_def IEEE.feq_def)


lift_definition is_normal :: "('e, 'f) floatSingleNaN \<Rightarrow> bool" is IEEE.is_normal
  unfolding is_nan_equivalent_def using float_distinct by blast

lift_definition is_subnormal :: "('e, 'f) floatSingleNaN \<Rightarrow> bool" is IEEE.is_denormal
  unfolding is_nan_equivalent_def using float_distinct by blast

lift_definition is_zero :: "('e, 'f) floatSingleNaN \<Rightarrow> bool" is IEEE.is_zero
  unfolding is_nan_equivalent_def using float_distinct by blast

lift_definition is_infinity :: "('e, 'f) floatSingleNaN \<Rightarrow> bool" is IEEE.is_infinity
  unfolding is_nan_equivalent_def using float_distinct by blast

lift_definition is_nan :: "('e, 'f) floatSingleNaN \<Rightarrow> bool" is IEEE.is_nan
  unfolding is_nan_equivalent_def by blast

lift_definition is_finite :: "('e, 'f) floatSingleNaN \<Rightarrow> bool" is IEEE.is_finite
  unfolding is_nan_equivalent_def using nan_not_finite by blast

definition is_negative :: "('e, 'f) floatSingleNaN \<Rightarrow> bool"
  where "is_negative x \<equiv> x = minus_zero \<or> flt x minus_zero"

definition is_positive :: "('e, 'f) floatSingleNaN \<Rightarrow> bool"
  where "is_positive x \<equiv> x = 0 \<or> flt 0 x"





lift_definition valof :: "('e,'f) floatSingleNaN \<Rightarrow> real"
  is "\<lambda>a. if IEEE.is_infinity a then undefined a
            else IEEE.valof a"
  unfolding is_nan_equivalent_def using float_distinct(1) by fastforce


definition unsigned_word_of_floatSingleNaN :: "roundmode \<Rightarrow> ('e,'f) floatSingleNaN \<Rightarrow> 'a::len word"
  where "unsigned_word_of_floatSingleNaN mode a \<equiv>
    if is_infinity a \<or> is_nan a then undefined mode a
      else (SOME w. valof (fintrnd mode a) = real_of_word w)"


definition signed_word_of_floatSingleNaN :: "roundmode \<Rightarrow> ('e,'f) floatSingleNaN \<Rightarrow> 'a::len word"
  where "signed_word_of_floatSingleNaN mode a \<equiv>
    if is_infinity a \<or> is_nan a then undefined mode a
      else (SOME w. valof (fintrnd mode a) = real_of_int (sint w))"




  the type system of Isabelle/HOL is not strong enough to enforce this.\<close>
    let (se, f) = word_split w :: 'a word \<times> _; (s, e) = word_split se in fp s e f"  \<comment> \<open>using @{typ \<open>'a word\<close>} ensures that no bits are lost in @{term \<open>se\<close>}\<close>
subsubsection \<open>from real\<close>
subsubsection \<open>from another floating point sort\<close>
subsubsection \<open>from signed machine integer, represented as a 2's complement bit vector\<close>
subsubsection \<open>from unsigned machine integer, represented as bit vector\<close>
