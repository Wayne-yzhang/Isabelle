theory Test
  imports Dijkstra_Impl_Adet
begin

text "Simple linear congruence generator for (low-quality) random numbers:"
definition "lcg_next s = ((81::nat)*s + 173) mod 268435456" 

text "Generate a complete graph over the given number of vertices,
    with random weights:"
definition ran_graph :: "nat \<Rightarrow> nat \<Rightarrow> (nat list\<times>(nat \<times> nat \<times> nat) list)" where
  "ran_graph vertices seed == 
    ([0::nat..<vertices],fst 
     (while (\<lambda> (g,v,s). v < vertices)
     (\<lambda> (g,v,s). 
     let (g'',v'',s'') = (while (\<lambda> (g',v',s'). v' < vertices)
      (\<lambda> (g',v',s'). ((v,s',v')#g',v'+1,lcg_next s'))
      (g,0,s))
     in (g'',v+1,s''))
     ([],0,lcg_next seed)))"


type_synonym nat_res = "(nat,((nat,nat) path \<times> nat)) rm"
type_synonym nat_list_res = "(nat \<times> (nat,nat) path \<times> nat) list"

definition nat_dijkstra :: "(nat,nat) hlg \<Rightarrow> nat \<Rightarrow> nat_res" where
  "nat_dijkstra \<equiv> hrfn_dijkstra"

definition hlg_from_list_nat :: "(nat,nat) adj_list \<Rightarrow>(nat,nat) hlg" where 
  "hlg_from_list_nat \<equiv> hlg.from_list"

definition 
  nat_res_to_list :: "nat_res \<Rightarrow> nat_list_res" 
  where "nat_res_to_list \<equiv> rm.to_list"

value "nat_res_to_list (nat_dijkstra (hlg_from_list_nat (ran_graph 4 8912)) 0)"


end
