theory  OpSemDTBis
  imports OpSemGenericBis "HOL-Library.LaTeXsugar"
begin



 

  using trans_DT by unfold_locales 
                    (auto simp add: anti_mono_ready_set_DT mono_AfterExt_DT)



  by (fact event_trans_\<tau>_trans \<tau>_trans_event_trans)+




  by (fact SKIP_trans_tick)




  by (fact ev_trans_Mprefix)

  by (fact ev_trans_Mndetprefix)

  by (fact ev_trans_prefix)




  by (fact \<tau>_trans_NdetL \<tau>_trans_NdetR)+

  by (fact \<tau>_trans_GlobalNdet)

  by (fact \<tau>_trans_MultiNdet)




  by (fact fix_point_\<tau>_trans)




  by simp_all

lemma \<tau>_trans_MultiDet:
  by (fact mono_MultiDet_DT)


  by (fact event_trans_DetL event_trans_DetR)+

  by (fact event_trans_MultiDet)




  by simp

  by (auto simp add: ready_set_Seq AfterExt_Seq)

  by (metis mono_Seq_DT SKIP_Seq \<tau>_trans_eq ready_tick_imp_\<tau>_trans_SKIP)


  by (fact ev_trans_SeqR)




  by (fact mono_Hiding_DT)

lemma ev_trans_Hiding_notin:
  by (metis AfterExt_def After_Hiding_DT_Hiding_After_if_ready_notin mono_Hiding_DT 
            event_trans_\<tau>_trans event.simps(4) ready_notin_imp_ready_Hiding)

  by (fact tick_trans_Hiding)

lemma ev_trans_Hiding_inside:
  by (metis AfterExt_def Hiding_DT_Hiding_After_if_ready_inside
            mono_Hiding_DT event.simps(4) trans_DT)

  


lemma \<tau>_trans_Renaming:
  by (fact mono_Renaming_DT)

  by (simp add: AfterExt_def ready_set_Renaming tick_eq_EvExt)

lemma ev_trans_Renaming:
  apply (simp add: AfterExt_Renaming Renaming_BOT ready_set_BOT ready_set_Renaming)
  apply (intro conjI impI)
   apply (meson ev_elem_anteced1 imageI vimageI2)
  by (simp add: \<tau>_trans_Renaming)
  

  by (fact \<tau>_trans_Renaming)

  by (fact tick_trans_Renaming)

lemma ev_trans_RenamingF:
  by (metis ev_trans_Renaming fun_upd_same)
  



  by simp_all

lemma ev_trans_SyncL:
  and ev_trans_SyncR:
  by (simp_all add: AfterExt_Sync ready_set_Sync image_iff)
  
lemma ev_trans_SyncLR:
  by (simp add: AfterExt_Sync ready_set_Sync)



  by (simp_all add: ready_tick_imp_\<tau>_trans_SKIP)

  by (simp add: SKIP_trans_tick Sync_SKIP_SKIP)

  by (simp add: Sync_SKIP_SKIP)




  unfolding Sliding_def by simp
 
  by (fact Sliding_event_transL)

  by (fact Sliding_\<tau>_transR)




  by (simp add: mono_Interrupt_DT)

  by (simp add: mono_Interrupt_DT)

lemma Interrupt_ev_trans_left:
  by (simp add: AfterExt_def After_Interrupt Interrupt_\<tau>_trans_left ready_set_Interrupt)

  by (simp add: AfterExt_def After_Interrupt ready_set_Interrupt)




lemma Throw_\<tau>_trans_left:
  by (simp add: mono_Throw_DT)

lemma Throw_\<tau>_trans_right: 
  by (simp add: mono_Throw_DT)

lemma Throw_event_trans_left: 
  apply (simp add: AfterExt_Throw ready_set_Throw image_iff split: event.split)
  apply (intro conjI impI)
  by (metis AfterExt_def Throw_\<tau>_trans_left event.simps(4))
 

lemma Throw_ev_trans_right: 
  by (simp add: AfterExt_Throw ready_set_Throw split: event.split)




  by (fact BOT_trace_trans_tickFree_anything)




  by (fact STOP_trace_trans_iff)





  using T_imp_exists_trace_trans leDT_imp_leT trace_trans_imp_T_if_\<tau>_trans_imp_leT by blast

lemma tickFree_imp_D_iff_trace_trans_BOT:
  using D_imp_trace_trans_BOT leDT_imp_leD trace_trans_BOT_imp_D_if_\<tau>_trans_imp_leD by blast

lemma D_iff_trace_trans_BOT:
  by (metis tickFree_if_trans_trans_not_STOP STOP_neq_BOT
            append_butlast_last_id front_tickFree_butlast 
            front_tickFree_single is_processT tickFree_butlast
            tickFree_imp_D_iff_trace_trans_BOT)




lemma trace_trans_ready_set_subset_ready_set_AfterTrace: 
  by (metis T_iff_exists_trans T_imp_trace_trans_iff_AfterTrace_\<tau>_trans \<tau>_trans_anti_mono_ready_set)
       
lemma trace_trans_imp_ready_set:
  using T_iff_exists_trans ready_set_AfterTrace by blast

lemma AfterTrace_\<tau>_trans_if_\<tau>_trans_imp_leT : 
  using T_iff_exists_trans T_imp_trace_trans_iff_AfterTrace_\<tau>_trans by blast






















end