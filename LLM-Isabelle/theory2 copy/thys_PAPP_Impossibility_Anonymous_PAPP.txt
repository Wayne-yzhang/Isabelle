theory Anonymous_PAPP
  imports Complex_Main "Randomised_Social_Choice.Order_Predicates" PAPP_Multiset_Extras
begin



locale anon_papp_election = 
  fixes n_voters :: nat and parties :: "'a set" and committee_size :: nat
  assumes finite_parties [simp, intro]: "finite parties"
  assumes n_voters_pos: "n_voters > 0"
  assumes nonempty_parties [simp]: "parties \<noteq> {}"
begin

definition is_committee :: "'a multiset \<Rightarrow> bool" where
  "is_committee W \<longleftrightarrow> set_mset W \<subseteq> parties \<and> size W = committee_size"

end


locale anon_papp_profile = anon_papp_election +
  fixes A :: "'a set multiset"
  assumes A_subset: "\<And>X. X \<in># A \<Longrightarrow> X \<subseteq> parties"
  assumes A_nonempty: "{} \<notin># A"
  assumes size_A: "size A = n_voters"
begin

lemma A_nonempty': "A \<noteq> {#}"
  using size_A n_voters_pos by auto

end


context anon_papp_election
begin

abbreviation
  is_pref_profile where "is_pref_profile \<equiv> anon_papp_profile n_voters parties"

lemma is_pref_profile_iff:
  "is_pref_profile A \<longleftrightarrow> set_mset A \<subseteq> Pow parties - {{}} \<and> size A = n_voters"
  unfolding anon_papp_profile_def anon_papp_profile_axioms_def
  using anon_papp_election_axioms by auto  


lemma not_is_pref_profile_empty [simp]: "\<not>is_pref_profile {#}"
  using anon_papp_profile.A_nonempty'[of n_voters]
  by auto



definition committee_preference :: "'a set \<Rightarrow> 'a multiset relation" ("Comm") where
  "W1 \<preceq>[Comm(A)] W2 \<longleftrightarrow> size {# x\<in>#W1. x \<in> A #} \<le> size {# x\<in>#W2. x \<in> A #}"

lemma not_strict_Comm [simp]: "\<not>(W1 \<prec>[Comm(A)] W2) \<longleftrightarrow> W1 \<succeq>[Comm(A)] W2"
  by (auto simp: committee_preference_def strongly_preferred_def)

lemma not_weak_Comm [simp]: "\<not>(W1 \<preceq>[Comm(A)] W2) \<longleftrightarrow> W1 \<succ>[Comm(A)] W2"
  by (auto simp: committee_preference_def strongly_preferred_def)

sublocale Comm: preorder "Comm(A)" "\<lambda>x y. x \<prec>[Comm(A)] y"
  by standard (auto simp: committee_preference_def strongly_preferred_def)

lemma strong_committee_preference_iff:
  "W1 \<prec>[Comm(A)] W2 \<longleftrightarrow> size {# x\<in>#W1. x \<in> A #} < size {# x\<in>#W2. x \<in> A #}"
  by (auto simp: committee_preference_def strongly_preferred_def)


definition Pareto :: "'a set multiset \<Rightarrow> 'a relation" where
  "x \<preceq>[Pareto(A)] y \<longleftrightarrow> x \<in> parties \<and> y \<in> parties \<and> (\<forall>X\<in>#A. x \<in> X \<longrightarrow> y \<in> X)"

sublocale Pareto: preorder_on parties "Pareto A"
  by standard (auto simp: Pareto_def)


definition pareto_losers :: "'a set multiset \<Rightarrow> 'a set" where
  "pareto_losers A = {x. \<exists>y. y \<succ>[Pareto(A)] x}"

end




locale anon_papp = anon_papp_election +
  fixes r :: "'a set multiset \<Rightarrow> 'a multiset"
  assumes rule_wf: "is_pref_profile A \<Longrightarrow> is_committee (r A)"




locale weakly_efficient_anon_papp = anon_papp +
  assumes weakly_efficient: "is_pref_profile A \<Longrightarrow> \<forall>X\<in>#A. x \<notin> X \<Longrightarrow> x \<notin># r A"


locale pareto_optimal_anon_papp = anon_papp +
  assumes pareto_optimal: "is_pref_profile A \<Longrightarrow> x \<in> pareto_losers A \<Longrightarrow> x \<notin># r A"
begin

sublocale weakly_efficient_anon_papp
proof
  fix A x
  assume A: "is_pref_profile A" and x: "\<forall>X\<in>#A. x \<notin> X"
  interpret anon_papp_profile n_voters parties committee_size A
    by fact
  have "A \<noteq> {#}"
    using A_nonempty' .
  then obtain X where X: "X \<in># A"
    by auto
  with A_nonempty have "X \<noteq> {}"
    by auto
  then obtain y where y: "y \<in> X"
    by auto
  show "x \<notin># r A"
  proof (cases "x \<in> parties")
    case False
    thus ?thesis
      using rule_wf[OF A] by (auto simp: is_committee_def)
  next
    case True
    have "y \<succ>[Pareto(A)] x"
      unfolding Pareto_def using X x y True A_subset[of X]
      by (auto simp: strongly_preferred_def)
    hence "x \<in> pareto_losers A"
      by (auto simp: pareto_losers_def)
    thus ?thesis
      using pareto_optimal[OF A] by auto
  qed
qed

end




definition (in anon_papp) card_manipulable where
  "card_manipulable A X Y \<longleftrightarrow>
     is_pref_profile A \<and> X \<in># A \<and> Y \<noteq> {} \<and> Y \<subseteq> parties \<and> r (A - {#X#} + {#Y#}) \<succ>[Comm(X)] r A"

lemma (in anon_papp) is_pref_profile_replace:
  assumes "is_pref_profile A" and "X \<in># A" and "Y \<noteq> {}" and "Y \<subseteq> parties"
  shows   "is_pref_profile (A - {#X#} + {#Y#})"
proof -
  interpret anon_papp_profile n_voters parties committee_size A
    by fact
  show ?thesis
    using assms A_subset A_nonempty unfolding is_pref_profile_iff
    by (auto dest: in_diffD simp: size_Suc_Diff1)
qed

locale card_stratproof_anon_papp = anon_papp +
  assumes not_manipulable: "\<not>card_manipulable A X Y"
begin

lemma not_manipulable':
  assumes "is_pref_profile A" "is_pref_profile A'" "A + {#Y#} = A' + {#X#}"
  shows   "\<not>(r A' \<succ>[Comm(X)] r A)"
proof (cases "X = Y")
  case True
  thus ?thesis
    using assms by (simp add: strongly_preferred_def)
next
  case False
  interpret A: anon_papp_profile n_voters parties committee_size A
    by fact
  interpret A': anon_papp_profile n_voters parties committee_size A'
    by fact
  from assms(3) False have *: "Y \<in># A'" "X \<in># A"
    by (metis add_mset_add_single insert_noteq_member)+

  have "\<not>card_manipulable A X Y"
    by (intro not_manipulable)
  hence "\<not>r (A - {#X#} + {#Y#}) \<succ>[Comm(X)] r A"
    using assms * A.A_subset A'.A_subset A.A_nonempty A'.A_nonempty
    by (auto simp: card_manipulable_def)
  also have "A - {#X#} + {#Y#} = A'"
    using assms(3) False by (metis add_eq_conv_diff add_mset_add_single)
  finally show ?thesis .
qed

lemma not_manipulable'':
  assumes "is_pref_profile A" "is_pref_profile A'" "A + {#Y#} = A' + {#X#}"
  shows   "r A' \<preceq>[Comm(X)] r A"
  using not_manipulable'[OF assms] by simp

end




locale weak_rep_anon_papp =
  anon_papp n_voters parties committee_size r
  for n_voters and parties :: "'alt set" and committee_size :: nat and r +
  assumes weak_representation:
    "is_pref_profile A \<Longrightarrow> committee_size * count A {x} \<ge> n_voters \<Longrightarrow> x \<in># r A"

lemma weak_rep_anon_papp_altdef:
  "weak_rep_anon_papp n_voters parties committee_size r \<longleftrightarrow>
     anon_papp n_voters parties committee_size r \<and> (committee_size = 0 \<or>
     (\<forall>A x. anon_papp_profile n_voters parties A \<longrightarrow>
              count A {x} \<ge> n_voters / committee_size \<longrightarrow> x \<in># r A))"
  by (cases "committee_size = 0")
     (auto simp: field_simps weak_rep_anon_papp_def
                 weak_rep_anon_papp_axioms_def 
                 anon_papp_def anon_papp_axioms_def anon_papp_election_def
           simp flip: of_nat_mult)


locale justified_rep_anon_papp =
  anon_papp n_voters parties committee_size r
  for n_voters and parties :: "'alt set" and committee_size :: nat and r +
  assumes justified_representation:
    "is_pref_profile A \<Longrightarrow> G \<subseteq># A \<Longrightarrow> committee_size * size G \<ge> n_voters \<Longrightarrow>
       (\<Inter>X\<in>set_mset G. X) \<noteq> {} \<Longrightarrow> \<exists>X x. X \<in># G \<and> x \<in> X \<and> x \<in># r A"
begin

sublocale weak_rep_anon_papp
proof
  fix A x
  assume *: "is_pref_profile A" "n_voters \<le> committee_size * count A {x}"
  define G where "G = replicate_mset (count A {x}) {x}"
  have [simp]: "size G = count A {x}"
    by (auto simp: G_def)
  have **: "set_mset G \<subseteq> {{x}}"
    by (auto simp: G_def)
  have ***: "G \<subseteq># A"
    unfolding G_def by (meson count_le_replicate_mset_subset_eq order_refl)
  have "\<exists>X x. X \<in># G \<and> x \<in> X \<and> x \<in># r A"
    by (rule justified_representation) (use * ** *** in auto)
  thus "x \<in># r A"
    using ** by auto
qed

end


locale card_stratproof_weak_rep_anon_papp =
  card_stratproof_anon_papp + weak_rep_anon_papp




locale weak_prop_rep_anon_papp =
  anon_papp n_voters parties committee_size r
  for n_voters and parties :: "'alt set" and committee_size :: nat and r +
  assumes weak_proportional_representation:
    "is_pref_profile A \<Longrightarrow> committee_size * count A {x} \<ge> l * n_voters \<Longrightarrow> count (r A) x \<ge> l"
begin

sublocale weak_rep_anon_papp
proof
  fix A x
  assume "is_pref_profile A" "n_voters \<le> committee_size * count A {x}"
  thus "x \<in># r A"
    using weak_proportional_representation[of A 1] by auto
qed

end


locale justified_prop_rep_anon_papp =
  anon_papp n_voters parties committee_size r
  for n_voters and parties :: "'alt set" and committee_size :: nat and r +
  assumes justified_proportional_representation:
    "is_pref_profile A \<Longrightarrow> G \<subseteq># A \<Longrightarrow> committee_size * size G \<ge> l * n_voters \<Longrightarrow>
       (\<Inter>X\<in>set_mset G. X) \<noteq> {} \<Longrightarrow> size {# x \<in># r A. x \<in> (\<Union>X\<in>set_mset G. X) #} \<ge> l"
begin

sublocale justified_rep_anon_papp
proof
  fix A G
  assume "is_pref_profile A" "G \<subseteq># A" "n_voters \<le> committee_size * size G" 
         "(\<Inter>X\<in>set_mset G. X) \<noteq> {}"
  hence "size {#x \<in># r A. \<exists>X\<in>#G. x \<in> X#} \<ge> 1"
    using justified_proportional_representation[of A G 1] by auto
  hence "{#x \<in># r A. \<exists>X\<in>#G. x \<in> X#} \<noteq> {#}"
    by auto
  thus "\<exists>X x. X \<in># G \<and> x \<in> X \<and> x \<in># r A"
    by fastforce
qed

sublocale weak_prop_rep_anon_papp
proof
  fix A l x
  assume *: "is_pref_profile A" "l * n_voters \<le> committee_size * count A {x}"
  define G where "G = replicate_mset (count A {x}) {x}"
  from * have "size {#x \<in># r A. x \<in> (\<Union>X\<in>set_mset G. X)#} \<ge> l"
    by (intro justified_proportional_representation)
       (auto simp: G_def simp flip: count_le_replicate_mset_subset_eq)
  also have "size {#x \<in># r A. x \<in> (\<Union>X\<in>set_mset G. X)#} \<le> count (r A) x"
    by (auto simp: G_def)
  finally show "count (r A) x \<ge> l" .
qed

end


locale card_stratproof_weak_prop_rep_anon_papp =
  card_stratproof_anon_papp + weak_prop_rep_anon_papp

end
