theory Van_der_Waerden
  imports Main "HOL-Library.FuncSet" Digits
begin






definition arith_prog :: "int \<Rightarrow> nat \<Rightarrow> nat \<Rightarrow> int"
  where "arith_prog start step i = start + int (i * step)"


definition multi_arith_prog :: 
    "nat \<Rightarrow> int \<Rightarrow> (nat \<Rightarrow> nat) \<Rightarrow> (nat \<Rightarrow> nat) \<Rightarrow> int"
  where "multi_arith_prog dims start steps c = 
           start + int (\<Sum>i<dims. c i * steps i)"

lemma multi_to_arith_prog: 
  "multi_arith_prog 1 start steps c = 
    arith_prog start (steps 0) (c 0)"
  unfolding multi_arith_prog_def arith_prog_def by auto

lemma arith_prog_to_multi: 
  "arith_prog start step c = 
    multi_arith_prog 1 start (\<lambda>_. step) (\<lambda>_. c)"
  unfolding multi_arith_prog_def arith_prog_def by auto

      have prog_in_ivl: "arith_prog start step i \<in> {a..b}" 
        if "i \<le> l" for i
      proof (cases "i=l")
        case False
        have "i<l" using that False by auto
        then show ?thesis 
      next
        case True
        have "start \<in> {a..a + int n -1}" 
          using range_prog_lessThan_l[of 0] 
        moreover have "start + int step \<in> {a..a + int n -1}" 
          using range_prog_lessThan_l[of 1] 
        ultimately have "step \<le> n" by auto
        have "arith_prog start step (l-1) \<in> {a..a + int n -1}" 
          using range_prog_lessThan_l[of "l-1"] unfolding arith_prog_def
        moreover have "arith_prog start step l = 
                        arith_prog start step (l-1) + int step"
        ultimately have "arith_prog start step l \<in> {a..b}" 
        then show ?thesis using range_prog_lessThan_l using True 
          by force
      qed

      have col_prog_eq: "col (arith_prog start step k) = j" 
        if "k < l" for k
        using prog that by blast
      
      define steps :: "nat \<Rightarrow> nat" where steps_def: "steps = (\<lambda>i. step)"
      define f where "f = multi_arith_prog 1 start steps"
      
      have rel_prop_1: 
        "col (f c) = col (f (\<lambda>i. if i < s then 0 else c i))"
        if "c \<in> {0..<1} \<rightarrow> {0..l}" "s<1" "\<forall>j\<le>s. c j < l" for c s 
        using that by auto

      have arith_prog_on: 
        "is_multi_arith_prog_on (l+1) m start steps a b"
        using prog(3) unfolding is_arith_prog_on_def is_multi_arith_prog_on_def
      
      show ?case
        by (rule exI[of _ start], rule exI[of _ steps])
    qed
    then show ?case ..

  next
          Induction step $(m-1) \longrightarrow m$. \<close>
      using \<open>1 < m\<close> less by force
    have "k^q>0" using \<open>k>0\<close> by auto
      using vdw_assms \<open>k^q>0\<close> by blast
    text \<open>Idea: $[a..b] = I_1 \cup I_2$ where $|I_1| = 2*n_{k,q}$ and $|I_2| = q$.
                Divide $I_1$ into blocks of length $q$ and define a new colouring on the set of 
                $q$-blocks where the colour of the block is the $k$-basis representation where 
                the $i$-th digit corresponds to the colour of the $i$-th element in the block. 
                Get an arithmetic progression of $q$-blocks of length $l+1$ in $I_1$, such that
                the first $l$ $q$-blocks have the same colour. 
                The step of the block-arithmetic progression is going to be the additional 
                step in the induction over $m$. \<close>
      have "n_kq>0" using vdw_imp_pos vdw \<open>l\<ge>2\<close> by auto
      have "l>0" and "l>1" using \<open>l\<ge>2\<close> by auto
      interpret digits k by (simp add: \<open>0 < k\<close> digits_def)
          using that col_xn[of n] \<open>k>0\<close> by (auto)
        also have "\<dots> < k^q" using sum_mod_poly \<open>k>0\<close> by auto        
        using vdw range_col1 by (elim vdwE) (auto simp: \<open>k>0\<close>) 
          by (simp add: \<open>0 < l\<close>)
          by (metis \<open>1 < l\<close> mult.left_neutral)
          using \<open>0 < l\<close> diff_less less_numeral_extra(1) by blast
          unfolding arith_prog_def using \<open>0 < l\<close> mult_eq_if by force
          using \<open>step\<le>n_kq\<close> by auto
      text \<open> Impact on the colour when taking the block-step. \<close>
              prog 1 \<open>diff \<in>{..<q}\<close> by auto
          by (auto simp: \<open>start\<le>start'\<close> shift_arith_prog) 
      text \<open> Obtain an $(m-1)$-fold arithmetic progression in the starting $q$-bolck of the 
             block arithmetic progression. \<close>
      text \<open>Obtain an $m$-fold arithmetic progression by adding the block-step.\<close>
      text \<open> Show that this $m$-fold arithmetic progression fulfills all needed properties. \<close>
      text \<open> Show the relational property for all $s$. \<close>
          using one_step_more'[of "g (c \<circ> Suc)" "c 0"] \<open>c 0 < l\<close>
        have "c 0 < l" using \<open>s>0\<close> that by auto
          using one_step_more'[of "g (c \<circ> Suc)" "c 0"] \<open>c 0 < l\<close> 
          Suc))" using g_shift_IH[of "c" s] \<open>s>0\<close> that by force
             \<open>auto simp: f_def Let_def steps_def\<close>)
text \<open> Secondly, we show that \<open>vdw_lemma\<close> implies the induction step of Van der Waerden's Theorem
