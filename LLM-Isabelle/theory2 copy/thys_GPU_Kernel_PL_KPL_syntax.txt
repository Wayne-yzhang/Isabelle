theory KPL_syntax imports 
  Misc
begin

typedecl V 

typedecl name

typedecl proc_name

type_synonym lid = nat
type_synonym gid = nat

type_synonym tid = "gid \<times> lid"

type_synonym threadset = "gid set \<times> (gid \<rightharpoonup> lid set)"

fun tids :: "threadset \<Rightarrow> tid set"
where
  "tids (G,T) = {(i,j) | i j. i \<in> G \<and> j \<in> the (T i)}"


datatype loc =
  Name name
| Var V

datatype local_expr =
  Loc loc
| Gid
| Lid
| eTrue
| eConj local_expr local_expr  (infixl "\<and>*" 50)
| eNot local_expr              ("\<not>*")

datatype basic_stmt =
  Assign loc local_expr
| Read loc local_expr
| Write local_expr local_expr

datatype stmt =
  Basic basic_stmt
| Seq stmt stmt (infixl ";;" 50)
| Local name stmt
| If local_expr stmt stmt
| While local_expr stmt
| WhileDyn local_expr stmt
| Call proc_name local_expr
| Barrier
| Break
| Continue
| Return

record proc = 
  proc_name :: proc_name
  param :: name
  body :: stmt

record kernel = 
  groups :: nat
  threads :: nat
  procs :: "proc list"
  main :: stmt

end
