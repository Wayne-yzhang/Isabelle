theory Type
imports Maybe
begin

datatype "typ" = TVar nat | Fun "typ" "typ" (infixr "->" 70)

datatype type_scheme = FVar nat | BVar nat | SFun type_scheme type_scheme (infixr "=->" 70)

fun mk_scheme :: "typ => type_scheme" where
  "mk_scheme (TVar n) = (FVar n)"
| "mk_scheme (t1 -> t2) = ((mk_scheme t1) =-> (mk_scheme t2))"

type_synonym subst = "nat => typ"

class type_struct =
  fixes free_tv :: "'a => nat set"
  fixes free_tv_ML :: "'a => nat list"
  fixes bound_tv :: "'a => nat set"
  fixes min_new_bound_tv :: "'a => nat"
  fixes app_subst :: "subst => 'a => 'a" ("$")

instantiation "typ" :: type_struct
begin

fun free_tv_typ where
  free_tv_TVar:    "free_tv (TVar m) = {m}"
| free_tv_Fun:     "free_tv (t1 -> t2) = (free_tv t1) Un (free_tv t2)"

fun app_subst_typ where
  app_subst_TVar: "$ S (TVar n) = S n" 
| app_subst_Fun:  "$ S (t1 -> t2) = ($ S t1) -> ($ S t2)" 

instance ..

end

instantiation type_scheme :: type_struct
begin

fun free_tv_type_scheme where
  "free_tv (FVar m) = {m}"
| "free_tv (BVar m) = {}"
| "free_tv (S1 =-> S2) = (free_tv S1) Un (free_tv S2)"

fun free_tv_ML_type_scheme where
  "free_tv_ML (FVar m) = [m]"
| "free_tv_ML (BVar m) = []"
| "free_tv_ML (S1 =-> S2) = (free_tv_ML S1) @ (free_tv_ML S2)"

fun bound_tv_type_scheme where
  "bound_tv (FVar m) = {}"
| "bound_tv (BVar m) = {m}"
| "bound_tv (S1 =-> S2) = (bound_tv S1) Un (bound_tv S2)"

fun min_new_bound_tv_type_scheme where
  "min_new_bound_tv (FVar n) = 0"
| "min_new_bound_tv (BVar n) = Suc n"
| "min_new_bound_tv (sch1 =-> sch2) = max (min_new_bound_tv sch1) (min_new_bound_tv sch2)"

fun app_subst_type_scheme where
  "$ S (FVar n) = mk_scheme (S n)"
| "$ S (BVar n) = (BVar n)"
| "$ S (sch1 =-> sch2) = ($ S sch1) =-> ($ S sch2)"

instance ..

end

instantiation list :: (type_struct) type_struct
begin

fun free_tv_list where
  "free_tv [] = {}"
| "free_tv (x#l) = (free_tv x) Un (free_tv l)"

fun free_tv_ML_list where
  "free_tv_ML [] = []"
| "free_tv_ML (x#l) = (free_tv_ML x) @ (free_tv_ML l)"

fun bound_tv_list where
  "bound_tv [] = {}"
| "bound_tv (x#l) = (bound_tv x) Un (bound_tv l)"

definition app_subst_list where
  app_subst_list: "$ S = map ($ S)"

instance ..

end

text  
   structure s, i.e. whether n is greater than any type variable 
   occurring in the type structure\<close>
\<comment> \<open>identity\<close>
\<comment> \<open>domain of a substitution\<close>
\<comment> \<open>codomain of a substitution: the introduced variables\<close>
\<comment> \<open>unification algorithm mgu\<close>
\<comment> \<open>constructor laws for @{text app_subst}\<close>
\<comment> \<open>constructor laws for @{text new_tv}\<close>
\<comment> \<open>constructor laws for @{text dom} and @{text cod}\<close>
\<open>if two substitutions yield the same result if applied to a type
   structure the substitutions coincide on the free type variables
   occurring in the type structure\<close>
\<comment> \<open>lemmata for @{text bound_tv}\<close>
\<comment> \<open>Lemmata for @{text new_tv}\<close>
\<comment> \<open>substitution affects only variables occurring freely\<close>
\<comment> \<open>all greater variables are also new\<close>
\<comment> \<open>@{text new_tv} property remains if a substitution is applied\<close>
\<comment> \<open>composition of substitutions preserves @{text new_tv} proposition\<close>
\<comment> \<open>new type variables do not occur freely in a type structure\<close>
\<comment> \<open>mgu does not introduce new type variables\<close>
\<comment> \<open>application of @{text id_subst} does not change type expression\<close>
\<comment> \<open>application of @{text id_subst} does not change list of type expressions\<close>
\<comment> \<open>composition of substitutions\<close>
