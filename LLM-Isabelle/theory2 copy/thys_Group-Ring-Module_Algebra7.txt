theory Algebra7 imports Algebra6 begin

chapter "Modules"

section "Basic properties of Modules"

record ('a, 'b) Module = "'a aGroup" +
  sprod  :: "'b \<Rightarrow> 'a \<Rightarrow> 'a" (infixl "\<cdot>\<^sub>s\<index>" 76)

locale Module = aGroup M for M (structure) +
  fixes R (structure)
  assumes  sc_Ring: "Ring R" 
  and  sprod_closed :
      "\<lbrakk> a \<in> carrier R; m \<in> carrier M\<rbrakk> \<Longrightarrow> a \<cdot>\<^sub>s m \<in> carrier M" 
    and sprod_l_distr:
      "\<lbrakk>a \<in> carrier R; b \<in> carrier R; m \<in> carrier M\<rbrakk> \<Longrightarrow>
       (a \<plusminus>\<^bsub>R\<^esub> b) \<cdot>\<^sub>s m = a \<cdot>\<^sub>s m \<plusminus>\<^bsub>M\<^esub> b \<cdot>\<^sub>s m" 
    and sprod_r_distr:
      "\<lbrakk> a \<in> carrier R; m \<in> carrier M; n \<in> carrier M \<rbrakk> \<Longrightarrow>
      a \<cdot>\<^sub>s (m \<plusminus>\<^bsub>M\<^esub> n) = a \<cdot>\<^sub>s m \<plusminus>\<^bsub>M\<^esub> a \<cdot>\<^sub>s n"
    and sprod_assoc:
      "\<lbrakk> a \<in> carrier R; b \<in> carrier R; m \<in> carrier M \<rbrakk> \<Longrightarrow>
      (a \<cdot>\<^sub>r\<^bsub>R\<^esub> b) \<cdot>\<^sub>s m = a \<cdot>\<^sub>s (b \<cdot>\<^sub>s m)"  
    and sprod_one:
      "m \<in> carrier M \<Longrightarrow> (1\<^sub>r\<^bsub>R\<^esub>) \<cdot>\<^sub>s m = m" 

definition 
  submodule :: "[('b, 'm) Ring_scheme, ('a, 'b, 'c) Module_scheme, 'a set] \<Rightarrow>
            bool" where
  "submodule R A H \<longleftrightarrow> H \<subseteq> carrier A \<and> A +> H \<and> (\<forall>a. \<forall>m. 
                     (a \<in> carrier R \<and> m \<in> H) \<longrightarrow> (sprod A a m) \<in> H)"

definition
  mdl :: "[('a, 'b, 'm) Module_scheme, 'a set] \<Rightarrow> ('a, 'b) Module" where
  "mdl M H = \<lparr>carrier = H, pop = pop M, mop = mop M, zero = zero M,
    sprod = \<lambda>a. \<lambda>x\<in>H. sprod M a x\<rparr>" 

abbreviation
  MODULE  (infixl "module" 58) where
 "R module M == Module M R"
 

lemma (in Module) module_is_ag: "aGroup M" ..

lemma (in Module) module_inc_zero:" \<zero>\<^bsub>M\<^esub> \<in> carrier M"

lemma (in Module) submodule_subset:"submodule R M H \<Longrightarrow> H \<subseteq> carrier M"
apply (simp add:submodule_def)
done

lemma (in Module) submodule_asubg:"submodule R M H \<Longrightarrow> M +> H"
by (simp add:submodule_def)

lemma (in Module) submodule_subset1:"\<lbrakk>submodule R M H; h \<in> H\<rbrakk> \<Longrightarrow>
                            h \<in> carrier M"
apply (simp add:submodule_def)
apply (erule conjE)+
apply (simp add:subsetD)
done

lemma (in Module) submodule_inc_0:"submodule R M H \<Longrightarrow>
                                           \<zero>\<^bsub>M\<^esub> \<in> H" 
apply (simp add:submodule_def, (erule conjE)+)
apply (rule asubg_inc_zero, assumption+)
done

lemma (in Module) sc_un:" m \<in> carrier M \<Longrightarrow> 1\<^sub>r\<^bsub>R\<^esub> \<cdot>\<^sub>s m = m"
apply (simp add:sprod_one)
done

lemma (in Module) sc_mem:"\<lbrakk>a \<in> carrier R; m \<in> carrier M\<rbrakk> \<Longrightarrow>
           a \<cdot>\<^sub>s m \<in> carrier M"
apply (simp add:sprod_closed)
done

lemma (in Module) submodule_sc_closed:"\<lbrakk>submodule R M H; 
 a \<in> carrier R; h \<in> H\<rbrakk> \<Longrightarrow>  a \<cdot>\<^sub>s h \<in> H"
apply (simp add:submodule_def)
done

lemma (in Module) sc_assoc:"\<lbrakk>a \<in> carrier R; b \<in> carrier R; 
 m \<in> carrier M\<rbrakk> \<Longrightarrow> (a \<cdot>\<^sub>r\<^bsub>R\<^esub> b) \<cdot>\<^sub>s m =  a \<cdot>\<^sub>s ( b \<cdot>\<^sub>s m)"
apply (simp add:sprod_assoc)
done

lemma (in Module) sc_l_distr:"\<lbrakk>a \<in> carrier R; b \<in> carrier R; 
 m \<in> carrier M\<rbrakk> \<Longrightarrow> (a \<plusminus>\<^bsub>R\<^esub> b)\<cdot>\<^sub>s m = a \<cdot>\<^sub>s m \<plusminus>  b \<cdot>\<^sub>s m"
apply (simp add:sprod_l_distr)
done

lemma (in Module) sc_r_distr:"\<lbrakk>a \<in> carrier R; m \<in> carrier M; n \<in> carrier M\<rbrakk> \<Longrightarrow>
                 a \<cdot>\<^sub>s (m \<plusminus> n) = a \<cdot>\<^sub>s m \<plusminus>  a \<cdot>\<^sub>s n"
apply (simp add:sprod_r_distr)
done

lemma (in Module) sc_0_m:"m \<in> carrier M \<Longrightarrow> \<zero>\<^bsub>R\<^esub>\<cdot>\<^sub>s m = \<zero>\<^bsub>M\<^esub>"
apply (cut_tac sc_Ring,
       frule Ring.ring_is_ag,
       frule aGroup.ag_inc_zero [of "R"],
       frule sc_l_distr[of "\<zero>\<^bsub>R\<^esub>" "\<zero>\<^bsub>R\<^esub>" "m"], assumption+,
       frule sc_mem [of "\<zero>\<^bsub>R\<^esub>" m], assumption+)
apply (simp add:aGroup.ag_l_zero, frule sym,
       thin_tac "\<zero>\<^bsub>R\<^esub> \<cdot>\<^sub>s m = \<zero>\<^bsub>R\<^esub> \<cdot>\<^sub>s m \<plusminus> \<zero>\<^bsub>R\<^esub> \<cdot>\<^sub>s m")
apply (frule ag_eq_sol1 [of "\<zero>\<^bsub>R\<^esub> \<cdot>\<^sub>s m" "\<zero>\<^bsub>R\<^esub> \<cdot>\<^sub>s m" "\<zero>\<^bsub>R\<^esub> \<cdot>\<^sub>s m"], assumption+,   
       simp add:ag_l_inv1)
done

lemma (in Module) sc_a_0:"a \<in> carrier R \<Longrightarrow> a \<cdot>\<^sub>s \<zero>  = \<zero>"
apply (cut_tac ag_inc_zero,
       frule sc_r_distr[of a \<zero> \<zero>], assumption+,
       frule sc_mem [of a \<zero>], assumption+)
apply (simp add:ag_l_zero, frule sym,
       thin_tac "a \<cdot>\<^sub>s \<zero> = a \<cdot>\<^sub>s \<zero> \<plusminus> a \<cdot>\<^sub>s \<zero>")
apply (frule ag_eq_sol1 [of "a \<cdot>\<^sub>s \<zero>" "a \<cdot>\<^sub>s \<zero>" "a \<cdot>\<^sub>s \<zero>"], assumption+,   
       simp add:ag_l_inv1)
done

lemma (in Module) sc_minus_am:"\<lbrakk>a \<in> carrier R; m \<in> carrier M\<rbrakk>
                     \<Longrightarrow> -\<^sub>a (a \<cdot>\<^sub>s m) = a \<cdot>\<^sub>s (-\<^sub>a m)"
apply (frule ag_mOp_closed [of m],
       frule sc_r_distr[of a m "-\<^sub>a m"], assumption+,
       simp add:ag_r_inv1,
       simp add:sc_a_0, frule sym,
       thin_tac "\<zero> = a \<cdot>\<^sub>s m \<plusminus> a \<cdot>\<^sub>s (-\<^sub>a m)")
 apply (frule sc_mem [of a m], assumption+,
        frule sc_mem [of a "-\<^sub>a m"], assumption+,
        frule ag_eq_sol1 [of "a \<cdot>\<^sub>s m" "a \<cdot>\<^sub>s (-\<^sub>a m)" "\<zero>"], assumption+,
        simp add:ag_inc_zero, assumption)
 apply (frule ag_mOp_closed [of "a \<cdot>\<^sub>s m"],
        simp add:ag_r_zero)
done

lemma (in Module) sc_minus_am1:"\<lbrakk>a \<in> carrier R; m \<in> carrier M\<rbrakk>
            \<Longrightarrow> -\<^sub>a (a \<cdot>\<^sub>s m) = (-\<^sub>a\<^bsub>R\<^esub> a) \<cdot>\<^sub>s m"
apply (cut_tac sc_Ring, frule Ring.ring_is_ag,
       frule aGroup.ag_mOp_closed [of R a], assumption+,
       frule sc_l_distr[of a "-\<^sub>a\<^bsub>R\<^esub> a" m], assumption+,
       simp add:aGroup.ag_r_inv1 [of "R"],
       simp add:sc_0_m, frule sym) apply (
       thin_tac "\<zero> = a \<cdot>\<^sub>s m \<plusminus> (-\<^sub>a\<^bsub>R\<^esub> a) \<cdot>\<^sub>s m")
 apply (frule sc_mem [of a m], assumption+,
        frule sc_mem [of "-\<^sub>a\<^bsub>R\<^esub> a" m], assumption+)
 apply (frule ag_eq_sol1 [of "a \<cdot>\<^sub>s m" "(-\<^sub>a\<^bsub>R\<^esub> a) \<cdot>\<^sub>s m" \<zero>], assumption+,
        simp add:ag_inc_zero, assumption)
 apply (frule ag_mOp_closed [of "a \<cdot>\<^sub>s m"])
 apply (thin_tac "a \<cdot>\<^sub>s m \<plusminus> (-\<^sub>a\<^bsub>R\<^esub> a) \<cdot>\<^sub>s m = \<zero>",
        simp add:ag_r_zero)
done

lemma (in Module) submodule_0:"submodule R M {\<zero>}" 
apply (simp add:submodule_def)
apply (simp add:ag_inc_zero)
apply (simp add:asubg_zero)
apply (rule allI, rule impI)
apply (simp add:sc_a_0)
done   

lemma (in Module) submodule_whole:"submodule R M (carrier M)" 
apply (simp add:submodule_def)
apply (simp add:asubg_whole)
apply ((rule allI)+, rule impI, erule conjE)
apply (simp add:sc_mem)
done

lemma (in Module) submodule_pOp_closed:"\<lbrakk>submodule R M H; h \<in> H; k \<in> H\<rbrakk> \<Longrightarrow> 
                  h \<plusminus> k \<in> H"
apply (simp add:submodule_def)
apply (erule conjE)+
apply (thin_tac "\<forall>a m. a \<in> carrier R \<and> m \<in> H \<longrightarrow> a \<cdot>\<^sub>s m \<in> H")
apply (simp add:asubg_pOp_closed)
done

lemma (in Module) submodule_mOp_closed:"\<lbrakk>submodule R M H; h \<in> H\<rbrakk>
                 \<Longrightarrow> -\<^sub>a h \<in> H"
apply (simp add:submodule_def,
       (erule conjE)+,
       thin_tac "\<forall>a m. a \<in> carrier R \<and> m \<in> H \<longrightarrow> a \<cdot>\<^sub>s m \<in> H")
apply (rule asubg_mOp_closed, assumption+)
done 

definition
  mHom :: "[('b, 'm) Ring_scheme, ('a, 'b, 'm1) Module_scheme, 
                    ('c, 'b, 'm2) Module_scheme] \<Rightarrow>  ('a \<Rightarrow> 'c) set"
  "mHom R M N = {f. f \<in> aHom M N \<and> 
             (\<forall>a\<in>carrier R. \<forall>m\<in>carrier M. f (a \<cdot>\<^sub>s\<^bsub>M\<^esub> m) = a \<cdot>\<^sub>s\<^bsub>N\<^esub> (f m))}"

definition
  mimg :: "[('b, 'm) Ring_scheme, ('a, 'b, 'm1) Module_scheme, 
           ('c, 'b, 'm2) Module_scheme, 'a \<Rightarrow> 'c] \<Rightarrow>  ('c, 'b) Module" 
                 ("(4mimg\<^bsub>_ _,_\<^esub>/ _)" [88,88,88,89]88) where
  "mimg\<^bsub>R M,N\<^esub> f = mdl N (f ` (carrier M))"

definition
  mzeromap :: "[('a, 'b, 'm1) Module_scheme, ('c, 'b, 'm2) Module_scheme]
                              \<Rightarrow> ('a \<Rightarrow> 'c)" where
  "mzeromap M N = (\<lambda>x\<in>carrier M. \<zero>\<^bsub>N\<^esub>)"

lemma (in Ring) mHom_func:"f \<in> mHom R M N \<Longrightarrow> f \<in> carrier M \<rightarrow> carrier N"
by (simp add:mHom_def aHom_def)

lemma (in Module) mHom_test:"\<lbrakk>R module N; f \<in> carrier M \<rightarrow> carrier N \<and> 
      f \<in> extensional (carrier M) \<and> 
     (\<forall>m\<in>carrier M. \<forall>n\<in>carrier M. f (m \<plusminus>\<^bsub>M\<^esub> n) = f m \<plusminus>\<^bsub>N\<^esub> (f n)) \<and> 
     (\<forall>a\<in>carrier R. \<forall>m\<in>carrier M. f (a \<cdot>\<^sub>s\<^bsub>M\<^esub> m) = a \<cdot>\<^sub>s\<^bsub>N\<^esub> (f m))\<rbrakk> \<Longrightarrow>
     f \<in> mHom R M N"  
apply (simp add:mHom_def)
apply (simp add:aHom_def)
done

lemma (in Module) mHom_mem:"\<lbrakk>R module N; f \<in> mHom R M N; m \<in> carrier M\<rbrakk>
 \<Longrightarrow> f m \<in> carrier N"
apply (simp add:mHom_def aHom_def) apply (erule conjE)+
apply (simp add:Pi_def)
done

lemma (in Module) mHom_add:"\<lbrakk>R module N; f \<in> mHom R M N; m \<in> carrier M; 
             n \<in> carrier M\<rbrakk> \<Longrightarrow> f (m \<plusminus> n) = f m \<plusminus>\<^bsub>N\<^esub> (f n)"
apply (simp add:mHom_def) apply (erule conjE)+
apply (frule Module.module_is_ag [of N R],
       cut_tac module_is_ag)
apply (simp add:aHom_add)
done 
 
lemma (in Module) mHom_0:"\<lbrakk>R module N; f \<in> mHom R M N\<rbrakk> \<Longrightarrow> f (\<zero>) = \<zero>\<^bsub>N\<^esub>"
apply (simp add:mHom_def, (erule conjE)+,
       frule Module.module_is_ag [of N],
       cut_tac module_is_ag)
apply (simp add:aHom_0_0)
done

lemma (in Module) mHom_inv:"\<lbrakk>R module N; m \<in> carrier M; f \<in> mHom R M N\<rbrakk> \<Longrightarrow> 
                 f (-\<^sub>a m) = -\<^sub>a\<^bsub>N\<^esub> (f m)"
apply (cut_tac module_is_ag,
       frule Module.module_is_ag [of N])
apply (simp add:mHom_def, (erule conjE)+)
apply (rule aHom_inv_inv, assumption+)
done

lemma (in Module) mHom_lin:"\<lbrakk>R module N; m \<in> carrier M; f \<in> mHom R M N;
                    a \<in> carrier R\<rbrakk> \<Longrightarrow> f (a \<cdot>\<^sub>s m) = a \<cdot>\<^sub>s\<^bsub>N\<^esub> (f m)"
apply (simp add:mHom_def)
done

lemma (in Module) mker_inc_zero:
           "\<lbrakk>R module N; f \<in> mHom R M N \<rbrakk> \<Longrightarrow> \<zero> \<in> (ker\<^bsub>M,N\<^esub> f)" 
apply (simp add:ker_def) 
apply (simp add:module_inc_zero)
apply (simp add:mHom_0)
done

lemma (in Module) mHom_eq_ker:"\<lbrakk>R module N; f \<in> mHom R M N; a \<in> carrier M; 
      b\<in> carrier M; a \<plusminus> (-\<^sub>a b) \<in> ker\<^bsub>M,N\<^esub> f\<rbrakk> \<Longrightarrow> f a = f b"
apply (simp add:ker_def, erule conjE)
apply (cut_tac module_is_ag,
       frule aGroup.ag_mOp_closed [of "M" "b"], assumption+,
       simp add:mHom_add, simp add:mHom_inv,
       thin_tac "aGroup M")
apply (frule mHom_mem [of N f a], assumption+,
       frule mHom_mem [of N f b], assumption+,
       frule Module.module_is_ag[of N]) 
apply (subst aGroup.ag_eq_diffzero[of N], assumption+)
done  

lemma (in Module) mHom_ker_eq:"\<lbrakk>R module N; f \<in> mHom R M N; a \<in> carrier M; 
      b\<in> carrier M; f a = f b\<rbrakk> \<Longrightarrow> a \<plusminus> (-\<^sub>a b) \<in> ker\<^bsub>M,N\<^esub> f"
apply (simp add:ker_def)
 apply (frule ag_mOp_closed[of b])
 apply (simp add:ag_pOp_closed)
 apply (simp add:mHom_add mHom_inv)
 apply (frule mHom_mem [of N f b], assumption+)
 apply (frule_tac R = R and M = N in Module.module_is_ag,
        simp add:aGroup.ag_r_inv1)
done
 
lemma (in Module) mker_submodule:"\<lbrakk>R module N; f \<in> mHom R M N\<rbrakk> \<Longrightarrow>
                                    submodule R M (ker\<^bsub>M,N\<^esub> f)"
apply (cut_tac module_is_ag,
       frule Module.module_is_ag [of N])
apply (simp add:submodule_def)
apply (rule conjI)
 apply (rule subsetI, simp add:ker_def)

apply (rule conjI)
 apply (simp add:mHom_def, (erule conjE)+, simp add:ker_subg)

apply ((rule allI)+, rule impI, erule conjE)
 apply (simp add:ker_def, erule conjE)
 apply (simp add:sc_mem)
apply (simp add:Module.sc_a_0[of N])
done

lemma (in Module) mker_mzeromap:"R module N \<Longrightarrow>
                         ker\<^bsub>M,N\<^esub> (mzeromap M N) = carrier M"
apply (simp add:ker_def mzeromap_def)
done

lemma (in Module) mdl_carrier:"submodule R M H \<Longrightarrow> carrier (mdl M H) = H"
apply (simp add:mdl_def)
done 

lemma (in Module) mdl_is_ag:"submodule R M H \<Longrightarrow> aGroup (mdl M H)"
apply (cut_tac module_is_ag)
apply (rule aGroup.intro)
 apply (simp add:mdl_def)
 apply (clarsimp simp: submodule_def asubg_pOp_closed)

 apply (simp add:mdl_def)
 apply (simp add:submodule_def, (erule conjE)+,
        frule_tac c = a in subsetD[of H "carrier M"], assumption+,
        frule_tac c = b in subsetD[of H "carrier M"], assumption+,
        frule_tac c = c in subsetD[of H "carrier M"], assumption+,
        simp add:aGroup.ag_pOp_assoc)

 apply (simp add:submodule_def, (erule conjE)+,
        simp add:mdl_def,
        frule_tac c = a in subsetD[of H "carrier M"], assumption+,
        frule_tac c = b in subsetD[of H "carrier M"], assumption+,
        simp add:aGroup.ag_pOp_commute)

 apply (simp add:mdl_def)
 apply (simp add:submodule_def aGroup.asubg_mOp_closed)

 apply (simp add:mdl_def,
        simp add:submodule_def, (erule conjE)+,
        frule_tac c = a in subsetD[of H "carrier M"], assumption+,
        rule aGroup.ag_l_inv1, assumption+)         

 apply (simp add:mdl_def,
        simp add:submodule_def, (erule conjE)+,
        simp add:asubg_inc_zero)

 apply (simp add:mdl_def, simp add:submodule_def, (erule conjE)+,
        frule_tac c = a in subsetD[of H "carrier M"], assumption+)
 apply (simp add:ag_l_zero)
done

lemma (in Module) mdl_is_module:"submodule R M H \<Longrightarrow> R module (mdl M H)" 
apply (rule Module.intro)
apply (simp add:mdl_is_ag)

apply (rule Module_axioms.intro)
apply (simp add:sc_Ring)

apply (simp add:mdl_def)
 apply (simp add:submodule_def) 

apply (simp add:mdl_def)
 apply (simp add:submodule_def, (erule conjE)+,
        frule_tac c = m in subsetD[of H "carrier M"], assumption+,
        simp add:sc_l_distr)

apply (simp add:mdl_def submodule_def, (erule conjE)+,
       simp add:asubg_pOp_closed,
       frule_tac c = m in subsetD[of H "carrier M"], assumption+,
       frule_tac c = n in subsetD[of H "carrier M"], assumption+,
       simp add:sc_r_distr)
apply (simp add:mdl_def submodule_def, (erule conjE)+,
       frule_tac c = m in subsetD[of H "carrier M"], assumption+,
       simp add:sc_assoc)
apply (simp add:mdl_def submodule_def, (erule conjE)+,
       frule_tac c = m in subsetD[of H "carrier M"], assumption+,
       simp add:sprod_one)
done   

lemma (in Module) submodule_of_mdl:"\<lbrakk>submodule R M H; submodule R M N; H \<subseteq> N\<rbrakk>
                   \<Longrightarrow> submodule R (mdl M N) H"
apply (subst submodule_def)
 apply (rule conjI, simp add:mdl_def)
 apply (rule conjI)
 apply (rule aGroup.asubg_test[of "mdl M N" H])
 apply (frule mdl_is_module[of N],
        simp add:Module.module_is_ag, simp add:mdl_def)
 apply (simp add:submodule_def[of R M H], (erule conjE)+)
 apply (frule asubg_inc_zero[of H], simp add:nonempty)

 apply ((rule ballI)+, simp add:mdl_def)
 apply (simp add:submodule_def[of R M H], (erule conjE)+)
 apply (frule_tac x = b in asubg_mOp_closed[of H], assumption+)
 apply (rule asubg_pOp_closed[of H], assumption+)

apply ((rule allI)+, rule impI, erule conjE)
 apply (simp add:mdl_def subsetD)
 apply (simp add:submodule_def[of R M H])
done

lemma (in Module) img_set_submodule:"\<lbrakk>R module N; f \<in> mHom R M N\<rbrakk> \<Longrightarrow>
         submodule R N (f ` (carrier M))"
apply (simp add:submodule_def)
apply (rule conjI)
 apply (rule subsetI)
 apply (simp add:image_def)
 apply (erule bexE, simp, thin_tac "x = f xa")
  apply (simp add:mHom_mem)
apply (rule conjI)
 apply (frule Module.module_is_ag [of N])
 apply (rule aGroup.asubg_test, assumption+)
 apply (rule subsetI) apply (simp add:image_def)
 apply (erule bexE) apply (simp add:mHom_mem)
 apply (cut_tac ag_inc_zero,
        simp add:mHom_mem,  simp add:nonempty)
 apply ((rule ballI)+, simp add:image_def)
 apply ((erule bexE)+, simp)
 apply (simp add:mHom_inv[THEN sym],
        frule_tac x = xa in ag_mOp_closed,
        simp add:mHom_add[THEN sym, of N f],
        frule_tac x = "x" and y = "-\<^sub>a xa" in ag_pOp_closed, assumption+)
 apply blast

apply ((rule allI)+, rule impI, erule conjE)
 apply (simp add:image_def, erule bexE, simp)
 apply (simp add:mHom_lin[THEN sym, of N _ f])
 apply (frule_tac a = a and m = x in sc_mem, assumption) 
 apply blast 
done

lemma (in Module) mimg_module:"\<lbrakk>R module N; f \<in> mHom R M N\<rbrakk> \<Longrightarrow>
                                              R module (mimg R M N f)"
apply (simp add:mimg_def)
apply (rule Module.mdl_is_module[of N R "f ` (carrier M)"], assumption)
apply (simp add:img_set_submodule)
done
   
lemma (in Module) surjec_to_mimg:"\<lbrakk>R module N; f \<in> mHom R M N\<rbrakk> \<Longrightarrow>
                                       surjec\<^bsub>M, (mimg R M N f)\<^esub> f"
apply (simp add:surjec_def)
apply (rule conjI)
 apply (simp add:aHom_def)
 apply (rule conjI)
 apply (simp add:mimg_def mdl_def)
 apply (rule conjI)
 apply (simp add:mHom_def aHom_def restrict_def extensional_def)
 apply ((rule ballI)+, simp add:mimg_def mdl_def, simp add:mHom_add)
apply (simp add:mimg_def mdl_def)
 apply (simp add:surj_to_def image_def)
done
 
definition
  tOp_mHom :: "[('b, 'm) Ring_scheme, ('a, 'b, 'm1) Module_scheme, 
    ('c, 'b, 'm2) Module_scheme] \<Rightarrow>  ('a \<Rightarrow> 'c) \<Rightarrow> ('a \<Rightarrow> 'c) \<Rightarrow> ('a \<Rightarrow> 'c)" where
  "tOp_mHom R M N f g = (\<lambda>x \<in> carrier M. (f x \<plusminus>\<^bsub>N\<^esub> (g x)))"

definition
  iOp_mHom :: "[('b, 'm) Ring_scheme, ('a, 'b, 'm1) Module_scheme, 
    ('c, 'b, 'm2) Module_scheme] \<Rightarrow>  ('a \<Rightarrow> 'c) \<Rightarrow> ('a \<Rightarrow> 'c)" where
  "iOp_mHom R M N f = (\<lambda>x \<in> carrier M. (-\<^sub>a\<^bsub>N\<^esub> (f x)))" 

definition
  sprod_mHom ::"[('b, 'm) Ring_scheme, ('a, 'b, 'm1) Module_scheme, 
    ('c, 'b, 'm2) Module_scheme] \<Rightarrow> 'b \<Rightarrow> ('a \<Rightarrow> 'c) \<Rightarrow> ('a \<Rightarrow> 'c)" where
  "sprod_mHom R M N a f = (\<lambda>x \<in> carrier M. a \<cdot>\<^sub>s\<^bsub>N\<^esub> (f x))"

definition
  HOM :: "[('b, 'more) Ring_scheme, ('a, 'b, 'more1) Module_scheme, 
    ('c, 'b, 'more2) Module_scheme] \<Rightarrow> ('a \<Rightarrow> 'c, 'b) Module"   
    ("(3HOM\<^bsub>_\<^esub> _/ _)" [90, 90, 91] 90) where
 "HOM\<^bsub>R\<^esub> M N = \<lparr>carrier = mHom R M N, pop = tOp_mHom R M N, 
  mop = iOp_mHom R M N, zero = mzeromap M N,  sprod =sprod_mHom R M N \<rparr>"

lemma (in Module) zero_HOM:"R module N \<Longrightarrow>
         mzeromap M N = \<zero>\<^bsub>HOM\<^bsub>R\<^esub> M N\<^esub>"
apply (simp add:HOM_def)
done

lemma (in Module) tOp_mHom_closed:"\<lbrakk>R module N; f \<in> mHom R M N; g \<in> mHom R M N\<rbrakk>
      \<Longrightarrow> tOp_mHom R M N f g \<in> mHom R M N"
apply (rule mHom_test, assumption+)
apply (rule conjI)
 apply (rule Pi_I)
 apply (simp add:tOp_mHom_def)
 apply (frule_tac f = f and m = x in mHom_mem [of N], assumption+,
        frule_tac f = g and m = x in mHom_mem [of N], assumption+,
        frule Module.module_is_ag [of N], 
        simp add:aGroup.ag_pOp_closed[of N])
apply (rule conjI)
 apply (simp add:tOp_mHom_def restrict_def extensional_def)
apply (rule conjI)
 apply (rule ballI)+
 apply (simp add:tOp_mHom_def)
 apply (simp add:ag_pOp_closed)
            
apply (frule_tac f = f and m = m in mHom_mem [of N], assumption+,
       frule_tac f = f and m = n in mHom_mem [of N], assumption+,
       frule_tac f = g and m = m in mHom_mem [of N], assumption+,
       frule_tac f = g and m = n in mHom_mem [of N], assumption+,
       simp add:mHom_add,
       frule Module.module_is_ag [of N],
       subst aGroup.pOp_assocTr43[of "N"], assumption+,
       frule_tac x = "f n" and y = "g m" in aGroup.ag_pOp_commute [of "N"],
                                                              assumption+)
apply simp
apply (subst aGroup.pOp_assocTr43[of "N"], assumption+, simp) 

apply (rule ballI)+
apply (simp add:tOp_mHom_def) 
apply (frule_tac a = a and m = m in sc_mem, assumption, simp) 
apply (frule_tac f = f and m = m in mHom_mem [of N], assumption+,
       frule_tac f = g and m = m in mHom_mem [of N], assumption+,
       frule_tac a = a and m = "f m" and n = "g m" in 
                                  Module.sc_r_distr[of N R], assumption+,
      simp)
apply (simp add:mHom_lin)
done

lemma (in Module) iOp_mHom_closed:"\<lbrakk>R module N; f \<in> mHom R M N\<rbrakk>
                                     \<Longrightarrow> iOp_mHom R M N f \<in> mHom R M N"
apply (rule mHom_test, assumption+)
apply (rule conjI)
 apply (rule Pi_I)
 apply (simp add:iOp_mHom_def)
 apply (frule_tac f = f and m = x in mHom_mem [of N], assumption+)
 apply (frule Module.module_is_ag [of N])
 apply (simp add:aGroup.ag_mOp_closed)
apply (rule conjI)
 apply (simp add:iOp_mHom_def restrict_def extensional_def)
apply (rule conjI) apply (rule ballI)+
 apply (simp add:iOp_mHom_def)
 apply (simp add:ag_pOp_closed)
 apply (simp add:mHom_add)
  apply (frule_tac f = f and m = m in mHom_mem [of N], assumption+,
         frule_tac f = f and m = n in mHom_mem [of N], assumption+)
 apply (frule Module.module_is_ag [of N])
 apply (simp add:aGroup.ag_p_inv)

apply (rule ballI)+
apply (simp add:iOp_mHom_def)
apply (simp add:sc_mem)
 apply (simp add:mHom_lin)
 apply (frule_tac f = f and m = m in mHom_mem [of N], assumption+)
 apply (simp add:Module.sc_minus_am[of N])
done

lemma (in Module) mHom_ex_zero:"R module N \<Longrightarrow>  mzeromap M N \<in> mHom R M N"
apply (simp add:mHom_def)
apply (rule conjI)
 apply (simp add:aHom_def,
        rule conjI,
        simp add:mzeromap_def, simp add:Module.module_inc_zero)

 apply (simp add:mzeromap_def extensional_def)

 apply ((rule ballI)+,
         simp add:ag_pOp_closed,
         frule Module.module_is_ag [of N],
         frule aGroup.ag_inc_zero [of "N"],
         simp add:aGroup.ag_l_zero)
apply ((rule ballI)+,
       simp add:mzeromap_def,
       simp add:sc_mem)
 apply (simp add:Module.sc_a_0)
done

lemma (in Module) mHom_eq:"\<lbrakk>R module N; f \<in> mHom R M N; g \<in> mHom R M N; 
                            \<forall>m\<in>carrier M. f m = g m\<rbrakk> \<Longrightarrow> f = g"  
apply (simp add:mHom_def aHom_def)
 apply (erule conjE)+
 apply (rule funcset_eq, assumption+)
done

lemma (in Module) mHom_l_zero:"\<lbrakk>R module N; f \<in> mHom R M N\<rbrakk>
              \<Longrightarrow> tOp_mHom R M N (mzeromap M N) f = f"
apply (frule mHom_ex_zero [of N])
apply (frule tOp_mHom_closed [of N "mzeromap M N" f], assumption+)
apply (rule mHom_eq, assumption+)
 apply (rule ballI)
 apply (simp add:tOp_mHom_def, simp add:mzeromap_def)
 apply (frule_tac f = f and m = m in mHom_mem [of N], assumption+)
 apply (frule Module.module_is_ag [of N])
 apply (simp add:aGroup.ag_l_zero[of N])
done

lemma  (in Module) mHom_l_inv:"\<lbrakk>R module N; f \<in> mHom R M N\<rbrakk>
       \<Longrightarrow> tOp_mHom R M N (iOp_mHom R M N f) f = mzeromap M N"
apply (frule mHom_ex_zero [of N])
apply (frule_tac f = f in iOp_mHom_closed [of N], assumption,
       frule_tac f = "iOp_mHom R M N f" and g = f in tOp_mHom_closed [of N],
        assumption+,
       frule mHom_ex_zero [of N])
apply (rule mHom_eq, assumption+, rule ballI)
 apply (simp add:tOp_mHom_def iOp_mHom_def, simp add:mzeromap_def)
 apply (frule_tac f = f and m = m in mHom_mem [of N], assumption+)
 apply (frule Module.module_is_ag [of N])
 apply (simp add:aGroup.ag_l_inv1)
done

lemma  (in Module) mHom_tOp_assoc:"\<lbrakk>R module N; f \<in> mHom R M N; g \<in> mHom R M N;
        h \<in> mHom R M N\<rbrakk> \<Longrightarrow> tOp_mHom R M N (tOp_mHom R M N f g) h =
          tOp_mHom R M N f (tOp_mHom R M N g h)"
apply (frule_tac f = f and g = g in tOp_mHom_closed [of N], assumption+,
       frule_tac f = "tOp_mHom R M N f g" and g = h in 
                      tOp_mHom_closed [of N], assumption+,
       frule_tac f = g and g = h in tOp_mHom_closed [of N], assumption+,
       frule_tac f = f and g = "tOp_mHom R M N g h" in 
                      tOp_mHom_closed [of N], assumption+) 
 apply (rule mHom_eq, assumption+, rule ballI,
        thin_tac "tOp_mHom R M N f g \<in> mHom R M N",
        thin_tac "tOp_mHom R M N (tOp_mHom R M N f g) h \<in> mHom R M N",
        thin_tac "tOp_mHom R M N g h \<in> mHom R M N",
        thin_tac "tOp_mHom R M N f (tOp_mHom R M N g h) \<in> mHom R M N")
 apply (simp add:tOp_mHom_def)
 apply (frule_tac f = f and m = m in mHom_mem [of N], assumption+,
        frule_tac f = g and m = m in mHom_mem [of N], assumption+,
        frule_tac f = h and m = m in mHom_mem [of N], assumption+)
apply (frule Module.module_is_ag [of N])
 apply (simp add:aGroup.ag_pOp_assoc)
done

lemma (in Module) mHom_tOp_commute:"\<lbrakk>R module N; f \<in> mHom R M N; 
        g \<in> mHom R M N\<rbrakk> \<Longrightarrow> tOp_mHom R M N f g = tOp_mHom R M N g f"
apply (frule_tac f = f and g = g in tOp_mHom_closed [of N], assumption+,
       frule_tac f = g and g = f in tOp_mHom_closed [of N], assumption+)
apply (rule mHom_eq, assumption+)
 apply (rule ballI)
 apply (thin_tac "tOp_mHom R M N f g \<in> mHom R M N",
        thin_tac "tOp_mHom R M N g f \<in> mHom R M N")
 apply (simp add:tOp_mHom_def)
 apply (frule_tac f = f and m = m in mHom_mem [of N], assumption+,
        frule_tac f = g and m = m in mHom_mem [of N], assumption+,
        frule Module.module_is_ag [of N])
 apply (simp add:aGroup.ag_pOp_commute)
done

lemma  (in Module) HOM_is_ag:"R module N \<Longrightarrow> aGroup (HOM\<^bsub>R\<^esub> M N)"
apply (rule aGroup.intro)
 apply (simp add:HOM_def)
 apply (simp add:tOp_mHom_closed)

apply (simp add:HOM_def)
 apply (simp add:mHom_tOp_assoc)

apply (simp add:HOM_def)
 apply (simp add:mHom_tOp_commute)

apply (simp add:HOM_def)
 apply (simp add:iOp_mHom_closed)

apply (simp add:HOM_def,
       simp add:mHom_l_inv)

apply (simp add:HOM_def)
 apply (simp add:mHom_ex_zero)

apply (simp add:HOM_def,
       simp add:mHom_l_zero)
done

lemma (in Module) sprod_mHom_closed:"\<lbrakk>R module N; a \<in> carrier R; 
       f \<in> mHom R M N\<rbrakk> \<Longrightarrow> sprod_mHom R M N a f \<in> mHom R M N"
apply (rule mHom_test, assumption+)
apply (rule conjI)
 apply (simp add:Pi_def)
 apply (rule allI, rule impI, simp add:sprod_mHom_def,
        frule_tac f = f and m = x in mHom_mem [of N], assumption+,
        simp add:Module.sc_mem [of N R a])
apply (rule conjI)
 apply (simp add:sprod_mHom_def restrict_def extensional_def)
apply (rule conjI)
 apply (rule ballI)+
 apply (frule_tac x = m and y = n in ag_pOp_closed, assumption+)
 apply (simp add:sprod_mHom_def)
apply (subst mHom_add [of N f], assumption+)
 apply (frule_tac f = f and m = m in mHom_mem [of N], assumption+, 
        frule_tac f = f and m = n in mHom_mem [of N], assumption+)
 apply (simp add:Module.sc_r_distr)

apply (rule ballI)+
 apply (simp add:sprod_mHom_def)
 apply (frule_tac a = aa and m = m in sc_mem, assumption+, simp)
 apply (simp add:mHom_lin) 
 apply (frule_tac f = f and m = m in mHom_mem [of N], assumption+)
apply (simp add:Module.sc_assoc[THEN sym, of N R]) 
apply (cut_tac sc_Ring, simp add:Ring.ring_tOp_commute)
done

lemma (in Module) HOM_is_module:"R module N \<Longrightarrow> R module (HOM\<^bsub>R\<^esub> M N)"
apply (rule Module.intro)
apply (simp add:HOM_is_ag)
apply (rule Module_axioms.intro)
 apply (simp add:sc_Ring)

 apply (simp add:HOM_def)
 apply (simp add:sprod_mHom_closed)

 apply (simp add:HOM_def)
 apply (cut_tac sc_Ring,
        frule Ring.ring_is_ag[of R],
        frule_tac x = a and y = b in aGroup.ag_pOp_closed[of R], assumption+,
        frule_tac a = "a \<plusminus>\<^bsub>R\<^esub> b" and f = m in sprod_mHom_closed[of N], 
        assumption+)
  apply(frule_tac a = a and f = m in sprod_mHom_closed[of N], assumption+,
        frule_tac a = b and f = m in sprod_mHom_closed[of N], assumption+,
        frule_tac f = "sprod_mHom R M N a m" and g = "sprod_mHom R M N b m" in
        tOp_mHom_closed[of N], assumption+)
  apply (rule mHom_eq[of N], assumption+, rule ballI,
         simp add:sprod_mHom_def tOp_mHom_def)
  apply (rename_tac a b f m)
  apply (frule_tac f = f and m = m in mHom_mem[of N], assumption+)
  apply (simp add:Module.sc_l_distr[of N])

apply (simp add:HOM_def)
 apply (rename_tac a f g,
        frule_tac f = f and g = g in tOp_mHom_closed[of N], assumption+,
        frule_tac a = a and f = "tOp_mHom R M N f g" in 
                                     sprod_mHom_closed[of N], assumption+,
        frule_tac a = a and f = f in sprod_mHom_closed[of N], assumption+,
        frule_tac a = a and f = g in sprod_mHom_closed[of N], assumption+,
        frule_tac f = "sprod_mHom R M N a f" and g = "sprod_mHom R M N a g" 
        in tOp_mHom_closed[of N], assumption+)   
 apply (rule mHom_eq[of N], assumption+, rule ballI,
        simp add:sprod_mHom_def tOp_mHom_def,
        frule_tac f = f and m = m in mHom_mem[of N], assumption+,
        frule_tac f = g and m = m in mHom_mem[of N], assumption+)
 apply (simp add:Module.sc_r_distr)

apply (simp add:HOM_def)
 apply (rename_tac a b f)
 apply (cut_tac sc_Ring,
        frule_tac x = a and y = b in Ring.ring_tOp_closed, assumption+,
        frule_tac a = "a \<cdot>\<^sub>r\<^bsub>R\<^esub> b" and f = f in sprod_mHom_closed[of N], 
                                                            assumption+,
        frule_tac a = b and f = f in sprod_mHom_closed[of N], assumption+,
        frule_tac a = a and f = "sprod_mHom R M N b f" in 
                                     sprod_mHom_closed[of N], assumption+) 
 apply (rule mHom_eq[of N], assumption+, rule ballI,
        simp add:sprod_mHom_def,
        frule_tac f = f and m = m in mHom_mem[of N], assumption+,
        simp add:Module.sc_assoc)

apply (simp add:HOM_def)
 apply (cut_tac sc_Ring,
        frule Ring.ring_one,
        frule_tac a = "1\<^sub>r\<^bsub>R\<^esub>" and f = m in sprod_mHom_closed[of N], assumption+)
 apply (rule mHom_eq, assumption+, rule ballI, rename_tac f m,
        simp add:sprod_mHom_def,
        frule_tac f = f and m = m in mHom_mem[of N], assumption+,
        simp add:Module.sprod_one)
done

section "Injective hom, surjective hom, bijective hom and inverse hom"

definition
  invmfun :: "[('b, 'm) Ring_scheme, ('a, 'b, 'm1) Module_scheme, 
              ('c, 'b, 'm2) Module_scheme, 'a \<Rightarrow> 'c] \<Rightarrow> 'c \<Rightarrow> 'a" where
  "invmfun R M N (f :: 'a \<Rightarrow> 'c) =
                    (\<lambda>y\<in>(carrier N). SOME x. (x \<in> (carrier M) \<and> f x = y))"

definition
  misomorphic :: "[('b, 'm) Ring_scheme, ('a, 'b, 'm1) Module_scheme, 
              ('c, 'b, 'm2) Module_scheme] \<Rightarrow> bool" where
  "misomorphic R M N \<longleftrightarrow> (\<exists>f. f \<in> mHom R M N \<and> bijec\<^bsub>M,N\<^esub> f)"

definition
  mId :: "('a, 'b, 'm1) Module_scheme \<Rightarrow> 'a \<Rightarrow> 'a"   ("(mId\<^bsub>_\<^esub>/ )" [89]88) where
  "mId\<^bsub>M\<^esub> = (\<lambda>m\<in>carrier M. m)"

definition
  mcompose :: "[('a, 'r, 'm1) Module_scheme, 'b \<Rightarrow> 'c, 'a \<Rightarrow> 'b] \<Rightarrow> 'a \<Rightarrow> 'c" where
  "mcompose M g f = compose (carrier M) g f"

abbreviation
  MISOM  ("(3_ \<cong>\<^bsub>_\<^esub> _)" [82,82,83]82) where
  "M \<cong>\<^bsub>R\<^esub> N == misomorphic R M N"

lemma (in Module) minjec_inj:"\<lbrakk>R module N; injec\<^bsub>M,N\<^esub> f\<rbrakk> \<Longrightarrow>
                            inj_on f (carrier M)" 
apply (simp add:inj_on_def, (rule ballI)+, rule impI)
 apply (simp add:injec_def, erule conjE)
 apply (frule Module.module_is_ag[of N])
 apply (cut_tac module_is_ag) 
 apply (frule_tac a = x in aHom_mem[of M N f], assumption+,
        frule_tac a = y in aHom_mem[of M N f], assumption+)
 apply (simp add:aGroup.ag_eq_diffzero[of N])
 apply (simp add:aHom_inv_inv[THEN sym, of M N f],
       frule_tac x = y in aGroup.ag_mOp_closed, assumption+,
       simp add:aHom_add[THEN sym, of M N f])
 apply (simp add:ker_def)
 apply (frule_tac x = x and y = "-\<^sub>a y" in ag_pOp_closed, assumption+)
 apply (subgoal_tac "(x \<plusminus> -\<^sub>a y) \<in> {a \<in> carrier M. f a = \<zero>\<^bsub>N\<^esub>}", simp)
 apply (simp add:ag_eq_diffzero)
 apply blast
done 

lemma (in Module) invmfun_l_inv:"\<lbrakk>R module N; bijec\<^bsub>M,N\<^esub> f; m \<in> carrier M\<rbrakk> \<Longrightarrow>
                            (invmfun R M N f) (f m) = m"
apply (simp add:bijec_def, erule conjE)
apply (frule minjec_inj [of N f], assumption+)
apply (simp add:surjec_def, erule conjE, simp add:aHom_def)
apply (frule conjunct1) 
apply (thin_tac "f \<in> carrier M \<rightarrow> carrier N \<and>
     f \<in> extensional (carrier M) \<and>
     (\<forall>a\<in>carrier M. \<forall>b\<in>carrier M. f (a \<plusminus> b) = f a \<plusminus>\<^bsub>N\<^esub> f b)")
apply (frule invfun_l [of "f" "carrier M" "carrier N" "m"], assumption+)
 apply (simp add:surj_to_def) 
apply (simp add:invfun_def invmfun_def)
done
 
lemma (in Module) invmfun_mHom:"\<lbrakk>R module N; bijec\<^bsub>M,N\<^esub> f; f \<in> mHom R M N \<rbrakk> \<Longrightarrow>
                 invmfun R M N f \<in> mHom R N M"
apply (frule minjec_inj [of N f])
 apply (simp add:bijec_def)
 apply (subgoal_tac "surjec\<^bsub>M,N\<^esub> f") prefer 2 apply (simp add:bijec_def)
 apply (rule Module.mHom_test) apply assumption apply (rule Module_axioms)

apply (rule conjI) 
 apply (simp add:surjec_def, erule conjE)
 apply (simp add:aHom_def, frule conjunct1)
 apply (thin_tac "f \<in> carrier M \<rightarrow> carrier N \<and>
     f \<in> extensional (carrier M) \<and>
     (\<forall>a\<in>carrier M. \<forall>b\<in>carrier M. f (a \<plusminus> b) = f a \<plusminus>\<^bsub>N\<^esub> f b)")
 apply (frule inv_func [of "f" "carrier M" "carrier N"], assumption+)
 apply (simp add:invmfun_def invfun_def)

apply (rule conjI)
 apply (simp add:invmfun_def restrict_def extensional_def)

apply (rule conjI)
 apply (rule ballI)+
 apply (simp add:surjec_def)
 apply (erule conjE, simp add:surj_to_def)
 apply (frule sym, thin_tac "f ` carrier M = carrier N", simp,
        thin_tac "carrier N = f ` carrier M")
 apply (simp add:image_def, (erule bexE)+, simp)
 apply (simp add:mHom_add[THEN sym])
 apply (frule_tac x = x and y = xa in ag_pOp_closed, assumption+)
 apply (simp add:invmfun_l_inv)

apply (rule ballI)+
 apply (simp add:surjec_def, erule conjE)
 apply (simp add:surj_to_def, frule sym, thin_tac "f ` carrier M = carrier N") 
 apply (simp add:image_def, (erule bexE)+, simp)
 apply (simp add:mHom_lin[THEN sym])
 apply (frule_tac a = a and m = x in sc_mem, assumption+)
 apply (simp add:invmfun_l_inv)
done

lemma (in Module) invmfun_r_inv:"\<lbrakk>R module N; bijec\<^bsub>M,N\<^esub> f; n \<in> carrier N\<rbrakk> \<Longrightarrow>
                           f ((invmfun R M N f) n) = n"
apply (frule minjec_inj[of N f])
 apply (simp add:bijec_def)
 apply (unfold bijec_def, frule conjunct2, fold bijec_def)
 apply (simp add:surjec_def, erule conjE, simp add:surj_to_def)
 apply (frule sym, thin_tac "f ` carrier M = carrier N", simp,
        thin_tac "carrier N = f ` carrier M")
 apply (simp add:image_def, erule bexE, simp)
 apply (simp add:invmfun_l_inv)
done

lemma (in Module) mHom_compos:"\<lbrakk>R module L; R module N; f \<in> mHom R L M; 
       g \<in> mHom R M N \<rbrakk> \<Longrightarrow> compos L g f \<in> mHom R L N" 
apply (simp add:mHom_def [of "R" "L" "N"])
 apply (frule Module.module_is_ag [of L],
        frule Module.module_is_ag [of N])

apply (rule conjI) 
 apply (simp add:mHom_def, (erule conjE)+)
   apply (rule aHom_compos[of L M N f], assumption+)
   apply (cut_tac module_is_ag, assumption+)

apply (rule ballI)+
apply (simp add:compos_def compose_def)
 apply (simp add:Module.sc_mem)
