theory Transport_Compositions_Agree_Base
  imports
    Transport_Base
begin

locale transport_comp_agree =
  g1 : galois L1 R1 l1 r1 + g2 : galois L2 R2 l2 r2
  for L1 :: "'a \<Rightarrow> 'a \<Rightarrow> bool"
  and R1 :: "'b \<Rightarrow> 'b \<Rightarrow> bool"
  and l1 :: "'a \<Rightarrow> 'b"
  and r1 :: "'b \<Rightarrow> 'a"
  and L2 :: "'b \<Rightarrow> 'b \<Rightarrow> bool"
  and R2 :: "'c \<Rightarrow> 'c \<Rightarrow> bool"
  and l2 :: "'b \<Rightarrow> 'c"
  and r2 :: "'c \<Rightarrow> 'b"
begin


notation L1 (infix "\<le>\<^bsub>L1\<^esub>" 50)
notation R1 (infix "\<le>\<^bsub>R1\<^esub>" 50)
notation L2 (infix "\<le>\<^bsub>L2\<^esub>" 50)
notation R2 (infix "\<le>\<^bsub>R2\<^esub>" 50)

notation g1.ge_left (infix "\<ge>\<^bsub>L1\<^esub>" 50)
notation g1.ge_right (infix "\<ge>\<^bsub>R1\<^esub>" 50)
notation g2.ge_left (infix "\<ge>\<^bsub>L2\<^esub>" 50)
notation g2.ge_right (infix "\<ge>\<^bsub>R2\<^esub>" 50)

notation g1.left_Galois (infix "\<^bsub>L1\<^esub>\<lessapprox>" 50)
notation g1.right_Galois (infix "\<^bsub>R1\<^esub>\<lessapprox>" 50)
notation g2.left_Galois (infix "\<^bsub>L2\<^esub>\<lessapprox>" 50)
notation g2.right_Galois (infix "\<^bsub>R2\<^esub>\<lessapprox>" 50)

notation g1.ge_Galois_left (infix "\<greaterapprox>\<^bsub>L1\<^esub>" 50)
notation g1.ge_Galois_right (infix "\<greaterapprox>\<^bsub>R1\<^esub>" 50)
notation g2.ge_Galois_left (infix "\<greaterapprox>\<^bsub>L2\<^esub>" 50)
notation g2.ge_Galois_right (infix "\<greaterapprox>\<^bsub>R2\<^esub>" 50)

notation g1.right_ge_Galois (infix "\<^bsub>R1\<^esub>\<greaterapprox>" 50)
notation g1.Galois_right (infix "\<lessapprox>\<^bsub>R1\<^esub>" 50)
notation g2.right_ge_Galois (infix "\<^bsub>R2\<^esub>\<greaterapprox>" 50)
notation g2.Galois_right (infix "\<lessapprox>\<^bsub>R2\<^esub>" 50)

notation g1.left_ge_Galois (infix "\<^bsub>L1\<^esub>\<greaterapprox>" 50)
notation g1.Galois_left (infix "\<lessapprox>\<^bsub>L1\<^esub>" 50)
notation g2.left_ge_Galois (infix "\<^bsub>L2\<^esub>\<greaterapprox>" 50)
notation g2.Galois_left (infix "\<lessapprox>\<^bsub>L2\<^esub>" 50)

notation g1.unit ("\<eta>\<^sub>1")
notation g1.counit ("\<epsilon>\<^sub>1")
notation g2.unit ("\<eta>\<^sub>2")
notation g2.counit ("\<epsilon>\<^sub>2")

abbreviation (input) "L \<equiv> L1"

definition "l \<equiv> l2 \<circ> l1"

lemma left_eq_comp: "l = l2 \<circ> l1"
  unfolding l_def ..

lemma left_eq [simp]: "l x = l2 (l1 x)"
  unfolding left_eq_comp by simp

context
begin

interpretation flip : transport_comp_agree R2 L2 r2 l2 R1 L1 r1 l1 .

abbreviation (input) "R \<equiv> flip.L"
abbreviation "r \<equiv> flip.l"

lemma right_eq_comp: "r = r1 \<circ> r2"
  unfolding flip.l_def ..

lemma right_eq [simp]: "r z = r1 (r2 z)"
  unfolding right_eq_comp by simp

lemmas transport_defs = left_eq_comp right_eq_comp

end

sublocale transport L R l r .

notation L (infix "\<le>\<^bsub>L\<^esub>" 50)
notation R (infix "\<le>\<^bsub>R\<^esub>" 50)

end

locale transport_comp_same =
  transport_comp_agree L1 R1 l1 r1 R1 R2 l2 r2
  for L1 :: "'a \<Rightarrow> 'a \<Rightarrow> bool"
  and R1 :: "'b \<Rightarrow> 'b \<Rightarrow> bool"
  and l1 :: "'a \<Rightarrow> 'b"
  and r1 :: "'b \<Rightarrow> 'a"
  and R2 :: "'c \<Rightarrow> 'c \<Rightarrow> bool"
  and l2 :: "'b \<Rightarrow> 'c"
  and r2 :: "'c \<Rightarrow> 'b"
begin


end


end