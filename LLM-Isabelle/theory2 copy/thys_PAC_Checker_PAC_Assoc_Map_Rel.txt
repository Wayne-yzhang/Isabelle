theory PAC_Assoc_Map_Rel
  imports PAC_Map_Rel
begin





lemma hassoc_map_rel_raw_empty[simp]:
  by (auto simp: hassoc_map_rel_raw_def br_def pure_def)


    by (auto intro!: precise_pure)
     (auto simp: single_valued_def hassoc_map_rel_raw_def
      br_def)

  definition hassoc_isEmpty :: "('k \<times> 'v) list \<Rightarrow> bool Heap" where
   "hassoc_isEmpty ht \<equiv> return (length ht = 0)"


 interpretation hassoc: bind_map_empty hassoc_map_assn hassoc_new
    by unfold_locales
     (auto intro: precise_hassoc_map_assn
         simp: ent_refl_true hassoc_new_def
       intro!: return_cons_rule)


  interpretation hassoc: bind_map_is_empty hassoc_map_assn hassoc_isEmpty
    by unfold_locales
      (auto simp: precise_hassoc_map_assn hassoc_isEmpty_def ent_refl_true
       intro!: precise_pure return_cons_rule)

  definition "op_assoc_empty \<equiv> IICF_Map.op_map_empty"

  interpretation hassoc: map_custom_empty op_assoc_empty
    by unfold_locales (simp add: op_assoc_empty_def)


  lemmas [sepref_fr_rules] = hassoc.empty_hnr[folded op_assoc_empty_def]

  definition hassoc_update :: "'k \<Rightarrow> 'v \<Rightarrow> ('k, 'v) hash_assoc \<Rightarrow> ('k, 'v) hash_assoc Heap" where
   "hassoc_update k v ht = return ((k, v ) # ht)"

  lemma hassoc_map_assn_Cons:
     by (auto simp: hassoc_map_rel_raw_def pure_def br_def)

  interpretation hassoc: bind_map_update hassoc_map_assn hassoc_update
    by unfold_locales
     (auto intro!: return_cons_rule
      simp: hassoc_update_def hassoc_map_assn_Cons)



  lemma hassoc_map_of_filter_all:
    apply (induction p)
    apply (auto simp: restrict_map_def fun_eq_iff split: if_split)
    apply presburger+
    done

   by (auto simp: hassoc_delete_def hassoc_map_rel_raw_def pure_def br_def
           hassoc_map_of_filter_all
         intro!: return_cons_rule)

  interpretation hassoc: bind_map_delete hassoc_map_assn hassoc_delete
    by unfold_locales
     (auto intro: hassoc_map_assn_hassoc_delete)



  lemma hassoc_map_assn_hassoc_lookup:
     by (auto simp: hassoc_lookup_def hassoc_map_rel_raw_def pure_def br_def
             hassoc_map_of_filter_all
           intro!: return_cons_rule)

  interpretation hassoc: bind_map_lookup hassoc_map_assn hassoc_lookup
    by unfold_locales
     (rule hassoc_map_assn_hassoc_lookup)

  setup Locale_Code.open_block
  interpretation hassoc: gen_contains_key_by_lookup hassoc_map_assn hassoc_lookup
    by unfold_locales
  setup Locale_Code.close_block

  interpretation hassoc: bind_map_contains_key hassoc_map_assn hassoc.contains_key
    by unfold_locales



definition hash_of_assoc_map where

lemma map_upd_map_add_left:
proof -
    by (metis (no_types) fun_upd_triv fun_upd_upd map_add_assoc map_add_empty map_add_upd
        map_le_iff_map_add_commute)
  then show ?thesis
    by auto
qed

lemma fold_map_of_alt:
  by (induction xs arbitrary: m')
    (auto simp: map_upd_map_add_left)

lemma map_of_alt_def:
  using fold_map_of_alt[of xs Map.empty]
  unfolding hash_of_assoc_map_def
  by auto

definition hashmap_conv where

lemma hash_of_assoc_map_id:
  by (auto intro!: fun_relI simp: hassoc_map_rel_raw_def br_def map_of_alt_def)

definition hassoc_map_rel where
  hassoc_map_rel_internal_def:

lemma hassoc_map_rel_def:
  unfolding relAPP_def hassoc_map_rel_internal_def
  by auto


end

