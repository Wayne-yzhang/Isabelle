theory StrongCopyTM
  imports
    WeakCopyTM
begin

However, if we run the strong machine on an empty list, the result is an empty list.
If we run the machine on a list with more than two numerals, this
strong variant will just return the first numeral of the list (a singleton list).

Thus, the result will be a list of two numerals only if we run it on a singleton list.

\<close>
    with \<open>inv_tm_skip_first_arg_len_eq_1 n (s,l,r)\<close> show False by auto
        with assms and cf_cases and \<open>s = 1\<close> show ?thesis
          with assms and \<open>r = a # rs\<close> and cf_cases and \<open>s = 1\<close>
          with assms and \<open>r = a # rs\<close> and cf_cases and \<open>s = 1\<close>
      with cf_cases and \<open>s=1\<close> show ?thesis by auto
        with assms and cf_cases and \<open>s = 2\<close>
        with \<open>r = []\<close> have "n2 = 0" by auto 
        moreover with \<open>n2 = 0\<close> and w_n1_n2
          with assms and \<open>r = a # rs\<close> and cf_cases and \<open>s = 2\<close>
          with assms and cf_cases and \<open>s = 2\<close>
          with \<open>r = a # rs\<close> and \<open>a = Oc\<close> have "Oc # rs = Oc \<up> n2" by auto
            from \<open>n2 > 0\<close> and w_n1_n2
            using  assms and \<open>r = a # rs\<close> and cf_cases and \<open>s = 2\<close> and w_n1_n2
      with cf_cases and \<open>s=2\<close> show ?thesis by auto
        with assms and cf_cases and \<open>s = 3\<close>
          using \<open>l = Bk # Oc \<up> (Suc n) \<and> r = []\<close> by auto
        with assms and cf_cases and \<open>s = 3\<close>
        with \<open>r = a # rs\<close> have False by auto
      with cf_cases and \<open>s=3\<close> show ?thesis by auto
        with assms and cf_cases and \<open>s = 4\<close> show ?thesis
          with assms and \<open>r = a # rs\<close> and cf_cases and \<open>s = 4\<close>
            moreover with \<open>n=0\<close> have "(5, Oc \<up> n, Oc \<up> (Suc 0) @ [Bk]) = (5, [], Oc \<up> (Suc 0) @ [Bk])" by auto
            with \<open>n=Suc n'\<close> have "Suc n' + Suc 0 = Suc n" by arith
            with \<open>(5, Oc \<up> n, Oc \<up> (Suc 0) @ [Bk]) = (5, Oc \<up> Suc n', Oc \<up> (Suc 0) @ [Bk])\<close>
              by (simp add: Suc \<open>Suc n' + Suc 0 = Suc n\<close>)
            using \<open>l = Oc \<up> (Suc n) \<and> r = [Bk]\<close> by auto
          with assms and \<open>r = a # rs\<close> and cf_cases and \<open>s = 4\<close>
      with cf_cases and \<open>s=4\<close> show ?thesis by auto
        with assms and cf_cases and \<open>s = 5\<close> show ?thesis
          with assms and \<open>r = a # rs\<close> and cf_cases and \<open>s = 5\<close>
          with \<open>a = Bk\<close> and \<open>r = a # rs\<close>
            using  assms and \<open>a = Bk\<close> and \<open>r = a # rs\<close> and cf_cases and \<open>s = 5\<close>
              and \<open>l = [] \<and> r = Bk # Oc \<up> Suc n2 @ [Bk] \<and> Suc n2 = Suc n\<close>
          with assms and \<open>r = a # rs\<close> and cf_cases and \<open>s = 5\<close>
          with \<open>a = Oc\<close> and \<open>r = a # rs\<close>
              from \<open>l = Oc \<up> Suc n1 \<and> r = Oc \<up> Suc n2 @ [Bk] \<and> Suc n1 + Suc n2 = Suc n\<close> 
              from \<open>l = [] \<and> r = Oc \<up> Suc n2 @ [Bk] \<and> Suc n2 = Suc n\<close>
                using \<open>l = [] \<and> r = Oc \<up> Suc n2 @ [Bk] \<and> Suc n2 = Suc n\<close>
                  and \<open>step0 (5, l, r) tm_skip_first_arg = (5, [], Bk # Oc \<up> Suc n2 @ [Bk])\<close>
              using  assms and \<open>a = Oc\<close> and \<open>r = a # rs\<close> and cf_cases and \<open>s = 5\<close>
                and \<open>l = [] \<and> r = Oc \<up> Suc n2 @ [Bk] \<and> Suc n2 = Suc n\<close>
      with cf_cases and \<open>s=5\<close> show ?thesis by auto
        with cf_cases and \<open>s=1\<close>
          with cf_cases and \<open>s=1\<close> and \<open>r = a # rs\<close>
          with cf_cases and \<open>s=1\<close> and \<open>r = a # rs\<close>
          with \<open>steps0 (1, [], <[n::nat]>) tm_skip_first_arg stp = (1, l, Oc#rs)\<close>
        from cf_cases and \<open>s=2\<close>
        with cf_cases  and \<open>s=2\<close> and INV
          with \<open>steps0 (1, [], <[n::nat]>) tm_skip_first_arg stp = (2, l, r)\<close>
          with \<open>steps0 (1, [], <[n::nat]>) tm_skip_first_arg stp = (2, l, [])\<close>
          with \<open>steps0 (1, [], <[n::nat]>) tm_skip_first_arg stp = (2, l, r)\<close>
          with \<open>steps0 (1, [], <[n::nat]>) tm_skip_first_arg stp = (2, l, Oc#Oc \<up> n2')\<close>
        from cf_cases and \<open>s=3\<close>
        with cf_cases  and \<open>s=3\<close> and INV
        with \<open>steps0 (1, [], <[n::nat]>) tm_skip_first_arg stp = (3, l, r)\<close>
        with \<open>steps0 (1, [], <[n::nat]>) tm_skip_first_arg stp = (3, Bk # Oc \<up> (Suc n), [])\<close>
        from cf_cases and \<open>s=4\<close>
        with cf_cases  and \<open>s=4\<close> and INV
        with \<open>steps0 (1, [], <[n::nat]>) tm_skip_first_arg stp = (4, l, r)\<close>
        with \<open>steps0 (1, [], <[n::nat]>) tm_skip_first_arg stp = (4, Oc \<up> (Suc n), [Bk])\<close>
        from cf_cases and \<open>s=5\<close>
        with cf_cases  and \<open>s=5\<close> and INV
          with \<open>steps0 (1, [], <[n::nat]>) tm_skip_first_arg stp = (5, l, r)\<close>
          with \<open>steps0 (1, [], <[n::nat]>) tm_skip_first_arg stp = (5, Oc \<up> Suc n1, Oc \<up> Suc n2 @ [Bk])\<close>
            with \<open>steps0 (1, [], <[n::nat]>) tm_skip_first_arg stp = (5, l, r)\<close>
            with \<open>steps0 (1, [], <[n::nat]>) tm_skip_first_arg stp = (5, [], Oc \<up> Suc n2 @ [Bk])\<close>
            with \<open>steps0 (1, [], <[n::nat]>) tm_skip_first_arg stp = (5, l, r)\<close>
            with \<open>steps0 (1, [], <[n::nat]>) tm_skip_first_arg stp = (5, [], Bk # Oc \<up> Suc n2 @ [Bk])\<close>
    with \<open>inv_tm_skip_first_arg_len_gt_1 n ns (s,l,r)\<close> show False by auto
    with assms and cf_cases and \<open>s = 1\<close> show ?thesis
        from \<open>l = Oc \<up> (Suc n1) \<and> r = [Bk] @ (<ns::nat list>) \<and> Suc n1 = Suc n\<close>
        using  assms and cf_cases and \<open>s = 2\<close> and w_n1_n2
        from \<open>l = Oc \<up> (Suc n1) \<and> r = Oc \<up> Suc n2' @ [Bk] @ (<ns::nat list>) \<and> Suc n1 + n2 = Suc n\<close>
        using  assms and cf_cases and \<open>s = 2\<close> and w_n1_n2
        using \<open>l = Oc \<up> (Suc n1) \<and> r = Oc \<up> Suc n2' @ [Bk] @ (<ns::nat list>) \<and> Suc n1 + n2 = Suc n\<close>
    moreover with \<open>length ns > 0\<close> have "(ns::nat list) \<noteq> [] \<and> hd (<ns::nat list>) = Oc"
      from \<open><ns> = Oc # tl (<ns>)\<close>
      also with  \<open><ns> = Oc # tl (<ns>)\<close> have "... =  (0, Bk # Oc \<up> (Suc n),  (<ns::nat list>))" by auto
    moreover with \<open>l = Bk # Oc \<up> (Suc n) \<and> r = (<ns::nat list>)\<close>
      using  assms and cf_cases and \<open>s = 3\<close> and unpackedINV
          from cf_cases and \<open>s=1\<close>
          with cf_cases  and \<open>s=1\<close> and INV
          with cf_cases and \<open>s=1\<close> and SUC_STEP_RED
          with \<open>steps0 (1, [], Oc \<up> Suc n @ [Bk] @ (<ns>)) tm_skip_first_arg stp = (1, l, r2)\<close>
          from cf_cases and \<open>s=2\<close>
          with cf_cases  and \<open>s=2\<close> and INV
            with \<open>steps0 (1, [],Oc \<up> Suc n @ [Bk] @ (<ns>)) tm_skip_first_arg stp = (2, l, r2)\<close>
            with \<open>steps0 (1, [],Oc \<up> Suc n @ [Bk] @ (<ns>)) tm_skip_first_arg stp = (2, l, [Bk] @ (<ns::nat list>))\<close>
            with \<open>steps0 (1, [], Oc \<up> Suc n @ [Bk] @ (<ns>)) tm_skip_first_arg stp = (2, l, r2)\<close>
            with \<open>steps0 (1, [], Oc \<up> Suc n @ [Bk] @ (<ns>)) tm_skip_first_arg stp = (2, l, Oc \<up> Suc n2'@Bk#(<ns>))\<close>
          from cf_cases and \<open>s=3\<close>
          with cf_cases  and \<open>s=3\<close> and INV
          with \<open>steps0 (1, [], Oc \<up> Suc n @ [Bk] @ (<ns>)) tm_skip_first_arg stp = (3, l, r2)\<close>
            from \<open>length ns > 0\<close> have "(ns::nat list) \<noteq> [] \<and> hd (<ns::nat list>) = Oc"
            also with \<open><ns::nat list> = Oc#(tl (<ns::nat list>))\<close>
          with \<open>steps0 (1, [], Oc \<up> Suc n @ [Bk] @ (<ns>)) tm_skip_first_arg stp = (3,  Bk # Oc \<up> (Suc n), (<ns::nat list>))\<close>
  from \<open>(nl::nat list) = hd nl # tl nl\<close>
  also with \<open>tl nl \<noteq> []\<close> have "... = <hd nl> @ [Bk] @ (<tl nl>)"
  also with \<open>(nl::nat list) \<noteq> []\<close> have "... = Oc \<up> Suc (hd nl) @ [Bk] @ (<tl nl>)"
  from \<open>tl nl \<noteq> []\<close> have "0 < length (tl nl)"
  with \<open><nl::nat list> = Oc \<up> Suc (hd nl) @ [Bk] @ (<tl nl>)\<close> have 
    with \<open>inv_tm_erase_right_then_dblBk_left_dnp CR (s,l,r)\<close> show False by auto
      with assms and cf_cases and \<open>s = 1\<close> show ?thesis
        with assms and cf_cases and \<open>s = 1\<close> and \<open>r = a # rs\<close> show ?thesis
        with assms and cf_cases and \<open>s = 1\<close> and \<open>r = a # rs\<close> show ?thesis
      from \<open>l = [] \<and> r = Bk#CR\<close>
      using  assms and cf_cases and \<open>s = 2\<close> and \<open>l = [] \<and> r = Bk#CR\<close>
      from \<open>l = [] \<and> r = Bk#Bk#CR\<close>
      using  assms and cf_cases and \<open>s = 3\<close> and \<open>l = [] \<and> r = Bk#Bk#CR\<close>
      from \<open>l = [Bk] \<and> r = Bk#CR\<close>
      using  assms and cf_cases and \<open>s = 4\<close> and \<open>l = [Bk] \<and> r = Bk#CR\<close>
        from cf_cases and \<open>s=1\<close>
        with cf_cases  and \<open>s=1\<close> and INV
        with cf_cases and \<open>s=1\<close> and SUC_STEP_RED
        also with \<open>r = []\<close> and \<open>l = [] \<and> r = r2\<close> have "... = (2,[],Bk#r2)"
        with \<open>steps0 (1, [], r) tm_erase_right_then_dblBk_left stp = (1, l, r2)\<close>
          from cf_cases and \<open>s=1\<close>
          with cf_cases  and \<open>s=1\<close> and INV
          with cf_cases and \<open>s=1\<close> and SUC_STEP_RED
          also with \<open>r = a # rs\<close> and \<open>a=Bk\<close> and \<open>l = [] \<and> r = r2\<close> have "... = (2,[],Bk#r2)"
          with \<open>steps0 (1, [], r) tm_erase_right_then_dblBk_left stp = (1, l, r2)\<close>
          from cf_cases and \<open>s=1\<close>
          with cf_cases  and \<open>s=1\<close> and INV
          with cf_cases and \<open>s=1\<close> and SUC_STEP_RED
          also with \<open>r = a # rs\<close> and \<open>a=Oc\<close> and \<open>l = [] \<and> r = r2\<close> have "... = (2,[],Bk#r2)"
          with \<open>steps0 (1, [], r) tm_erase_right_then_dblBk_left stp = (1, l, r2)\<close>
      with cf_cases  and \<open>s=2\<close> and INV
      with cf_cases and \<open>s=2\<close> and SUC_STEP_RED
      also with \<open>s=2\<close> and \<open>(l = []       \<and> r2 = Bk#r)\<close> have "... = (3,[],Bk#r2)"
      with \<open>steps0 (1, [], r) tm_erase_right_then_dblBk_left stp = (2, l, r2)\<close>
      with cf_cases  and \<open>s=3\<close> and INV
      with cf_cases and \<open>s=3\<close> and SUC_STEP_RED
      also with \<open>s=3\<close> and \<open>(l = []       \<and> r2 = Bk#Bk#r)\<close> have "... = (4,[Bk],Bk#r)"
      with \<open>steps0 (1, [], r) tm_erase_right_then_dblBk_left stp = (3, l, r2)\<close>
      with cf_cases  and \<open>s=4\<close> and INV
      with cf_cases and \<open>s=4\<close> and SUC_STEP_RED
      also with \<open>s=4\<close> and \<open>(l = [Bk]       \<and> r2 = Bk#r)\<close> have "... = (0,[Bk,Bk],r)"
      with \<open>steps0 (1, [], r) tm_erase_right_then_dblBk_left stp = (4, l, r2)\<close>
    with \<open>inv_tm_erase_right_then_dblBk_left_erp CL CR (s,l,r)\<close> show False by auto
      with assms and cf_cases and \<open>s = 1\<close> show ?thesis
        with assms and cf_cases and \<open>r = a # rs\<close> and \<open>s = 1\<close> show ?thesis
        with assms and cf_cases and \<open>r = a # rs\<close> and \<open>s = 1\<close> show ?thesis
      using  assms and cf_cases and \<open>s = 2\<close> and \<open>l = [Oc] @ CL \<and> r = Bk#CR\<close>
      using  assms and cf_cases and \<open>s = 3\<close> and \<open>l = CL \<and> r = Oc#Bk#CR\<close>
      with \<open>l = [Oc] @ CL \<and> r = Bk#CR\<close> and \<open>s = 5\<close> and \<open>CR = a # cs\<close>
      with \<open>s=5\<close> 
      using  assms and cf_cases and \<open>s = 5\<close> and \<open>l = [Oc] @ CL \<and> r = Bk#CR\<close>
    from \<open>( (CR = [] \<and> r = CR) \<or> (CR \<noteq> [] \<and> (r = CR \<or> r = Bk # tl CR)) )\<close> show ?thesis
        using  assms and cf_cases and \<open>s = 6\<close> and \<open>l = [Bk,Oc] @ CL\<close> and \<open>CR = [] \<and> r = CR\<close>
      from \<open>r = CR \<or> r = Bk # tl CR\<close>
            using  assms and cf_cases and \<open>s = 6\<close> and \<open>l = [Bk,Oc] @ CL\<close> and \<open>r = []\<close> 
          with \<open>r = CR\<close>  have "r = a # tl CR" by auto
              from \<open>CR \<noteq> []\<close> and \<open>r = CR\<close> and \<open>a = Bk\<close> and \<open>r = a # tl CR\<close> and \<open>l = [Bk,Oc] @ CL\<close> 
              using \<open>CR \<noteq> []\<close> and \<open>r = CR\<close> and \<open>a = Bk\<close> and \<open>r = a # tl CR\<close> and \<open>l = [Bk,Oc] @ CL\<close> and \<open>s = 6\<close> and cf_cases
              from \<open>CR \<noteq> []\<close> and \<open>r = CR\<close> and \<open>a = Oc\<close> and \<open>r = a # tl CR\<close> and \<open>l = [Bk,Oc] @ CL\<close> 
              using \<open>CR \<noteq> []\<close> and \<open>r = CR\<close> and \<open>a = Oc\<close> and \<open>r = a # tl CR\<close> and \<open>l = [Bk,Oc] @ CL\<close> and \<open>s = 6\<close> and cf_cases
        moreover with \<open>CR \<noteq> []\<close> and \<open>r = Bk # tl CR\<close>
          moreover with \<open>CR \<noteq> []\<close> have "(\<exists>rs. CR = rs @ tl CR)"
          using  assms and cf_cases and \<open>s = 6\<close> and \<open>CR \<noteq> []\<close> and \<open>r = Bk # tl CR\<close> and \<open>l = [Bk,Oc] @ CL\<close> and cf_cases        
      moreover with \<open>CR = rs\<close>
        using  assms and cf_cases and \<open>s = 7\<close> and w_lex_rs and \<open>CR = rs\<close> and \<open>r=[]\<close>
        with w_lex_rs and \<open>r = a # rs'\<close> have "CR = rs@(Bk#rs')" by auto
        moreover with \<open>CR = rs@(Bk#rs')\<close>
          moreover with \<open>r = a # rs'\<close> and \<open>a = Bk\<close> and \<open>CR = rs@(Bk#rs')\<close> have "\<exists>rs. CR = rs @ [Bk] @ rs'" by auto
          using  assms and cf_cases and \<open>s = 7\<close> and w_lex_rs and \<open>a = Bk\<close> and \<open>r = a # rs'\<close>
        with w_lex_rs and \<open>r = a # rs'\<close> have "CR = rs@(Oc#rs')" by auto
          moreover with \<open>r = a # rs'\<close> and \<open>a = Oc\<close> and \<open>CR = rs@(Oc#rs')\<close>         
          using  assms and cf_cases and \<open>s = 7\<close> and w_lex_rs and \<open>a = Oc\<close> and \<open>r = a # rs'\<close>
      using  assms and cf_cases and \<open>s = 8\<close> and w_lex_rs1_rs2
      moreover with \<open>CR = rs \<and> r = []\<close>
        from w_lex_rs and \<open>CR = rs \<and> r = []\<close>
        using  assms and cf_cases and \<open>s = 9\<close> and w_lex_rs and \<open>CR = rs \<and> r = []\<close>
        moreover with \<open>CR = rs @ [Bk] @ r\<close>
          from w_lex_rs and \<open>CR = rs @ [Bk] @ r\<close>
          with \<open>s=9\<close> show "inv_tm_erase_right_then_dblBk_left_erp CL CR (10, Bk \<up> lex @ [Bk,Oc] @ CL, [Bk])"
          using  assms and cf_cases and \<open>s = 9\<close> and w_lex_rs and \<open>r=[]\<close>
          with \<open>CR = rs @ [Bk] @ r\<close> and \<open>r = a # rs'\<close> have "CR = rs @ [Bk] @ Bk # rs'" by auto
          with \<open>CR = rs @ [Bk] @ r\<close> and \<open>r = a # rs'\<close> have "CR = rs @ [Bk] @ Oc # rs'" by auto
            moreover with \<open>r = a # rs'\<close> and \<open>a = Oc\<close> and \<open>CR = rs @ [Bk] @ Oc # rs'\<close>         
            using  assms and cf_cases and \<open>s = 9\<close> and w_lex_rs and \<open>a = Oc\<close> and \<open>r = a # rs'\<close>
        with \<open>l = Bk \<up> lex @ [Bk, Oc] @ CL\<close> have "l = [Bk, Oc] @ CL" by auto
          from \<open>l = [Bk, Oc] @ CL\<close> and \<open>r = Bk \<up> Suc rex\<close>
          with \<open>l = [Bk, Oc] @ CL\<close>
          using  assms and cf_cases and \<open>s = 10\<close> and  \<open>l = [Bk, Oc] @ CL\<close> and \<open>r = Bk \<up> Suc rex\<close>
        with \<open>l = Bk \<up> lex @ [Bk, Oc] @ CL\<close> have "l= Bk \<up> Suc nat @ [Bk, Oc] @ CL" by auto
          from \<open>l= Bk \<up> Suc nat @ [Bk, Oc] @ CL\<close> and \<open>r = Bk \<up> Suc rex\<close>
          with \<open>l= Bk \<up> Suc nat @ [Bk, Oc] @ CL\<close>
          using  assms and cf_cases and \<open>s = 10\<close> and \<open>l= Bk \<up> Suc nat @ [Bk, Oc] @ CL\<close> and \<open>r = Bk \<up> Suc rex\<close>
          from \<open>l = [Oc] @ CL\<close> and \<open>r = Bk \<up> Suc rex\<close>
          with \<open>l = [Oc] @ CL\<close>
          using  assms and cf_cases and \<open>s = 10\<close> and  \<open>l = [Oc] @ CL\<close> and \<open>r = Bk \<up> Suc rex\<close>
          with \<open>l = CL\<close> have "l = []" by auto
            from \<open>CL = []\<close>
            with \<open>l = []\<close>
            using  assms and cf_cases and \<open>s = 10\<close> and  \<open>l = []\<close> and \<open>r = Oc # Bk \<up> Suc rex\<close>
          with \<open>l = CL\<close> have "l =  a # cls" by auto
            with \<open>l =  a # cls\<close> have "l =  Bk # cls" by auto
            with \<open>a = Bk\<close> \<open>CL = a # cls\<close> have "CL = Bk # cls" by auto
              with \<open>CL = Bk # cls\<close> have "CL = [Bk]" by auto
              with \<open>l =  Bk # cls\<close> and \<open>cls = []\<close>
                with \<open>CL = Bk # cls\<close> and \<open>cls = a # cls'\<close> have "CL = Bk# Bk# cls'" by auto
                with \<open>noDblBk CL\<close> have False using noDblBk_def by auto
                with \<open>CL = Bk # cls\<close> and \<open>cls = a # cls'\<close> and \<open>l =  Bk # cls\<close>
                with \<open>cls = a # cls'\<close> and \<open>a=Oc\<close>
                with \<open>cls = a # cls'\<close> and \<open>a=Oc\<close>
              using  assms and cf_cases and \<open>s = 10\<close> and  \<open>l =  Bk # cls\<close> and \<open>r = Oc # Bk \<up> Suc rex\<close>
            with \<open>l =  a # cls\<close> have "l =  Oc # cls" by auto
              with \<open>CL = Oc # cls\<close> have "CL = [Oc]" by auto
              with \<open>l =  Oc # cls\<close> and \<open>cls = []\<close>
                with \<open>CL = Oc # cls\<close> and \<open>cls = a # cls'\<close> and \<open>l =  Oc # cls\<close>
                have "CL = Oc# Bk# cls'" and "l =  Oc # Bk # cls'" and "CL = l" and \<open>cls = Bk # cls'\<close> by auto
                from \<open>CL = Oc# Bk# cls'\<close> and \<open>noDblBk CL\<close>
                  by (metis (full_types) \<open>CL = Oc # cls\<close> \<open>cls = Bk # cls'\<close> append_Cons append_Nil cell.exhaust hasDblBk_L1 neq_Nil_conv)
                  with \<open>CL = Oc# Bk# cls'\<close> and \<open>CL = l\<close> and \<open>cls = Bk # cls'\<close>
                  with \<open>CL = Oc# Bk# []\<close> show "inv_tm_erase_right_then_dblBk_left_erp CL CR (11, cls, Oc # Oc # Bk \<up> Suc rex)" 
                  with \<open>CL = Oc# Bk# cls'\<close> and \<open>CL = l\<close> and \<open>cls = Bk # cls'\<close>
                with \<open>CL = Oc # cls\<close> and \<open>cls = a # cls'\<close> and \<open>l =  Oc # cls\<close>
                have "CL = Oc# Oc# cls'" and "l =  Oc # Oc # cls'" and "CL = l" and \<open>cls = Oc # cls'\<close> by auto
              using  assms and cf_cases and \<open>s = 10\<close> and  \<open>l =  Oc # cls\<close> and \<open>r = Oc # Bk \<up> Suc rex\<close>
        using  assms and cf_cases and \<open>s = 11\<close> and A_case
        from \<open>noDblBk CL\<close> show "noDblBk CL" .
        with A_case and \<open>ls2 = []\<close> show "inv_tm_erase_right_then_dblBk_left_erp CL CR (11, ls2, Oc#r)"
        with A_case and \<open>ls2 = [Bk]\<close> show "inv_tm_erase_right_then_dblBk_left_erp CL CR (11, ls2, Oc#r)"
        with A_case and \<open>ls2 = Bk # Oc # C3\<close> show "inv_tm_erase_right_then_dblBk_left_erp CL CR (11, ls2, Oc#r)"
        with A_case and \<open>ls2 = Oc # C3\<close> show "inv_tm_erase_right_then_dblBk_left_erp CL CR (11, ls2, Oc#r)"
        using  assms and cf_cases and \<open>s = 11\<close> and A_case
        using  assms and cf_cases and \<open>s = 11\<close> and A_case
          from \<open>noDblBk CL\<close> show "noDblBk CL" .
            from A_case \<open>rev ls1 = Bk#(rev bs)@[z]\<close> and \<open>ls2 = []\<close>
            with A_case \<open>rev ls1 = Bk#(rev bs)@[z]\<close> and \<open>ls2 = []\<close>
            with A_case \<open>rev ls1 = Bk#(rev bs)@[z]\<close> and \<open>ls2 = []\<close>
            using  assms and cf_cases and \<open>s = 11\<close> and A_case and \<open>rev ls1 = Bk#(rev bs)@[z]\<close> and \<open>ls2 = []\<close>
          with A_case \<open>rev ls1 = Bk#(rev bs)@[z]\<close> and \<open>ls2 = [Bk]\<close>
          with \<open>noDblBk CL\<close> have False               
            by (metis A_case  \<open>ls2 = [Bk]\<close> append_Cons hasDblBk_L5 major2)
          with \<open>noDblBk CL\<close> have False
            from A_case and \<open>rev ls1 = Bk # rev bs @ [z]\<close> and \<open>ls2 = Oc # C3\<close> and \<open>ls1 = z # bs @ [Bk]\<close>
            with A_case \<open>rev ls1 = Bk # rev bs @ [z]\<close> and \<open>ls2 = Oc # C3\<close> and \<open>ls1 = z # bs @ [Bk]\<close>
            using  assms and cf_cases and \<open>s = 11\<close> and A_case and \<open>rev ls1 = Bk#(rev bs)@[z]\<close> and  \<open>ls2 = Oc # C3\<close>
          from \<open>noDblBk CL\<close> show "noDblBk CL" .
            from A_case \<open>rev ls1 = Oc#(rev bs)@[z]\<close> and \<open>ls2 = []\<close>
            with A_case \<open>rev ls1 = Oc#(rev bs)@[z]\<close> and \<open>ls2 = []\<close>
            with A_case \<open>rev ls1 = Oc#(rev bs)@[z]\<close> and \<open>ls2 = []\<close>
            using  assms and cf_cases and \<open>s = 11\<close> and A_case and \<open>rev ls1 = Oc#(rev bs)@[z]\<close> and \<open>ls2 = []\<close>
            from A_case \<open>rev ls1 = Oc#(rev bs)@[z]\<close> and \<open>ls2 = [Bk]\<close>
            with A_case \<open>rev ls1 = Oc#(rev bs)@[z]\<close> and \<open>ls2 = [Bk]\<close>
            with A_case \<open>rev ls1 = Oc#(rev bs)@[z]\<close> and \<open>ls2 = [Bk]\<close> and \<open>CL = ls1@[Bk]\<close>
            using  assms and cf_cases and \<open>s = 11\<close> and A_case and \<open>rev ls1 = Oc#(rev bs)@[z]\<close> and \<open>ls2 = [Bk]\<close>
            from A_case and \<open>rev ls1 = Oc # rev bs @ [z]\<close> and \<open>ls2 = Bk # Oc # C3\<close> and \<open>ls1 = z # bs @ [Oc]\<close>
            with A_case \<open>rev ls1 = Oc # rev bs @ [z]\<close> and \<open>ls2 = Bk # Oc # C3\<close> and \<open>ls1 = z # bs @ [Oc]\<close>
            using  assms and cf_cases and \<open>s = 11\<close> and A_case and \<open>rev ls1 = Oc # rev bs @ [z]\<close> and \<open>ls2 = Bk # Oc # C3\<close>
            from A_case and \<open>rev ls1 = Oc # rev bs @ [z]\<close> and \<open>ls2 = Oc # C3\<close> and \<open>ls1 = z # bs @ [Oc]\<close>
            with A_case \<open>rev ls1 = Oc # rev bs @ [z]\<close> and \<open>ls2 = Oc # C3\<close> and \<open>ls1 = z # bs @ [Oc]\<close>
            using  assms and cf_cases and \<open>s = 11\<close> and A_case and \<open>rev ls1 = Oc # rev bs @ [z]\<close> and  \<open>ls2 = Oc # C3\<close>
        from A_case and \<open>rev ls1 = [Bk]\<close> 
        with A_case \<open>rev ls1 = [Bk]\<close>
        using  assms and cf_cases and \<open>s = 11\<close> and A_case and \<open>rev ls1 = [Bk]\<close> 
        using  assms and cf_cases and \<open>s = 11\<close> and A_case
        using  assms and cf_cases and \<open>s = 11\<close> and A_case
        using  assms and cf_cases and \<open>s = 11\<close> and A_case
        from \<open>noDblBk CL\<close> show "noDblBk CL" .
          by (metis Nil_is_append_conv \<open>ls1 \<noteq> []\<close> hd_Cons_tl hd_append2 list.simps(3) rev_is_Nil_conv)
          from A_case and \<open>ls2 = []\<close> have "rev ls1 = rev CL" by auto
          with A_case \<open>r = Oc#tl (rev ls1 @ Oc # Bk \<up> Suc rex)\<close> and \<open>ls2 = []\<close>
          using  assms and cf_cases and \<open>s = 12\<close> and A_case and \<open>ls2 = []\<close>
          by (metis Nil_is_append_conv \<open>ls1 \<noteq> []\<close> hd_Cons_tl hd_append2 list.simps(3) rev_is_Nil_conv)
          from A_case and \<open>ls2 = [Bk]\<close> have "CL = ls1 @ [Bk]" by auto
          with A_case \<open>r = Oc#tl (rev ls1 @ Oc # Bk \<up> Suc rex)\<close> and \<open>ls2 = [Bk]\<close>
          using  assms and cf_cases and \<open>s = 12\<close> and A_case and \<open>ls2 = [Bk]\<close>
          by (metis Nil_is_append_conv \<open>ls1 \<noteq> []\<close> hd_Cons_tl hd_append2 list.simps(3) rev_is_Nil_conv)
          from A_case and \<open>ls2 = Bk # Oc # C3\<close> have "CL = ls1 @ [Bk] @ (Oc # C3)" and "rev (ls1 @ [Bk]) = Bk # rev ls1" by auto
          with  \<open>ls1 \<noteq> []\<close>
          with A_case \<open>r = Oc#tl (rev ls1 @ Oc # Bk \<up> Suc rex)\<close> and \<open>ls2 = Bk # Oc # C3\<close>
          using  assms and cf_cases and \<open>s = 12\<close> and A_case and \<open>ls2 = Bk # Oc # C3\<close>
          by (metis Nil_is_append_conv \<open>ls1 \<noteq> []\<close> hd_Cons_tl hd_append2 list.simps(3) rev_is_Nil_conv)
          from A_case and \<open>ls2 = Oc # C3\<close> have "CL = ls1 @ [Oc] @ (C3)" and "rev (ls1 @ [Oc]) = Oc # rev ls1" by auto
          with  \<open>ls1 \<noteq> []\<close>
          with A_case \<open>r = Oc#tl (rev ls1 @ Oc # Bk \<up> Suc rex)\<close> and \<open>ls2 = Oc # C3\<close>
          using  assms and cf_cases and \<open>s = 12\<close> and A_case and \<open>ls2 = Oc # C3\<close>
        using  assms and cf_cases and \<open>s = 12\<close> and A_case 
        using  assms and cf_cases and \<open>s = 12\<close> and A_case 
        using  assms and cf_cases and \<open>s = 0\<close> and A_case 
        using  assms and cf_cases and \<open>s = 0\<close> and A_case 
      with cf_at_stp  and \<open>s=1\<close> and INV
        with unpacked_INV cf_at_stp and \<open>s=1\<close> and SUC_STEP_RED
          with unpacked_INV cf_at_stp and \<open>s=1\<close> and SUC_STEP_RED
          with unpacked_INV cf_at_stp and \<open>s=1\<close> and SUC_STEP_RED
      with cf_at_stp  and \<open>s=2\<close> and INV
      with unpacked_INV cf_at_stp and \<open>s=2\<close> and SUC_STEP_RED
      with cf_at_stp  and \<open>s=3\<close> and INV
      with unpacked_INV cf_at_stp and \<open>s=3\<close> and SUC_STEP_RED
      with cf_at_stp  and \<open>s=5\<close> and INV
      with unpacked_INV cf_at_stp and \<open>s=5\<close> and SUC_STEP_RED
      with cf_at_stp  and \<open>s=6\<close> and INV
        with unpacked_INV cf_at_stp and \<open>s=6\<close> and SUC_STEP_RED
          with unpacked_INV cf_at_stp and \<open>s=6\<close> and SUC_STEP_RED
          with unpacked_INV cf_at_stp and \<open>s=6\<close> and SUC_STEP_RED
      with cf_at_stp  and \<open>s=7\<close> and INV
        with unpacked_INV cf_at_stp and \<open>s=7\<close> and SUC_STEP_RED
          with unpacked_INV cf_at_stp and \<open>s=7\<close> and SUC_STEP_RED
          with unpacked_INV cf_at_stp and \<open>s=7\<close> and SUC_STEP_RED
      with cf_at_stp  and \<open>s=8\<close> and INV
      with  cf_at_stp and \<open>s=8\<close> and SUC_STEP_RED
      with cf_at_stp  and \<open>s=9\<close> and INV
          with unpacked_INV cf_at_stp and \<open>s=9\<close> and SUC_STEP_RED
            with unpacked_INV cf_at_stp and \<open>s=9\<close> and SUC_STEP_RED
            with unpacked_INV cf_at_stp and \<open>s=9\<close> and SUC_STEP_RED
        with unpacked_INV cf_at_stp and \<open>s=9\<close> and SUC_STEP_RED
      with cf_at_stp  and \<open>s=10\<close> and INV
        with unpacked_INV cf_at_stp and \<open>s=10\<close> and SUC_STEP_RED
          with \<open>lex = 0\<close> and cf_at_current and unpacked_INV show ?thesis
          with \<open>lex = Suc nat\<close> cf_at_current and unpacked_INV show ?thesis
        with unpacked_INV cf_at_stp and \<open>s=10\<close> and SUC_STEP_RED
          with unpacked_INV cf_at_stp and \<open>s=10\<close> and SUC_STEP_RED
            with unpacked_INV cf_at_stp and \<open>s=10\<close> and SUC_STEP_RED
            with unpacked_INV cf_at_stp and \<open>s=10\<close> and SUC_STEP_RED
      with cf_at_stp  and \<open>s=11\<close> and INV
        from unpacked_INV cf_at_stp and \<open>s=11\<close> and SUC_STEP_RED
        from unpacked_INV cf_at_stp and \<open>s=11\<close> and SUC_STEP_RED
        from unpacked_INV cf_at_stp and \<open>s=11\<close> and SUC_STEP_RED
            from \<open>noDblBk CL\<close> show "noDblBk CL" .
            with A_case major2 cf_at_stp and \<open>s=11\<close> and SUC_STEP_RED
            with A_case \<open>rev ls1 = Bk#(rev bs)@[z]\<close> and \<open>ls2 = [Bk]\<close>
            with \<open>noDblBk CL\<close> have False               
              by (metis A_case  \<open>ls2 = [Bk]\<close> append_Cons hasDblBk_L5 major2)
            with \<open>noDblBk CL\<close> have False
            with A_case major2 cf_at_stp and \<open>s=11\<close> and SUC_STEP_RED
            from \<open>noDblBk CL\<close> show "noDblBk CL" .
            with A_case major2 cf_at_stp and \<open>s=11\<close> and SUC_STEP_RED
            with A_case major2 cf_at_stp and \<open>s=11\<close> and SUC_STEP_RED
            with A_case major2 cf_at_stp and \<open>s=11\<close> and SUC_STEP_RED
            with A_case major2 cf_at_stp and \<open>s=11\<close> and SUC_STEP_RED
        from unpacked_INV cf_at_stp and \<open>s=11\<close> and SUC_STEP_RED
        from unpacked_INV cf_at_stp and \<open>s=11\<close> and SUC_STEP_RED
        from unpacked_INV cf_at_stp and \<open>s=11\<close> and SUC_STEP_RED
        also with unpacked_INV and \<open>hd (rev CL) = Bk\<close>
        from unpacked_INV cf_at_stp and \<open>s=11\<close> and SUC_STEP_RED
        also with unpacked_INV and \<open>hd (rev CL) = Oc\<close>
        with cf_at_current and unpacked_INV and \<open>hd (rev CL) = Oc\<close> show ?thesis
      with cf_at_stp  and \<open>s=12\<close> and INV
          by (metis Nil_is_append_conv \<open>ls1 \<noteq> []\<close> hd_Cons_tl hd_append2 list.simps(3) rev_is_Nil_conv)
          from \<open>noDblBk CL\<close> show "noDblBk CL" .
          with unpacked_INV minor minor2 major cf_at_stp and \<open>s=12\<close> and \<open>ls1 \<noteq> []\<close> and SUC_STEP_RED
          with unpacked_INV minor major minor2 cf_at_current \<open>ls1 \<noteq> []\<close> show ?thesis
          with unpacked_INV minor minor2 major cf_at_stp and \<open>s=12\<close> and \<open>ls1 \<noteq> []\<close> and SUC_STEP_RED
          with unpacked_INV minor major minor2 cf_at_current \<open>ls1 \<noteq> []\<close> show ?thesis
          with unpacked_INV minor minor2 major cf_at_stp and \<open>s=12\<close> and \<open>ls1 \<noteq> []\<close> and SUC_STEP_RED
          with unpacked_INV minor major minor2 cf_at_current \<open>ls1 \<noteq> []\<close> show ?thesis
          with unpacked_INV minor minor2 major cf_at_stp and \<open>s=12\<close> and \<open>ls1 \<noteq> []\<close> and SUC_STEP_RED
          with unpacked_INV minor major minor2 cf_at_current \<open>ls1 \<noteq> []\<close> show ?thesis
        with cf_at_stp and \<open>s=12\<close> and SUC_STEP_RED
        with cf_at_stp and \<open>s=12\<close> and SUC_STEP_RED
      \<open><rev [last (take n nl)]> = Oc \<up> Suc (last (take n nl))\<close>
      \<open>Oc \<up> Suc (last (take n nl)) = Oc # Oc \<up> last (take n nl)\<close>
      \<open>butlast (take n nl) \<noteq> []\<close> \<open>rev (<take n nl>) = <rev [last (take n nl)]> @ [Bk] @ <rev (butlast (take n nl))>\<close>
