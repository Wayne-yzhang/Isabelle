theory EM
  imports MM
begin


locale EM = M +
  assumes strong_supplementation: 
    "\<not> P x y \<Longrightarrow> (\<exists>z. P z x \<and> \<not> O z y)"
begin


lemma weak_supplementation: "PP x y \<Longrightarrow> (\<exists>z. P z y \<and> \<not> O z x)"
proof -
  assume "PP x y"
  hence "\<not> P y x" by (rule proper_implies_not_part)
  thus "\<exists>z. P z y \<and> \<not> O z x" by (rule strong_supplementation)
qed

end


sublocale EM \<subseteq> MM
proof
  fix y x
  show "PP y x \<Longrightarrow> \<exists>z. P z x \<and> \<not> O z y" using weak_supplementation.
qed


context EM
begin

lemma proper_parts_principle:
"(\<exists>z. PP z x) \<Longrightarrow> (\<forall>z. PP z x \<longrightarrow> P z y) \<Longrightarrow> P x y"
proof -
  assume "\<exists>z. PP z x"
  then obtain v where v: "PP v x"..
  hence "P v x" by (rule proper_implies_part)
  assume antecedent: "\<forall>z. PP z x \<longrightarrow> P z y"
  hence "PP v x \<longrightarrow> P v y"..
  hence "\<exists>v. P v x \<and> P v y"..
  with overlap_eq have "O x y"..
  show "P x y"
  proof (rule ccontr)
    assume "\<not> P x y"
    hence "\<exists>z. P z x \<and> \<not> O z y"
      by (rule strong_supplementation)
    then obtain z where z: "P z x \<and> \<not> O z y"..
    hence "P z x"..
    moreover have "z \<noteq> x"
    proof
      assume "z = x"
      moreover from z have "\<not> O z y"..
      ultimately have "\<not> O x y" by (rule subst)
    qed
    ultimately have "P z x \<and> z \<noteq> x"..
    with nip_eq have "PP z x"..
    from antecedent have "PP z x \<longrightarrow> P z y"..
    hence "O z y" by (rule part_implies_overlap)
    from z have "\<not> O z y"..
  qed
qed


theorem proper_part_extensionality:
"(\<exists>z. PP z x \<or> PP z y) \<Longrightarrow> x = y \<longleftrightarrow> (\<forall>z. PP z x \<longleftrightarrow> PP z y)"
proof -
  assume antecedent: "\<exists>z. PP z x \<or> PP z y"
  show "x = y \<longleftrightarrow> (\<forall>z. PP z x \<longleftrightarrow> PP z y)"
  proof
    assume "x = y"
    moreover have "\<forall>z. PP z x \<longleftrightarrow> PP z x" by simp
    ultimately show "\<forall>z. PP z x \<longleftrightarrow> PP z y" by (rule subst)
  next
    assume right: "\<forall>z. PP z x \<longleftrightarrow> PP z y"
    have "\<forall>z. PP z x \<longrightarrow> P z y"
    proof
      fix z
      show "PP z x \<longrightarrow> P z y"
      proof
        assume "PP z x"
        from right have "PP z x \<longleftrightarrow> PP z y"..
        thus "P z y" by (rule proper_implies_part)
      qed
    qed
    have "\<forall>z. PP z y \<longrightarrow> P z x"
    proof
      fix z
      show "PP z y \<longrightarrow> P z x"
      proof
        assume "PP z y"
        from right have "PP z x \<longleftrightarrow> PP z y"..
        thus "P z x" by (rule proper_implies_part)
      qed
    qed
    from antecedent obtain z where z: "PP z x \<or> PP z y"..
    thus "x = y"
    proof (rule disjE)
      assume "PP z x"
      hence "\<exists>z. PP z x"..
        by (rule proper_parts_principle)
      from right have "PP z x \<longleftrightarrow> PP z y"..
      hence "\<exists>z. PP z y"..
        by (rule proper_parts_principle)
        by (rule part_antisymmetry)
    next
      assume "PP z y"
      hence "\<exists>z. PP z y"..
        by (rule proper_parts_principle)
      from right have "PP z x \<longleftrightarrow> PP z y"..
      hence "\<exists>z. PP z x"..
          by (rule proper_parts_principle)
      thus "x = y"
    qed
  qed
qed

