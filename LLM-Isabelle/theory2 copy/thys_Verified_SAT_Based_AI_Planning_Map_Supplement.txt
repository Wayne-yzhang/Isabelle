theory Map_Supplement
imports Main
begin

lemma map_of_defined_if_constructed_from_list_of_constant_assignments:
  "l = map (\<lambda>x. (x, a)) xs \<Longrightarrow> \<forall>x \<in> set xs. (map_of l) x = Some a" 
proof (induction xs arbitrary: l)
  case (Cons x xs)
  let ?l' = "map (\<lambda>v. (v, a)) xs"
  from Cons.prems(1) have "l = (x, a) # map (\<lambda>v. (v, a)) xs" 
    by force
  moreover have "\<forall>v \<in> set xs. (map_of ?l') v = Some a" 
    using Cons.IH[where l="?l'"]
    by blast
  ultimately show ?case
    by auto
qed auto

lemma map_of_from_function_graph_is_some_if:
  fixes f :: "'a \<Rightarrow> 'b"
  assumes "set xs \<noteq> {}"
   and "x \<in> set xs"
  shows "(map_of (map (\<lambda>x. (x, f x)) xs)) x = Some (f x)" 
  using assms 
proof (induction xs arbitrary: f x)
  case (Cons a xs)
    thm Cons
    let ?m = "map_of (map (\<lambda>x. (x, f x)) xs)" 
    have a: "map_of (map (\<lambda>x. (x, f x)) (Cons a xs)) = ?m(a \<mapsto> f a)" 
      unfolding map_of_def
      by simp
    thus ?case 
      proof(cases "x = a")
        case False
        thus ?thesis 
        proof (cases "set xs = {}")
            case True
            thus ?thesis 
              using Cons.prems(2)
              by fastforce
          next
            case False
            then have "x \<in> set xs" 
              by fastforce
            moreover have "map_of (map (\<lambda>x. (x, f x)) (Cons a xs)) x = ?m x"
              by fastforce
            ultimately show ?thesis 
              using Cons.IH[OF False]
              by presburger
          qed 
      qed force
    qed blast

lemma foldl_map_append_is_some_if:
  assumes "b x = Some y \<or> (\<exists>m \<in> set ms. m x = Some y)" 
    and "\<forall>m' \<in> set ms. m' x = Some y \<or> m' x = None"
  shows "foldl (++) b ms x = Some y" 
using assms
proof (induction ms arbitrary: b)
