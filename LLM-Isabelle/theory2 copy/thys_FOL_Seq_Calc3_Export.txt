theory Export imports Prover begin


declare Stream.smember_code [code del]
  unfolding Stream.smember_def by auto

code_printing
  constant the \<rightharpoonup> (Haskell) "(\\x -> case x of { Just y -> y })"
  | constant Option.is_none \<rightharpoonup> (Haskell) "(\\x -> case x of { Just y -> False; Nothing -> True })"

code_identifier
  code_module Product_Type \<rightharpoonup> (Haskell) Arith
  | code_module Orderings \<rightharpoonup> (Haskell) Arith
  | code_module Arith \<rightharpoonup> (Haskell) Prover
  | code_module MaybeExt \<rightharpoonup> (Haskell) Prover
  | code_module List \<rightharpoonup> (Haskell) Prover
  | code_module Nat_Bijection \<rightharpoonup> (Haskell) Prover
  | code_module Syntax \<rightharpoonup> (Haskell) Prover
  | code_module Encoding \<rightharpoonup> (Haskell) Prover
  | code_module HOL \<rightharpoonup> (Haskell) Prover
  | code_module Set \<rightharpoonup> (Haskell) Prover
  | code_module FSet \<rightharpoonup> (Haskell) Prover
  | code_module Stream \<rightharpoonup> (Haskell) Prover
  | code_module Fair_Stream \<rightharpoonup> (Haskell) Prover
  | code_module Sum_Type \<rightharpoonup> (Haskell) Prover
  | code_module Abstract_Completeness \<rightharpoonup> (Haskell) Prover
  | code_module Export \<rightharpoonup> (Haskell) Prover

export_code open prove in Haskell


end
