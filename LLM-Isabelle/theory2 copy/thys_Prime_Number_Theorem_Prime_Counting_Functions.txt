theory Prime_Counting_Functions
  imports Prime_Number_Theorem_Library
begin



definition prime_sum_upto :: "(nat \<Rightarrow> 'a) \<Rightarrow> real \<Rightarrow> 'a :: semiring_1" where
  "prime_sum_upto f x = (\<Sum>p | prime p \<and> real p \<le> x. f p)"

lemma prime_sum_upto_altdef1:
  "prime_sum_upto f x = sum_upto (\<lambda>p. ind prime p * f p) x"
  unfolding sum_upto_def prime_sum_upto_def
  by (intro sum.mono_neutral_cong_left finite_subset[OF _ finite_Nats_le_real[of x]])
     (auto dest: prime_gt_1_nat simp: ind_def)

lemma prime_sum_upto_altdef2:
  "prime_sum_upto f x = (\<Sum>p | prime p \<and> p \<le> nat \<lfloor>x\<rfloor>. f p)"
  unfolding sum_upto_altdef prime_sum_upto_altdef1
  by (intro sum.mono_neutral_cong_right) (auto simp: ind_def dest: prime_gt_1_nat)

lemma prime_sum_upto_altdef3:
  "prime_sum_upto f x = (\<Sum>p\<leftarrow>primes_upto (nat \<lfloor>x\<rfloor>). f p)"
proof -
  have "(\<Sum>p\<leftarrow>primes_upto (nat \<lfloor>x\<rfloor>). f p) = (\<Sum>p | prime p \<and> p \<le> nat \<lfloor>x\<rfloor>. f p)"
    by (subst sum_list_distinct_conv_sum_set) (auto simp: set_primes_upto conj_commute)
  thus ?thesis by (simp add: prime_sum_upto_altdef2)
qed

lemma prime_sum_upto_eqI:
  assumes "a \<le> b" "\<And>k. k \<in> {nat \<lfloor>a\<rfloor><..nat\<lfloor>b\<rfloor>} \<Longrightarrow> \<not>prime k"
  shows   "prime_sum_upto f a = prime_sum_upto f b"
proof -
  have *: "k \<le> nat \<lfloor>a\<rfloor>" if "k \<le> nat \<lfloor>b\<rfloor>" "prime k" for k
    using that assms(2)[of k] by (cases "k \<le> nat \<lfloor>a\<rfloor>") auto
  from assms(1) have "nat \<lfloor>a\<rfloor> \<le> nat \<lfloor>b\<rfloor>" by linarith
  hence "(\<Sum>p | prime p \<and> p \<le> nat \<lfloor>a\<rfloor>. f p) = (\<Sum>p | prime p \<and> p \<le> nat \<lfloor>b\<rfloor>. f p)"
    using assms by (intro sum.mono_neutral_left) (auto dest: *)
(*<*)
(*>*)
