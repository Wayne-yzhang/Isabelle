theory Network_Model
  imports
    "infrastructure/Agents"
    "infrastructure/Tools"
    "infrastructure/Take_While"
begin

type_synonym ifs = nat

record ahi = 
  UpIF :: "ifs option"
  DownIF :: "ifs option"
  ASID :: as

type_synonym 'aahi ahis = "'aahi ahi_scheme"

locale network_model = compromised + 
  fixes
   auth_seg0 :: "('ainfo \<times> 'aahi ahi_scheme list) set" 
   and tgtas :: "as \<Rightarrow> ifs \<Rightarrow> as option"
   and tgtif :: "as \<Rightarrow> ifs \<Rightarrow> ifs option"
begin


fun if_valid :: "'aahi ahis option \<Rightarrow> 'aahi ahis => 'aahi ahis option \<Rightarrow> bool" where
    = True"
| "if_valid (Some hf1) (hf2) _
    = ((\<exists>downif . DownIF hf2 = Some downif \<and> 
        tgtas (ASID hf2) downif = Some (ASID hf1) \<and>
        tgtif (ASID hf2) downif = UpIF hf1)
      \<or> ASID hf1 \<in> bad \<and> ASID hf2 \<in> bad)"

fun terminated :: "'aahi ahis list \<Rightarrow> bool" where
  "terminated (hf#xs) \<longleftrightarrow> DownIF hf = None \<or> ASID hf \<in> bad"

fun rooted :: "'aahi ahis list \<Rightarrow> bool" where
  "rooted [hf] \<longleftrightarrow> UpIF hf = None \<or> ASID hf \<in> bad"
| "rooted (hf#xs) = rooted xs"

abbreviation ifs_valid where 
  "ifs_valid pre l nxt \<equiv> TW.holds if_valid pre l nxt"

abbreviation ifs_valid_prefix where 
  "ifs_valid_prefix pre l nxt \<equiv> TW.takeW if_valid pre l nxt"

abbreviation ifs_valid_None where 
  "ifs_valid_None l \<equiv> ifs_valid None l None"

abbreviation ifs_valid_None_prefix where 
  "ifs_valid_None_prefix l \<equiv> ifs_valid_prefix None l None"

lemma strip_ifs_valid_prefix:
  "pfragment ainfo l auth_seg0 \<Longrightarrow> pfragment ainfo (ifs_valid_prefix pre l nxt) auth_seg0"
  by (auto elim: pfragment_prefix' intro: TW.takeW_prefix)


abbreviation rev_link :: "as \<Rightarrow> ifs \<Rightarrow> as option \<times> ifs option" where 
  "rev_link a1 i1 \<equiv> (tgtas a1 i1, tgtif a1 i1)"

end
end
