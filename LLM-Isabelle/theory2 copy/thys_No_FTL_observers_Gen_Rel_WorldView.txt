
theory WorldView
  imports Points
begin



class WorldView = Points + 
fixes
  W :: "Body \<Rightarrow> Body \<Rightarrow> 'a Point \<Rightarrow> bool" ("_ sees _ at _")
begin

abbreviation ev :: "Body \<Rightarrow> 'a Point \<Rightarrow> Body set"
  where "ev h x \<equiv> { b . h sees b at x }"

fun wvt :: "Body \<Rightarrow> Body \<Rightarrow> 'a Point \<Rightarrow> 'a Point set"
  where "wvt m k p = { q. (\<exists> b . (m sees b at p)) \<and> (ev m p = ev k q) }"

abbreviation wvtFunc :: "Body \<Rightarrow> Body \<Rightarrow> ('a Point \<Rightarrow> 'a Point \<Rightarrow> bool)"
  where "wvtFunc m k \<equiv> (\<lambda> p q . q \<in> wvt m k p)"

abbreviation wvtLine :: "Body \<Rightarrow> Body \<Rightarrow> 'a Point set \<Rightarrow> 'a Point set \<Rightarrow> bool"
  where "wvtLine m k l l' \<equiv>   \<exists> p q p' q' . (
                                   (wvtFunc m k p p') \<and> (wvtFunc m k q q') \<and>
                                   (l = lineJoining p q) \<and> (l' = lineJoining p' q'))"



