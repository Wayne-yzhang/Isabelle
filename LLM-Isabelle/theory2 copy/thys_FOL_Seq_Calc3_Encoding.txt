theory Encoding imports "HOL-Library.Nat_Bijection" Syntax begin


  unfolding sum_encode_def by simp

  by (metis le_prod_encode_2 less_Suc_eq lt_sum_encode_Inr order_le_less_trans
      prod_decode_inverse sum_decode_inverse)

lemma sum_prod_decode_lt_Suc [simp]:
  by (metis dual_order.strict_trans le_prod_encode_1 lessI linorder_not_less lt_sum_encode_Inr
      not_less_eq prod_decode_inverse sum_decode_inverse)

proof (induct ns)
  case (Cons m ns)
  then show ?case
    using le_prod_encode_1 le_prod_encode_2
    by (metis dual_order.strict_trans1 le_imp_less_Suc less_SucI list_encode.simps(2) set_ConsD)
qed simp

lemma prod_Suc_list_decode_lt [simp]:
  by (metis Suc_le_lessD lt_list_encode le_prod_encode_2 list_decode_inverse order_less_trans
      prod_decode_inverse)



  by pat_completeness auto

  by (induct t) (simp_all add: map_idI)

  unfolding surj_def using tm_nat by metis



  by pat_completeness auto

  using tm_nat by (induct p) (simp_all add: map_idI)

  unfolding surj_def using fm_nat by metis



definition idle_nat :: nat where



  using tm_nat fm_nat by (cases r) (simp_all add: map_idI idle_nat_def)

  unfolding surj_def using rule_nat by metis

end
