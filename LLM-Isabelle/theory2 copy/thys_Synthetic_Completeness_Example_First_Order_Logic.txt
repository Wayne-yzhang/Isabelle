theory Example_First_Order_Logic imports Derivations begin


datatype (params_tm: 'f) tm


datatype (params_fm: 'f, 'p) fm














  by (induct t) (auto cong: map_cong)

  by (induct p arbitrary: E) (auto cong: map_cong)

  by (induct t) simp_all

  by (induct p) simp_all

  by (induct n) simp_all

  by (induct t) (auto cong: map_cong)

  by (induct t) (auto cong: map_cong)

  by (induct p arbitrary: E s) (auto cong: map_cong simp: sub_tm_semantics lift_lemma)

  by (induct t) (auto cong: map_cong)

proof (rule ext)
  fix n
    by (induct n) simp_all
qed

lemma sub_fm_Var [simp]:
proof (induct p)
  case (Pre P ts)
  then show ?case
    by (auto cong: map_cong simp: sub_tm_Var)
qed simp_all

  by (induct t) (auto cong: map_cong)

  by (auto cong: map_cong)



  by (induct p arbitrary: s) simp_all




proof (induct p arbitrary: F rule: Calculus.induct)
  case (UniI A a p)
    using UniI(3-4) by (simp add: list.pred_mono_strong)
    using UniI by blast
  ultimately show ?case
    by fastforce
qed (auto simp: list_all_iff)

  using soundness by (cases M) fastforce

  using soundness' by fastforce


  by auto

  by (meson ImpE Weak Assm_head)

  using Clas FlsE by blast

  by (induct B) (simp, metis Weak append_Cons)

proof (induct A arbitrary: p)
  case Nil
  then show ?case
    using Weak' by fastforce
next
  case (Cons q A)
  then show ?case
    by (metis Assm ImpE ImpI list.set_intros(1-2) subset_code(1))
qed

interpretation Derivations Calculus
proof
    using Weaken by blast
qed




lemma consistent_add_instance:
  unfolding consistent_def
proof
    using assms derive_split1 by metis
    using Weak by blast
    using Assm_head by fast
    by fast
  ultimately show False
    using assms(1) unfolding consistent_def by blast
qed

lemma consistent_add_witness:
  unfolding consistent_def
proof
    using assms derive_split1 by metis
    using Boole by blast
    using calculation by fast
    by fastforce
    using Weak Assm_head by fast
  ultimately show False
    using assms(1) unfolding consistent_def by blast
qed

lemma consistent_witness':
  using assms
proof (induct p S rule: witness.induct)
  case (1 p S)
    using 1(2) finite_params_fm by (simp add: infinite_Diff_fin_Un)
    by (simp add: not_finite_existsD set_diff_eq)
    by (rule someI_ex)
    by simp
  then show ?case
qed (auto simp: assms)

interpretation MCS_Saturation consistent params_fm witness
proof
    unfolding consistent_def by fast
next
    unfolding consistent_def by blast
next
    by simp
next
    by (induct p S rule: witness.induct) simp_all
next
    using consistent_witness' by fast
next
qed

proof
    unfolding consistent_def ..
next
    by blast
next
    using Weaken ImpI ImpE by (metis Un_upper2 inf_sup_ord(3) set_append)
qed



fun semics ::


theorem Hintikka_model':
  case 1
  then show ?case ..
next
  case (2 x)
  then show ?case
    using assms[of x] by (cases x) simp_all
qed

lemma Hintikka_Extend:
proof (cases p)
  case Fls
    using assms MCS_derive unfolding consistent_def by blast
  then show ?thesis
    using Fls by simp
next
  case (Imp p q)
    by (auto simp: Weak)
    using deduct1 .
    using assms(1-2) MCS_derive MCS_derive_fls by (metis insert_subset list.simps(15))
  then show ?thesis
    using Imp by simp
next
  case (Uni p)
  proof
    proof (rule ccontr)
        using Boole assms(1-2) MCS_derive derive_split1 by (metis consistent_derive_fls)
        using assms(2) unfolding maximal_def by blast
        using assms(3) unfolding saturated_def by fastforce
      ultimately show False
        using assms(1-2) MCS_derive by (metis consistent_def deduct1 insert_subset list.simps(15))
    qed
  next
      using assms(1-2) consistent_add_instance maximal_def by blast
  qed
  then show ?thesis
    using Uni by simp
qed simp

interpretation Truth_Saturation
proof unfold_locales
    by (cases M, induct p) auto
next
    using Hintikka_model' by auto
next
    using Hintikka_Extend by auto
qed


datatype marker = VarM | FunM | TmM | FlsM | PreM | ImpM | UniM





primrec

  by (induct t) auto

lemma inj_encode_tm':
proof (induct t and ts arbitrary: s and ss rule: encode_tm.induct encode_tms.induct)
  case (Var n)
  then show ?case
    by (cases s) auto
next
  case (Fun f fts)
  then show ?case
    by (cases s) auto
next
  case Nil_tm
  then show ?case
    by (cases ss) auto
next
  case (Cons_tm t ts)
  then show ?case
    by (cases ss) auto
qed

  unfolding inj_def using inj_encode_tm' by blast


  by (induct p) auto

proof (induct p arbitrary: q)
  case Fls
  then show ?case
    by (cases q) auto
next
  case (Pre P ts)
  then show ?case
    by (cases q) (auto simp: inj_encode_tm')
next
  case (Imp p1 p2)
  then show ?case
    by (cases q) auto
next
  case (Uni p)
  then show ?case
    by (cases q) auto
qed

  unfolding inj_def using inj_encode_fm' by blast

proof -
    by (cases p) auto
  then show ?thesis
    by (meson ex_new_if_finite finite.emptyI finite_insert)
qed

lemma card_of_fm:
proof -
    using finite_marker by (simp add: ordLess_imp_ordLeq)
    using assms by simp
    using card_of_params_marker_lists by blast
    using card_of_ordLeq inj_encode_fm by blast
    using ordLeq_transitive by blast
  then show ?thesis
    unfolding csum_def by simp
qed


theorem strong_completeness:
proof (rule ccontr)
    using Boole by blast


    using * by (meson consistent_def derive_split1)
    using assms(2-3)
    by (metis Cinfinite_csum Cnotzero_UNIV Field_card_of cinfinite_def cinfinite_mono)
    using assms(3) finite_params_fm card_of_infinite_diff_finite
    by (metis ordIso_iff_ordLeq ordLeq_transitive)
    by (metis Set_Diff_Un)
    by (metis UN_insert insert_is_Un sup_commute)
    using assms card_of_fm ordLeq_transitive by blast
    using MCS_Extend by fast+
    using truth_lemma_saturation by fastforce
    using Extend_subset by blast
    by blast+
    using assms(1) by blast
  ultimately show False
    by simp
qed


theorem completeness:
proof -
    using assms(2-3) by (simp add: cinfinite_def csum_absorb1 ordIso_imp_ordLeq)
  then show ?thesis
qed

corollary completeness':
  using assms completeness[of p] by simp

theorem main:
  using assms completeness soundness' by blast

corollary main':
  using assms completeness' soundness' by blast

end
