theory Lyndon_Schutzenberger
  imports Submonoids Periodicity_Lemma

begin




section "The original result"


lemma LS_per_lemma_case1:
  assumes eq: "x\<^sup>@a\<cdot>y\<^sup>@b = z\<^sup>@c" and "0 < a" and "0 < b" and "\<^bold>|z\<^bold>| + \<^bold>|x\<^bold>| - 1 \<le> \<^bold>|x\<^sup>@a\<^bold>|"
  shows "x \<cdot> y = y \<cdot> x" and "x \<cdot> z = z \<cdot> x"
proof
  have "x\<^sup>@a \<le>p (z\<^sup>@c) \<cdot> x\<^sup>@a" "x \<^sup>@ a \<le>p x \<cdot> x \<^sup>@ a"
    unfolding eq[symmetric] shifts_rev by blast+
  hence "x\<^sup>@a \<le>p z \<cdot> x\<^sup>@a"
    using eq pref_prod_root triv_pref by metis
  show "x \<cdot> z = z \<cdot> x".
  hence "z\<^sup>@c\<cdot>x\<^sup>@a = x\<^sup>@a\<cdot>z\<^sup>@c"
    by (simp add: comm_add_exps)
  from this[folded eq, unfolded rassoc cancel, symmetric]
  have "x\<^sup>@a \<cdot> y\<^sup>@b = y\<^sup>@b \<cdot> x\<^sup>@a".
  show "x \<cdot> y = y \<cdot> x".
qed

lemma LS_per_lemma_case:
  assumes eq: "x\<^sup>@a\<cdot>y\<^sup>@b = z\<^sup>@c" and "0 < a" and "0 < b" and "\<^bold>|z\<^bold>| + \<^bold>|x\<^bold>| \<le> \<^bold>|x\<^sup>@a\<^bold>|"
  shows "x \<cdot> y = y \<cdot> x" and "x \<cdot> z = z \<cdot> x"
  using LS_per_lemma_case1[OF assms(1-3)] assms(4) by force+


lemma LS_core_case:
  assumes
    eq: "x\<^sup>@a \<cdot> y\<^sup>@b = z\<^sup>@c" and
    "2 \<le> a" and "2 \<le> b" and "2 \<le> c" and
    "c = 3" and
    "b*\<^bold>|y\<^bold>| \<le> a*\<^bold>|x\<^bold>|" and "x \<noteq> \<epsilon>" and "y \<noteq> \<epsilon>" and
    lenx: "a*\<^bold>|x\<^bold>| < \<^bold>|z\<^bold>| + \<^bold>|x\<^bold>|" and
    leny: "b*\<^bold>|y\<^bold>| < \<^bold>|z\<^bold>| + \<^bold>|y\<^bold>|"
  shows "x\<cdot>y = y\<cdot>x"
proof-
  have "0 < a" and "0 < b"

  have "a*\<^bold>|x\<^bold>|+b*\<^bold>|y\<^bold>| = 3*\<^bold>|z\<^bold>|"
    by (simp add: pow_len)
  hence "3*\<^bold>|z\<^bold>| \<le> a*\<^bold>|x\<^bold>| + a*\<^bold>|x\<^bold>|"
  hence "3*\<^bold>|z\<^bold>| < 2*\<^bold>|z\<^bold>| + 2*\<^bold>|x\<^bold>|"
    using lenx by linarith
  hence "\<^bold>|z\<^bold>| + \<^bold>|x\<^bold>| < 3 * \<^bold>|x\<^bold>|" by simp
  from less_trans[OF lenx this, unfolded mult_less_cancel2]

      pow_len[of x 2]  pow_len[of y b]
      mult_le_less_imp_less[of a b "\<^bold>|x\<^bold>|" "\<^bold>|y\<^bold>|"] not_le
    by auto
    by (simp add: numeral_2_eq_2 numeral_3_eq_3)

  have "\<^bold>|z\<^bold>| < \<^bold>|x\<cdot>x\<^bold>|"
  from ruler_le[THEN prefD, OF triv_pref[of z "z\<cdot>z"] _ less_imp_le[OF this]]
  obtain w  where "z\<cdot>w = x\<cdot>x"

  have "\<^bold>|x\<^bold>| < \<^bold>|z\<^bold>|"
  obtain u :: "'a list" where "x\<cdot>u=z"
    by blast
  have "u \<noteq> \<epsilon>"

  have "z\<cdot>w \<le>p z\<cdot>z"
  obtain v :: "'a list" where "w \<cdot> v = x"
    using lq_pref[of w x]
  have "u\<cdot>w\<cdot>v \<noteq> \<epsilon>"

  hence "z = w\<cdot>v\<cdot>u"
  have "w\<cdot>v \<cdot> u\<cdot>w \<cdot> y\<^sup>@b = w\<cdot>v\<cdot>u\<cdot>w\<cdot>v\<cdot>u\<cdot>w\<cdot>v\<cdot>u".
  hence "y\<^sup>@b = v\<cdot>u\<cdot>w\<cdot>v\<cdot>u"
    using pref_cancel by auto

  have "period (u\<cdot>w\<cdot>v) \<^bold>|y\<^bold>|"
  have "u\<cdot>w\<cdot>v = x \<cdot>v"
  have "u\<cdot>w\<cdot>v = u\<cdot> x"
  have "u\<cdot>w\<cdot>v <p u \<cdot> (u\<cdot>w\<cdot>v)"
    by force
  have "period (u\<cdot>w\<cdot>v) \<^bold>|u\<^bold>|"

  obtain d::nat where "d=gcd \<^bold>|y\<^bold>| \<^bold>|u\<^bold>|"
    by simp
    by simp
  hence "period (u\<cdot>w\<cdot>v) d"
    by blast

  have "v\<cdot>u\<cdot>z=y\<^sup>@b"
  have "\<^bold>|u\<^bold>| = \<^bold>|v\<^bold>|"
    by simp
  hence "d dvd \<^bold>|v\<^bold>|" using gcd_nat.cobounded1[of "\<^bold>|v\<^bold>|" "\<^bold>|y\<^bold>|"] gcd.commute[of "\<^bold>|y\<^bold>|" "\<^bold>|u\<^bold>|"]
  have "d dvd \<^bold>|u\<^bold>|"
  have "\<^bold>|z\<^bold>| + \<^bold>|u\<^bold>| + \<^bold>|v\<^bold>| = b*\<^bold>|y\<^bold>|"
  have "d dvd \<^bold>|z\<^bold>|"
  have "d dvd \<^bold>|w\<^bold>|"
  hence "d dvd \<^bold>|x\<^bold>|"

  have "x \<le>p u\<cdot>w\<cdot>v"
  hence "x \<in> (take d x)*"
    using root_divisor by blast

  have "u \<in> (take d x)*".


  hence "z \<in> (take d x)*"
  have "y\<^sup>@b \<in> (take d x)*".
  show "x \<cdot> y = y \<cdot> x"
qed



lemma Lyndon_Schutzenberger':
  "\<lbrakk> x\<^sup>@a\<cdot>y\<^sup>@b = z\<^sup>@c;  2 \<le> a;  2 \<le> b; 2 \<le> c \<rbrakk>
  \<Longrightarrow> x\<cdot>y = y\<cdot>x"
proof (induction "\<^bold>|z\<^bold>| + b* \<^bold>|y\<^bold>|" arbitrary: x y z a b c  rule: less_induct)
  case less

  have "0 < a" and "0 < b"

  have LSrev_eq: "rev y \<^sup>@ b \<cdot> rev x \<^sup>@ a = rev z \<^sup>@ c"
    unfolding rev_append[symmetric] rev_pow[symmetric]
    by blast

  have leneq: "a * \<^bold>|x\<^bold>| + b*\<^bold>|y\<^bold>| = c * \<^bold>|z\<^bold>|"

  show "x \<cdot> y = y \<cdot> x"
  proof
    assume "x \<noteq> \<epsilon>" and "y \<noteq> \<epsilon>"
    show "x \<cdot> y = y \<cdot> x"
    proof (cases "\<^bold>|x \<^sup>@ a\<^bold>| < \<^bold>|y \<^sup>@ b\<^bold>|")

      assume "\<^bold>|x\<^sup>@a\<^bold>| < \<^bold>|y\<^sup>@b\<^bold>|"
        by (simp add: pow_len)
      show "x \<cdot> y = y \<cdot> x"
        unfolding rev_append[symmetric] rev_is_rev_conv by simp
    next
      assume " \<not> \<^bold>|x\<^sup>@a\<^bold>| < \<^bold>|y\<^sup>@b\<^bold>|" hence "\<^bold>|y\<^sup>@b\<^bold>| \<le> \<^bold>|x\<^sup>@a\<^bold>|" by force
      consider (with_Periodicity_lemma)
        "\<^bold>|z\<^bold>| + \<^bold>|x\<^bold>| \<le> \<^bold>|x \<^sup>@ Suc(Suc (a-2))\<^bold>| \<or> \<^bold>|z\<^bold>| + \<^bold>|y\<^bold>| \<le> \<^bold>|y \<^sup>@ Suc(Suc (b-2))\<^bold>|" |
        (without_Periodicity_lemma)
        "\<^bold>|x\<^sup>@Suc(Suc (a-2))\<^bold>| < \<^bold>|z\<^bold>| + \<^bold>|x\<^bold>|" and "\<^bold>|y\<^sup>@Suc(Suc (b-2))\<^bold>| < \<^bold>|z\<^bold>| + \<^bold>|y\<^bold>|"
        unfolding minus
        using not_le_imp_less by blast
      thus "x \<cdot> y = y \<cdot> x"
      proof (cases)
        case with_Periodicity_lemma
        have "x = \<epsilon> \<or> rev y = \<epsilon> \<Longrightarrow> x \<cdot> y = y \<cdot> x"
          by auto
        thus "x \<cdot> y = y \<cdot> x"
          unfolding length_rev rev_append[symmetric] rev_is_rev_conv rev_pow[symmetric]
          by linarith
      next
        case without_Periodicity_lemma
        assume lenx: "\<^bold>|x\<^sup>@Suc (Suc (a-2))\<^bold>| < \<^bold>|z\<^bold>| + \<^bold>|x\<^bold>|" and leny: "\<^bold>|y\<^sup>@Suc (Suc (b-2))\<^bold>| < \<^bold>|z\<^bold>| + \<^bold>|y\<^bold>|"
        have "Suc (Suc (a-2)) * \<^bold>|x\<^bold>| + Suc (Suc (b-2))*\<^bold>|y\<^bold>| < 4 * \<^bold>|z\<^bold>|"
          using  lenx leny unfolding pow_len by fastforce
        hence "c < 4" using leneq unfolding minus  by auto
        consider (c_is_3) "c = 3" | (c_is_2) "c = 2"
        then show "x \<cdot> y = y \<cdot> x"
        proof(cases)
          case c_is_3
          show "x \<cdot> y = y \<cdot> x"
            using
                _ _ lenx[unfolded pow_len minus] leny[unfolded pow_len minus]]
            by blast
        next
          assume "c = 2"
          hence eq2: "x\<^sup>@a \<cdot> y\<^sup>@b = z \<cdot> z"
          from dual_order.trans  le_cases[of "\<^bold>|x\<^sup>@a\<^bold>|" "\<^bold>|z\<^bold>|" "\<^bold>|z\<^bold>| \<le> \<^bold>|x\<^sup>@a\<^bold>|", unfolded eq_len_iff[OF this]]
          have "\<^bold>|z\<^bold>| \<le> \<^bold>|x\<^sup>@a\<^bold>|"
          define a' where "a' \<equiv> a - 1"
          have "Suc a' = a" and "1 \<le> a'"
          have eq3: "x \<^sup>@ a' \<cdot> x \<cdot> y \<^sup>@ b = z \<cdot> z" and aa':"x \<^sup>@ a' \<cdot> x = x \<^sup>@ a ".
          hence "\<^bold>|x\<^sup>@a'\<^bold>| < \<^bold>|z\<^bold>|"
          hence "\<^bold>|x\<^bold>| < \<^bold>|z\<^bold>|"
            by linarith
          obtain u w where "x\<^sup>@a'\<cdot>u = z" and "w \<cdot> y\<^sup>@b = z"

          have "x\<^sup>@a'\<cdot>x\<cdot>y\<^sup>@b = x\<^sup>@a'\<cdot>u\<cdot>w\<cdot>y\<^sup>@b"
          hence "u\<cdot>w=x"
            by auto
          hence "\<^bold>|w\<cdot>u\<^bold>| = \<^bold>|x\<^bold>|"
            using swap_len by blast

          have "w\<^sup>@2\<cdot>y\<^sup>@b = (w\<cdot>u)\<^sup>@a"
          have "y\<cdot>w = w\<cdot>y"

          have "y \<cdot> z = z \<cdot> y"
            by (simp add: pow_comm)
          hence "z\<^sup>@c\<cdot>y\<^sup>@b = y\<^sup>@b\<cdot>z\<^sup>@c"
            by (simp add: comm_add_exps)
          have "x\<^sup>@a\<cdot>y\<^sup>@b = y\<^sup>@b\<cdot>x\<^sup>@a"
            using cancel_right by blast
          show "x \<cdot> y = y \<cdot> x".
        qed
      qed
    qed
  qed
qed

theorem Lyndon_Schutzenberger:
  assumes "x\<^sup>@a\<cdot>y\<^sup>@b = z\<^sup>@c" and  "2 \<le> a"  and "2 \<le> b" and "2 \<le> c"
  shows  "x\<cdot>y = y\<cdot>x" and "x\<cdot>z = z\<cdot>x" and "y\<cdot>z = z\<cdot>y"
proof-
  show "x \<cdot> y = y \<cdot> x"
    using Lyndon_Schutzenberger'[OF assms].
  have "0 < c" and  "0 < b"
  have "x \<cdot> x\<^sup>@a \<cdot> y\<^sup>@b = x\<^sup>@a \<cdot> y\<^sup>@b \<cdot> x" and "y \<cdot> x\<^sup>@a \<cdot> y\<^sup>@b = x\<^sup>@a \<cdot> y\<^sup>@b \<cdot> y"
  thus "x\<cdot>z = z\<cdot>x" and "y\<cdot>z = z\<cdot>y"
qed
hide_fact Lyndon_Schutzenberger' LS_core_case

subsection "Some alternative formulations."

lemma Lyndon_Schutzenberger_conjug: assumes "u \<sim> v" and  "\<not> primitive (u \<cdot> v)" shows "u \<cdot> v = v \<cdot> u"
proof-
  obtain r s where "u = r \<cdot> s" and "v = s \<cdot> r"
  have "u \<cdot> v \<sim> r\<^sup>@2 \<cdot> s\<^sup>@2"
  hence "\<not> primitive (r\<^sup>@2 \<cdot> s\<^sup>@2)"
  from not_prim_primroot_expE[OF this, of "r \<cdot> s = s \<cdot> r"]
  have "r \<cdot> s = s \<cdot> r"
    using Lyndon_Schutzenberger(1)[of r 2 s 2, OF _ order.refl order.refl] by metis
  thus "u \<cdot> v = v \<cdot> u"
qed

lemma Lyndon_Schutzenberger_prim: assumes "\<not> primitive x" and "\<not> primitive y" and "\<not> primitive (x \<cdot> y)"
  shows "x \<cdot> y = y \<cdot> x"
proof
  assume "x \<noteq> \<epsilon>" and "y \<noteq> \<epsilon>"
  obtain m where "\<rho> y\<^sup>@m = y" and "2 \<le> m".
  obtain k where "\<rho> x\<^sup>@k = x" and "2 \<le> k".
  obtain l where "\<rho>(x \<cdot> y)\<^sup>@l = x \<cdot> y" and "2 \<le> l".
  from Lyndon_Schutzenberger(1)[of "\<rho> x" k "\<rho> y" m "\<rho> (x \<cdot> y)" l,
  show "x \<cdot> y = y \<cdot> x"
    comp_primroot_conv'[of x y] by blast
qed

lemma Lyndon_Schutzenberger_rotate: assumes "x\<^sup>@c = r \<^sup>@ k \<cdot> u\<^sup>@b \<cdot> r \<^sup>@ k'"
  and "2 \<le> b" and "2 \<le> c" and "0 < k" and "0 < k'"
shows "u \<cdot> r = r \<cdot> u"
proof(rule comm_drop_exps)
  show "u\<^sup>@b \<cdot> r\<^sup>@(k' + k) = r\<^sup>@(k' + k) \<cdot> u\<^sup>@b"
  proof(rule Lyndon_Schutzenberger_prim)
    have "2 \<le> (k' + k)"
    show "\<not> primitive (u\<^sup>@b)" and "\<not> primitive (r \<^sup>@ (k' + k))"
    have "\<not> primitive (r \<^sup>@ k \<cdot> u\<^sup>@b \<cdot> r \<^sup>@ k')"
      unfolding assms(1)[symmetric].
    from this[unfolded conjug_prim_iff[OF conjugI'[of "r \<^sup>@ k" "u \<^sup>@ b \<cdot> r \<^sup>@ k'"]] rassoc]
    show "\<not> primitive (u \<^sup>@ b \<cdot> r \<^sup>@ (k' + k))"
      unfolding add_exps[symmetric] by force
  qed
qed (use assms in force)+



lemma xjy_imprim_len: assumes "x \<cdot> y \<noteq> y \<cdot> x" and eq: "x\<^sup>@j \<cdot> y = z\<^sup>@l" and "2 \<le> j" and "2 \<le> l"
  shows "\<^bold>|x\<^sup>@j\<^bold>| < \<^bold>|y\<^bold>| + 2*\<^bold>|x\<^bold>|" and "\<^bold>|z\<^bold>| < \<^bold>|x\<^bold>| + \<^bold>|y\<^bold>|" and "\<^bold>|x\<^bold>| < \<^bold>|z\<^bold>|" and "\<^bold>|x\<^sup>@j\<^bold>| < \<^bold>|z\<^bold>| + \<^bold>|x\<^bold>|"
proof-
  define j' where "j' \<equiv> j - 2"
  have "0 < j" "j = Suc(Suc j')"
  show "\<^bold>|x\<^sup>@j\<^bold>| < \<^bold>|z\<^bold>| + \<^bold>|x\<^bold>|"
  from lenarg[OF eq, unfolded lenmorph, unfolded pow_len]
    add_less_mono1[OF this, of "\<^bold>|y\<^bold>|",  unfolded pow_len]
  show "\<^bold>|z\<^bold>| < \<^bold>|x\<^bold>| + \<^bold>|y\<^bold>|"
  show "\<^bold>|x\<^sup>@j\<^bold>| < \<^bold>|y\<^bold>| + 2*\<^bold>|x\<^bold>|" and "\<^bold>|x\<^bold>| < \<^bold>|z\<^bold>|"
qed

lemma case_j1k1: assumes
  eq: "x\<cdot>y = z\<^sup>@l" and
  non_comm: "x \<cdot> y \<noteq> y \<cdot> x" and
  l_min: "2 \<le> l"
  obtains r q m n where
    "x = (r\<cdot>q)\<^sup>@m\<cdot>r" and
    "y = q\<cdot> (r \<cdot> q)\<^sup>@n" and
    "z = r\<cdot>q" and
    "l = m + n + 1" and "r\<cdot>q \<noteq> q\<cdot>r" and "\<^bold>|x\<^bold>| + \<^bold>|y\<^bold>| \<ge> 4"
proof-
  have "0 < l" "y \<noteq> \<epsilon>"
    using l_min non_comm by force+
  from split_pow[OF eq this]
  obtain r q m n where
   x: "x = (r \<cdot> q) \<^sup>@ m \<cdot> r" and
   y: "y = (q \<cdot> r)\<^sup>@ n \<cdot> q" and
   z: "z = r \<cdot> q" and
   l: "l = m + n + 1".
  from non_comm[unfolded x y]
  have "r \<cdot> q \<noteq> q \<cdot> r"
    unfolding shifts
    unfolding lassoc add_exps[symmetric] pow_Suc[symmetric] add.commute[of m]
    by force
  hence "r \<noteq> \<epsilon>" and "q \<noteq> \<epsilon>"
    by blast+
  have "2 \<le> \<^bold>|r \<cdot> q\<^bold>|"
    unfolding lenmorph by linarith
  have "\<^bold>|x\<^bold>| + \<^bold>|y\<^bold>| \<ge> 4"
    unfolding x y lenmorph[symmetric] shifts
    unfolding add_exps[symmetric] lassoc lenmorph[of "r \<cdot> q"]
    mult_Suc[symmetric] pow_len Suc_eq_plus1 l[symmetric]
    by presburger
  show thesis.
qed






locale LS_len_le = binary_code x y for x y +
  fixes j k l z
  assumes
    y_le_x: "\<^bold>|y\<^bold>| \<le> \<^bold>|x\<^bold>|"
    and eq: "x\<^sup>@j \<cdot> y\<^sup>@k = z\<^sup>@l"
    and l_min: "2 \<le> l"
    and j_min: "1 \<le> j"
    and k_min: "1 \<le> k"
begin

lemma jk_small: obtains "j = 1" | "k = 1"
  using Lyndon_Schutzenberger(1)[OF eq _ _ l_min]
    le_neq_implies_less[OF j_min]
    le_neq_implies_less[OF k_min]
    non_comm
  unfolding One_less_Two_le_iff
  by blast


lemma case_j2k1: assumes "2 \<le> j" "k = 1"
  obtains r q t where
    "(r \<cdot> q) \<^sup>@ t \<cdot> r = x" and
    "q \<cdot> r \<cdot> r \<cdot> q  =  y" and
    "(r \<cdot> q) \<^sup>@ t \<cdot> r \<cdot> r \<cdot> q = z" and "2 \<le> t"
    "j = 2" and "l = 2" and "r\<cdot>q \<noteq> q\<cdot>r" and
    "primitive x" and "primitive y"
proof-

  obtain j' where "j = Suc (Suc j')"
  hence "0 < j" by blast
  from lenarg[OF eq', unfolded lenmorph, unfolded pow_len]
  have "l*\<^bold>|z\<^bold>| < 3*\<^bold>|z\<^bold>|"
  hence "l = 2"
    using l_min by simp
  have "j' * \<^bold>|x\<^bold>| < \<^bold>|x\<^bold>|"
  hence "j = 2"

  obtain p where "x \<cdot> p = z" and "p \<cdot> z = x \<cdot> y"
    by blast
  obtain s where "x \<cdot> s = p \<cdot> x" and "s \<cdot> p = y"
    by auto
  have "p \<noteq> \<epsilon>"
  have "s \<noteq> \<epsilon>"
  obtain r q t where "r \<cdot> q = p" and "q \<cdot> r = s" and "(r \<cdot> q)\<^sup>@t\<cdot>r = x" and "q \<noteq> \<epsilon>".
    add_le_mono1[OF mult_le_mono1[of t 1 "\<^bold>|r\<^bold>| + \<^bold>|q\<^bold>|", unfolded mult_1], of "\<^bold>|r\<^bold>|"]
  have "2 \<le> t"
    by linarith
  have z: "(r \<cdot> q) \<^sup>@ t \<cdot> r \<cdot> r \<cdot> q = z"
    by comparison


  have "primitive y"

  hence "q \<cdot> r \<noteq> r \<cdot> q"


  thm per_le_prim_iff[of x p]
  have "x \<le>p p \<cdot> x"
    by comparison
  have "2*\<^bold>|p\<^bold>| \<le> \<^bold>|x\<^bold>|"
  have [symmetric]: "p \<cdot> x \<noteq> x \<cdot> p"
    unfolding rassoc cancel by fact
  have "primitive x"
    by blast

  show thesis.
qed


lemma case_j1k2_primitive: assumes "j = 1" "2 \<le> k"
  shows "primitive x"
  using Lyndon_Schutzenberger_prim[OF _ pow_nemp_imprim
    comm_pow_roots[of j k x y] k_min non_comm
  by linarith

lemma case_j1k2_a: assumes "j = 1" "2 \<le> k" "z \<le>s y\<^sup>@k"
  obtains r q t where
    "x = ((q \<cdot> r) \<cdot> (r \<cdot> (q \<cdot> r) \<^sup>@ t) \<^sup>@ (k - 1)) \<^sup>@ (l - 2) \<cdot>
      (((q \<cdot> r) \<cdot> (r \<cdot> (q \<cdot> r) \<^sup>@ t) \<^sup>@ (k - 2)) \<cdot> r) \<cdot> q" and
    "y = r \<cdot> (q \<cdot> r) \<^sup>@ t" and
proof-
  have "z \<noteq> \<epsilon>"
    using assms(1) bin_fst_nemp eq by force
  have "0 < k" "0 < k -1"
  have "0 < l" "0 < l - 1"
    using l_min by linarith+

  have perlem: "\<^bold>|y\<^sup>@k\<^bold>| < \<^bold>|z\<^bold>| + \<^bold>|y\<^bold>|"
    using non_comm
    by linarith

  obtain v where "y\<^sup>@k = v\<cdot>z"
  have "\<^bold>|v\<^bold>| < \<^bold>|y\<^bold>|"
    by simp
  have "v <p y"
    by blast
  obtain u where "v\<cdot>u = y" "u \<noteq> \<epsilon>"

  have "z = u\<cdot>y\<^sup>@(k-1)"


  obtain u' where "u'\<cdot>v = y"
  proof-
    have "v \<le>s z\<^sup>@(l-1)"
    moreover have "y \<le>s z\<^sup>@(l-1)"
      by blast
    ultimately have "v \<le>s y"
    thus thesis
      using sufD that by blast
  qed
  hence "u' \<noteq> \<epsilon>"

  obtain r q t where "r \<cdot> q = u'" "q \<cdot> r = u" "(r \<cdot> q) \<^sup>@ t \<cdot> r = v"
    by blast

  have y: "y = r \<cdot> (q \<cdot> r) \<^sup>@ Suc t"
    unfolding rassoc pow_slide[symmetric].
  have z: "z = (q \<cdot> r) \<cdot> (r \<cdot> (q \<cdot> r) \<^sup>@ Suc t) \<^sup>@ (k - 1)"

  let ?x = "((q \<cdot> r) \<cdot> (r \<cdot> (q \<cdot> r) \<^sup>@ Suc t) \<^sup>@ (k - 1)) \<^sup>@ (l - 2) \<cdot>
      (((q \<cdot> r) \<cdot> (r \<cdot> (q \<cdot> r) \<^sup>@ Suc t) \<^sup>@ (k - 2)) \<cdot> r) \<cdot> q"
  have "?x \<cdot> v = z \<^sup>@ (l - 1)"
    by (simp only: shifts)
  have x: "x = ?x"
    by blast

  have "z\<cdot>y \<noteq> y\<cdot>z"
    using non_comm
    using comm_add_exp[of z y l, folded eq,
        unfolded rassoc pow_comm, unfolded lassoc cancel_right
    by blast
  hence "r\<cdot>q \<noteq> q\<cdot>r"
  show thesis
qed

lemma case_j1k2_b: assumes "j = 1" "2 \<le> k" "y\<^sup>@k <s z"
  obtains q where
    "x = (q\<cdot>y\<^sup>@k)\<^sup>@(l-1)\<cdot>q" and
    "z = q\<cdot>y\<^sup>@k" and
    "q\<cdot>y \<noteq> y\<cdot>q"
proof-
  obtain q where "z = q\<cdot>y\<^sup>@k" "q \<noteq> \<epsilon>"
    unfolding suffix_def
    by blast
  have "0 < l" using l_min by linarith
  have "x = (q\<cdot>y\<^sup>@k)\<^sup>@(l-1)\<cdot>q"
  have "q\<cdot>y \<noteq> y\<cdot>q"
    using
      conjug_pow[of "q \<cdot> y \<^sup>@ k" q  "q \<cdot> y \<^sup>@ k" "l-1"] non_comm
    by argo
  show ?thesis
qed


lemma solution_cases: obtains
  "j = 2" "k = 1" |
  "j = 1" "2 \<le> k" "z <s y\<^sup>@k" |
  "j = 1" "2 \<le> k" "y\<^sup>@k <s z" |
  "j = 1" "k = 1"
proof-
  have "0 < l" "0 < l-1"
    using l_min by linarith+
  have "0 < k"
    using k_min by linarith
  have "0 < j"
    using j_min by linarith
  have "z \<noteq> \<epsilon>"
    by force
  have "z \<noteq> y\<^sup>@k"
  proof
    assume "z = y\<^sup>@k"
    have "x\<^sup>@j \<cdot> y\<^sup>@k = y\<^sup>@k \<cdot> x\<^sup>@j"
      using pow_comm by auto
    show False
      using non_comm by blast
  qed
  consider
    "2 \<le> j" "k = 1" |
    "j = 1" "2 \<le> k" |
    "j = 1" "k = 1"
    using jk_small j_min k_min le_neq_implies_less
    unfolding One_less_Two_le_iff[symmetric]
    by metis
  moreover consider "z <s y\<^sup>@k" | "y\<^sup>@k <s z"
    using suffix_order.less_le
      triv_suf[of "y\<^sup>@k" "x\<^sup>@j", unfolded eq, THEN suf_prod_root,
    by blast
  moreover consider "j = 1" | "j = 2"
    using case_j2k1[of thesis] calculation(1) by blast
  ultimately show ?thesis
    using that
    by metis
qed

theorem parametric_solutionE: obtains
  r q m n where
  "x = (r\<cdot>q)\<^sup>@m\<cdot>r" and
  "y = q\<cdot>(r\<cdot>q)\<^sup>@n" and
  "z = r\<cdot>q" and
  "l = m + n + 1" and "r\<cdot>q \<noteq> q\<cdot>r"
|
  r q t where
  "x = ((q \<cdot> r) \<cdot> (r \<cdot> (q \<cdot> r) \<^sup>@ t) \<^sup>@ (k - 1)) \<^sup>@ (l - 2) \<cdot>
      (((q \<cdot> r) \<cdot> (r \<cdot> (q \<cdot> r) \<^sup>@ t) \<^sup>@ (k - 2)) \<cdot> r) \<cdot> q" and
  "y = r \<cdot> (q \<cdot> r) \<^sup>@ t" and
  "z = (q \<cdot> r) \<cdot> (r \<cdot> (q \<cdot> r) \<^sup>@ t) \<^sup>@ (k - 1)" and
  "0 < t" and "r\<cdot>q \<noteq> q\<cdot>r"
|
  q where
  "x = (q\<cdot>y\<^sup>@k)\<^sup>@(l-1)\<cdot>q" and
  "z = q\<cdot>y\<^sup>@k" and
  "q\<cdot>y \<noteq> y\<cdot>q"
|
  r q t where
  "x = (r \<cdot> q) \<^sup>@ t \<cdot> r" and
  "y  =  q \<cdot> r \<cdot> r \<cdot> q" and
  "z = (r \<cdot> q) \<^sup>@ t \<cdot> r \<cdot> r \<cdot> q" and
  "j = 2" and "l = 2" and "2 \<le> t" and "r\<cdot>q \<noteq> q\<cdot>r" and
  "primitive x" and "primitive y"
proof-
  show ?thesis
    using solution_cases
  proof(cases)
    case 1
    show ?thesis
      using that(4) by blast
  next
    case 2
    from case_j1k2_a[OF this(1-2) ssufD1[OF this(3)], of thesis]
    show thesis
      using that(2)
      by blast
  next
    case 3
    from case_j1k2_b[OF this, of thesis]
    show ?thesis
      using that(3) by blast
  next
    case 4
    show thesis
      using that(1).
  qed
qed

end

theorem LS_parametric_solution:
  assumes y_le_x: "\<^bold>|y\<^bold>| \<le> \<^bold>|x\<^bold>|"
    and j_min: "1 \<le> j"  and k_min: "1 \<le> k" and l_min: "2 \<le> l"
  shows
    "x\<^sup>@j \<cdot> y\<^sup>@k = z\<^sup>@l
  \<longleftrightarrow>
    (\<exists>r m n t.
  \<or> (j = 1 \<and> k = 1) \<and>
    (\<exists>r q m n.
  \<or> (j = 1 \<and> 2 \<le> k) \<and>
    (\<exists>r q.
  \<or> (j = 1 \<and> 2 \<le> k) \<and>
    (\<exists>r q t. 0 < t \<and>
        x = ((q \<cdot> r) \<cdot> (r \<cdot> (q \<cdot> r) \<^sup>@ t) \<^sup>@ (k - 1)) \<^sup>@ (l - 2)\<cdot>(((q \<cdot> r) \<cdot>
               (r \<cdot> (q \<cdot> r) \<^sup>@ t) \<^sup>@ (k - 2)) \<cdot> r) \<cdot> q
        \<and> y = r \<cdot> (q \<cdot> r) \<^sup>@ t
        \<and> z = (q \<cdot> r) \<cdot> (r \<cdot> (q \<cdot> r) \<^sup>@ t) \<^sup>@ (k - 1)
  \<or> (j = 2 \<and> k = 1 \<and> l = 2) \<and>
    (\<exists>r q t. 2 \<le> t \<and>
        x = (r \<cdot> q) \<^sup>@ t \<cdot> r \<and> y = q \<cdot> r \<cdot> r \<cdot> q
  "
    (is "?eq =
   (?sol_per \<or> (?cond_j1k1 \<and> ?sol_j1k1) \<or>
   (?cond_j1k2 \<and> ?sol_j1k2_b) \<or>
   (?cond_j1k2 \<and> ?sol_j1k2_a) \<or>
   (?cond_j2k1l2 \<and> ?sol_j2k1l2))")
proof(rule iffI)
  assume eq: "x \<^sup>@ j \<cdot> y \<^sup>@ k = z \<^sup>@ l"
  show
    "(?sol_per \<or> (?cond_j1k1 \<and> ?sol_j1k1) \<or>
   (?cond_j1k2 \<and> ?sol_j1k2_b) \<or>
   (?cond_j1k2 \<and> ?sol_j1k2_a) \<or>
   (?cond_j2k1l2 \<and> ?sol_j2k1l2))"
  proof(cases)
    assume "x\<cdot>y = y\<cdot>x"
    from comm_primrootE[OF this]
    obtain r m n where "x = r \<^sup>@ m" "y = r \<^sup>@ n" "primitive r"
      using rootE by metis

    note eqs = eq[unfolded this, folded pow_mult add_exps, symmetric]
    obtain t where "z = r \<^sup>@ t"
      using l_min pow_comm_comm[OF eqs,
      by auto
    from eqs[unfolded this, folded pow_mult, symmetric]
    have "m * j + n * k = t * l"
    hence ?sol_per
    thus ?thesis
      by blast
  next
    assume "x\<cdot>y \<noteq> y\<cdot>x"
    interpret LS_len_le x y j k l z
      by(unfold_locales)

    show ?thesis
      using solution_cases
    proof(cases)
      case 1
      have "?sol_j2k1l2" and "l = 2"
        by auto
      thus ?thesis
    next
      case 2
      have "?sol_j1k2_a"
        unfolding Suc_eq_plus1
        by blast
      thus ?thesis
    next
      case 3
      with case_j1k2_b[OF this, of "?sol_j1k2_b"]
      have "?sol_j1k2_b" by auto
      thus ?thesis
    next
      case 4
      have"?sol_j1k1"
        unfolding Suc_eq_plus1 shift_pow
        by blast
      thus ?thesis
    qed
  qed
next
  have "l \<noteq> 0" "l - 1 \<noteq> 0"
    using l_min by auto
  have "k \<noteq> 0" using k_min by auto
  have "j \<noteq> 0" using j_min by auto
  assume   "(?sol_per \<or> (?cond_j1k1 \<and> ?sol_j1k1) \<or>
   (?cond_j1k2 \<and> ?sol_j1k2_b) \<or>
   (?cond_j1k2 \<and> ?sol_j1k2_a) \<or>
   (?cond_j2k1l2 \<and> ?sol_j2k1l2))"
  then show ?eq
  proof(elim disjE conjE exE)
    fix r m n t
    assume sol: "x = r \<^sup>@ m" "y = r \<^sup>@ n" "z = r \<^sup>@ t"
      and "m * j + n * k = t * l"
    show ?thesis
      unfolding sol
      unfolding pow_mult[symmetric] add_exps[symmetric]
  next
    fix r q m n
    assume "j = 1" "k = 1" and sol: "x = (r\<cdot>q)\<^sup>@m\<cdot>r"
      "y = q\<cdot>(r\<cdot>q)\<^sup>@n" "z = r\<cdot>q"
      and "m + n + 1 = l"
    hence "Suc (m+n) = l"
      by simp
    show ?thesis
      unfolding sol
      unfolding lassoc pow_Suc add_exps
      unfolding pow_comm[of _ m, symmetric] lassoc..
  next
    fix r q
    assume "j = 1" "2 \<le> k" and sol: "x = (q \<cdot> r \<^sup>@ k) \<^sup>@ (l - 1) \<cdot> q" "y = r" "z = q \<cdot> r \<^sup>@ k"
    have "0 < l"
    show ?thesis
  next
    fix r q t
    assume "j = 1" "2 \<le> k" and sol:
      "x =
        ((q \<cdot> r) \<cdot> (r \<cdot> (q \<cdot> r) \<^sup>@ t) \<^sup>@ (k - 1)) \<^sup>@ (l - 2) \<cdot>
        (((q \<cdot> r) \<cdot> (r \<cdot> (q \<cdot> r) \<^sup>@ t) \<^sup>@ (k - 2)) \<cdot> r) \<cdot> q"
      "y = r \<cdot> (q \<cdot> r) \<^sup>@ t"
      "z = (q \<cdot> r) \<cdot> (r \<cdot> (q \<cdot> r) \<^sup>@ t) \<^sup>@ (k - 1)"
      "0 < t"
    hence k1: "k - 1 = Suc k'" and k2: "k - 2 = k'" and k: "k = k'+ 2" by fastforce+
    hence l2: "l - 2 = l'" and l: "l  = l' + 2"  by fastforce+
    show "x \<^sup>@ j \<cdot> y \<^sup>@ k = z \<^sup>@ l"
  next
    fix r q t
    assume "j = 2" "k = 1" "l = 2" and  sol:
      "x = (r \<cdot> q) \<^sup>@ t \<cdot> r"
      "y = q \<cdot> r \<cdot> r \<cdot> q" "z = (r \<cdot> q) \<^sup>@ t \<cdot> r \<cdot> r \<cdot> q"
      "2 \<le> t"
    show "x \<^sup>@ j \<cdot> y \<^sup>@ k = z \<^sup>@ l"
      by comparison
  qed
qed



lemma LS_unique_same: assumes "x \<cdot> y \<noteq> y \<cdot> x"
  and "1 \<le> j" and "1 \<le> k" and "\<not> primitive(x\<^sup>@j\<cdot>y\<^sup>@k)"
  and "1 \<le> k'" and "\<not> primitive(x\<^sup>@j\<cdot>y\<^sup>@k')"
shows "k = k'"
proof(rule ccontr)
  assume "k \<noteq> k'"

  define ka where "ka = (if k < k' then k else k')"
  define ka' where "ka' = (if k < k' then k' else k)"

  have "ka < ka'" and "ka \<noteq> ka'"
  then obtain dif where [symmetric]: "ka + dif = ka'" and "dif \<noteq> 0"
    using less_imp_add_positive by blast

  have "\<not> primitive(x\<^sup>@j\<cdot>y\<^sup>@ka)" "\<not> primitive(x\<^sup>@j\<cdot>y\<^sup>@ka')"
    unfolding ka_def ka'_def using assms(4) assms(6) by presburger+

  have "x\<^sup>@j\<cdot>y\<^sup>@ka' = x\<^sup>@j\<cdot>y\<^sup>@ka\<cdot>y\<^sup>@dif"

  consider "dif = 1" | "2 \<le> dif"
  hence "x \<cdot> y = y \<cdot> x"
  proof(cases)
    assume "dif = 1"
    define u where "u = x\<^sup>@j\<cdot>y\<^sup>@(ka - 1)"
    have "\<not> primitive (u \<cdot> y)"
    have "\<not> primitive (u \<cdot> y \<cdot> y)"
    have "(x \<^sup>@ j \<cdot> y \<^sup>@ (ka - 1)) \<cdot> y = y \<cdot> x \<^sup>@ j \<cdot> y \<^sup>@ (ka - 1)"
      unfolding u_def.
    thus "x \<cdot> y = y \<cdot> x"
  next
    assume "2 \<le> dif"
    hence "\<not> primitive (y\<^sup>@dif)"..
    show "x \<cdot> y = y \<cdot> x"
  qed
  thus False
qed

lemma LS_unique_distinct_le: assumes "x \<cdot> y \<noteq> y \<cdot> x"
  and "2 \<le> j" and "\<not> primitive(x\<^sup>@j\<cdot>y)"
  and "2 \<le> k" and "\<not> primitive(x\<cdot>y\<^sup>@k)"
  and "\<^bold>|y\<^bold>| \<le> \<^bold>|x\<^bold>|"
shows False
proof-
  have "0 < k"
  obtain l z where [symmetric]:"z\<^sup>@l = x\<^sup>@j\<cdot>y" and "2 \<le> l"
  have "x\<^sup>@j\<cdot>y\<^sup>@1 = z\<^sup>@l"
  interpret eq1: LS_len_le x y j 1 l z
    by(unfold_locales) linarith+

  obtain r q t where
    x[symmetric]: "(r \<cdot> q) \<^sup>@ t \<cdot> r = x" and
    y[symmetric]: "q \<cdot> r \<cdot> r \<cdot> q  =  y" and
    z[symmetric]: "(r \<cdot> q) \<^sup>@ t \<cdot> r \<cdot> r \<cdot> q = z" and
    "2 \<le> t" and "j = 2" and "l = 2" and "r\<cdot>q \<noteq> q\<cdot>r" and
    "primitive x" and "primitive y".

  have "q\<cdot>r \<noteq> \<epsilon>" "r\<cdot>q \<noteq> \<epsilon>"
    using eq1.bin_snd_nemp y by fastforce+

  obtain z' l' where "x\<cdot>y\<^sup>@k = z'\<^sup>@l'" "2 \<le> l'"
  have z': "z' \<^sup>@ l' = (r \<cdot> q) \<^sup>@ t \<cdot> r \<cdot> (q \<cdot> r \<cdot> r \<cdot> q) \<^sup>@ k".
  have "0 < l'" and "0 < l' - 1"
  have "r \<cdot> q \<cdot> r \<cdot> q \<le>p x"
   using pref_extD[of "r\<cdot>q\<cdot>r\<cdot>q" "(r \<cdot> q) \<^sup>@ (t - 2) \<cdot> r"]

  have per1: "x \<cdot> q \<cdot> r \<le>p (r \<cdot> q) \<cdot> x \<cdot> q \<cdot> r"
    unfolding x by comparison
  have per2: "x \<cdot> q \<cdot> r \<le>p z' \<cdot> x \<cdot> q \<cdot> r"
    by (rule pref_prod_root[of _ _ l'],
    comparison
  have "(r \<cdot> q) \<cdot> z' \<noteq> z' \<cdot> (r \<cdot> q)"
  proof
    assume "(r \<cdot> q) \<cdot> z' = z' \<cdot> (r \<cdot> q)"
    hence "(r \<cdot> q) \<cdot> z'\<^sup>@l' = z'\<^sup>@l' \<cdot> r \<cdot> q"
      by (simp add: comm_add_exp)
    from this[unfolded z']
    have "r \<cdot> q = q \<cdot> r"
    thus False
  qed
  with two_pers[OF per1 per2]
  have "\<^bold>|x\<^bold>| \<le> \<^bold>|z'\<^bold>|"
    unfolding lenmorph by linarith

  obtain w where "x \<cdot> w = z'" "w \<cdot> z' \<^sup>@ (l' - 1 - 1) \<cdot> z' = y \<^sup>@ k".
  from this(1) this(2)[unfolded lassoc]
  have  "x \<le>f y\<^sup>@k"
    by blast
  hence "r\<cdot>q\<cdot>r\<cdot>q \<le>f (q\<cdot>r\<cdot>r\<cdot>q)\<^sup>@k"
    unfolding y

  have "\<^bold>|r \<cdot> q \<cdot> r \<cdot> q\<^bold>| = \<^bold>|q \<cdot> r \<cdot> r \<cdot> q\<^bold>|"
    by simp
  have "r \<cdot> q = q \<cdot> r".
  thus False
qed

lemma LS_unique_distinct: assumes "x \<cdot> y \<noteq> y \<cdot> x"
  and "2 \<le> j" and "\<not> primitive(x\<^sup>@j\<cdot>y)"
  and "2 \<le> k" and "\<not> primitive(x\<cdot>y\<^sup>@k)"
shows False
  using LS_unique_distinct_le[OF assms] LS_unique_distinct_le[reversed, OF assms(1,4-5,2-3)] by fastforce

lemma LS_unique': assumes "x \<cdot> y \<noteq> y \<cdot> x"
  and "1 \<le> j" and "1 \<le> k"  and "\<not> primitive(x\<^sup>@j\<cdot>y\<^sup>@k)"
  and "1 \<le> j'" and "1 \<le> k'"  and "\<not> primitive(x\<^sup>@j'\<cdot>y\<^sup>@k')"
shows "k = k'"
proof-
  have "j = 1 \<or> k = 1"
    using Lyndon_Schutzenberger_prim[OF pow_non_prim pow_non_prim,
  have "j' = 1 \<or> k' = 1"
    using Lyndon_Schutzenberger_prim[OF pow_non_prim pow_non_prim,
  show "k = k'"
  proof (cases "j = j'")
    assume "j = j'"
    from LS_unique_same[OF assms(1-4,6,7)[folded this]]
    show "k = k'".
  next
    assume "j \<noteq> j'"
    show "k = k'"
    proof(rule ccontr, cases "j = 1")
      assume "k \<noteq> k'" and  "j = 1"
      hence "2 \<le> j'" and "k' = 1" and "2 \<le> k"
      show False
        by blast
    next
      assume "k \<noteq> k'" and  "j \<noteq> 1"
      hence "2 \<le> j" and "k = 1" and "2 \<le> k'" and "j' = 1"
      show False
        by blast
    qed
  qed
qed

lemma LS_unique: assumes "x \<cdot> y \<noteq> y \<cdot> x"
  and "1 \<le> j" and "1 \<le> k"  and "\<not> primitive(x\<^sup>@j\<cdot>y\<^sup>@k)"
  and "1 \<le> j'" and "1 \<le> k'"  and "\<not> primitive(x\<^sup>@j'\<cdot>y\<^sup>@k')"
shows "j = j'" and "k = k'"
  by blast+

section "The bound on the exponent in Lyndon-Schützenberger equation"

lemma (in LS_len_le) case_j1k2_exp_le:
  assumes "j = 1" "2 \<le> k"
  shows "k*\<^bold>|y\<^bold>|+ 4 \<le> \<^bold>|x\<^bold>|+2*\<^bold>|y\<^bold>|"
proof-
  have "x \<cdot> y \<^sup>@ k = z \<^sup>@ l" and "\<^bold>|y\<^bold>| \<noteq> 0" and "0 < l"
    by linarith+

  consider "y \<^sup>@ k <s z" | "z \<le>s y\<^sup>@k"
    using ruler_eq'[reversed,
  thus ?thesis
  proof(cases)
    assume "y\<^sup>@k <s z"
    from case_j1k2_b[OF assms this]
    obtain q where
      x: "x = (q \<cdot> y \<^sup>@ k) \<^sup>@ (l - 1) \<cdot> q" and
      "z = q \<cdot> y \<^sup>@ k" and
      "q \<cdot> y \<noteq> y \<cdot> q".
    have "1 \<le> \<^bold>|q\<^bold>|"

    have "\<^bold>|y\<^bold>| \<ge> 1"
      using bin_snd_nemp nemp_le_len by blast

    have lle: "x \<le> (l-1)*x" for x
      using l_min
      by (simp add: quotient_smaller)

    have "\<^bold>|x\<^bold>| \<ge> k*\<^bold>|y\<^bold>| + 2"
      unfolding x lenmorph pow_len
      unfolding add.commute[of "\<^bold>|q\<^bold>|"]
    thus ?thesis
  next
    assume "z \<le>s y \<^sup>@ k "
    from  case_j1k2_a[OF assms this]
    obtain q r t where
      x: "x = ((q \<cdot> r) \<cdot> (r \<cdot> (q \<cdot> r) \<^sup>@ t) \<^sup>@ (k - 1)) \<^sup>@ (l - 2) \<cdot> (((q \<cdot> r) \<cdot> (r \<cdot> (q \<cdot> r) \<^sup>@ t) \<^sup>@ (k - 2)) \<cdot> r) \<cdot> q" and
      "y = r \<cdot> (q \<cdot> r) \<^sup>@ t" and
      "z = (q \<cdot> r) \<cdot> (r \<cdot> (q \<cdot> r) \<^sup>@ t) \<^sup>@ (k - 1)" and
      "0 < t" and "r \<cdot> q \<noteq> q \<cdot> r".

    have "q \<noteq> \<epsilon>" "r \<noteq> \<epsilon>"
    hence "\<^bold>|q\<^bold>| \<ge> 1" "\<^bold>|r\<^bold>| \<ge> 1"
      using nemp_le_len by blast+
    hence "\<^bold>|q\<cdot>r\<^bold>| + \<^bold>|r\<^bold>| + \<^bold>|q\<^bold>| \<ge> 4"
      by simp

    have "\<^bold>|x\<^bold>| \<ge> \<^bold>|(((q \<cdot> r) \<cdot> (r \<cdot> (q \<cdot> r) \<^sup>@ t) \<^sup>@ (k - 2)) \<cdot> r) \<cdot> q\<^bold>|"
      using x suf_len' by blast
    hence "\<^bold>|x\<^bold>| \<ge> \<^bold>|q\<cdot>r\<^bold>| + (k-2)*\<^bold>|y\<^bold>| + \<^bold>|r\<^bold>| + \<^bold>|q\<^bold>|"
      by (simp add: pow_len)
    hence "\<^bold>|x\<^bold>| \<ge> (k-2)*\<^bold>|y\<^bold>| + 4"
    thus ?thesis
      unfolding add.commute[of "\<^bold>|x\<^bold>|"]
  qed
qed

lemma (in LS_len_le) case_j2k1_exp_le:
  assumes "2 \<le> j" "k = 1"
  shows "j*\<^bold>|x\<^bold>| + 4 \<le> \<^bold>|y\<^bold>| + 2*\<^bold>|x\<^bold>|"
proof-
  from case_j2k1[OF assms]
  obtain r q t where
    "(r \<cdot> q) \<^sup>@ t \<cdot> r = x" and
    "q \<cdot> r \<cdot> r \<cdot> q = y" and
    "(r \<cdot> q) \<^sup>@ t \<cdot> r \<cdot> r \<cdot> q = z" and
    "r \<cdot> q \<noteq> q \<cdot> r" and
    "primitive x" and
    "primitive y".

  have "\<^bold>|r\<^bold>| \<ge> 1" "\<^bold>|q\<^bold>| \<ge> 1"
  hence "\<^bold>|y\<^bold>| \<ge> 4"
    by linarith
  thus ?thesis
qed

theorem LS_exp_le_one:
  assumes eq: "x \<cdot> y \<^sup>@ k = z \<^sup>@ l"
      and "2 \<le> l"
      and "x \<cdot> y \<noteq> y \<cdot> x"
      and "1 \<le> k"
      shows "k*\<^bold>|y\<^bold>| + 4 \<le> \<^bold>|x\<^bold>|+2*\<^bold>|y\<^bold>|"
proof-
  have "x \<noteq> \<epsilon>" "y \<noteq> \<epsilon>" "x \<noteq> y" "\<^bold>|y\<^bold>| \<noteq> 0" "z \<noteq> \<epsilon>"

  consider "k = 1" | "k \<ge> 2"
  then show ?thesis
  proof(cases)
    assume "k=1"
    have "4 \<le> \<^bold>|x\<^bold>| + \<^bold>|y\<^bold>|"
      by blast
    thus ?thesis
  next
    assume "k \<ge> 2"
  show ?thesis
  proof(rule le_cases)
    assume "\<^bold>|y\<^bold>| \<le> \<^bold>|x\<^bold>|"
    then interpret LS_len_le x y 1 k l z
      using assms by (unfold_locales, auto)
    show ?thesis.
  next
    assume "\<^bold>|x\<^bold>| \<le> \<^bold>|y\<^bold>|"
    have "y \<cdot> x \<noteq> x \<cdot> y"
      using assms(3) by force
    define z' where "z' = rotate \<^bold>|x\<^bold>| z"
    hence "y\<^sup>@k \<cdot> x = z' \<^sup>@ l"
      using arg_cong[OF assms(1), of "\<lambda>t. rotate \<^bold>|x\<^bold>| t"]
      unfolding rotate_append rotate_pow_comm
      by blast
    interpret LS_len_le y x k 1 l z'
      by (unfold_locales, auto)
    show ?thesis.
     qed
  qed
qed

lemma LS_exp_le_conv_rat:
  fixes x y k::"'a::linordered_field"
  assumes "y > 0"
  shows "k * y + 4 \<le> x + 2 * y \<longleftrightarrow> k \<le> (x - 4)/y+ 2"
  unfolding le_diff_eq[symmetric]
  unfolding diff_conv_add_uminus
  unfolding add.assoc add.commute[of "2*y"]
  unfolding add.assoc[symmetric]
  unfolding diff_le_eq[of _ "2*y" "x + - 4",symmetric] left_diff_distrib'[symmetric]
  unfolding diff_le_eq..


end
