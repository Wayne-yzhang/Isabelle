theory DependentLiveVariables imports DynPDG begin

  can change\\ the value of the @{term Use} variables of the target node\<close>
  from \<open>n'' -as''\<rightarrow>\<^sub>d* (_Exit_)\<close> have "n'' = (_Exit_)"
  with \<open>sourcenode a -a#as'\<rightarrow>\<^sub>c\<^sub>d n''\<close> have "sourcenode a -a#as'\<rightarrow>\<^sub>d* (_Exit_)"
  with \<open>V \<in> Use (sourcenode a)\<close> show False by simp(erule Exit_Use_empty)
  from \<open>sourcenode a -a#as'\<rightarrow>\<^sub>c\<^sub>d n''\<close> have "sourcenode a -a#as'\<rightarrow>* n''"
  from \<open>n'' -as''\<rightarrow>\<^sub>d* n'\<close> have "n'' -as''\<rightarrow>* n'" by(rule DynPDG_path_CFG_path)
    with \<open>n'' -as''\<rightarrow>* n'\<close> have "n'' = n'" by (auto elim: DynPDG.dependent_live_vars.cases)
    with \<open>sourcenode a -a#as'\<rightarrow>* n''\<close> True
    with \<open>n'' -as''\<rightarrow>* n'\<close> have "n' = last(targetnodes as'')"
  from \<open>n -[]\<rightarrow>* n'\<close> have "valid_node n'" by(rule path_valid_node(2))
  with \<open>V \<in> Use n'\<close> \<open>n -[]\<rightarrow>* n'\<close> show ?case 
  from \<open>n -a#as'@as''\<rightarrow>* n'\<close> have "sourcenode a = n"
  from \<open>sourcenode a -a#as'\<rightarrow>\<^sub>c\<^sub>d n''\<close> have "sourcenode a -a#as'\<rightarrow>* n''"
  from \<open>sourcenode a -a#as'\<rightarrow>\<^sub>c\<^sub>d n''\<close> have "sourcenode a -a#as'\<rightarrow>\<^sub>d* n''"
  with \<open>n'' -as''\<rightarrow>\<^sub>d* n'\<close> have "sourcenode a -(a#as')@as''\<rightarrow>\<^sub>d* n'"
  with \<open>sourcenode a -[]\<rightarrow>* sourcenode a\<close> \<open>V \<in> Use (sourcenode a)\<close> \<open>sourcenode a = n\<close>
  note ddep = \<open>sourcenode a -{V}a#as'\<rightarrow>\<^sub>d\<^sub>d last (targetnodes (a#as'))\<close>
  note IH = \<open>\<And>n. n -as\<rightarrow>* n'
    \<Longrightarrow> \<exists>nx as''. as = as'@as'' \<and> n -as'\<rightarrow>* nx \<and> nx -as''\<rightarrow>\<^sub>d* n' \<and> 
                   V \<in> Use nx \<and> (\<forall>n''\<in>set (sourcenodes as'). V \<notin> Def n'')\<close>
  from \<open>n -a#as\<rightarrow>* n'\<close> have "n -[]@a#as\<rightarrow>* n'" by simp
  from IH[OF \<open>targetnode a -as\<rightarrow>* n'\<close>]
    with \<open>targetnode a -as'\<rightarrow>* nx''\<close> have "nx'' = targetnode a"
    with \<open>nx'' -as''\<rightarrow>\<^sub>d* n'\<close> Nil show ?thesis by(simp add:targetnodes_def)
    from Cons \<open>targetnode a -as'\<rightarrow>* nx''\<close> have "last (targetnodes as') = nx''"
    with \<open>last (targetnodes (a#as')) = last (targetnodes as')\<close> \<open>nx'' -as''\<rightarrow>\<^sub>d* n'\<close>
  with ddep \<open>as = as'@as''\<close> have "sourcenode a -a#as\<rightarrow>\<^sub>d* n'"
  with \<open>V' \<in> Use (sourcenode a)\<close> \<open>n = sourcenode a\<close> \<open>n -[]\<rightarrow>* n\<close>
  note no_dep = \<open>\<not> sourcenode a -{V}a#as'\<rightarrow>\<^sub>d\<^sub>d last (targetnodes (a#as'))\<close>
  note IH = \<open>\<And>n. n -as\<rightarrow>* n'
    \<Longrightarrow> \<exists>nx as''. (as = as'@as'') \<and> (n -as'\<rightarrow>* nx) \<and> (nx -as''\<rightarrow>\<^sub>d* n') \<and> 
                   V \<in> Use nx \<and> (\<forall>n''\<in>set (sourcenodes as'). V \<notin> Def n'')\<close>
  from \<open>n -a#as\<rightarrow>* n'\<close> have "n = sourcenode a" and "valid_edge a"
  from IH[OF \<open>targetnode a -as\<rightarrow>* n'\<close>]
  from \<open>valid_edge a\<close> \<open>targetnode a -as'\<rightarrow>* nx''\<close> have "sourcenode a -a#as'\<rightarrow>* nx''"
    with \<open>V \<in> Use nx''\<close> \<open>sourcenode a -a#as'\<rightarrow>* nx''\<close>
      \<open>\<forall>n''\<in>set (sourcenodes as'). V \<notin> Def n''\<close> 
    with no_dep \<open>last(targetnodes (a#as')) = nx''\<close>
      \<open>\<forall>n''\<in>set (sourcenodes as'). V \<notin> Def n''\<close> \<open>V \<in> Def (sourcenode a)\<close>
  with \<open>\<forall>n''\<in>set (sourcenodes as'). V \<notin> Def n''\<close> 
  with \<open>V \<in> Use nx''\<close> \<open>sourcenode a -a#as'\<rightarrow>* nx''\<close> \<open>nx'' -as''\<rightarrow>\<^sub>d* n'\<close>
    \<open>as = as'@as''\<close> \<open>n = sourcenode a\<close> show ?case by fastforce
  from \<open>(V,as',as) \<in> dependent_live_vars n'\<close> \<open>targetnode a -as\<rightarrow>* n'\<close>
  from \<open>targetnode a -as'\<rightarrow>* nx\<close> \<open>valid_edge a\<close> have "sourcenode a -a#as'\<rightarrow>* nx"
  with \<open>V \<in> Def (sourcenode a)\<close> \<open>V \<in> Use nx\<close> 
    \<open>\<forall>n''\<in> set(sourcenodes as'). V \<notin> Def n''\<close> 
  with \<open>nx -as''\<rightarrow>\<^sub>d* n'\<close> \<open>as = as'@as''\<close> 
  from \<open>V \<in> Use n'\<close> show ?case by(rule dep_vars_Use)
  note lastnode = \<open>ax#asx \<noteq> [] \<longrightarrow> n' = last (targetnodes (ax#asx))\<close>
  note IH = \<open>\<lbrakk>\<forall>as' a as''. asx = as'@a#as'' \<longrightarrow>
                           \<not> sourcenode a -{V}a#as''\<rightarrow>\<^sub>d\<^sub>d n';
             asx \<noteq> [] \<longrightarrow> n' = last (targetnodes asx)\<rbrakk>
           \<Longrightarrow> (V, asx, asx) \<in> dependent_live_vars n'\<close>
  from \<open>\<forall>as' a as''. ax#asx = as'@a#as'' \<longrightarrow> \<not> sourcenode a -{V}a#as''\<rightarrow>\<^sub>d\<^sub>d n'\<close>
    from \<open>V \<in> Use n'\<close> have "(V,[],[]) \<in> dependent_live_vars n'" by(rule dep_vars_Use)
    with \<open>\<not> sourcenode ax -{V}ax#asx\<rightarrow>\<^sub>d\<^sub>d n'\<close> True lastnode
    with \<open>\<not> sourcenode ax -{V}ax#asx\<rightarrow>\<^sub>d\<^sub>d n'\<close> lastnode 
  note IH = \<open>\<lbrakk>(V,asx,asx) \<in> dependent_live_vars n'; 
              asx \<noteq> [] \<longrightarrow> n' = last (targetnodes asx)\<rbrakk>
    \<Longrightarrow> V \<in> Use n' \<and> (\<forall>as' a as''. asx = as'@a#as'' \<longrightarrow>
                          \<not> sourcenode a -{V}a#as''\<rightarrow>\<^sub>d\<^sub>d n')\<close>
  from \<open>(V,ax#asx,ax#asx) \<in> dependent_live_vars n'\<close>
  from \<open>ax#asx \<noteq> [] \<longrightarrow> n' = last (targetnodes (ax#asx))\<close>
    with \<open>(V,asx,asx) \<in> dependent_live_vars n'\<close> have "V \<in> Use n'"
    from \<open>\<not> sourcenode ax -{V}ax#asx\<rightarrow>\<^sub>d\<^sub>d last(targetnodes (ax#asx))\<close> 
      True \<open>n' = last (targetnodes (ax#asx))\<close>
    with \<open>V \<in> Use n'\<close> show ?thesis by simp
    with \<open>n' = last (targetnodes (ax#asx))\<close>
    from IH[OF \<open>(V,asx,asx) \<in> dependent_live_vars n'\<close> this] 
    with \<open>\<not> sourcenode ax -{V}ax#asx\<rightarrow>\<^sub>d\<^sub>d last(targetnodes (ax#asx))\<close>
      \<open>n' = last (targetnodes (ax#asx))\<close> have "V \<in> Use n'"
  with \<open>n'' -as\<rightarrow>\<^sub>c\<^sub>d n'\<close> show ?thesis
  with \<open>n'' -as\<rightarrow>\<^sub>c\<^sub>d n'\<close> have "sourcenode ax = n''"
  from \<open>n'' -as\<rightarrow>\<^sub>c\<^sub>d n'\<close> have "valid_node n'"
  from Cons \<open>n'' -as\<rightarrow>\<^sub>c\<^sub>d n'\<close> have "last(targetnodes as) = n'"
  with Cons \<open>n'' -as\<rightarrow>\<^sub>c\<^sub>d n'\<close> \<open>V' \<in> Use n''\<close> \<open>sourcenode ax = n''\<close> \<open>valid_node n'\<close>
  with \<open>n'' -{V}as\<rightarrow>\<^sub>d\<^sub>d n'\<close> show ?thesis
  with \<open>n'' -{V}as\<rightarrow>\<^sub>d\<^sub>d n'\<close> have "sourcenode ax = n''"
  from Cons \<open>n'' -{V}as\<rightarrow>\<^sub>d\<^sub>d n'\<close> have "last(targetnodes as) = n'"
  from Cons \<open>n'' -{V}as\<rightarrow>\<^sub>d\<^sub>d n'\<close> have all:"\<forall>as' a as''. asx = as'@a#as'' \<longrightarrow>
  from \<open>n'' -{V}as\<rightarrow>\<^sub>d\<^sub>d n'\<close> have "V \<in> Use n'" 
  from Cons \<open>n'' -{V}as\<rightarrow>\<^sub>d\<^sub>d n'\<close> have "as \<noteq> [] \<longrightarrow> n' = last(targetnodes as)"
  with all \<open>V \<in> Use n'\<close> have "(V,asx,asx) \<in> dependent_live_vars n'"
  with \<open>V' \<in> Use n''\<close> \<open>n'' -{V}as\<rightarrow>\<^sub>d\<^sub>d n'\<close> \<open>last(targetnodes as) = n'\<close>
    Cons \<open>sourcenode ax = n''\<close> show ?thesis
  from \<open>n -{V}a#as\<rightarrow>\<^sub>d\<^sub>d n''\<close> have "\<forall>n'' \<in> set (sourcenodes as). V \<notin> Def n''"
  with \<open>(V,as'',as') \<in> dependent_live_vars n'\<close> show ?thesis
    note IH = \<open>\<lbrakk>(V,as'',as') \<in> dependent_live_vars n';
                \<forall>n''\<in>set (sourcenodes asx). V \<notin> Def n''\<rbrakk>
               \<Longrightarrow> (V, asx@as'',asx@as') \<in> dependent_live_vars n'\<close>
    from \<open>\<forall>n''\<in>set (sourcenodes (ax#asx)). V \<notin> Def n''\<close>
    from IH[OF \<open>(V,as'',as') \<in> dependent_live_vars n'\<close> this]
    from \<open>as' \<noteq> []\<close> \<open>(V,as'',as') \<in> dependent_live_vars n'\<close>
    with \<open>as' \<noteq> []\<close> have "n' = last(targetnodes (ax#asx@as'))"
      with \<open>\<forall>n''\<in>set (sourcenodes (ax#asx)). V \<notin> Def n''\<close>
    with \<open>(V,asx@as'',asx@as') \<in> dependent_live_vars n'\<close> 
      \<open>n' = last(targetnodes (ax#asx@as'))\<close>
  from \<open>n'' -as''\<rightarrow>\<^sub>c\<^sub>d n'\<close> have "as'' \<noteq> []"
  with \<open>n'' -as''\<rightarrow>\<^sub>c\<^sub>d n'\<close> have "last(targetnodes as'') = n'"
  from \<open>(V',as',as) \<in> dependent_live_vars n''\<close> show ?thesis
    from \<open>V' \<in> Use n''\<close> \<open>n'' -as''\<rightarrow>\<^sub>c\<^sub>d n'\<close> \<open>last(targetnodes as'') = n'\<close> show ?case
    from \<open>n'' -as''\<rightarrow>\<^sub>c\<^sub>d n'\<close> have "n'' -as''\<rightarrow>\<^sub>d* n'" by(rule DynPDG_path_cdep)
    with \<open>nx -asx\<rightarrow>\<^sub>d* n''\<close> have "nx -asx@as''\<rightarrow>\<^sub>d* n'"
    with \<open>V \<in> Use (sourcenode a)\<close> \<open>(sourcenode a) -a#as'\<rightarrow>\<^sub>c\<^sub>d nx\<close>
    from \<open>as'' \<noteq> []\<close> \<open>last(targetnodes as'') = n'\<close>
    from \<open>as'' \<noteq> []\<close> \<open>last(targetnodes as'') = n'\<close>
  from \<open>n'' -{V}as''\<rightarrow>\<^sub>d\<^sub>d n'\<close> have "as'' \<noteq> []"
  with \<open>n'' -{V}as''\<rightarrow>\<^sub>d\<^sub>d n'\<close> have "last(targetnodes as'') = n'"
  from \<open>n'' -{V}as''\<rightarrow>\<^sub>d\<^sub>d n'\<close> have notExit:"n' \<noteq> (_Exit_)" 
  from \<open>(V',as',as) \<in> dependent_live_vars n''\<close> show ?thesis
    from \<open>V' \<in> Use n''\<close> \<open>n'' -{V}as''\<rightarrow>\<^sub>d\<^sub>d n'\<close> \<open>last(targetnodes as'') = n'\<close> show ?case
    from \<open>n'' -{V}as''\<rightarrow>\<^sub>d\<^sub>d n'\<close> have "n'' -as''\<rightarrow>\<^sub>d* n'" by(rule DynPDG_path_ddep)
    with \<open>nx -asx\<rightarrow>\<^sub>d* n''\<close> have "nx -asx@as''\<rightarrow>\<^sub>d* n'"
    with \<open>V' \<in> Use (sourcenode a)\<close> \<open>sourcenode a -a#as'\<rightarrow>\<^sub>c\<^sub>d nx\<close> notExit
    from \<open>as'' \<noteq> []\<close> \<open>last(targetnodes as'') = n'\<close>
    from \<open>as'' \<noteq> []\<close> \<open>last(targetnodes as'') = n'\<close>
  note IH = \<open>(V', as', as) \<in> dependent_live_vars n \<Longrightarrow>
             (V', as', as @ asx) \<in> dependent_live_vars n''\<close>
  from IH[OF \<open>(V',as',as) \<in> dependent_live_vars n\<close>]
  with \<open>n'' -asx'\<rightarrow>\<^sub>c\<^sub>d n'\<close> have "(V',as',(as@asx)@asx') \<in> dependent_live_vars n'"
  note IH = \<open>(V', as', as) \<in> dependent_live_vars n \<Longrightarrow>
             (V', as', as @ asx) \<in> dependent_live_vars n''\<close>
  from IH[OF \<open>(V',as',as) \<in> dependent_live_vars n\<close>]
  with \<open>n'' -{V}asx'\<rightarrow>\<^sub>d\<^sub>d n'\<close> have "(V',as',(as@asx)@asx') \<in> dependent_live_vars n'"
