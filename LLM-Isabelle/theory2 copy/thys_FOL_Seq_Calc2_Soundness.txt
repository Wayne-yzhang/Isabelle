theory Soundness
  imports ProverLemmas
begin


lemma SeCaV_children_pre:
  using assms
proof (induct z arbitrary: pre A)
  case Nil
  then show ?case
    by simp
next
  case (Cons p z)
    using that by simp


    using paramsts_subset Cons.prems(2) by fastforce

    using Cons.prems by (metis children.simps(2))
    using list_prod_is_cartesian by blast
  then have *:
    by blast
  then show ?case
  proof (cases r p rule: parts_exhaust)
    case (AlphaDis p q)
      using * unfolding parts_def by simp
      by simp
      using Ext by simp
      using SeCaV.AlphaDis by blast
    then show ?thesis
      using AlphaDis Ext by simp
  next
    case (AlphaImp p q)
      using * unfolding parts_def by simp
      by simp
      using Ext by simp
      using SeCaV.AlphaImp by blast
    then show ?thesis
      using AlphaImp Ext by simp
  next
    case (AlphaCon p q)
      using * unfolding parts_def by simp
      by simp
      using Ext by simp
      using SeCaV.AlphaCon by blast
    then show ?thesis
      using AlphaCon Ext by simp
  next
    case (BetaCon p q)
    then have
      using * unfolding parts_def by simp_all
    then have
      by simp_all
      using Ext by simp_all
      using SeCaV.BetaCon by blast
    then show ?thesis
      using BetaCon Ext by simp
  next
    case (BetaImp p q)
    then have
      using * unfolding parts_def by simp_all
    then have
      by simp_all
      using Ext by simp_all
      using SeCaV.BetaImp by blast
    then show ?thesis
      using BetaImp Ext by simp
  next
    case (BetaDis p q)
    then have
      using * unfolding parts_def by simp_all
    then have
      by simp_all
      using Ext by simp_all
      using SeCaV.BetaDis by blast
    then show ?thesis
      using BetaDis Ext by simp
  next
    case (DeltaUni p)
      using DeltaUni * unfolding parts_def by simp
      by simp
      using DeltaUni unfolding parts_def by simp
      using subtermFm_subset_params by blast
      using Ext by simp
      by (induct A) (metis Suc_max_new generateNew_def listFunTm_paramst(2) plus_1_eq_Suc)+
      using DeltaUni Cons.prems(2) news_paramss by auto
      using SeCaV.DeltaUni by blast
    then show ?thesis
      using DeltaUni Ext by simp
  next
    case (DeltaExi p)
      using DeltaExi * unfolding parts_def by simp
      by simp
      using DeltaExi unfolding parts_def by simp
      using subtermFm_subset_params by blast
      using Ext by simp
      by (induct A) (metis Suc_max_new generateNew_def listFunTm_paramst(2) plus_1_eq_Suc)+
      using DeltaExi Cons.prems(2) news_paramss by auto
      using SeCaV.DeltaExi by blast
    then show ?thesis
      using DeltaExi Ext by simp
  next
    case (NegNeg p)
      using * unfolding parts_def by simp
      by simp
      using Ext by simp
      using SeCaV.Neg by blast
    then show ?thesis
      using NegNeg Ext by simp
  next
    case (GammaExi p)
      using * unfolding parts_def by simp
      by simp
      using params_sub by fastforce
        using GammaExi A by fastforce
      by auto
      by auto
      using Ext by blast
    proof (induct A)
      case Nil
      then show ?case
        by simp
    next
      case (Cons a A)
        using SeCaV.GammaExi by simp
        using Ext by simp
      then show ?case
        using Cons.hyps by blast
    qed
    then show ?thesis
      using GammaExi Ext by simp
  next
    case (GammaUni p)
      using * unfolding parts_def by simp
      by simp
      using params_sub by fastforce
        using GammaUni A by fastforce
      by auto
      by auto
      using Ext by blast
    proof (induct A)
      case Nil
      then show ?case
        by simp
    next
      case (Cons a A)
        using SeCaV.GammaUni by simp
        using Ext by simp
      then show ?case
        using Cons.hyps by blast
    qed
    then show ?thesis
      using GammaUni Ext by simp
  next
    case Other
      using * by simp
    then show ?thesis
  qed
qed

corollary SeCaV_children:
  using SeCaV_children_pre assms by (metis append_Nil)

  unfolding Soundness_def
proof safe
  fix r A z ss S

    by simp

    case True
      using branchDone_contradiction by blast
    then show ?thesis
      using Ext Basic by fastforce
  next
    case False
      using False r_enabled eff_children next_sound by blast
      by simp
      using subtermFm_subset_params by fastforce
      using SeCaV_children by blast
  qed
qed

theorem prover_soundness_SeCaV:
  using assms soundness by fastforce

end
