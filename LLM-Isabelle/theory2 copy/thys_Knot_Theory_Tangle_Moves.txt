theory Tangle_Moves
imports Tangles Tangle_Algebra Tangle_Relation
begin




type_synonym relation = "wall \<Rightarrow> wall \<Rightarrow> bool" 


abbreviation right_over::"wall"
where
"right_over \<equiv>   ((basic [vert,cup]) \<circ> (basic [over,vert])\<circ>(basic [vert,cap]))"


abbreviation left_over::"wall"
where
" left_over \<equiv> ((basic (cup#vert#[])) \<circ> (basic (vert#over#[]))
\<circ> (basic (cap#vert#[])))"

abbreviation right_under::"wall"
where
"right_under \<equiv>   ((basic (vert#cup#[])) \<circ> (basic (under#vert#[]))
\<circ> (basic (vert#cap#[])))"


abbreviation left_under::"wall"
where
" left_under \<equiv> ((basic (cup#vert#[])) \<circ> (basic (vert#under#[]))
\<circ> (basic (cap#vert#[])))"

abbreviation straight_line::"wall"
where
"straight_line \<equiv> (basic (vert#[])) \<circ> (basic (vert#[])) \<circ> (basic (vert#[]))"

definition uncross_positive_flip::relation
where
"uncross_positive_flip x y \<equiv> ((x = right_over)\<and>(y =  left_over))"

definition uncross_positive_straighten::relation
where
"uncross_positive_straighten x y \<equiv> ((x = right_over)\<and>(y = straight_line))"

definition uncross_negative_flip::relation
where
"uncross_negative_flip x y \<equiv> ((x = right_under)\<and>(y =  left_under))"


definition uncross_negative_straighten::relation
where
"uncross_negative_straighten x y \<equiv> ((x = left_under)\<and>(y = straight_line))"

definition uncross
where
"uncross x y \<equiv> ((uncross_positive_straighten x y)\<or>(uncross_positive_flip x y)
                \<or>(uncross_negative_straighten x y)\<or> (uncross_negative_flip x y))"




abbreviation r_over_braid::"wall"
where
"r_over_braid  \<equiv>  ((basic ((over#vert#[]))\<circ>(basic ((vert#over#[])))
                 \<circ>(basic (over# vert#[]))))"



abbreviation l_over_braid::"wall"
where
"l_over_braid  \<equiv>   (basic (vert#over#[]))\<circ>(basic (over#vert#[]))
                    \<circ>(basic (vert#over#[]))"


abbreviation r_under_braid::"wall"
where
"r_under_braid  \<equiv>   ((basic ((under#vert#[]))\<circ>(basic ((vert#under#[])))
                 \<circ>(basic (under# vert#[]))))"

abbreviation l_under_braid::"wall"
where
"l_under_braid  \<equiv>   (basic (vert#under#[]))\<circ>(basic (under#vert#[]))
                    \<circ>(basic (vert#under#[]))"

definition swing_pos::"wall \<Rightarrow> wall \<Rightarrow> bool"
where
"swing_pos x y \<equiv> (x = r_over_braid)\<and>(y = l_over_braid)"

definition swing_neg::"wall \<Rightarrow> wall \<Rightarrow> bool"
where
"swing_neg x y \<equiv>(x = r_under_braid)\<and>(y=l_under_braid)"

definition swing::relation
where
"swing x y \<equiv> (swing_pos x y)\<or>(swing_neg x y)"


definition pull_posneg::relation
where
"pull_posneg x y \<equiv>  ((x = ((basic (over#[]))\<circ>(basic  (under#[]))))
                            \<and>(y = ((basic (vert#vert#[])))
                                   \<circ>(basic ((vert#vert#[])))))"


definition pull_negpos::relation
where
"pull_negpos x y \<equiv>  ((x = ((basic (under#[]))\<circ>(basic  (over#[]))))
                          \<and>(y = ((basic (vert#vert#[])))
                                   \<circ>(basic ((vert#vert#[])))))"

definition pull::relation
where
"pull x y \<equiv> ((pull_posneg x y) \<or> (pull_negpos x y))"                   


definition straighten_topdown::relation
where
"straighten_topdown x y \<equiv>  ((x =((basic ((vert#cup#[])))
                                         \<circ>(basic ((cap#vert#[])))))
                                   \<and>(y = ((basic (vert#[]))\<circ>(basic (vert#[])))))"



definition straighten_downtop::relation
where
"straighten_downtop x y \<equiv>  ((x =((basic ((cup# vert#[])))
                                         \<circ>(basic ((vert# cap#[])))))
                                   \<and>(y = ((basic (vert#[]))\<circ>(basic (vert#[])))))"




definition straighten::relation
where
"straighten x y \<equiv> ((straighten_topdown x y) \<or> (straighten_downtop x y))"




definition rotate_toppos::relation
where
"rotate_toppos x y \<equiv>  ((x = ((basic ((vert #over#[])))
                                     \<circ>(basic ((cap# vert#[])))))
                             \<and> (y = ((basic ((under#vert#[]))
                                     \<circ>(basic ((vert#cap#[])))))))"

definition rotate_topneg::"wall \<Rightarrow> wall \<Rightarrow> bool"
where
"rotate_topneg x y \<equiv>  ((x = ((basic ((vert #under#[])))
                                     \<circ>(basic ((cap# vert#[])))))
                             \<and> (y = ((basic ((over#vert#[]))
                                     \<circ>(basic ((vert#cap#[])))))))"


definition rotate_downpos::"wall \<Rightarrow> wall \<Rightarrow> bool"
where
"rotate_downpos x y \<equiv>  ((x = ((basic (cup#vert#[]))
                                     \<circ>(basic (vert#over#[]))))
                             \<and> (y = ((basic ((vert#cup#[])))
                                    \<circ>(basic ((under#vert#[]))))))"



definition rotate_downneg::"wall \<Rightarrow> wall \<Rightarrow> bool"
where
"rotate_downneg x y \<equiv>  ((x = ((basic (cup#vert#[]))
                                     \<circ>(basic (vert#under#[]))))
                             \<and> (y = ((basic ((vert#cup#[])))
                                    \<circ>(basic ((over#vert#[]))))))"




definition rotate::"wall \<Rightarrow> wall \<Rightarrow> bool"
where
"rotate x y \<equiv> ((rotate_toppos x y) \<or> (rotate_topneg x y)
\<or> (rotate_downpos x y) \<or> (rotate_downneg x y))"




definition compress_top1::"wall \<Rightarrow> wall \<Rightarrow> bool"
where
"compress_top1 x y \<equiv>  \<exists>B.((x = (basic (make_vert_block (nat (domain_wall B))))\<circ> B)
                              \<and>(y = B)\<and>(codomain_wall B \<noteq> 0)
                               \<and>(is_tangle_diagram B))"

definition compress_bottom1::"wall \<Rightarrow> wall \<Rightarrow> bool"
where
"compress_bottom1 x y \<equiv>  \<exists>B.((x = B \<circ> (basic (make_vert_block (nat (codomain_wall B)))))
                              \<and>(y =  B))\<and>(domain_wall B \<noteq> 0)
                               \<and>(is_tangle_diagram B)"

definition compress_bottom::"wall \<Rightarrow> wall \<Rightarrow> bool"
where
"compress_bottom x y \<equiv>   \<exists>B.((x = B \<circ> (basic (make_vert_block (nat (codomain_wall B)))))
                              \<and>(y = ((basic ([]) \<circ> B)))\<and>(domain_wall B = 0)
                               \<and>(is_tangle_diagram B))"

definition compress_top::"wall \<Rightarrow> wall \<Rightarrow> bool"
where
"compress_top x y \<equiv>  \<exists>B.((x = (basic (make_vert_block (nat (domain_wall B))))\<circ> B)
                              \<and>(y = (B \<circ> (basic ([]))))\<and>(codomain_wall B = 0)
                               \<and>(is_tangle_diagram B))"


definition compress::"wall \<Rightarrow> wall \<Rightarrow> bool"
where
"compress x y = ((compress_top x y) \<or> (compress_bottom x y))"
definition slide::"wall \<Rightarrow> wall \<Rightarrow> bool"
where
"slide x y \<equiv>  \<exists>B.((x = ((basic (make_vert_block (nat (domain_block B))))\<circ>(basic B)))
               \<and>(y = ((basic B)\<circ>(basic (make_vert_block (nat (codomain_block B))))))
\<and> ((domain_block B) \<noteq> 0))"

definition linkrel::"wall =>wall \<Rightarrow>bool"
where
"linkrel x y = ((uncross x y) \<or> (pull x y) \<or> (straighten x y) 
\<or>(swing x y)\<or>(rotate x y) \<or> (compress x y) \<or> (slide x y))"


definition framed_uncross::"wall \<Rightarrow> wall \<Rightarrow> bool"
where
"framed_uncross x y \<equiv> ((uncross_positive_flip x y)\<or>(uncross_negative_flip x y))"

definition framed_linkrel::"wall =>wall \<Rightarrow>bool"
where
"framed_linkrel x y = ((framed_uncross x y) \<or> (pull x y) \<or> (straighten x y) 
\<or>(swing x y)\<or>(rotate x y) \<or> (compress x y) \<or> (slide x y))"



lemma framed_uncross_implies_uncross: "(framed_uncross x y)\<Longrightarrow>(uncross x y)"
 by (auto simp add: framed_uncross_def uncross_def)


end
