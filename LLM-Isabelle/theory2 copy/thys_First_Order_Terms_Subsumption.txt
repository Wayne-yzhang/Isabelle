theory Subsumption
  imports
    Term
    "Abstract-Rewriting.Seq"
    "HOL-Library.Adhoc_Overloading"
    Fun_More
    Seq_More
begin

consts
  SUBSUMESEQ :: "'a \<Rightarrow> 'a \<Rightarrow> bool" (infix "\<le>\<cdot>" 50) 
  SUBSUMES :: "'a \<Rightarrow> 'a \<Rightarrow> bool" (infix "<\<cdot>" 50)
  LITSIM :: "'a \<Rightarrow> 'a \<Rightarrow> bool" (infix "\<doteq>" 50)

abbreviation (input) INSTANCEQ (infix "\<cdot>\<ge>" 50)
  where
    "x \<cdot>\<ge> y \<equiv> y \<le>\<cdot> x"

abbreviation (input) INSTANCE (infix "\<cdot>>" 50)
  where
    "x \<cdot>> y \<equiv> y <\<cdot> x"

abbreviation INSTANCEEQ_SET ("{\<cdot>\<ge>}")
  where
    "{\<cdot>\<ge>} \<equiv> {(x, y). y \<le>\<cdot> x}"

abbreviation INSTANCE_SET ("{\<cdot>>}")
  where
    "{\<cdot>>} \<equiv> {(x, y). y <\<cdot> x}"

abbreviation SUBSUMESEQ_SET ("{\<le>\<cdot>}")
  where
    "{\<le>\<cdot>} \<equiv> {(x, y). x \<le>\<cdot> y}"

abbreviation SUBSUMES_SET ("{<\<cdot>}")
  where
    "{<\<cdot>} \<equiv> {(x, y). x <\<cdot> y}"

abbreviation LITSIM_SET ("{\<doteq>}")
  where
    "{\<doteq>} \<equiv> {(x, y). x \<doteq> y}"

locale subsumable =
  fixes subsumeseq :: "'a \<Rightarrow> 'a \<Rightarrow> bool"
  assumes refl: "subsumeseq x x"
    and trans: "subsumeseq x y \<Longrightarrow> subsumeseq y z \<Longrightarrow> subsumeseq x z"
begin

adhoc_overloading
  SUBSUMESEQ subsumeseq

definition "subsumes t s \<longleftrightarrow> t \<le>\<cdot> s \<and> \<not> s \<le>\<cdot> t"

definition "litsim s t \<longleftrightarrow> s \<le>\<cdot> t \<and> t \<le>\<cdot> s"

adhoc_overloading
  SUBSUMES subsumes and
  LITSIM litsim

lemma litsim_refl [simp]:
  "s \<doteq> s"
  by (auto simp: litsim_def refl)

lemma litsim_sym:
  "s \<doteq> t \<Longrightarrow> t \<doteq> s"
  by (auto simp: litsim_def)

lemma litsim_trans:
  "s \<doteq> t \<Longrightarrow> t \<doteq> u \<Longrightarrow> s \<doteq> u"
  by (auto simp: litsim_def dest: trans)

end

sublocale subsumable \<subseteq> subsumption: preorder "(\<le>\<cdot>)" "(<\<cdot>)"
  by (unfold_locales) (auto simp: subsumes_def refl elim: trans)

inductive subsumeseq_term :: "('a, 'b) term \<Rightarrow> ('a, 'b) term \<Rightarrow> bool"
  where
    [intro]: "t = s \<cdot> \<sigma> \<Longrightarrow> subsumeseq_term s t"

adhoc_overloading
  SUBSUMESEQ subsumeseq_term

lemma subsumeseq_termE [elim]:
  assumes "s \<le>\<cdot> t"
  obtains \<sigma> where "t = s \<cdot> \<sigma>"
  using assms by (cases)

lemma subsumeseq_term_refl:
  fixes t :: "('a, 'b) term"
  shows "t \<le>\<cdot> t"
  by (rule subsumeseq_term.intros [of t t Var]) simp

lemma subsumeseq_term_trans:
  fixes s t u :: "('a, 'b) term"
  assumes "s \<le>\<cdot> t" and "t \<le>\<cdot> u"
  shows "s \<le>\<cdot> u"
proof -
  obtain \<sigma> \<tau>
    where [simp]: "t = s \<cdot> \<sigma>" "u = t \<cdot> \<tau>" using assms by fastforce
  show ?thesis
    by (rule subsumeseq_term.intros [of _ _ "\<sigma> \<circ>\<^sub>s \<tau>"]) simp
qed

interpretation term_subsumable: subsumable subsumeseq_term
  by standard (force simp: subsumeseq_term_refl dest: subsumeseq_term_trans)+

adhoc_overloading
  SUBSUMES term_subsumable.subsumes and
  LITSIM term_subsumable.litsim

lemma subsumeseq_term_iff:
  "s \<cdot>\<ge> t \<longleftrightarrow> (\<exists>\<sigma>. s = t \<cdot> \<sigma>)"
  by auto

fun num_syms :: "('f, 'v) term \<Rightarrow> nat"
  where
    "num_syms (Var x) = 1" |
    "num_syms (Fun f ts) = Suc (sum_list (map num_syms ts))"

fun num_vars :: "('f, 'v) term \<Rightarrow> nat"
  where
    "num_vars (Var x) = 1" |
    "num_vars (Fun f ts) = sum_list (map num_vars ts)"

definition num_unique_vars :: "('f, 'v) term \<Rightarrow> nat"
  where
    "num_unique_vars t = card (vars_term t)"

lemma num_syms_1: "num_syms t \<ge> 1"
  by (induct t) auto

lemma num_syms_subst:
  "num_syms (t \<cdot> \<sigma>) \<ge> num_syms t"
  using num_syms_1
  by (induct t) (auto, metis comp_apply sum_list_mono)



inductive emv where
  Var [simp, intro!]: "emv (Var x) (Var y)" |
  Fun [intro]: "\<lbrakk>f = g; length ss = length ts; \<forall>i < length ts. emv (ss ! i) (ts ! i)\<rbrakk> \<Longrightarrow>
    emv (Fun f ss) (Fun g ts)"

lemma sum_list_map_num_syms_subst:
  assumes "sum_list (map (num_syms \<circ> (\<lambda>t. t \<cdot> \<sigma>)) ts) = sum_list (map num_syms ts)"
  shows "\<forall>i < length ts. num_syms (ts ! i \<cdot> \<sigma>) = num_syms (ts ! i)"
  using assms
proof (induct ts)
  case (Cons t ts)
  then have "num_syms (t \<cdot> \<sigma>) + sum_list (map (num_syms \<circ> (\<lambda>t. t \<cdot> \<sigma>)) ts)
    = num_syms t + sum_list (map num_syms ts)" by (simp add: o_def)
  moreover have "num_syms (t \<cdot> \<sigma>) \<ge> num_syms t" by (metis num_syms_subst)
  moreover have "sum_list (map (num_syms \<circ> (\<lambda>t. t \<cdot> \<sigma>)) ts) \<ge> sum_list (map num_syms ts)"
    using num_syms_subst [of _ \<sigma>] by (induct ts) (auto intro: add_mono)
  ultimately show ?case using Cons by (auto) (case_tac i, auto)
qed simp

lemma subst_size_emv:
  assumes "s = t \<cdot> \<tau>" and "num_syms s = num_syms t" and "num_funs s = num_funs t"
  shows "emv s t"
  using assms
proof (induct t arbitrary: s)
  case (Var x)
  then show ?case by (force elim: num_funs_0)
next
  case (Fun g ts)
  note IH = this
  show ?case
  proof (cases s)
    case (Var x)
    then show ?thesis using Fun by simp
  next
    case (Fun f ss)
    from IH(2-) [unfolded Fun]
      and sum_list_map_num_syms_subst [of \<tau> ts]
      and sum_list_map_num_funs_subst [of \<tau> ts]
    have "\<forall>i < length ts. num_syms (ts ! i  \<cdot> \<tau>) = num_syms (ts ! i)"
      and "\<forall>i < length ts. num_funs (ts ! i \<cdot> \<tau>) = num_funs (ts ! i)"
      by auto
    with Fun and IH show ?thesis by auto
  qed
qed

lemma subsumeseq_term_size_emv:
  assumes "s \<cdot>\<ge> t" and "num_syms s = num_syms t" and "num_funs s = num_funs t"
  shows "emv s t"
  using assms(1) and subst_size_emv [OF _ assms(2-)] by (cases) simp

lemma emv_subst_vars_term:
  assumes "emv s t"
    and "s = t \<cdot> \<sigma>"
  shows "vars_term s = (the_Var \<circ> \<sigma>) ` vars_term t"
  using assms [unfolded subsumeseq_term_iff]
  apply (induct)
   apply (auto simp: in_set_conv_nth iff: image_iff)
   apply (metis nth_mem)
  by (metis comp_apply imageI nth_mem)

lemma emv_subst_imp_num_unique_vars_le:
  assumes "emv s t"
    and "s = t \<cdot> \<sigma>"
  shows "num_unique_vars s \<le> num_unique_vars t"
  using emv_subst_vars_term [OF assms]
  apply (simp add: num_unique_vars_def)
  by (metis card_image_le finite_vars_term)

lemma emv_subsumeseq_term_imp_num_unique_vars_le:
  assumes "emv s t"
    and "s \<cdot>\<ge> t"
  shows "num_unique_vars s \<le> num_unique_vars t"
  using assms(2) and emv_subst_imp_num_unique_vars_le [OF assms(1)] by (cases) simp

lemma num_syms_geq_num_vars:
  "num_syms t \<ge> num_vars t"
proof (induct t)
  case (Fun f ts)
  with sum_list_mono [of ts num_vars num_syms]
  have "sum_list (map num_vars ts) \<le> sum_list (map num_syms ts)" by simp
  then show ?case by simp
qed simp

lemma num_unique_vars_Fun_Cons:
  "num_unique_vars (Fun f (t # ts)) \<le> num_unique_vars t + num_unique_vars (Fun f ts)"
  apply (simp_all add: num_unique_vars_def)
  unfolding card_Un_Int [OF finite_vars_term finite_Union_vars_term]
  apply simp
  done

lemma sum_list_map_unique_vars:
  "sum_list (map num_unique_vars ts) \<ge> num_unique_vars (Fun f ts)"
proof (induct ts)
  case (Cons t ts)
  with num_unique_vars_Fun_Cons [of f t ts]
  show ?case by simp
qed (simp add: num_unique_vars_def)

lemma num_unique_vars_Var_1 [simp]:
  "num_unique_vars (Var x) = 1"
  by (simp_all add: num_unique_vars_def)

lemma num_vars_geq_num_unique_vars:
  "num_vars t \<ge> num_unique_vars t"
proof -
  note * =
    sum_list_mono [of _ num_unique_vars num_vars, THEN sum_list_map_unique_vars [THEN le_trans]]
  show ?thesis by (induct t) (auto intro: *)
