theory FL_Equivalence_Implies_Bisimilarity
imports
  FL_Logical_Equivalence
begin


context indexed_effect_nominal_ts
begin

  definition is_distinguishing_formula :: "('idx, 'pred, 'act, 'effect) formula \<Rightarrow> 'state \<Rightarrow> 'state \<Rightarrow> bool"
    ("_ distinguishes _ from _" [100,100,100] 100)
  where
    "x distinguishes P from Q \<equiv> P \<Turnstile> x \<and> \<not> Q \<Turnstile> x"

    assumes "x distinguishes P from Q" shows "(p \<bullet> x) distinguishes (p \<bullet> P) from (p \<bullet> Q)"
  using assms unfolding is_distinguishing_formula_def
  by (metis permute_minus_cancel(2) FL_valid_eqvt)

  lemma FL_equivalent_iff_not_distinguished:
    "FL_logically_equivalent F P Q \<longleftrightarrow> \<not>(\<exists>x. x \<in> \<A>[F] \<and> x distinguishes P from Q)"
  by (meson FL_logically_equivalent_def Not is_distinguishing_formula_def FL_valid_Not)

    support is contained in~@{term "supp (F,P)"}.\<close>
        with \<open>x \<in> \<A>[F]\<close> show "x' \<in> \<A>[F]"
        from \<open>x distinguishes P from Q\<close> show "P \<Turnstile> ?y"
        from \<open>x distinguishes P from Q\<close> show "\<not> Q \<Turnstile> ?y"
                from \<open>f \<in>\<^sub>f\<^sub>s F\<close> show "f \<in>\<^sub>f\<^sub>s F" .
                from \<open>bn \<alpha> \<sharp>* (\<langle>f\<rangle>Q, F, f)\<close> show "bn \<alpha> \<sharp>* (F, f)"
                  using \<open>bn \<alpha> \<sharp>* (\<langle>f\<rangle>Q, F, f)\<close> by (metis fresh_star_Pair FL_valid_Act_fresh)
              by (metis \<open>FL_logically_equivalent F P Q\<close> FL_logically_equivalent_def)
