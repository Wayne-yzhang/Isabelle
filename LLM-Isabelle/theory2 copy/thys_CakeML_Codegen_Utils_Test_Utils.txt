theory Test_Utils
imports
  Code_Utils
  Huffman.Huffman
  "HOL-Data_Structures.Leftist_Heap"
  "Pairing_Heap.Pairing_Heap_Tree"
  "Root_Balanced_Tree.Root_Balanced_Tree"
  "Dict_Construction.Dict_Construction"
begin


definition one :: nat where
"one = 1"

fun plus_one :: "nat \<Rightarrow> nat" where
"plus_one (Suc x) = one + plus_one x" |
"plus_one _ = one"



context
  notes [[dynamic_unfold]]
begin


end



fun diagonal :: "_ \<Rightarrow> _ \<Rightarrow> _ \<Rightarrow> nat" where
"diagonal x True False = 1" |
"diagonal False y True = 2" |
"diagonal True False z = 3"

code_thms diagonal

code_thms Leftist_Heap.ltree

context
  notes [[pattern_compatibility]]
begin


export_code huffman checking SML Scala

export_code
  Leftist_Heap.ltree
  Leftist_Heap.node
  Leftist_Heap.merge
  Leftist_Heap.insert
  Leftist_Heap.del_min
  checking SML Scala

export_code
  Pairing_Heap_Tree.link
  Pairing_Heap_Tree.pass\<^sub>1
  Pairing_Heap_Tree.pass\<^sub>2
  Pairing_Heap_Tree.is_root
  Pairing_Heap_Tree.pheap
  checking SML Scala

export_code
  Root_Balanced_Tree.size_tree_tm
  Root_Balanced_Tree.inorder2_tm
  Root_Balanced_Tree.split_min_tm
  checking SML Scala

end




lemma
  assumes "P" "Q" "R"
  shows "P \<and> Q \<and> R"
done

lemma
  assumes "P" "Q" "R"
  shows "P \<and> Q \<and> R"
apply (rule assms(2))
done

lemma
  assumes "P" "Q"
  shows "(P \<and> Q)" "(P \<and> Q)"
done

lemma
  assumes "Q" "P"
  shows "P \<and> Q"
done

end