theory "Lib" 

imports
  Main
  "HOL-Library.Datatype_Records"
  "LEM.Lem_pervasives"
  "LEM.Lem_list_extra"
  "LEM.Lem_string"
  "Coinductive.Coinductive_List"

begin 






fun  the  :: " 'a \<Rightarrow> 'a option \<Rightarrow> 'a "  where 
     " the _ (Some x) = ( x )" |" the x None = ( x )"


definition fapply  :: " 'a \<Rightarrow> 'b \<Rightarrow>('b,'a)Map.map \<Rightarrow> 'a "  where 
     " fapply d x f = ( (case   f x of Some d => d | None => d ))"


function (sequential,domintros) 
lunion  :: " 'a list \<Rightarrow> 'a list \<Rightarrow> 'a list "  where 
     "
lunion [] s = ( s )"
|"
lunion (x # xs) s = (
  if Set.member x (set s)
  then lunion xs s
  else x #(lunion xs s))" 
by pat_completeness auto









type_synonym( 'a, 'b) alist =" ('a * 'b) list "

fun opt_bind  :: " 'a option \<Rightarrow> 'b \<Rightarrow>('a*'b)list \<Rightarrow>('a*'b)list "  where 
     " opt_bind None v2 e = ( e )"
|" opt_bind (Some n') v2 e = ( (n',v2)# e )"



fun 
lshift  :: " nat \<Rightarrow>(nat)list \<Rightarrow>(nat)list "  where 
     "
lshift (n :: nat) ls = (
  List.map (\<lambda> v2 .  v2 - n) (List.filter (\<lambda> v2 .  n \<le> v2) ls))"


datatype_record locn = 
 row ::" nat " 
  col ::" nat " 
 offset ::" nat " 

type_synonym locs =" (locn * locn)"
end
