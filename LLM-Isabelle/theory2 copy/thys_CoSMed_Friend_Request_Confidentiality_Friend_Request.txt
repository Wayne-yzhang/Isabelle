theory Friend_Request
imports "../Observation_Setup" Friend_Request_Value_Setup
begin



fun T :: "(state,act,out) trans \<Rightarrow> bool"
where "T (Trans _ _ _ _) = False"


fun validValSeq :: "value list \<Rightarrow> bool \<Rightarrow> bool \<Rightarrow> bool \<Rightarrow> bool" where
  "validValSeq [] _ _ _ = True"
| "validValSeq (FRVal U1 req # vl) st r1 r2 \<longleftrightarrow> (\<not>st) \<and> (\<not>r1) \<and> validValSeq vl st True r2"
| "validValSeq (FRVal U2 req # vl) st r1 r2 \<longleftrightarrow> (\<not>st) \<and> (\<not>r2) \<and> validValSeq vl st r1 True"
| "validValSeq (FVal True # vl) st r1 r2 \<longleftrightarrow> (\<not>st) \<and> (r1 \<or> r2) \<and> validValSeq vl True False False"
| "validValSeq (FVal False # vl) st r1 r2 \<longleftrightarrow> st \<and> (\<not>r1) \<and> (\<not>r2) \<and> validValSeq vl False False False"
| "validValSeq (OVal True # vl) st r1 r2 \<longleftrightarrow> validValSeq vl st r1 r2"
| "validValSeq (OVal False # vl) st r1 r2 \<longleftrightarrow> validValSeq vl st r1 r2"

abbreviation validValSeqFrom :: "value list \<Rightarrow> state \<Rightarrow> bool"
where "validValSeqFrom vl s
 \<equiv> validValSeq vl (friends12 s) (UID1 \<in>\<in> pendingFReqs s UID2) (UID2 \<in>\<in> pendingFReqs s UID1)"


inductive BO :: "value list \<Rightarrow> value list \<Rightarrow> bool"
and BC :: "value list \<Rightarrow> value list \<Rightarrow> bool"
where
 BO_FVal[simp,intro!]:
  "BO (map FVal fs) (map FVal fs)"
|BO_BC[intro]:
  "BC vl vl1 \<Longrightarrow>
   BO (map FVal fs @ OVal False # vl) (map FVal fs @ OVal False # vl1)"
|BC_FVal[simp,intro!]:
  "BC (map FVal fs) (map FVal fs1)"
|BC_BO[intro]:
  "BO vl vl1 \<Longrightarrow> (fs = [] \<longleftrightarrow> fs1 = []) \<Longrightarrow> (fs \<noteq> [] \<Longrightarrow> last fs = last fs1) \<Longrightarrow>
   BC (map FVal fs  @ OVal True # vl)
      (map FVal fs1 @ OVal True # vl1)"


friendship request has happened yet.\<close>
subsection \<open>Unwinding proof\<close>
