theory Subtype
imports "../Isa_Counter/DirectSubtypes"
begin



lemma distinct_rtrancl_into_trancl:
  assumes neq_x_y: "x\<noteq>y"
  assumes x_y_rtrancl: "(x,y) \<in> r\<^sup>*"
  shows "(x,y) \<in> r\<^sup>+"
  using x_y_rtrancl neq_x_y
proof (induct)
  assume "x\<noteq>x" thus "(x, x) \<in> r\<^sup>+" by simp
next
  fix y z
  assume x_y_rtrancl: "(x, y) \<in> r\<^sup>*" 
  assume y_z_r: "(y, z) \<in> r" 
  assume "x \<noteq> y \<Longrightarrow> (x, y) \<in> r\<^sup>+" 
  assume "x \<noteq> z"
  from x_y_rtrancl
  show "(x, z) \<in> r\<^sup>+"
  proof (cases)
    assume "x=y"
    with y_z_r have "(x,z) \<in> r" by simp
    thus "(x,z) \<in>  r\<^sup>+"..
  next
    fix w
    assume "(x, w) \<in> r\<^sup>*"
    moreover assume "(w, y) \<in> r"
    ultimately have "(x,y) \<in> r\<^sup>+"
      by (rule rtrancl_into_trancl1)
    from this y_z_r
    show "(x, z) \<in> r\<^sup>+"..
  qed
qed

lemma acyclic_imp_antisym_rtrancl: "acyclic r \<Longrightarrow> antisym (r\<^sup>*)"
     (* takes a very long time to calculate *)
