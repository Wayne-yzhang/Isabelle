theory Transition_Systems
  imports Main
begin
  
locale lts =
fixes

begin

  where

     ("_ \<longmapsto>* _  _" [70, 70, 70] 80)
where

lemma steps_one_step: 
  assumes
   shows

lemma steps_concat: 
  assumes
   shows
proof (induct arbitrary: p)
  case (refl p'' A p')
  then show ?case by auto
next
  case (step p' A p'' a pp p)
  show ?case using steps.step[OF `p \<longmapsto>* A  p''` step(3,4)] .
qed

lemma steps_left:
  assumes
   shows
   using assms(1) 
  by (induct rule:steps.induct[OF assms(2)], blast, metis refl steps_concat steps_one_step) 

lemma steps_no_step:
  assumes
   shows
   using steps_left[OF assms(2,3)] assms(1) by blast
    
lemma steps_no_step_pos:
  assumes
   shows
   using assms steps_no_step by blast
    
lemma steps_loop:
  assumes
   shows
   using assms(3,1,2) by (induct, auto)

corollary steps_transp:
   using steps_concat unfolding transp_def by blast
  
lemma steps_spec: 
  assumes
   shows
proof induct
  case (refl p)
  show ?case using steps.refl .
next
  case (step p A' pp a pp')
  then show ?case using step(3,4,5) steps.step by auto
qed

  by (standard, simp, simp add: steps.refl, metis steps_concat)

lemma step_max_deadlock:
  fixes A q
  assumes
   shows
    False
proof -
    by (standard, simp add: assms(1))
  show ?thesis using assms order_trans order_refl finite_has_maximal2 mem_Collect_eq
    by metis
qed


lemma lts_impl_steps2:
  assumes
   shows
proof (induct rule: lts.steps.induct[OF assms(1)])
  case (1 p af)
  show ?case using lts.steps.refl[of step2 p af] by blast
next
  case (2 p af q1 a q)
  thus ?case using lts.step[OF 2(2) _ 2(4)] by blast
qed 
  
lemma lts_impl_steps:
  assumes
   shows
   using assms lts_impl_steps2[OF assms] by auto
  
end