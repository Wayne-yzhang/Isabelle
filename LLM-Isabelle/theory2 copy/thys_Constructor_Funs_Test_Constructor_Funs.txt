theory Test_Constructor_Funs
imports Constructor_Funs
begin


datatype (plugins del: "constructor_funs") 'a tree = Node | Fork 'a "'a tree list"

context begin


constructor_funs tree

end


record 'a meep =
  field1 :: 'a
  field2 :: nat


datatype
  'a mlist1 = MNil1 | MCons1 'a "'a mlist2" and
  'a mlist2 = MNil2 | MCons2 'a "'a mlist1"


datatype 'a seq = Nil | Cons 'a "'a seq"

fun app :: "'a seq \<Rightarrow> 'a seq \<Rightarrow> 'a seq" where
"app Nil ys = ys" |
"app (Cons x xs) ys = Cons x (app xs ys)"

fun map where
"map _ Nil = Nil" |
"map f (Cons x xs) = Cons (f x) (map f xs)"

definition "bla = map (Cons True) Nil"


declare [["constructor_funs"]]

export_code app bla plus_nat_inst.plus_nat in SML

export_code app bla plus_nat_inst.plus_nat checking SML Scala

end
