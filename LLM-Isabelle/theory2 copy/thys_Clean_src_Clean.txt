theory Clean
  imports Optics Symbex_MonadSE
  keywords "global_vars" "local_vars_test" :: thy_decl 
     and "returns" "pre" "post" "local_vars" "variant" 
     and "function_spec" :: thy_decl
     and "rec_function_spec"   :: thy_decl

begin





sequence of extensible record definitions:
  \begin{isar}
        record control_state =  break_val  :: bool   return_val :: bool
  \end{isar}
\<^enum> Any global variable definition block with definitions $a_1 : \tau_1$ $\dots$ $a_n : \tau_n$  
  is translated into a record extension:
  \begin{isar}
        record \<sigma>$_{n+1}$ = \<sigma>$_n$    +    a$_1$ :: $\tau_1$; ...; $a_n$ :: $\tau_n$
  \end{isar}
\<^enum> Any local variable definition block (as part of a procedure declaration) 
  with definitions $a_1 : \tau_1$ $\dots$ $a_n : \tau_n$ is translated into the record extension:
  \begin{isar}
        record \<sigma>$_{n+1}$ = \<sigma>$_n$    +    a$_1$ :: $\tau_1$ list; ...; $a_n$ :: $\tau_n$ list; result :: $\tau_{result-type}$ list; 
  \end{isar}
  statement.\<close>
text \<open> The \<^theory_text>\<open>record\<close> package creates an \<^theory_text>\<open>'\<sigma>\<close> extensible record type 
\<^theory_text>\<open>'\<sigma> control_state_ext\<close> where the \<^theory_text>\<open>'\<sigma>\<close> stands for extensions that are subsequently ``stuffed'' in
collection of these theorems constitutes the \<^emph>\<open>memory model\<close> of Clean, providing an incrementally 
C language; however, it is by construction \<^emph>\<open>logically consistent\<close> since it is
spaces in Clean. It contains just the information of the current control-flow: a \<^term>\<open>break\<close> occurred
(meaning all commands till the end of the control block will be skipped) or a \<^term>\<open>return\<close> occurred
  into \<^term>\<open>break\<close>-aware and \<^term>\<open>return\<close>-aware versions as shown in the definitions of
  \<^term>\<open>assign\<close> and \<^term>\<open>if_C\<close> (in this theory file, see below). \<close>
text\<open>For Reasoning over Clean programs, we need the notion of independance of an
     update from the control-block: \<close>
text\<open>This quite tricky proof establishes the fact that the special case 
     This implies that we don't need the list-lense-construction (so far).\<close>
subsection\<open>An Example for Global Variable Declarations.\<close>
text\<open>We present the above definition of the incremental construction of the state-space in more
detail via an example construction.

record declaration:


described in the Cauchy Sequence form @{typ "nat \<Rightarrow> (int \<times> int)"} as follows:


\<close>
subsection\<open> The Assignment Operations (embedded in State-Exception Monad) \<close>
text\<open>Based on the global variable states, we define   \<^term>\<open>break\<close>-aware and \<^term>\<open>return\<close>-aware 
version of the assignment. The trick to do this in a generic \<^emph>\<open>and\<close> type-safe way is to provide
cf. \<^cite>\<open>"Foster2009BidirectionalPL" and "DBLP:journals/toplas/FosterGMPS07" and
"DBLP:conf/ictac/FosterZW16"\<close>) to the generic assign operators. This pair of accessor and update
carries all relevant semantic and type information of this particular variable and \<^emph>\<open>characterizes\<close>
this variable semantically. Specific syntactic support~\<^footnote>\<open>via the Isabelle concept of
and permit a human-readable form of assignments or expressions accessing the underlying state. \<close>
text\<open>An update of the variable \<open>A\<close> based on the state of the previous example is done 
by @{term [source = true] \<open>assign_global A_upd (\<lambda>\<sigma>. list_update (A \<sigma>) (i) (A \<sigma> ! j))\<close>}
representing \<open>A[i] = A[j]\<close>; arbitrary nested updates can be constructed accordingly.\<close>
text\<open>Local variable spaces work analogously; except that they are represented by a stack
in order to support individual instances in case of function recursion. This requires
automated generation of specific push- and pop operations used to model the effect of
entering or leaving a function block (to be discussed later).\<close>
text\<open>Semantically, the difference between \<^emph>\<open>global\<close> and \<^emph>\<open>local\<close> is rather unimpressive as the 
