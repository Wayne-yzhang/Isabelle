theory Definitions
  imports "HOL-IMP.Small_Step"
begin




subsection "Global context definitions"

declare [[syntax_ambiguity_warning = false]]


datatype com_flow =
  Assign vname aexp  ("_ ::= _" [1000, 61] 70) |
  Observe "vname set"  ("\<langle>_\<rangle>" [61] 70)

type_synonym flow = "com_flow list"
type_synonym config = "state set \<times> vname set"
type_synonym scope = "config set \<times> bool"


abbreviation eq_states :: "state \<Rightarrow> state \<Rightarrow> vname set \<Rightarrow> bool"
  ("(_ = _ '(\<subseteq> _'))" [51, 51] 50) where
"s = t (\<subseteq> X) \<equiv> \<forall>x \<in> X. s x = t x"

abbreviation univ_states :: "state set \<Rightarrow> vname set \<Rightarrow> state set"
  ("(Univ _ '(\<subseteq> _'))" [51] 75) where
"Univ A (\<subseteq> X) \<equiv> {s. \<exists>t \<in> A. s = t (\<subseteq> X)}"

abbreviation univ_vars_if :: "state set \<Rightarrow> vname set \<Rightarrow> vname set"
  ("(Univ?? _ _)" [51, 75] 75) where
"Univ?? A X \<equiv> if A = {} then UNIV else X"

abbreviation "tl2 xs \<equiv> tl (tl xs)"


fun run_flow :: "flow \<Rightarrow> state \<Rightarrow> state" where
"run_flow (x ::= a # cs) s = run_flow cs (s(x := aval a s))" |
"run_flow (_ # cs) s = run_flow cs s" |
"run_flow _ s = s"

primrec no_upd :: "flow \<Rightarrow> vname \<Rightarrow> bool" where
"no_upd (c # cs) x =
  ((case c of y ::= _ \<Rightarrow> y \<noteq> x | _ \<Rightarrow> True) \<and> no_upd cs x)" |
"no_upd [] _ = True"

primrec avars :: "aexp \<Rightarrow> vname set" where
"avars (N i) = {}" |
"avars (V x) = {x}" |
"avars (Plus a\<^sub>1 a\<^sub>2) = avars a\<^sub>1 \<union> avars a\<^sub>2"

primrec bvars :: "bexp \<Rightarrow> vname set" where
"bvars (Bc v) = {}" |
"bvars (Not b) = bvars b" |
"bvars (And b\<^sub>1 b\<^sub>2) = bvars b\<^sub>1 \<union> bvars b\<^sub>2" |
"bvars (Less a\<^sub>1 a\<^sub>2) = avars a\<^sub>1 \<union> avars a\<^sub>2"


fun flow_aux :: "com list \<Rightarrow> flow" where
"flow_aux ((x ::= a) # cs) = (x ::= a) # flow_aux cs" |
"flow_aux ((IF b THEN _ ELSE _) # cs) = \<langle>bvars b\<rangle> # flow_aux cs" |
"flow_aux ((c;; _) # cs) = flow_aux (c # cs)" |
"flow_aux (_ # cs) = flow_aux cs" |
"flow_aux [] = []"

definition flow :: "(com \<times> state) list \<Rightarrow> flow" where
"flow cfs = flow_aux (map fst cfs)"


function small_stepsl ::
 "com \<times> state \<Rightarrow> (com \<times> state) list \<Rightarrow> com \<times> state \<Rightarrow> bool"
  ("(_ \<rightarrow>*'{_'} _)" [51, 51] 55)
where
"cf \<rightarrow>*{[]} cf' = (cf = cf')" |
"cf \<rightarrow>*{cfs @ [cf']} cf'' = (cf \<rightarrow>*{cfs} cf' \<and> cf' \<rightarrow> cf'')"

by (atomize_elim, auto intro: rev_cases)
termination by lexicographic_order

lemmas small_stepsl_induct = small_stepsl.induct [split_format(complete)]


subsection "Local context definitions"


locale noninterf =
  fixes
    interf :: "state \<Rightarrow> 'd \<Rightarrow> 'd \<Rightarrow> bool"
      ("(_: _ \<leadsto> _)" [51, 51, 51] 50) and
    dom :: "vname \<Rightarrow> 'd" and
    state :: "vname set"
  assumes
    interf_state: "s = t (\<subseteq> state) \<Longrightarrow> interf s = interf t"


context noninterf
begin


function
  sources :: "flow \<Rightarrow> state \<Rightarrow> vname \<Rightarrow> vname set" and
  sources_aux :: "flow \<Rightarrow> state \<Rightarrow> vname \<Rightarrow> vname set" where

"sources (cs @ [c]) s x = (case c of
  z ::= a \<Rightarrow> if z = x
    then sources_aux cs s x \<union> \<Union> {sources cs s y | y.
      run_flow cs s: dom y \<leadsto> dom x \<and> y \<in> avars a}
    else sources cs s x |
  \<langle>X\<rangle> \<Rightarrow>
    sources cs s x \<union> \<Union> {sources cs s y | y.
      run_flow cs s: dom y \<leadsto> dom x \<and> y \<in> X})" |

"sources [] _ x = {x}" |

"sources_aux (cs @ [c]) s x = (case c of
  _ ::= _ \<Rightarrow>
    sources_aux cs s x |
  \<langle>X\<rangle> \<Rightarrow>
    sources_aux cs s x \<union> \<Union> {sources cs s y | y.
      run_flow cs s: dom y \<leadsto> dom x \<and> y \<in> X})" |

"sources_aux [] _ _ = {}"

proof (atomize_elim)
  fix a :: "flow \<times> state \<times> vname + flow \<times> state \<times> vname"
  {
    assume
     "\<forall>cs c s x. a \<noteq> Inl (cs @ [c], s, x)" and
     "\<forall>s x. a \<noteq> Inl ([], s, x)" and
     "\<forall>s x. a \<noteq> Inr ([], s, x)"
    hence "\<exists>cs c s x. a = Inr (cs @ [c], s, x)"
      by (metis obj_sumE prod_cases3 rev_exhaust)
  }
  thus
   "(\<exists>cs c s x. a = Inl (cs @ [c], s, x)) \<or>
    (\<exists>s x. a = Inl ([], s, x)) \<or>
    (\<exists>cs c s x. a = Inr (cs @ [c], s, x)) \<or>
    (\<exists>s x. a = Inr ([], s, x))"
    by blast
qed auto

termination by lexicographic_order

lemmas sources_induct = sources_sources_aux.induct


abbreviation ok_flow :: "com \<Rightarrow> com \<Rightarrow> state \<Rightarrow> state \<Rightarrow> flow \<Rightarrow> bool" where
"ok_flow c\<^sub>1 c\<^sub>2 s\<^sub>1 s\<^sub>2 cs \<equiv>
  \<forall>t\<^sub>1. \<exists>c\<^sub>2' t\<^sub>2. \<forall>x.
    s\<^sub>1 = t\<^sub>1 (\<subseteq> sources cs s\<^sub>1 x) \<longrightarrow>
      (c\<^sub>1, t\<^sub>1) \<rightarrow>* (c\<^sub>2', t\<^sub>2) \<and> (c\<^sub>2 = SKIP) = (c\<^sub>2' = SKIP) \<and> s\<^sub>2 x = t\<^sub>2 x"

definition correct :: "com \<Rightarrow> state set \<Rightarrow> vname set \<Rightarrow> bool" where
"correct c A X \<equiv>
  \<forall>s \<in> Univ A (\<subseteq> state \<inter> X). \<forall>c\<^sub>1 c\<^sub>2 s\<^sub>1 s\<^sub>2 cfs.
    (c, s) \<rightarrow>* (c\<^sub>1, s\<^sub>1) \<and> (c\<^sub>1, s\<^sub>1) \<rightarrow>*{cfs} (c\<^sub>2, s\<^sub>2) \<longrightarrow>
      ok_flow c\<^sub>1 c\<^sub>2 s\<^sub>1 s\<^sub>2 (flow cfs)"


abbreviation interf_set :: "state set \<Rightarrow> 'd set \<Rightarrow> 'd set \<Rightarrow> bool"
  ("(_: _ \<leadsto> _)" [51, 51, 51] 50) where
"A: U \<leadsto> W \<equiv> \<forall>s \<in> A. \<forall>u \<in> U. \<forall>w \<in> W. s: u \<leadsto> w"

abbreviation ok_flow_aux ::
 "config set \<Rightarrow> com \<Rightarrow> com \<Rightarrow> state \<Rightarrow> state \<Rightarrow> flow \<Rightarrow> bool" where
"ok_flow_aux U c\<^sub>1 c\<^sub>2 s\<^sub>1 s\<^sub>2 cs \<equiv>
  (\<forall>t\<^sub>1. \<exists>c\<^sub>2' t\<^sub>2. \<forall>x.
    (s\<^sub>1 = t\<^sub>1 (\<subseteq> sources_aux cs s\<^sub>1 x) \<longrightarrow>
      (c\<^sub>1, t\<^sub>1) \<rightarrow>* (c\<^sub>2', t\<^sub>2) \<and> (c\<^sub>2 = SKIP) = (c\<^sub>2' = SKIP)) \<and>
    (s\<^sub>1 = t\<^sub>1 (\<subseteq> sources cs s\<^sub>1 x) \<longrightarrow> s\<^sub>2 x = t\<^sub>2 x)) \<and>
  (\<forall>x. (\<exists>p \<in> U. case p of (B, Y) \<Rightarrow>
    \<exists>s \<in> B. \<exists>y \<in> Y. \<not> s: dom y \<leadsto> dom x) \<longrightarrow> no_upd cs x)"


primrec btyping1 :: "bexp \<Rightarrow> bool option" ("(\<turnstile> _)" [51] 55) where

"\<turnstile> Bc v = Some v" |

"\<turnstile> Not b = (case \<turnstile> b of
  Some v \<Rightarrow> Some (\<not> v) | _ \<Rightarrow> None)" |

"\<turnstile> And b\<^sub>1 b\<^sub>2 = (case (\<turnstile> b\<^sub>1, \<turnstile> b\<^sub>2) of
  (Some v\<^sub>1, Some v\<^sub>2) \<Rightarrow> Some (v\<^sub>1 \<and> v\<^sub>2) | _ \<Rightarrow> None)" |

"\<turnstile> Less a\<^sub>1 a\<^sub>2 = (if avars a\<^sub>1 \<union> avars a\<^sub>2 = {}
  then Some (aval a\<^sub>1 (\<lambda>x. 0) < aval a\<^sub>2 (\<lambda>x. 0)) else None)"


type_synonym state_upd = "vname \<Rightarrow> val option option"

inductive_set ctyping1_merge_aux :: "state_upd list set \<Rightarrow>
  state_upd list set \<Rightarrow> (state_upd list \<times> bool) list set"
  (infix "\<Squnion>" 55) for A and B where

"xs \<in> A \<Longrightarrow> [(xs, True)] \<in> A \<Squnion> B" |

"ys \<in> B \<Longrightarrow> [(ys, False)] \<in> A \<Squnion> B" |

"\<lbrakk>ws \<in> A \<Squnion> B; \<not> snd (last ws); xs \<in> A; (xs, True) \<notin> set ws\<rbrakk> \<Longrightarrow>
   ws @ [(xs, True)] \<in> A \<Squnion> B" |

"\<lbrakk>ws \<in> A \<Squnion> B; snd (last ws); ys \<in> B; (ys, False) \<notin> set ws\<rbrakk> \<Longrightarrow>
   ws @ [(ys, False)] \<in> A \<Squnion> B"

declare ctyping1_merge_aux.intros [intro]

definition ctyping1_append ::
 "state_upd list set \<Rightarrow> state_upd list set \<Rightarrow> state_upd list set"
  (infixl "@" 55) where
"A @ B \<equiv> {xs @ ys | xs ys. xs \<in> A \<and> ys \<in> B}"

definition ctyping1_merge ::
 "state_upd list set \<Rightarrow> state_upd list set \<Rightarrow> state_upd list set"
  (infixl "\<squnion>" 55) where
"A \<squnion> B \<equiv> {concat (map fst ws) | ws. ws \<in> A \<Squnion> B}"

definition ctyping1_merge_append ::
 "state_upd list set \<Rightarrow> state_upd list set \<Rightarrow> state_upd list set"
  (infixl "\<squnion>\<^sub>@" 55) where
"A \<squnion>\<^sub>@ B \<equiv> (if card B = Suc 0 then A else A \<squnion> B) @ B"


primrec ctyping1_aux :: "com \<Rightarrow> state_upd list set"
  ("(\<turnstile> _)" [51] 60) where

"\<turnstile> SKIP = {[]}" |

"\<turnstile> y ::= a = {[\<lambda>x. if x = y \<and> y \<in> state
  then if avars a = {} then Some (Some (aval a (\<lambda>x. 0))) else Some None
  else None]}" |

"\<turnstile> c\<^sub>1;; c\<^sub>2 = \<turnstile> c\<^sub>1 \<squnion>\<^sub>@ \<turnstile> c\<^sub>2" |

"\<turnstile> IF b THEN c\<^sub>1 ELSE c\<^sub>2 = (let f = \<turnstile> b in
  (if f \<in> {Some True, None} then \<turnstile> c\<^sub>1 else {}) \<squnion>
  (if f \<in> {Some False, None} then \<turnstile> c\<^sub>2 else {}))" |

"\<turnstile> WHILE b DO c = (let f = \<turnstile> b in
  (if f \<in> {Some False, None} then {[]} else {}) \<union>
  (if f \<in> {Some True, None} then \<turnstile> c else {}))"

definition ctyping1_seq :: "state_upd \<Rightarrow> state_upd \<Rightarrow> state_upd"
  (infixl ";;" 55) where
"S;; T \<equiv> \<lambda>x. case T x of None \<Rightarrow> S x | Some v \<Rightarrow> Some v"

definition ctyping1 :: "com \<Rightarrow> state set \<Rightarrow> vname set \<Rightarrow> config"
  ("(\<turnstile> _ '(\<subseteq> _, _'))" [51] 55) where
"\<turnstile> c (\<subseteq> A, X) \<equiv> let F = {\<lambda>x. foldl (;;) (\<lambda>x. None) ys x | ys. ys \<in> \<turnstile> c} in
  ({\<lambda>x. case f x of None \<Rightarrow> s x | Some None \<Rightarrow> t x | Some (Some i) \<Rightarrow> i |
     f s t. f \<in> F \<and> s \<in> A},
   Univ?? A {x. \<forall>f \<in> F. f x \<noteq> Some None \<and> (f x = None \<longrightarrow> x \<in> X)})"


primrec btyping2_aux :: "bexp \<Rightarrow> state set \<Rightarrow> vname set \<Rightarrow> state set option"
  ("(\<TTurnstile> _ '(\<subseteq> _, _'))" [51] 55) where

"\<TTurnstile> Bc v (\<subseteq> A, _) = Some (if v then A else {})" |

"\<TTurnstile> Not b (\<subseteq> A, X) = (case \<TTurnstile> b (\<subseteq> A, X) of
  Some B \<Rightarrow> Some (A - B) | _ \<Rightarrow> None)" |

"\<TTurnstile> And b\<^sub>1 b\<^sub>2 (\<subseteq> A, X) = (case (\<TTurnstile> b\<^sub>1 (\<subseteq> A, X), \<TTurnstile> b\<^sub>2 (\<subseteq> A, X)) of
  (Some B\<^sub>1, Some B\<^sub>2) \<Rightarrow> Some (B\<^sub>1 \<inter> B\<^sub>2) | _ \<Rightarrow> None)" |

"\<TTurnstile> Less a\<^sub>1 a\<^sub>2 (\<subseteq> A, X) = (if avars a\<^sub>1 \<union> avars a\<^sub>2 \<subseteq> state \<inter> X
  then Some {s. s \<in> A \<and> aval a\<^sub>1 s < aval a\<^sub>2 s} else None)"

definition btyping2 :: "bexp \<Rightarrow> state set \<Rightarrow> vname set \<Rightarrow>
  state set \<times> state set"
  ("(\<Turnstile> _ '(\<subseteq> _, _'))" [51] 55) where
"\<Turnstile> b (\<subseteq> A, X) \<equiv> case \<TTurnstile> b (\<subseteq> A, X) of
  Some A' \<Rightarrow> (A', A - A') | _ \<Rightarrow> (A, A)"


abbreviation atyping :: "bool \<Rightarrow> aexp \<Rightarrow> vname set \<Rightarrow> bool"
  ("(_ \<Turnstile> _ '(\<subseteq> _'))" [51, 51] 50) where
"v \<Turnstile> a (\<subseteq> X) \<equiv> avars a = {} \<or> avars a \<subseteq> state \<inter> X \<and> v"

definition univ_states_if :: "state set \<Rightarrow> vname set \<Rightarrow> state set"
  ("(Univ? _ _)" [51, 75] 75) where
"Univ? A X \<equiv> if state \<subseteq> X then A else Univ A (\<subseteq> {})"


fun ctyping2 :: "scope \<Rightarrow> com \<Rightarrow> state set \<Rightarrow> vname set \<Rightarrow> config option"
  ("(_ \<Turnstile> _ '(\<subseteq> _, _'))" [51, 51] 55) where

"_ \<Turnstile> SKIP (\<subseteq> A, X) = Some (A, Univ?? A X)" |

"(U, v) \<Turnstile> x ::= a (\<subseteq> A, X) =
 (if (\<forall>(B, Y) \<in> insert (Univ? A X, avars a) U. B: dom ` Y \<leadsto> {dom x})
  then Some (if x \<in> state \<and> A \<noteq> {}
    then if v \<Turnstile> a (\<subseteq> X)
      then ({s(x := aval a s) | s. s \<in> A}, insert x X) else (A, X - {x})
    else (A, Univ?? A X))
  else None)" |

"(U, v) \<Turnstile> c\<^sub>1;; c\<^sub>2 (\<subseteq> A, X) =
 (case (U, v) \<Turnstile> c\<^sub>1 (\<subseteq> A, X) of
    Some (B, Y) \<Rightarrow> (U, v) \<Turnstile> c\<^sub>2 (\<subseteq> B, Y) | _ \<Rightarrow> None)" |

"(U, v) \<Turnstile> IF b THEN c\<^sub>1 ELSE c\<^sub>2 (\<subseteq> A, X) =
 (case (insert (Univ? A X, bvars b) U, \<Turnstile> b (\<subseteq> A, X)) of (U', B\<^sub>1, B\<^sub>2) \<Rightarrow>
    case ((U', v) \<Turnstile> c\<^sub>1 (\<subseteq> B\<^sub>1, X), (U', v) \<Turnstile> c\<^sub>2 (\<subseteq> B\<^sub>2, X)) of
      (Some (C\<^sub>1, Y\<^sub>1), Some (C\<^sub>2, Y\<^sub>2)) \<Rightarrow> Some (C\<^sub>1 \<union> C\<^sub>2, Y\<^sub>1 \<inter> Y\<^sub>2) |
      _ \<Rightarrow> None)" |

"(U, v) \<Turnstile> WHILE b DO c (\<subseteq> A, X) = (case \<Turnstile> b (\<subseteq> A, X) of (B\<^sub>1, B\<^sub>2) \<Rightarrow>
  case \<turnstile> c (\<subseteq> B\<^sub>1, X) of (C, Y) \<Rightarrow> case \<Turnstile> b (\<subseteq> C, Y) of (B\<^sub>1', B\<^sub>2') \<Rightarrow>
    if \<forall>(B, W) \<in> insert (Univ? A X \<union> Univ? C Y, bvars b) U.
      B: dom ` W \<leadsto> UNIV
    then case (({}, False) \<Turnstile> c (\<subseteq> B\<^sub>1, X), ({}, False) \<Turnstile> c (\<subseteq> B\<^sub>1', Y)) of
      (Some _, Some _) \<Rightarrow> Some (B\<^sub>2 \<union> B\<^sub>2', Univ?? B\<^sub>2 X \<inter> Y) |
      _ \<Rightarrow> None
    else None)"

end

end
