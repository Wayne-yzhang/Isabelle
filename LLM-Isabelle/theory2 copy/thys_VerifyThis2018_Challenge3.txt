theory Challenge3
imports "lib/VTcomp" "lib/DF_System"
begin

  consts N :: nat
  specification (N) N_not0[simp, intro!]: "N\<noteq>0" by auto
  lemma N_gt0[simp, intro!]: "0<N" by (cases N) auto 

  datatype thread = 
    INIT 
  | is_WAIT: WAIT (ticket: nat) 
  | is_HOLD: HOLD (ticket: nat) 
  | is_REL: REL (ticket: nat)
  
  
    
  
  type_synonym astate = "nat \<times> nat \<times> (nat \<Rightarrow> thread)"

  abbreviation "cc \<equiv> fst"
  abbreviation "nn s \<equiv> fst (snd s)"
  abbreviation "tts s \<equiv> snd (snd s)"
  
  
  inductive astep_sng where
    enter_wait: "astep_sng (c,n,INIT) (c,(n+1),WAIT n)"
  | loop_wait: "c\<noteq>k \<Longrightarrow> astep_sng (c,n,WAIT k) (c,n,WAIT k)"
  | exit_wait: "astep_sng (c,n,WAIT c) (c,n,HOLD c)"
  | start_release: "astep_sng (c,n,HOLD k) (c,n,REL k)"
  | release: "astep_sng (c,n,REL k) (k+1,n,INIT)"

  inductive alstep for t where
    "\<lbrakk> t<N; astep_sng (c,n,ts t) (c',n',s') \<rbrakk> 
      \<Longrightarrow> alstep t (c,n,ts) (c',n',ts(t:=s'))"
      
  definition "as\<^sub>0 \<equiv> (0, 0, \<lambda>_. INIT)"
    
  interpretation A: system as\<^sub>0 alstep .
  
  lemma never_blocked: "A.can_step l s \<longleftrightarrow> l<N"
    apply (cases s; cases "tts s l"; simp)
    unfolding A.can_step_def
    apply (clarsimp simp: alstep.simps astep_sng.simps; blast)+
    done
  
  interpretation A: df_system as\<^sub>0 alstep 
    apply unfold_locales
    subgoal for s
      using never_blocked[of 0 s]
      unfolding A.can_step_def
      by auto
    done
    
    
    
  definition "has_ticket s k \<equiv> s=WAIT k \<or> s=HOLD k \<or> s=REL k"
  lemma has_ticket_simps[simp]: 
    "\<not>has_ticket INIT k"
    "has_ticket (WAIT k) k'\<longleftrightarrow> k'=k"
    "has_ticket (HOLD k) k'\<longleftrightarrow> k'=k"
    "has_ticket (REL k) k'\<longleftrightarrow> k'=k"
    unfolding has_ticket_def by auto
    
  definition "locks_ticket s k \<equiv> s=HOLD k \<or> s=REL k"  
  lemma locks_ticket_simps[simp]: 
    "\<not>locks_ticket INIT k"
    "\<not>locks_ticket (WAIT k) k'"
    "locks_ticket (HOLD k) k'\<longleftrightarrow> k'=k"
    "locks_ticket (REL k) k'\<longleftrightarrow> k'=k"
    unfolding locks_ticket_def by auto

  lemma holds_imp_uses: "locks_ticket s k \<Longrightarrow> has_ticket s k"
    unfolding locks_ticket_def by auto
    

  definition "invar1 \<equiv> \<lambda>(c,n,ts).
    c \<le> n
  \<and> (\<forall>t k. t<N \<and> has_ticket (ts t) k \<longrightarrow> 
      c \<le> k \<and> k < n
    \<and> (\<forall>t' k'. t'<N \<and> has_ticket (ts t') k' \<and> t\<noteq>t' \<longrightarrow> k\<noteq>k')  
    \<and> (\<forall>k. k\<noteq>c \<longrightarrow> \<not>locks_ticket (ts t) k)
    )
  "  
    
  lemma is_invar1: "A.is_invar invar1"
    apply rule
    subgoal by (auto simp: invar1_def as\<^sub>0_def)
    subgoal for s s'
      apply (clarify)
      apply (erule alstep.cases)
      apply (erule astep_sng.cases)
      apply (clarsimp_all simp: invar1_def)
      apply fastforce
      apply fastforce
      apply fastforce
      apply fastforce
      by (metis Suc_le_eq holds_imp_uses locks_ticket_def le_neq_implies_less)
    done

  theorem mutual_exclusion: "\<lbrakk>A.reachable s; 
      t<N; t'<N; t\<noteq>t'; is_HOLD (tts s t); is_HOLD (tts s t')
    \<rbrakk> \<Longrightarrow> False" 
    apply (cases "tts s t"; simp)
    apply (cases "tts s t'"; simp)
    using A.invar_reachable[OF is_invar1, of s]
    apply (auto simp: invar1_def)
    by (metis locks_ticket_simps(3) has_ticket_simps(3))
      
  lemma mutual_exclusion': "\<lbrakk>A.reachable s; 
      t<N; t'<N; t\<noteq>t'; 
      locks_ticket (tts s t) tk; locks_ticket (tts s t') tk'
    \<rbrakk> \<Longrightarrow> False" 
    apply (cases "tts s t"; simp; cases "tts s t'"; simp)
    apply (cases "tts s t'"; simp)
    using A.invar_reachable[OF is_invar1, of s]
    apply (clarsimp_all simp: invar1_def)
    unfolding locks_ticket_def has_ticket_def
    apply metis+
    done

  
  lemma fair_aux:  
    assumes R: "A.is_run s"
    assumes A: "i<j" "cc (s i) \<le> k" "k < cc (s j)" "t<N" "tts (s i) t=WAIT k"
    shows "\<exists>l. i\<le>l \<and> l<j \<and> tts (s l) t = HOLD k"
  proof -
    interpret A: run as\<^sub>0 alstep s by unfold_locales fact
  
    from A show ?thesis
    proof (induction "j-i" arbitrary: i)
      case 0
      then show ?case by auto
    next
      case (Suc i')
      
      hence [simp]: "i'=j - Suc i" by auto
      note IH=Suc.hyps(1)[OF this]
      
      obtain t' where "alstep t' (s i) (s (Suc i))" by (rule A.stepE)
      then show ?case using Suc.prems
      proof cases
        case (1 c n ts c' n' s')
        note [simp] = "1"(1,2,3)
        
        from A.run_invar[OF is_invar1, of i] have "invar1 (c,n,ts)" by auto
        note I1 = this[unfolded invar1_def, simplified]
        
        from "1"(4) show ?thesis
        proof (cases rule: astep_sng.cases)
          case enter_wait
          then show ?thesis 
            using IH Suc.prems apply (auto)
            by (metis "1"(2) Suc_leD Suc_lessI fst_conv leD thread.distinct(1))
        next
          case (loop_wait k)
          then show ?thesis  
            using IH Suc.prems apply (auto)
            by (metis "1"(2) Suc_leD Suc_lessI fst_conv leD)
          
        next
          case exit_wait
          then show ?thesis
            apply (cases "t'=t")
            subgoal
              using Suc.prems apply clarsimp 
              by (metis "1"(2) Suc_leD Suc_lessI fst_conv fun_upd_same leD 
                less_or_eq_imp_le snd_conv)
            subgoal
              using Suc.prems IH
              apply auto
              by (metis "1"(2) Suc_leD Suc_lessI fst_conv leD)
            done  
        next
          case (start_release k)
          then show ?thesis
            using IH Suc.prems apply (auto)
            by (metis "1"(2) Suc_leD Suc_lessI fst_conv leD thread.distinct(7))
        next
          case (release k)
          then show ?thesis
            apply (cases "t'=t")
            using I1 IH Suc.prems apply (auto)
            by (metis "1"(2) "1"(3) Suc_leD Suc_leI Suc_lessI fst_conv 
              locks_ticket_simps(4) le_antisym not_less_eq_eq 
              has_ticket_simps(2) has_ticket_simps(4))
        qed
      qed
    qed
  qed  
  
  lemma s_case_expand: 
    "(case s of (c, n, ts) \<Rightarrow> P c n ts) = P (cc s) (nn s) (tts s)"
    by (auto split: prod.splits)
  
  
  lemma fair_aux2:
    assumes RUN: "A.is_run s"
    assumes ACQ: "t<N" "tts (s i) t=INIT" "tts (s (Suc i)) t=WAIT k" 
    assumes HOLD: "i<j" "tts (s j) t = HOLD k" 
    assumes WAIT: "t'<N" "tts (s i) t' = WAIT k'" 
    obtains l where "i<l" "l<j" "tts (s l) t' = HOLD k'" 
  proof -
    interpret A: run as\<^sub>0 alstep s by unfold_locales fact
  
    from ACQ WAIT have [simp]: "t\<noteq>t'" "t'\<noteq>t" by auto
    from ACQ have [simp]: 
      "nn (s i) = k \<and> nn (s (Suc i)) = Suc k 
    \<and> cc (s (Suc i)) = cc (s i) \<and> tts (s (Suc i)) = (tts (s i))(t:=WAIT k)"
      apply (rule_tac A.stepE[of i])
      apply (erule alstep.cases)
      apply (erule astep_sng.cases)
      by (auto simp: nth_list_update split: if_splits)
      
    from A.run_invar[OF is_invar1, of i] have "invar1 (s i)" by auto
    note I1 = this[unfolded invar1_def, unfolded s_case_expand, simplified]
    
    from WAIT I1 have "k' < k" by fastforce
    from ACQ HOLD have "Suc i \<noteq> j" by auto with HOLD have "Suc i < j" by auto
      
    have X1: "cc (s i) \<le> k'" using I1 WAIT by fastforce
    have X2: "k' < cc (s j)" 
      using A.run_invar[OF is_invar1, of j, unfolded invar1_def s_case_expand]
      apply clarsimp 
      by (metis locks_ticket_simps(3) has_ticket_simps(3))
    
      "l\<ge>Suc i" "l<j" "tts (s l) t' = HOLD k'"
      using WAIT X1 X2 by auto
      
    thus ?thesis
      apply (rule_tac that[of l])
      by auto
      
  qed        

  lemma find_hold_position:
    assumes RUN: "A.is_run s"
    assumes WAIT: "t<N" "tts (s i) t = WAIT tk"
    assumes NWAIT: "i<j" "tts (s j) t \<noteq> WAIT tk"
    obtains l where "i<l" "l\<le>j" "tts (s l) t = HOLD tk"
  proof -
    interpret A: run as\<^sub>0 alstep s by unfold_locales fact
  
    from WAIT(2) NWAIT have "\<exists>l. i<l \<and> l\<le>j \<and> tts (s l) t = HOLD tk"
    proof (induction "j-i" arbitrary: i)
      case 0
      then show ?case by auto
    next
      case (Suc i')
      
      hence [simp]: "i'=j - Suc i" by auto
      note IH=Suc.hyps(1)[OF this]
      
      obtain t' where "alstep t' (s i) (s (Suc i))" by (rule A.stepE)
      then show ?case
        apply -
        apply (cases "t=t'";erule alstep.cases; erule astep_sng.cases)
        apply auto
        using IH Suc.prems Suc.hyps(2)
        apply (auto)
        apply (metis Suc_lessD Suc_lessI fun_upd_same snd_conv)
        apply (metis Suc_lessD Suc_lessI fun_upd_other snd_conv)
        apply (metis Suc.prems(1) Suc_lessD Suc_lessI fun_upd_triv)
        apply (metis Suc_lessD Suc_lessI fun_upd_other snd_conv)
        apply (metis Suc_lessD Suc_lessI fun_upd_other snd_conv)
        apply (metis Suc_lessD Suc_lessI fun_upd_other snd_conv)
        done
    qed
    thus ?thesis using that by blast
  qed    
  
  
  theorem fair:
    assumes RUN: "A.is_run s"
    assumes ACQ: "t<N" "tts (s i) t=INIT" "is_WAIT (tts (s (Suc i)) t)" 
    assumes HOLD: "i<j" "is_HOLD (tts (s j) t)" 
    assumes WAIT: "t'<N" "is_WAIT (tts (s i) t')" 
    obtains l where "i<l" "l<j" "is_HOLD (tts (s l) t')" 
  proof -  
    obtain k where Wk: "tts (s (Suc i)) t = WAIT k" using ACQ
      by (cases "tts (s (Suc i)) t") auto
    
    obtain k' where Wk': "tts (s i) t' = WAIT k'" using WAIT
      by (cases "tts (s i) t'") auto
      
    from ACQ HOLD have "Suc i \<noteq> j" by auto with HOLD have "Suc i < j" by auto

      
    obtain j' where H': "Suc i < j'" "j' \<le> j" "tts (s j') t = HOLD k"
      using HOLD(2) by auto

    show ?thesis  
      apply (rule fair_aux2[OF RUN ACQ(1,2) Wk _ H'(3) WAIT(1) Wk'])
      subgoal using H'(1) by simp
      subgoal apply (erule that) using H'(2) by auto
      done
  qed    
  
  
  definition "invar2 
    \<equiv> \<lambda>(c,n,ts). \<forall>k. c\<le>k \<and> k<n \<longrightarrow> (\<exists>t<N. has_ticket (ts t) k)"
  
  lemma is_invar2: "A.is_invar invar2"
    apply rule
    subgoal by (auto simp: invar2_def as\<^sub>0_def)
    subgoal for s s'
      apply (clarsimp simp: invar2_def)
      apply (erule alstep.cases; erule astep_sng.cases; clarsimp)
      apply (metis less_antisym has_ticket_simps(1))
      subgoal by (metis has_ticket_simps(2))
      subgoal by (metis has_ticket_simps(2))
      subgoal by (metis has_ticket_simps(3))
      subgoal
        apply (frule A.invar_reachable[OF is_invar1])
        unfolding invar1_def 
        apply clarsimp 
        by (metis Suc_leD locks_ticket_simps(4) 
          not_less_eq_eq has_ticket_simps(4))
      done
    done  
    
  corollary current_lock_used:
    assumes R: "A.reachable (c,n,ts)"
    assumes WAIT: "t<N" "ts t = WAIT k" 
    obtains t' where "t'<N"  "has_ticket (ts t') c"
    using A.invar_reachable[OF is_invar2 R] 
      and A.invar_reachable[OF is_invar1 R] WAIT
    unfolding invar1_def invar2_def apply auto
    by (metis (full_types) le_neq_implies_less not_le order_mono_setup.refl 
      has_ticket_simps(2))
    
  lemma has_ticket_unique: "\<lbrakk>A.reachable (c,n,ts); 
      t<N; has_ticket (ts t) k; t'<N; has_ticket (ts t') k
    \<rbrakk> \<Longrightarrow> t'=t"
    apply (drule A.invar_reachable[OF is_invar1])
    by (auto simp: invar1_def) 
    
  definition "tkt_thread \<equiv> \<lambda>ts k. THE t. t<N \<and> has_ticket (ts t) k"
  lemma tkt_thread_eq: 
    assumes R: "A.reachable (c,n,ts)"  
    assumes A: "t<N" "has_ticket (ts t) k"
    shows "tkt_thread ts k = t"
    using has_ticket_unique[OF R]
    unfolding tkt_thread_def
    using A by auto
  
  lemma holds_only_current:
    assumes R: "A.reachable (c,n,ts)"  
    assumes A: "t<N" "locks_ticket (ts t) k"
    shows "k=c"
    using A.invar_reachable[OF is_invar1 R] A unfolding invar1_def
    using holds_imp_uses by blast
    
  definition "tweight s \<equiv> 
    case s of WAIT _ \<Rightarrow> 3::nat | HOLD _ \<Rightarrow> 2 | REL _ \<Rightarrow> 1 | INIT \<Rightarrow> 0"  

  
  theorem progress:
    assumes FRUN: "A.is_fair_run s"
    assumes A: "t<N" "is_WAIT (tts (s i) t)"
    shows "\<exists>j>i. is_HOLD (tts (s j) t)"
  proof -
    interpret A: fair_run as\<^sub>0 alstep s by unfold_locales fact
  
    from A obtain k where Wk: "tts (s i) t = WAIT k"
      by (cases "tts (s i) t") auto
    
    define lrel where "lrel \<equiv> 
      inv_image (measure id <*lex*> measure id <*lex*> measure id) (\<lambda>i. (
        k-cc (s i),
        tweight (tts (s i) (tkt_thread (tts (s i)) (cc (s i)))),
        A.dist_step (tkt_thread (tts (s i)) (cc (s i))) i
      ))"
  
    have "wf lrel" unfolding lrel_def by auto
    then show ?thesis using A(1) Wk   
    proof (induction i)
      case (less i)

      obtain c n ts where [simp]: "s i = (c,n,ts)" by (cases "s i")
      from A.run_reachable[of i] have R: "A.reachable (c,n,ts)" by simp
      
      obtain c' n' ts' where [simp]: "s (Suc i) = (c',n',ts')" 
        by (cases "s (Suc i)")
      from A.run_reachable[of "Suc i"] have R': "A.reachable (c',n',ts')" 
        by simp
            
      from less.prems have WAIT[simp]: "ts t = WAIT k" by simp
      
      {
        assume "ts' t \<noteq> WAIT k"
        hence "ts' t = HOLD k" using less.prems
          apply (rule_tac A.stepE[of i])
          apply (auto elim!: alstep.cases astep_sng.cases split: if_splits)
          done
        hence ?case by auto
      } moreover {
        assume [simp]: "ts' t = WAIT k"
        obtain tt where UTT: "tt<N" "has_ticket (ts tt) c"
          using current_lock_used[of c n ts t k] 
            and less.prems A.run_reachable[of i]
          by auto
        
        have [simp]: "tkt_thread ts c = tt" using tkt_thread_eq[OF R UTT] .
          
        
        have "A.can_step tt (s i)" by (simp add: never_blocked)
        hence ?case proof (cases rule: A.rstep_cases)
          
          hence [simp]: "c' = c \<and> ts' tt = ts tt"
            using has_ticket_unique[OF R UTT, of t']
            unfolding A.rstep_def
            using holds_only_current[OF R, of t']
            by (force elim!: alstep.cases astep_sng.cases)

          have [simp]: "tkt_thread ts' c = tt"
            using UTT tkt_thread_eq[OF R', of tt c] by auto

          have "(Suc i, i) \<in> lrel"
            unfolding lrel_def tweight_def by (simp add: other)
          
            apply (auto) using Suc_lessD by blast
        next

          show ?thesis 
          proof (cases "\<exists>k'. ts tt = REL k'")
            then have [simp]: "ts tt = REL c"
              using UTT by auto
            
            have [simp]: "c' = Suc c"
              using THIS apply -
              unfolding A.rstep_def
              apply (erule alstep.cases, erule astep_sng.cases)
              by auto
        
            from A.invar_reachable[OF is_invar1 R] have "k>c"
              apply (auto simp: invar1_def)
                less.prems(1) thread.distinct(9) has_ticket_simps(2))
              
            hence "(Suc i, i) \<in> lrel"
              unfolding lrel_def by auto
              apply (auto) using Suc_lessD by blast
          next
            
            hence [simp]: "
              c' = c 
            \<and> tweight (ts tt) > tweight (ts' tt) 
            \<and> has_ticket (ts' tt) c"
              using THIS UTT apply -
              unfolding A.rstep_def
              apply (erule alstep.cases, erule astep_sng.cases)
              by (auto simp: has_ticket_def tweight_def)
            
            have [simp]: "tkt_thread ts' c = tt"

            have "(Suc i, i) \<in> lrel" unfolding lrel_def by auto
              apply (auto) using Suc_lessD by blast
          qed
        qed  
      }
      ultimately show ?case by blast
    qed
  qed      
  
  
      
  consts k::nat
  specification (k) k_not0[simp]: "k\<noteq>0" by auto
  lemma k_gt0[simp]: "0<k" by (cases k) auto  

  
  type_synonym bstate = "nat \<times> nat \<times> (nat \<Rightarrow> thread)" 
  
  inductive bstep_sng where
    enter_wait: "bstep_sng (c,n,INIT) (c,(n+1) mod (k*N),WAIT (n mod N))"
  | loop_wait: "c\<noteq>tk \<Longrightarrow> bstep_sng (c,n,WAIT tk) (c,n,WAIT tk)"
  | exit_wait: "bstep_sng (c,n,WAIT c) (c,n,HOLD c)"
  | start_release: "bstep_sng (c,n,HOLD tk) (c,n,REL tk)"
  | release: "bstep_sng (c,n,REL tk) ((tk+1) mod N,n,INIT)"

  inductive blstep for t where
    "\<lbrakk> t<N; bstep_sng (c,n,ts t) (c',n',s') \<rbrakk> 
      \<Longrightarrow> blstep t (c,n,ts) (c',n',ts(t:=s'))"
  
  definition "bs\<^sub>0 \<equiv> (0, 0, \<lambda>_. INIT)"
  
  interpretation B: system bs\<^sub>0 blstep .
        
  lemma b_never_blocked: "B.can_step l s \<longleftrightarrow> l<N"
    apply (cases s; cases "tts s l"; simp)
    unfolding B.can_step_def
    apply (clarsimp simp: blstep.simps bstep_sng.simps; blast)+
    done
  
  interpretation B: df_system bs\<^sub>0 blstep 
    apply unfold_locales
    subgoal for s
      using b_never_blocked[of 0 s]
      unfolding B.can_step_def
      by auto
    done
  
    
  lemma nat_sum_gtZ_iff[simp]: 
    "finite s \<Longrightarrow> sum f s \<noteq> (0::nat) \<longleftrightarrow> (\<exists>x\<in>s. f x \<noteq> 0)"    
    by simp
    
  lemma n_eq_Suc_sub1_conv[simp]: "n = Suc (n - Suc 0) \<longleftrightarrow> n\<noteq>0" by auto
    
  lemma mod_mult_mod_eq[mod_simps]: "x mod (k * N) mod N = x mod N"  
    by (meson dvd_eq_mod_eq_0 mod_mod_cancel mod_mult_self2_is_0)

  lemma mod_eq_imp_eq_aux: "b mod N = (a::nat) mod N \<Longrightarrow> a\<le>b \<Longrightarrow> b<a+N \<Longrightarrow> b=a"
    by (auto simp add: mod_eq_dvd_iff_nat le_imp_diff_is_add)
    
  lemma mod_eq_imp_eq: 
    "\<lbrakk>b \<le> x; x < b + N; b \<le> y; y < b + N; x mod N = y mod N \<rbrakk> \<Longrightarrow> x=y"
  proof -
    assume a1: "b \<le> y"
    assume a2: "y < b + N"
    assume a3: "b \<le> x"
    assume a4: "x < b + N"
    assume a5: "x mod N = y mod N"
    have f6: "x < y + N"
      using a4 a1 by linarith
    have "y < x + N"
      using a3 a2 by linarith
    then show ?thesis
      using f6 a5 by (metis (no_types) mod_eq_imp_eq_aux nat_le_linear)
  qed
    

  fun map_ticket where
    "map_ticket f INIT = INIT"
  | "map_ticket f (WAIT tk) = WAIT (f tk)"
  | "map_ticket f (HOLD tk) = HOLD (f tk)"
  | "map_ticket f (REL tk) = REL (f tk)"
  
  lemma map_ticket_addsimps[simp]:
    "map_ticket f t = INIT \<longleftrightarrow> t=INIT"  
    "map_ticket f t = WAIT tk \<longleftrightarrow> (\<exists>tk'. tk=f tk' \<and> t=WAIT tk')"
    "map_ticket f t = HOLD tk \<longleftrightarrow> (\<exists>tk'. tk=f tk' \<and> t=HOLD tk')"
    "map_ticket f t = REL tk \<longleftrightarrow> (\<exists>tk'. tk=f tk' \<and> t=REL tk')"
    by (cases t; auto)+
  
    
  fun ni_weight :: "thread \<Rightarrow> nat" where
    "ni_weight INIT = 0" | "ni_weight _ = 1"
  
  lemma ni_weight_le1[simp]: "ni_weight s \<le> Suc 0"
    by (cases s) auto
      
  definition "num_ni ts \<equiv> \<Sum> i=0..<N. ni_weight (ts i)"
  lemma num_ni_init[simp]: "num_ni (\<lambda>_. INIT) = 0" by (auto simp: num_ni_def)
  
  lemma num_ni_upd: 
    "t<N \<Longrightarrow> num_ni (ts(t:=s)) = num_ni ts - ni_weight (ts t) + ni_weight s"
    by (auto 
      simp: num_ni_def if_distrib[of ni_weight] sum.If_cases algebra_simps
      simp: sum_diff1_nat
      )
      
  lemma num_ni_nz_if[simp]: "\<lbrakk>t < N; ts t \<noteq> INIT\<rbrakk> \<Longrightarrow> num_ni ts \<noteq> 0"
    apply (cases "ts t")
    by (simp_all add: num_ni_def) force+

  lemma num_ni_leN: "num_ni ts \<le> N"
    apply (clarsimp simp: num_ni_def)
    apply (rule order_trans)
    apply (rule sum_bounded_above[where K=1])
    apply auto
    done

  definition "invar3 \<equiv> \<lambda>(c,n,ts). n = c + num_ni ts"
  
  lemma is_invar3: "A.is_invar invar3"
    apply (rule)
    subgoal by (auto simp: invar3_def as\<^sub>0_def)
    subgoal for s s'
      apply clarify
      apply (erule alstep.cases, erule astep_sng.cases)
      apply (auto simp: invar3_def num_ni_upd)
      using holds_only_current by fastforce
    done  

      
  definition "sim_rel1 \<equiv> \<lambda>(c,n,ts) (ci,ni,tsi). 
    ci = c mod N
  \<and> ni = n mod (k*N)
  \<and> tsi = (map_ticket (\<lambda>t. t mod N)) o ts
  "

  lemma sraux: 
    "sim_rel1 (c,n,ts) (ci,ni,tsi) \<Longrightarrow> ci = c mod N \<and> ni = n mod (k*N)"
    by (auto simp: sim_rel1_def Let_def)
    
  lemma sraux2: "\<lbrakk>sim_rel1 (c,n,ts) (ci,ni,tsi); t<N\<rbrakk> 
    \<Longrightarrow> tsi t = map_ticket (\<lambda>x. x mod N) (ts t)"  
    by (auto simp: sim_rel1_def Let_def)
    
    
  interpretation sim1: simulationI as\<^sub>0 alstep bs\<^sub>0 blstep sim_rel1
  proof unfold_locales
    show "sim_rel1 as\<^sub>0 bs\<^sub>0"
      by (auto simp: sim_rel1_def as\<^sub>0_def bs\<^sub>0_def)
  next
    fix as bs t bs'  
    assume Ra_aux: "A.reachable as" 
       and Rc_aux: "B.reachable bs" 
       and SIM: "sim_rel1 as bs" 
       and CS: "blstep t bs bs'"
  
    obtain c n ts where [simp]: "as=(c,n,ts)" by (cases as)
    obtain ci ni tsi where [simp]: "bs=(ci,ni,tsi)" by (cases bs)
    obtain ci' ni' tsi' where [simp]: "bs'=(ci',ni',tsi')" by (cases bs')
    from Ra_aux have Ra: "A.reachable (c,n,ts)" by simp
    from Rc_aux have Rc: "B.reachable (ci,ni,tsi)" by simp
       
    from CS have "t<N" by cases auto
    
    have [simp]: "n = c + num_ni ts"
      using A.invar_reachable[OF is_invar3 Ra, unfolded invar3_def] by simp
    
    have AUX1: "c\<le>tk" "tk<c+N" if "ts t = WAIT tk" for tk
      using that A.invar_reachable[OF is_invar1 Ra]
      apply (auto simp: invar1_def)
      
    from SIM CS have "\<exists>as'. alstep t as as' \<and> sim_rel1 as' bs'"
      apply simp
      apply (erule blstep.cases)
      apply (erule bstep_sng.cases)
      apply clarsimp_all
    subgoal
      apply (intro exI conjI)
      apply (rule alstep.intros)
      apply (simp add: sim_rel1_def Let_def)
      apply (simp add: sraux sraux2)
      apply (rule astep_sng.enter_wait)
      apply (simp add: sim_rel1_def; intro conjI ext)
      apply (auto simp: sim_rel1_def Let_def mod_simps)  
      done
    subgoal
      apply (clarsimp simp: sraux sraux2)
      apply (intro exI conjI)
      apply (rule alstep.intros)
      apply (simp add: sim_rel1_def Let_def)
      apply clarsimp
      apply (rule astep_sng.loop_wait)
      apply (auto simp: sim_rel1_def Let_def mod_simps)  
      done
    subgoal
      apply (clarsimp simp: sraux sraux2)
      subgoal for tk'
        apply (subgoal_tac "tk'=c")
        apply (intro exI conjI)
        apply (rule alstep.intros)
        apply (simp add: sim_rel1_def Let_def)
        apply clarsimp
        apply (rule astep_sng.exit_wait)
        apply (auto simp: sim_rel1_def Let_def mod_simps) []
        apply (clarsimp simp: sim_rel1_def)
        apply (erule mod_eq_imp_eq_aux)
        apply (auto simp: AUX1)
        done
      done
    subgoal
      apply (clarsimp simp: sraux sraux2)
      apply (intro exI conjI)
      apply (rule alstep.intros)
      apply (simp add: sim_rel1_def Let_def)
      apply clarsimp
      apply (rule astep_sng.start_release)
      apply (auto simp: sim_rel1_def Let_def mod_simps)  
      done
    subgoal
      apply (clarsimp simp: sraux sraux2)
      apply (intro exI conjI)
      apply (rule alstep.intros)
      apply (simp add: sim_rel1_def Let_def)
      apply clarsimp
      apply (rule astep_sng.release)
      apply (auto simp: sim_rel1_def Let_def mod_simps)
      done
    done  
    then show "\<exists>as'. sim_rel1 as' bs' \<and> alstep t as as'" by blast
  next  
    fix as bs l
    assume "A.reachable as" "B.reachable bs" "sim_rel1 as bs" "A.can_step l as"
    then show "B.can_step l bs" using b_never_blocked never_blocked by simp
  qed      


    
  
  lemma xfer_locks_ticket:
    assumes "locks_ticket (map_ticket (\<lambda>t. t mod N) (ts t)) tki"  
    obtains tk where "tki=tk mod N" "locks_ticket (ts t) tk"
    using assms unfolding locks_ticket_def
    by auto
  
  
  lemma b_holds_only_current: 
    "\<lbrakk>B.reachable (c, n, ts); t < N; locks_ticket (ts t) tk\<rbrakk> \<Longrightarrow> tk = c"
    apply (rule sim1.xfer_reachable, assumption)
    apply (clarsimp simp: sim_rel1_def)
    apply (erule xfer_locks_ticket)+
    using holds_only_current 
    by blast
  
  lemma b_mutual_exclusion': "\<lbrakk>B.reachable s; 
      t<N; t'<N; t\<noteq>t'; locks_ticket (tts s t) tk; locks_ticket (tts s t') tk'
    \<rbrakk> \<Longrightarrow> False" 
    apply (rule sim1.xfer_reachable, assumption)
    apply (clarsimp simp: sim_rel1_def)
    apply (erule xfer_locks_ticket)+
    apply (drule (3) mutual_exclusion'; simp)
    done
    
  lemma xfer_has_ticket:
    assumes "has_ticket (map_ticket (\<lambda>t. t mod N) (ts t)) tki"  
    obtains tk where "tki=tk mod N" "has_ticket (ts t) tk"
    using assms unfolding has_ticket_def
    by auto
    
  lemma has_ticket_in_range:
    assumes Ra: "A.reachable (c,n,ts)" and "t<N" and U: "has_ticket (ts t) tk" 
    shows "c\<le>tk \<and> tk<c+N"  
  proof -
    
    have [simp]: "n=c + num_ni ts"
      using A.invar_reachable[OF is_invar3 Ra, unfolded invar3_def] by simp
    
    show "c\<le>tk \<and> tk<c+N" 
      using A.invar_reachable[OF is_invar1 Ra] U
      apply (auto simp: invar1_def)
  qed  
    
  lemma b_has_ticket_unique: "\<lbrakk>B.reachable (ci,ni,tsi); 
      t<N; has_ticket (tsi t) tki; t'<N; has_ticket (tsi t') tki
    \<rbrakk> \<Longrightarrow> t'=t"
    apply (rule sim1.xfer_reachable, assumption)
    apply (auto simp: sim_rel1_def)
    subgoal for c n ts
      apply (erule xfer_has_ticket)+
      apply simp
      subgoal for tk tk'
        apply (subgoal_tac "tk=tk'")
        apply simp
        apply (frule (4) has_ticket_unique, assumption)
        apply (frule (2) has_ticket_in_range[where tk=tk])
        apply (frule (2) has_ticket_in_range[where tk=tk'])
        apply (auto simp: mod_simps)
        apply (rule mod_eq_imp_eq; (assumption|simp))
        done
      done
    done  
        
        
  
  
  
  
  type_synonym cstate = "bool list \<times> nat \<times> (nat \<Rightarrow> thread)" 
  
  inductive cstep_sng where
    enter_wait: "cstep_sng (p,n,INIT) (p,(n+1) mod (k*N),WAIT (n mod N))"
  | loop_wait: "\<not>p!tk \<Longrightarrow> cstep_sng (p,n,WAIT tk) (p,n,WAIT tk)"
  | exit_wait: "p!tk \<Longrightarrow> cstep_sng (p,n,WAIT tk) (p,n,HOLD tk)"
  | start_release: "cstep_sng (p,n,HOLD tk) (p[tk:=False],n,REL tk)"
  | release: "cstep_sng (p,n,REL tk) (p[(tk+1) mod N := True],n,INIT)"

  inductive clstep for t where
    "\<lbrakk> t<N; cstep_sng (c,n,ts t) (c',n',s') \<rbrakk> 
      \<Longrightarrow> clstep t (c,n,ts) (c',n',ts(t:=s'))"
  
  definition "cs\<^sub>0 \<equiv> ((replicate N False)[0:=True], 0, \<lambda>_. INIT)"
  
  interpretation C: system cs\<^sub>0 clstep .
        
  lemma c_never_blocked: "C.can_step l s \<longleftrightarrow> l<N"
    apply (cases s; cases "tts s l"; simp)
    unfolding C.can_step_def
    apply (clarsimp_all simp: clstep.simps cstep_sng.simps)
    by metis
  
  interpretation C: df_system cs\<^sub>0 clstep 
    apply unfold_locales
    subgoal for s
      using c_never_blocked[of 0 s]
      unfolding C.can_step_def
      by auto
    done
  
  definition "invar4 
    \<equiv> \<lambda>(c,n,ts). c<N \<and> (\<forall>t<N. \<forall>tk. has_ticket (ts t) tk \<longrightarrow> tk<N)"
  
  lemma is_invar4: "B.is_invar invar4"
    apply (rule)
    subgoal by (auto simp: invar4_def bs\<^sub>0_def)
    subgoal for s s'
      apply clarify
      apply (erule blstep.cases, erule bstep_sng.cases)
      unfolding invar4_def
          apply safe
      apply (metis N_gt0 fun_upd_apply has_ticket_simps(2) mod_less_divisor)
        apply (metis fun_upd_triv)
        apply (metis fun_upd_other fun_upd_same has_ticket_simps(3))
        apply (metis fun_upd_other fun_upd_same has_ticket_def has_ticket_simps(4))
        using mod_less_divisor apply blast  
        apply (metis fun_upd_apply thread.distinct(1) thread.distinct(3) 
          thread.distinct(5) has_ticket_def) 
      done
    done  
    
      
  definition "is_REL_state \<equiv> \<lambda>ts. \<exists>t<N. \<exists>tk. ts t = REL tk"  
    
  lemma is_REL_state_simps[simp]:
    "t<N \<Longrightarrow> is_REL_state (ts(t:=REL tk))"
    "t<N \<Longrightarrow> \<not>is_REL (ts t) \<Longrightarrow> \<not>is_REL s' 
      \<Longrightarrow> is_REL_state (ts(t:=s')) \<longleftrightarrow> is_REL_state ts"
    unfolding is_REL_state_def
    apply (auto; fail) []
    apply auto []
    by (metis thread.disc(12))
  
  lemma is_REL_state_aux1:  
    assumes R: "B.reachable (c,n,ts)"
    assumes REL: "is_REL_state ts"
    assumes "t<N" and [simp]: "ts t = WAIT tk"
    shows "tk\<noteq>c"
    using REL unfolding is_REL_state_def
    apply clarify
    subgoal for t' tk'
      using b_holds_only_current[OF R, of t' tk']
      by (auto)
    done
  
  lemma is_REL_state_aux2:
    assumes R: "B.reachable (c,n,ts)"
    assumes A: "t<N" "ts t = REL tk"
    shows "\<not>is_REL_state (ts(t:=INIT))"
    using b_holds_only_current[OF R] A
    using b_mutual_exclusion'[OF R]
    apply (clarsimp simp: is_REL_state_def)
    by fastforce
    

  definition "sim_rel2 \<equiv> \<lambda>(c,n,ts) (ci,ni,tsi). 
    (if is_REL_state ts then 
      ci = replicate N False 
    else   
      ci = (replicate N False)[c:=True]
    )
  \<and> ni = n
  \<and> tsi = ts
  "
  
  interpretation sim2: simulationI bs\<^sub>0 blstep cs\<^sub>0 clstep sim_rel2
  proof unfold_locales
    show "sim_rel2 bs\<^sub>0 cs\<^sub>0"
      by (auto simp: sim_rel2_def bs\<^sub>0_def cs\<^sub>0_def is_REL_state_def)
  next
    fix bs cs t cs'  
    assume Rc_aux: "B.reachable bs" 
       and Rd_aux: "C.reachable cs" 
       and SIM: "sim_rel2 bs cs" 
       and CS: "clstep t cs cs'"
  
    obtain c n ts where [simp]: "bs=(c,n,ts)" by (cases bs)
    obtain ci ni tsi where [simp]: "cs=(ci,ni,tsi)" by (cases cs)
    obtain ci' ni' tsi' where [simp]: "cs'=(ci',ni',tsi')" by (cases cs')
    from Rc_aux have Rc: "B.reachable (c,n,ts)" by simp
    from Rd_aux have Rd: "C.reachable (ci,ni,tsi)" by simp
       
    from CS have "t<N" by cases auto
  
    have [simp]: "tk<N" if "ts t = WAIT tk" for tk
      by (auto simp: invar4_def)
    have HOLD_AUX: "tk=c" if "ts t = HOLD tk" for tk
    have REL_AUX: "tk=c" if "ts t = REL tk" "t<N" for t tk
      
    have [simp]: "c<N" using B.invar_reachable[OF is_invar4 Rc] 
      by (auto simp: invar4_def)
      
    have [simp]: 
      "replicate N False \<noteq> (replicate N False)[c := True]"  
      "(replicate N False)[c := True] \<noteq> replicate N False"  
      apply (auto simp: list_eq_iff_nth_eq nth_list_update) 
    
    have [simp]:
      "(replicate N False)[c := True] ! d \<longleftrightarrow> d=c" if "d<N" for d
      using that
      by (auto simp: list_eq_iff_nth_eq nth_list_update) 
      
    have [simp]: "(replicate N False)[tk := False] = replicate N False" for tk
      by (auto simp: list_eq_iff_nth_eq nth_list_update') 
      
    from SIM CS have "\<exists>bs'. blstep t bs bs' \<and> sim_rel2 bs' cs'"
      apply simp
      apply (subst (asm) sim_rel2_def)
      apply (erule clstep.cases)
      apply (erule cstep_sng.cases)
      apply clarsimp_all
      subgoal 
        apply (intro exI conjI)
        apply (rule blstep.intros)
        apply (simp)
        apply clarsimp
        apply (rule bstep_sng.enter_wait)
        apply (auto simp: sim_rel2_def split: if_splits)
        done
      subgoal for tk'
        apply (intro exI conjI)
        apply (rule blstep.intros)
        apply (simp)
        apply clarsimp
        apply (rule bstep_sng.loop_wait)
        subgoal
          apply (clarsimp simp: sim_rel2_def split: if_splits)
          apply (frule (2) is_REL_state_aux1[OF Rc])
          by simp
        subgoal by (auto simp: sim_rel2_def split: if_splits)
        done  
      subgoal 
        apply (intro exI conjI)
        apply (rule blstep.intros)
        apply (simp)
        apply (clarsimp split: if_splits)
        apply (rule bstep_sng.exit_wait)
        apply (auto simp: sim_rel2_def split: if_splits)
        done
      subgoal 
        apply (intro exI conjI)
        apply (rule blstep.intros)
        apply (simp)
        apply clarsimp
        apply (rule bstep_sng.start_release)
        apply (auto simp: sim_rel2_def dest: HOLD_AUX split: if_splits)
        done
      subgoal 
        apply (intro exI conjI)
        apply (rule blstep.intros)
        apply (simp)
        apply clarsimp
        apply (rule bstep_sng.release)
        apply (auto 
          simp: sim_rel2_def 
          dest: is_REL_state_aux2[OF Rc] 
          split: if_splits)
        by (metis fun_upd_triv is_REL_state_simps(1))
      done
      then show "\<exists>bs'. sim_rel2 bs' cs' \<and> blstep t bs bs'" by blast
      
  next  
    fix bs cs l
    assume "B.reachable bs" "C.reachable cs" "sim_rel2 bs cs" "B.can_step l bs"
    then show "C.can_step l cs" using c_never_blocked b_never_blocked by simp
  qed        

  
  definition "sim_rel \<equiv> sim_rel1 OO sim_rel2"
  interpretation sim: simulation as\<^sub>0 alstep cs\<^sub>0 clstep sim_rel
    unfolding sim_rel_def
    by (rule sim_trans) unfold_locales
  

  lemma xfer_holds:
    assumes "sim_rel s cs"
    shows "is_HOLD (tts cs t) \<longleftrightarrow> is_HOLD (tts s t)" 
    using assms unfolding sim_rel_def sim_rel1_def sim_rel2_def
    by (cases "tts cs t") auto

  lemma xfer_waits:
    assumes "sim_rel s cs"
    shows "is_WAIT (tts cs t) \<longleftrightarrow> is_WAIT (tts s t)" 
    using assms unfolding sim_rel_def sim_rel1_def sim_rel2_def 
    by (cases "tts cs t") auto
    
  lemma xfer_init:
    assumes "sim_rel s cs"  
    shows "tts cs t = INIT \<longleftrightarrow> tts s t = INIT"
    using assms unfolding sim_rel_def sim_rel1_def sim_rel2_def 
    by auto
  

  
  
  theorem final_mutual_exclusion: "\<lbrakk>C.reachable s; 
      t<N; t'<N; t\<noteq>t'; is_HOLD (tts s t); is_HOLD (tts s t')
    \<rbrakk> \<Longrightarrow> False" 
    apply (erule sim.xfer_reachable)
    apply (simp add: xfer_holds)
    by (erule (5) mutual_exclusion)

    
  theorem final_fair:
    assumes RUN: "C.is_run s"
    assumes ACQ: "t<N" and "tts (s i) t=INIT" and "is_WAIT (tts (s (Suc i)) t)" 
    assumes HOLD: "i<j" and "is_HOLD (tts (s j) t)" 
    assumes WAIT: "t'<N" and "is_WAIT (tts (s i) t')" 
    obtains l where "i<l" and "l<j" and "is_HOLD (tts (s l) t')" 
    using RUN
  proof (rule sim.xfer_run)
    fix as
    assume Ra: "A.is_run as" and SIM[rule_format]: "\<forall>i. sim_rel (as i) (s i)"
    
    note XFER = xfer_init[OF SIM] xfer_holds[OF SIM] xfer_waits[OF SIM]
    
    show ?thesis
      using assms
      apply (simp add: XFER)
      apply (erule (6) fair[OF Ra])
      apply (erule (1) that) 
      apply (simp add: XFER)
      done
  qed
    
  theorem final_progress:
    assumes FRUN: "C.is_fair_run s"
    assumes WAIT: "t<N" and "is_WAIT (tts (s i) t)"
    shows "\<exists>j>i. is_HOLD (tts (s j) t)"
    using FRUN
  proof (rule sim.xfer_fair_run)
    fix as
    assume Ra: "A.is_fair_run as" 
       and SIM[rule_format]: "\<forall>i. sim_rel (as i) (s i)"
    
    note XFER = xfer_init[OF SIM] xfer_holds[OF SIM] xfer_waits[OF SIM]
    
    show ?thesis
      using assms
      apply (simp add: XFER)
      apply (erule (1) progress[OF Ra])
      done
  qed  

end
