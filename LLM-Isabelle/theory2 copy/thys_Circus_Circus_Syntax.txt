theory Circus_Syntax
imports Denotational_Semantics
keywords "alphabet" "state" "channel" "nameset" "chanset" "schema" "action" and
  "circus_process" :: thy_defn
begin

abbreviation list_select::"['r \<Rightarrow> 'a list] \<Rightarrow> ('r \<Rightarrow> 'a)" where
"list_select Sel \<equiv> hd o Sel"

abbreviation list_update::"[('a list \<Rightarrow> 'a list) \<Rightarrow> 'r \<Rightarrow> 'r]
                         \<Rightarrow> ('a \<Rightarrow> 'a) \<Rightarrow> 'r \<Rightarrow> 'r" where
"list_update Upd \<equiv> \<lambda> e. Upd (\<lambda> l. (e (hd l))#(tl l))"

abbreviation list_update_const::"[('a list \<Rightarrow> 'a list) \<Rightarrow> 'r \<Rightarrow> 'r]
                                \<Rightarrow> 'a \<Rightarrow> 'r relation" where
"list_update_const Upd \<equiv> \<lambda> e. \<lambda> (A, A'). A' = Upd (\<lambda> l. e#(tl l)) A"

abbreviation update_const::"[('a \<Rightarrow> 'a) \<Rightarrow> 'r \<Rightarrow> 'r]
                                \<Rightarrow> 'a \<Rightarrow> 'r relation" where
"update_const Upd \<equiv> \<lambda> e. \<lambda> (A, A'). A' = Upd (\<lambda> _. e) A"

syntax
  "_synt_assign" :: "id \<Rightarrow> 'a \<Rightarrow> 'b relation"  ("_ := _")



nonterminal circus_action and circus_schema

syntax
  "_circus_schema" :: "'a => circus_schema"  ("_")




end
