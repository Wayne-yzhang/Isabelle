theory C_Eval
  imports C_Parser_Language
          C_Parser_Annotation
begin


structure C_Stack =
struct
type 'a stack_elem = (LALR_Table.state, 'a, Position.T) C_Env.stack_elem0
type stack_data = (LALR_Table.state, C_Grammar.Tokens.svalue0, Position.T) C_Env.stack0
type stack_data_elem = (LALR_Table.state, C_Grammar.Tokens.svalue0, Position.T) C_Env.stack_elem0

fun map_svalue0 f (st, (v, pos1, pos2)) = (st, (f v, pos1, pos2))

structure Data_Lang =
struct
val empty' = ([], C_Env.empty_env_lang)
structure Data_Lang = Generic_Data
(
  type T = (stack_data * C_Env.env_lang) option
  val empty = NONE
  val merge = K empty
)
open Data_Lang
fun get' context = case get context of NONE => empty' | SOME data => data
fun setmp data f context = put (get context) (f (put data context))
end

structure Data_Tree_Args : GENERIC_DATA_ARGS =
struct
  type T = C_Position.reports_text * C_Env.error_lines
  val empty = ([], [])
  fun merge ((l11, l12), (l21, l22)) = (l11 @ l21, l12 @ l22)
end

structure Data_Tree = Generic_Data (Data_Tree_Args)

fun setmp_tree f context =
  let val x = Data_Tree.get context
      val context = f (Data_Tree.put Data_Tree_Args.empty context)
  in (Data_Tree.get context, Data_Tree.put x context) end

fun stack_exec0 f {context, reports_text, error_lines} =
  let val ((reports_text', error_lines'), context) = setmp_tree f context
  in { context = context
     , reports_text = append reports_text' reports_text
     , error_lines = append error_lines' error_lines } end

fun stack_exec env_dir data_put =
  stack_exec0 o Data_Lang.setmp (SOME (apsnd (C_Env.map_env_directives (K env_dir)) data_put))
end
\<close>
ML \<comment> \<open>\<^file>\<open>~~/src/Pure/ML/ml_context.ML\<close>\<close>
\<open>
structure C_Context0 =
struct

                * (C_Env.env_directives * C_Env.env_tree)

structure Directives = Generic_Data
(
  type T = (Position.T list
            * serial
                (C_Lex.token_kind_directive
                 -> env_direct
                (C_Lex.token_kind_directive -> C_Env.env_propagation_directive)))
           Symtab.table
  val empty = Symtab.empty
  val merge = Symtab.join (K #2)
);
end
\<close>
ML \<comment> \<open>\<^theory>\<open>Isabelle_C.C_Environment\<close>\<close> \<open>
