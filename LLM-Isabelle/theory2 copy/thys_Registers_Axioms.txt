theory Axioms
  imports Main
begin

class domain
instance prod :: (domain,domain) domain
  by intro_classes

typedecl 'a update
axiomatization comp_update :: "'a::domain update \<Rightarrow> 'a update \<Rightarrow> 'a update" where
  comp_update_assoc: "comp_update (comp_update a b) c = comp_update a (comp_update b c)"
axiomatization id_update :: "'a::domain update" where
  id_update_left: "comp_update id_update a = a" and
  id_update_right: "comp_update a id_update = a"

axiomatization where
  comp_preregister: "preregister F \<Longrightarrow> preregister G \<Longrightarrow> preregister (G \<circ> F)" and

axiomatization where
    for z :: "'a::domain update"

  where tensor_extensionality: "preregister F \<Longrightarrow> preregister G \<Longrightarrow> (\<And>a b. F (tensor_update a b) = G (tensor_update a b)) \<Longrightarrow> F = G"


axiomatization where
  register_preregister: "register F \<Longrightarrow> preregister F" and
  register_comp: "register F \<Longrightarrow> register G \<Longrightarrow> register (G \<circ> F)"  and
  register_mult: "register F \<Longrightarrow> comp_update (F a) (F b) = F (comp_update a b)" and
for F :: "'a::domain update \<Rightarrow> 'b::domain update" and G :: "'b update \<Rightarrow> 'c::domain update" 


axiomatization register_pair ::

end
