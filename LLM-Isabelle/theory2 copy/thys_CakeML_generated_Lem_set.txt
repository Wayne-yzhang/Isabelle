theory "Lem_set" 

imports
  Main
  "Lem_bool"
  "Lem_basic_classes"
  "Lem_maybe"
  "Lem_function"
  "Lem_num"
  "Lem_list"
  "Lem_set_helpers"
  "Lem"

begin 


   







































definition partition  :: "('a \<Rightarrow> bool)\<Rightarrow> 'a set \<Rightarrow> 'a set*'a set "  where 
     " partition P s = ( (set_filter P s, set_filter (\<lambda> e .  \<not> (P e)) s))"




definition split  :: " 'a Ord_class \<Rightarrow> 'a \<Rightarrow> 'a set \<Rightarrow> 'a set*'a set "  where 
     " split dict_Basic_classes_Ord_a p s = ( (set_filter (
  (isGreater_method   dict_Basic_classes_Ord_a) p) s, set_filter ((isLess_method   dict_Basic_classes_Ord_a) p) s))"


definition splitMember  :: " 'a Ord_class \<Rightarrow> 'a \<Rightarrow> 'a set \<Rightarrow> 'a set*bool*'a set "  where 
     " splitMember dict_Basic_classes_Ord_a p s = ( (set_filter (
  (isLess_method   dict_Basic_classes_Ord_a) p) s, (p \<in> s), set_filter (
  (isGreater_method   dict_Basic_classes_Ord_a) p) s))"













definition bigintersection  :: "('a set)set \<Rightarrow> 'a set "  where 
     " bigintersection bs = ( (let x2 = 
  ({}) in  Finite_Set.fold
   (\<lambda>x x2 . 
    if( \<forall> s \<in> bs. x \<in> s) then Set.insert x x2 else x2) 
 x2 (\<Union> bs)))"
















definition setMapMaybe  :: "('a \<Rightarrow> 'b option)\<Rightarrow> 'a set \<Rightarrow> 'b set "  where 
     " setMapMaybe f s = ( 
  \<Union> (Set.image (\<lambda> x .  (case  f x of 
                          Some y  => {y} 
                        | None => {}
                        )) s))"


definition removeMaybe  :: "('a option)set \<Rightarrow> 'a set "  where 
     " removeMaybe s = ( setMapMaybe (\<lambda> x .  x) s )"



















fun  leastFixedPoint  :: " nat \<Rightarrow>('a set \<Rightarrow> 'a set)\<Rightarrow> 'a set \<Rightarrow> 'a set "  where 
     " leastFixedPoint 0 f x = ( x )"
|" leastFixedPoint ((Suc bound')) f x = ( (let fx = (f x) in
                  if fx \<subseteq> x then x
                  else leastFixedPoint bound' f (fx \<union> x)))"
 
end
