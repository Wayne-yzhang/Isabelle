Every Stone algebra $S$ has an associated triple consisting of
\begin{itemize}
\item the set of regular elements $B(S)$ of $S$,
\item the set of dense elements $D(S)$ of $S$, and
\item the structure map $\varphi(S) : B(S) \to F(D(S))$ defined by $\varphi(x) = {\uparrow} x \cap D(S)$.
\end{itemize}
Here $F(X)$ is the set of filters of a partially ordered set $X$.
We first show that
\begin{itemize}
\item $B(S)$ is a Boolean algebra,
\item $D(S)$ is a distributive lattice with a greatest element, whence $F(D(S))$ is a bounded distributive lattice, and
\item $\varphi(S)$ is a bounded lattice homomorphism.
\end{itemize}
Next, from a triple $T = (B,D,\varphi)$ such that $B$ is a Boolean algebra, $D$ is a distributive lattice with a greatest element and $\varphi : B \to F(D)$ is a bounded lattice homomorphism, we construct a Stone algebra $S(T)$.
We need to represent $S(T)$ as a type to be able to instantiate the Stone algebra class.
Because the pairs must satisfy a condition depending on $\varphi$, this would require dependent types.
Since Isabelle/HOL does not have dependent types, we use a function lifting instead.
The lifted pairs form a Stone algebra.

Next, we specialise the construction to start with the triple associated with a Stone algebra $S$, that is, we construct $S(B(S),D(S),\varphi(S))$.
In this case, we can instantiate the lifted pairs to obtain a type of pairs (that no longer implements a dependent type).
To achieve this, we construct an embedding of the type of pairs into the lifted pairs, so that we inherit the Stone algebra axioms (using a technique of universal algebra that works for universally quantified equations and equational implications).

Next, we show that the Stone algebras $S(B(S),D(S),\varphi(S))$ and $S$ are isomorphic.
We give explicit mappings in both directions.
This implies the uniqueness theorem for the triple representation of Stone algebras.

Finally, we show that the triples $(B(S(T)),D(S(T)),\varphi(S(T)))$ and $T$ are isomorphic.
This requires an isomorphism of the Boolean algebras $B$ and $B(S(T))$, an isomorphism of the distributive lattices $D$ and $D(S(T))$, and a proof that they preserve the structure maps.
We give explicit mappings of the Boolean algebra isomorphism and the distributive lattice isomorphism in both directions.
This implies the construction theorem of Stone algebras.
Because $S(T)$ is implemented by lifted pairs, so are $B(S(T))$ and $D(S(T))$; we therefore also lift $B$ and $D$ to establish the isomorphisms.
\<close>
text \<open>
A triple consists of a Boolean algebra, a distributive lattice with a greatest element, and a structure map.
The Boolean algebra and the distributive lattice are represented as HOL types.
Because both occur in the type of the structure map, the triple is determined simply by the structure map and its HOL type.
The structure map needs to be a bounded lattice homomorphism.
\<close>
subsection \<open>The Triple of a Stone Algebra\<close>
text \<open>
In this section we construct the triple associated to a Stone algebra.
\<close>
subsubsection \<open>Regular Elements\<close>
text \<open>
The regular elements of a Stone algebra form a Boolean subalgebra.
\<close>
subsubsection \<open>Dense Elements\<close>
text \<open>
The dense elements of a Stone algebra form a distributive lattice with a greatest element.
\<close>
text \<open>
The filters of dense elements of a Stone algebra form a bounded distributive lattice.
\<close>
subsubsection \<open>The Structure Map\<close>
text \<open>
The structure map of a Stone algebra is a bounded lattice homomorphism.
This set is a filter.
\<close>
text \<open>
The Boolean algebra and the distributive lattice requirements are taken care of by the type system.
\<close>
subsection \<open>Properties of Triples\<close>
text \<open>
In this section we construct a certain set of pairs from a triple, introduce operations on these pairs and develop their properties.
The given set and operations will form a Stone algebra.
\<close>
text \<open>
\<close>
text \<open>
Operations on pairs are defined in the following.
They will be used to establish that the pairs form a Stone algebra.
\<close>
text \<open>
\<close>
text \<open>
The following results show that the pairs are closed under the given operations.
\<close>
text \<open>
We prove enough properties of the pair operations so that we can later show they form a Stone algebra.
\<close>
text \<open>
The following results show how the regular elements and the dense elements among the pairs look like.
\<close>
text \<open>
The following extraction function will be used in defining one direction of the Stone algebra isomorphism.
\<close>
subsection \<open>The Stone Algebra of a Triple\<close>
text \<open>
In this section we prove that the set of pairs constructed in a triple forms a Stone Algebra.
This parameter is the structure map that occurs in the definition of the set of pairs.
The set of all structure maps is the set of all bounded lattice homomorphisms (of appropriate type).
In order to make it a HOL type, we need to show that at least one such structure map exists.
To this end we use the ultrafilter lemma: the required bounded lattice homomorphism is essentially the characteristic map of an ultrafilter, but the latter must exist.
In particular, the underlying Boolean algebra must contain at least two elements.
\<close>
text \<open>
The following implements the dependent type of pairs depending on structure maps.
It uses functions from structure maps to pairs with the requirement that, for each structure map, the corresponding pair is contained in the set of pairs constructed for a triple with that structure map.

\<close>
text \<open>
The lifted pairs form a Stone algebra.
\<close>
text \<open>
All operations are lifted point-wise.
\<close>
subsection \<open>The Stone Algebra of the Triple of a Stone Algebra\<close>
text \<open>
In this section we specialise the above construction to a particular structure map, namely the one obtained in the triple of a Stone algebra.
For this particular structure map (as well as for any other particular structure map) the resulting type is no longer a dependent type.
It is just the set of pairs obtained for the given structure map.
\<close>
text \<open>
The result is a Stone algebra and could be proved so by repeating and specialising the above proof for lifted pairs.
We choose a different approach, namely by embedding the type of pairs into the lifted type.
The value of the function at any other structure map needs to be carefully chosen so that the resulting function is a Stone algebra homomorphism.
\<close>
text \<open>
The following lemma shows that in both cases the value of the function is a valid pair for the given structure map.
\<close>
text \<open>
The following result shows that the embedding preserves the operations of Stone algebras.
Of course, it is not (yet) a Stone algebra homomorphism as we do not know (yet) that the domain of the embedding is a Stone algebra.
To establish the latter is the purpose of the embedding.
\<close>
text \<open>
The following lemmas show that the embedding is injective and reflects the order.
The latter allows us to easily inherit properties involving inequalities from the target of the embedding, without transforming them to equations.
\<close>
text \<open>
Now all Stone algebra axioms can be inherited using the embedding.
This is due to the fact that the axioms are universally quantified equations or conditional equations (or inequalities); this is called a quasivariety in universal algebra.
It would be useful to have this construction available for arbitrary quasivarieties.
\<close>
subsection \<open>Stone Algebra Isomorphism\<close>
text \<open>
In this section we prove that the Stone algebra of the triple of a Stone algebra is isomorphic to the original Stone algebra.
The following two definitions give the isomorphism.
\<close>
text \<open>
The following two results prove that the isomorphisms are mutually inverse.
\<close>
text \<open>
It remains to show the homomorphism properties, which is done in the following result.
\<close>
subsection \<open>Triple Isomorphism\<close>
text \<open>
In this section we prove that the triple of the Stone algebra of a triple is isomorphic to the original triple.
It amounts to an isomorphism of Boolean algebras, an isomorphism of distributive lattices with a greatest element, and a commuting diagram involving the structure maps.
\<close>
subsubsection \<open>Boolean Algebra Isomorphism\<close>
text \<open>
We first define and prove the isomorphism of Boolean algebras.
Because the Stone algebra of a triple is implemented as a lifted pair, we also lift the Boolean algebra.
\<close>
text \<open>
The following two definitions give the Boolean algebra isomorphism.
\<close>
text \<open>
The following two results prove that the isomorphisms are mutually inverse.
\<close>
text \<open>
The isomorphism is established by proving the remaining Boolean algebra homomorphism properties.
\<close>
subsubsection \<open>Distributive Lattice Isomorphism\<close>
text \<open>
We carry out a similar development for the isomorphism of distributive lattices.
Again, the original distributive lattice with a greatest element needs to be lifted to match the lifted pairs.
\<close>
text \<open>
The following function extracts the least element of the filter of a dense pair, which turns out to be a principal filter.
It is used to define one of the isomorphisms below.
\<close>
text \<open>
The following two definitions give the distributive lattice isomorphism.
\<close>
text \<open>
The following two results prove that the isomorphisms are mutually inverse.
\<close>
text \<open>
To obtain the isomorphism, it remains to show the homomorphism properties of lattices with a greatest element.
\<close>
subsubsection \<open>Structure Map Preservation\<close>
text \<open>
We finally show that the isomorphisms are compatible with the structure maps.
This involves lifting the distributive lattice isomorphism to filters of distributive lattices (as these are the targets of the structure maps).
To this end, we first show that the lifted isomorphism preserves filters.
\<close>
text \<open>
\begin{itemize}
\end{itemize}
\<close>
