theory Data
  imports Main Datatype_Order_Generator.Order_Generator
begin





datatype '\<I> extended
  = Begin ("\<turnstile>")
  | InString '\<I> ("(1\<lbrakk>_\<rbrakk>)")
  | End ("\<stileturn>")
derive linorder extended



datatype ('\<I>, '\<Sigma>) insert_message =
  InsertMessage (P:"'\<I> extended") (I:'\<I>) (S:"'\<I> extended") (\<Sigma>:'\<Sigma>)

datatype '\<I> delete_message = DeleteMessage '\<I>

datatype ('\<I>, '\<Sigma>) message =
  Insert "('\<I>, '\<Sigma>) insert_message" |
  Delete "'\<I> delete_message"



type_synonym ('\<I>, '\<Sigma>) woot_character = "('\<I>, '\<Sigma> option) insert_message"


fun to_woot_char :: "('\<I>, '\<Sigma>) insert_message \<Rightarrow> ('\<I>, '\<Sigma>) woot_character"
  where
    "to_woot_char (InsertMessage p i s \<sigma>) = InsertMessage p i s (Some \<sigma>)"


end
