theory C_Algebras
imports Kleene_Algebra.Dioid 
begin

no_notation
  times (infixl "\<cdot>" 70)



class proto_monoid = 
  fixes s_id :: "'a" ("1\<^sub>\<sigma>")
  and s_prod :: "'a \<Rightarrow> 'a \<Rightarrow> 'a"  (infixl "\<cdot>" 80) 
  assumes s_prod_idl [simp]: "1\<^sub>\<sigma> \<cdot> x = x"
  and  s_prod_idr [simp]: "x \<cdot> 1\<^sub>\<sigma>  = x"

class proto_bi_monoid = proto_monoid +
  fixes c_id :: "'a" ("1\<^sub>\<pi>")
  and c_prod :: "'a \<Rightarrow> 'a \<Rightarrow> 'a"  (infixl "\<parallel>" 80) 
  assumes c_prod_idl [simp]: "1\<^sub>\<pi> \<parallel> x = x"
  and c_prod_assoc: "(x \<parallel> y) \<parallel> z = x \<parallel> (y \<parallel> z)"
  and c_prod_comm: "x \<parallel> y = y \<parallel> x" 

class c_monoid = proto_bi_monoid +
  assumes c1 [simp]: "(x \<cdot> 1\<^sub>\<pi>) \<parallel> x = x"
  and c2 [simp]: "((x \<cdot> 1\<^sub>\<pi>) \<parallel> 1\<^sub>\<sigma>) \<cdot> y = (x \<cdot> 1\<^sub>\<pi>) \<parallel> y" 
  and c3: "(x \<parallel> y) \<cdot> 1\<^sub>\<pi> = (x \<cdot> 1\<^sub>\<pi>) \<parallel> (y \<cdot> 1\<^sub>\<pi>)"
  and c4: "(x \<cdot> y) \<cdot> 1\<^sub>\<pi> = x \<cdot> (y \<cdot> 1\<^sub>\<pi>)"
  and c5 [simp]: "1\<^sub>\<sigma> \<parallel> 1\<^sub>\<sigma> = 1\<^sub>\<sigma>"

begin

and start proving the algebraic facts from Section 4. Those involving concrete multirelations, such as Proposition 4.1,
are considered in the theory file for multirelations.\<close>
text \<open>We prove the retraction properties of Lemma 4.2.\<close>
text \<open>Lemma 4.3.\<close>
text \<open>Part (5) of this Lemma has already been verified above. The next two statements 
verify the two algebraic properties mentioned in the proof of Proposition 4.4.\<close>
text \<open>Proposition 4.5.\<close>
text \<open>Next we verify the conditions of Proposition 4.6.\<close>
text \<open>Lemma 4.7.\<close>
text \<open>Now we provide the counterexamples of Lemma 4.8.\<close>
subsection \<open>C-Trioids\<close>
text \<open>We can now define the class of c-trioids and prove properties in this class. This covers 

class proto_dioid = join_semilattice_zero + proto_monoid +
  assumes  s_prod_distr: "(x + y) \<cdot> z = x \<cdot> z + y \<cdot> z"
  and  s_prod_subdistl: "x \<cdot> y + x \<cdot> z \<le> x \<cdot> (y + z)"
  and  s_prod_annil [simp]: "0 \<cdot> x = 0"

begin

lemma s_prod_isol: "x \<le> y \<Longrightarrow> z \<cdot> x \<le> z \<cdot> y"
  by (metis join.sup.boundedE order_prop s_prod_subdistl)

lemma s_prod_isor: "x \<le> y \<Longrightarrow> x \<cdot> z \<le> y \<cdot> z"
  using local.order_prop local.s_prod_distr by auto

end

class proto_trioid = proto_dioid + proto_bi_monoid +
  assumes  p_prod_distl: "x \<parallel> (y + z) = x \<parallel> y + x \<parallel> z"
  and  p_rpd_annir [simp]: "x \<parallel> 0 = 0"

sublocale proto_trioid \<subseteq> ab_semigroup_mult c_prod
proof
  fix x y z
  show  "x \<parallel> y \<parallel> z = x \<parallel> (y \<parallel> z)"
    by (rule c_prod_assoc)
  show "x \<parallel> y = y \<parallel> x"
    by (rule c_prod_comm)
qed

sublocale proto_trioid \<subseteq> dioid_one_zero "(+)" "(\<parallel>)" "1\<^sub>\<pi>" 0 "(\<le>)" "(<)"
proof
  fix x y z
  show "(x + y) \<parallel> z = x \<parallel> z + y \<parallel> z"
    by (simp add: local.c_prod_comm local.p_prod_distl)
  show "1\<^sub>\<pi> \<parallel> x = x"
    using local.c_prod_idl by blast
  show "x \<parallel> 1\<^sub>\<pi> = x"
    by (simp add: local.mult_commute)
  show "0 + x = x"
    by (rule add.left_neutral)
  show "0 \<parallel> x = 0"
    by (simp add: local.mult_commute)
  show "x \<parallel> 0 = 0"
    by (rule p_rpd_annir)
  show "x + x = x"
    by (rule add_idem)
  show "x \<parallel> (y + z) = x \<parallel> y + x \<parallel> z"
    by (rule p_prod_distl)
qed

class c_trioid = proto_trioid + c_monoid +
  assumes  c6: "x \<cdot> 1\<^sub>\<pi> \<le> 1\<^sub>\<pi>"

begin


subclass c_monoid ..

subclass proto_trioid ..

lemma "1\<^sub>\<pi> \<cdot> 0 = 1\<^sub>\<pi>"
  nitpick
  oops

lemma zero_p_id_prop [simp]: "(x \<cdot> 0) \<cdot> 1\<^sub>\<pi> = x \<cdot> 0"
  by (simp add: local.c4)


lemma d_subid: "d x = x \<Longrightarrow> x \<le> 1\<^sub>\<sigma>"
  by (metis local.c6 local.c_idem local.d_def local.dc local.mult_isor)

lemma "x \<le> 1\<^sub>\<sigma> \<Longrightarrow> d x = x"
  nitpick
  oops 

lemma p_id_term: "x \<cdot> 1\<^sub>\<pi> = x \<Longrightarrow> x \<le> 1\<^sub>\<pi>"
  by (metis local.c6)

lemma "x \<le> 1\<^sub>\<pi> \<Longrightarrow> x \<cdot> 1\<^sub>\<pi> = x"
  nitpick
  oops


lemma dlp_ax: "x \<le> d x \<cdot> x"
  by simp

lemma d_add_ax: "d (x + y) = d x + d y"
proof -
  have "d (x + y) = ((x + y) \<cdot> 1\<^sub>\<pi>) \<parallel> 1\<^sub>\<sigma>"
    using local.d_def by blast
  also have "... = (x \<cdot> 1\<^sub>\<pi>) \<parallel> 1\<^sub>\<sigma> + (y \<cdot> 1\<^sub>\<pi>) \<parallel> 1\<^sub>\<sigma>"
    by (simp add: local.distrib_right local.s_prod_distr)
  finally show ?thesis
    by (simp add: local.d_def)
qed

lemma d_sub_id_ax: "d x \<le> 1\<^sub>\<sigma>"
proof - 
  have "d x = (x \<cdot> 1\<^sub>\<pi>) \<parallel> 1\<^sub>\<sigma>"
    by (simp add: local.d_def)
  also have "... \<le> 1\<^sub>\<pi> \<parallel> 1\<^sub>\<sigma>"
    using local.c6 local.mult_isor by blast
  finally show ?thesis
    by simp
qed

lemma d_zero_ax [simp]: "d 0 = 0"
  by (simp add: local.d_def)


lemma d_absorb1 [simp]: "d x + (d x \<cdot> d y) = d x"
proof (rule order.antisym)
  have "d x + (d x \<cdot> d y) \<le> d x + (d x \<cdot> 1\<^sub>\<sigma>)"
    by (metis d_sub_id_ax c2_d d_def join.sup.bounded_iff join.sup.semilattice_axioms join.sup_ge1 s_prod_isol semilattice.idem)
  thus "d x + (d x \<cdot> d y) \<le> d x"
    by simp
  show "d x \<le> d x + ((d x) \<cdot> (d y))"
    using join.sup_ge1 by blast
qed

lemma d_absorb2 [simp]: "d x \<cdot> (d x + d y) = d x"
proof -
  have "x \<cdot> 1\<^sub>\<pi> \<parallel> d x = d x"
    by (metis local.c1 local.dc_prop1)
  thus ?thesis
  by (metis d_absorb1 local.c2_d local.p_prod_distl)
qed

lemma d_dist1: "d x \<cdot> (d y + d z) = d x \<cdot> d y + d x \<cdot> d z"
  by (simp add: local.c2_d local.p_prod_distl)

lemma d_dist2: "d x + (d y \<cdot> d z) = (d x + d y) \<cdot> (d x + d z)"
proof -
  have "(d x + d y) \<cdot> (d x + d z) = d x \<cdot> d x + d x \<cdot> d z + d y \<cdot> d x + d y \<cdot> d z"
    using add_assoc d_dist1 local.s_prod_distr by force
  also have "... = d x + d x \<cdot> d z + d x \<cdot> d y + d y \<cdot> d z"
    using local.d_comm_ax by auto
  finally show ?thesis
    by simp
qed

lemma d_add_prod_closed [simp]: "d (d x + d y) = d x + d y"
  by (simp add: d_add_ax)


lemma x_zero_prop: "(x \<cdot> 0) \<parallel> y = d (x \<cdot> 0) \<cdot> y"
  by (simp add: local.c2_d)

lemma cda_add_ax: "d ((x + y) \<cdot> z) = d (x \<cdot> z) + d (y \<cdot> z)"
  by (simp add: d_add_ax local.s_prod_distr)

lemma d_x_zero: "d (x \<cdot> 0) = (x \<cdot> 0) \<parallel> 1\<^sub>\<sigma>"
  by (simp add: x_zero_prop)



We do not consider those involving Kleene algebras in this section. We also do not introduce specific 
notation for diamond operators.\<close>
text \<open>First we prove Lemma 6.1. Part (1) and (3) have already been verified above. Part (2) and (4) require
also present the counterexamples from Lemma 6.3.\<close>
text \<open>Next we present some results that do not feature in the article.\<close>
text \<open>Lemma 5.4\<close> 
subsection \<open>C-Lattices\<close>
text \<open>We can now define c-lattices and prove the results from Section 7 in~\<^cite>\<open>"FurusawaS15a"\<close>.\<close>
text \<open>The symbol $\overline{1}_\pi$ from~\<^cite>\<open>"FurusawaS15a"\<close> is written nc in this theory file.\<close>
text \<open>We show that every c-lattice is a c-trioid (Proposition 7.1) Proposition 7.2 is again 
covered by the theory for multirelations.\<close>
text \<open>First we verify the complementation conditions after the definition of c-lattices.\<close>
text \<open>Next we verify the conditions in Proposition 7.2.\<close>
text \<open>The results of Lemma 7.3 are again at the multirelational level. 
Hence we continue with Lemma 7.4.\<close>
text\<open>Next we verify Lemma 7.5 and prove some related properties.\<close>
text \<open>Lemma 7.6.\<close>
text \<open>We prove Lemma 7.8 and related properties.\<close>
subsection \<open>Domain in C-Lattices\<close>
text \<open>We now prove variants of the domain axioms and verify the properties of Section 8 in~\<^cite>\<open>"FurusawaS15a"\<close>.\<close>
text \<open>We verify the remaining properties of Lemma 8.1.\<close>
text \<open>We verify the identity before Lemma 8.2 of~\<^cite>\<open>"FurusawaS15a"\<close> together with variants.\<close>
text \<open>Lemma 8.2.\<close>
text\<open>Lemma 8.3.\<close>
text \<open>The next properties of domain are important, but do not feature in~\<^cite>\<open>"FurusawaS15a"\<close>. 
Proofs can be found in~\<^cite>\<open>"FurusawaS15b"\<close>.\<close>
subsection \<open>Structural Properties of C-Lattices\<close>
text \<open>Now we consider the results from Section 9 and 10 in~\<^cite>\<open>"FurusawaS15a"\<close>. 
of Section 11 in~\<^cite>\<open>"FurusawaS15a"\<close>.\<close>
text \<open>Lemma 11.1.\<close>
text \<open>Lemma 11.2.\<close>
text \<open>Lemma 11.3.\<close>
text \<open>Lemma 11.5.\<close>
text \<open>We now verify some additional properties which are not mentioned in the paper.\<close>
text \<open>Lemma 11.6 and 11.7.\<close>
text \<open>We prove the precongruence properties of Lemma 11.9.\<close>
    by (simp add: \<open>\<tau> x \<le> \<tau> y\<close> local.mult_isor) 
text\<open>We prove the congruence properties of Corollary~11.11.\<close>
subsection \<open>Powers in C-Algebras\<close>
text \<open>We define the power functions from Section~6 in~\<^cite>\<open>"FurusawaS15a"\<close> after Lemma~12.4.\<close>
text \<open>Lemma~12.5\<close>
text \<open>Next we verify facts from the proofs of Lemma~12.6.\<close>
subsection \<open>C-Kleene Algebras\<close>
text \<open>The definition of c-Kleene algebra is slightly different from that in Section~6

class c_kleene_algebra = c_lattice + star_op +
  assumes star_unfold: "1\<^sub>\<sigma> + x \<cdot> x\<^sup>\<star> \<le> x\<^sup>\<star>"
  and star_induct: "1\<^sub>\<sigma> + x \<cdot> y \<le> y \<Longrightarrow> x\<^sup>\<star> \<le> y"

begin

lemma star_irr: "1\<^sub>\<sigma> \<le> x\<^sup>\<star>"
  using local.star_unfold by auto

lemma star_unfold_part: "x \<cdot> x\<^sup>\<star> \<le> x\<^sup>\<star>"
  using local.star_unfold by auto

lemma star_ext_aux: "x \<le> x \<cdot> x\<^sup>\<star>"
  using local.s_prod_isol star_irr by fastforce

lemma star_ext: "x \<le> x\<^sup>\<star>"
  using local.order_trans star_ext_aux star_unfold_part by blast

lemma star_co_trans: "x\<^sup>\<star> \<le>  x\<^sup>\<star> \<cdot> x\<^sup>\<star>"
  using local.s_prod_isol star_irr by fastforce

lemma star_iso: "x \<le> y \<Longrightarrow> x\<^sup>\<star> \<le> y\<^sup>\<star>"
proof -
  assume a1: "x \<le> y"
  have f2: "y \<cdot> y\<^sup>\<star> + y\<^sup>\<star> = y\<^sup>\<star>"
    by (meson local.less_eq_def star_unfold_part)
  have "x + y = y"
    using a1 by (meson local.less_eq_def)
  hence "x \<cdot> y\<^sup>\<star> + y\<^sup>\<star> = y\<^sup>\<star>"
    using f2 by (metis (no_types) local.add_assoc' local.s_prod_distr)
  thus ?thesis
    using local.add_assoc' local.less_eq_def local.star_induct star_irr by presburger
qed

lemma star_unfold_eq [simp]: "1\<^sub>\<sigma> + x \<cdot> x\<^sup>\<star> = x\<^sup>\<star>"
proof (rule order.antisym)
  show a: "1\<^sub>\<sigma> + x \<cdot> x\<^sup>\<star> \<le>  x\<^sup>\<star>"
    using local.star_unfold by blast
  have "1\<^sub>\<sigma> + x \<cdot> (1\<^sub>\<sigma> + x \<cdot> x\<^sup>\<star>) \<le> 1\<^sub>\<sigma> + x \<cdot> x\<^sup>\<star>"
    by (meson local.eq_refl local.join.sup_mono local.s_prod_isol local.star_unfold)
  thus "x\<^sup>\<star> \<le> 1\<^sub>\<sigma> + x \<cdot> x\<^sup>\<star>"
    by (simp add: local.star_induct)
qed


lemma nu_star1:
assumes "\<And>x y z. x \<cdot> (y \<cdot> z) = (x \<cdot> y) \<cdot> z"
shows "x\<^sup>\<star> \<le> (\<nu> x)\<^sup>\<star> \<cdot> (1\<^sub>\<sigma> + \<tau> x)"
proof -
  have "1\<^sub>\<sigma> + x \<cdot> ((\<nu> x)\<^sup>\<star> \<cdot> (1\<^sub>\<sigma> + \<tau> x)) = 1\<^sub>\<sigma> + \<tau> x + \<nu> x \<cdot> ((\<nu> x)\<^sup>\<star> \<cdot> (1\<^sub>\<sigma> + \<tau> x))"
    by (metis add_assoc local.sprod_tau_nu)
  also have "... = (1\<^sub>\<sigma> + \<nu> x \<cdot> (\<nu> x)\<^sup>\<star>) \<cdot> (1\<^sub>\<sigma> + \<tau> x)"
    using assms local.s_prod_distr local.s_prod_idl by presburger
  also have "... \<le> (\<nu> x)\<^sup>\<star> \<cdot> (1\<^sub>\<sigma> + \<tau> x)"
    using local.s_prod_isor local.star_unfold by auto
  thus ?thesis
    by (simp add: calculation local.star_induct)
qed

lemma nu_star2: 
assumes "\<And>x. x\<^sup>\<star> \<cdot> x\<^sup>\<star> \<le> x\<^sup>\<star>"
shows "(\<nu> x)\<^sup>\<star> \<cdot> (1\<^sub>\<sigma> + \<tau> x) \<le> x\<^sup>\<star>"
proof -
  have "(\<nu> x)\<^sup>\<star> \<cdot> (1\<^sub>\<sigma> + \<tau> x) \<le> x\<^sup>\<star> \<cdot> (1\<^sub>\<sigma> + \<tau> x)"
    using local.nu_int local.s_prod_isor star_iso by blast
  also have "... \<le>  x\<^sup>\<star> \<cdot> (1\<^sub>\<sigma> + x)"
    using local.s_prod_isol local.join.sup_mono local.tau_int by blast
  also have "... \<le> x\<^sup>\<star> \<cdot> x\<^sup>\<star>"
    by (simp add: local.s_prod_isol star_ext star_irr)
  finally show ?thesis
    using assms local.order_trans by blast
qed

lemma nu_star: 
assumes "\<And>x. x\<^sup>\<star> \<cdot> x\<^sup>\<star> \<le> x\<^sup>\<star>"
and "\<And>x y z. x \<cdot> (y \<cdot> z) = (x \<cdot> y) \<cdot> z"
shows "(\<nu> x)\<^sup>\<star> \<cdot> (1\<^sub>\<sigma> + \<tau> x) = x\<^sup>\<star>"
  by (simp add: assms(1) assms(2) local.dual_order.antisym nu_star1 nu_star2)


lemma tau_star: "(\<tau> x)\<^sup>\<star> = 1\<^sub>\<sigma> + \<tau> x"
  by (metis local.cl6 local.tau_def star_unfold_eq)

lemma tau_star_var: 
assumes "\<And>x y z. x \<cdot> (y \<cdot> z) = (x \<cdot> y) \<cdot> z"
and "\<And>x. x\<^sup>\<star> \<cdot> x\<^sup>\<star> \<le> x\<^sup>\<star>"
shows "\<tau> (x\<^sup>\<star>) = (\<nu> x)\<^sup>\<star> \<cdot> \<tau> x"
  by (metis (no_types, lifting) assms(1) assms(2) local.add_0_right local.add_comm local.s_prod_distr local.s_prod_idl local.tau_def local.tau_zero nu_star)

lemma nu_star_sub: "(\<nu> x)\<^sup>\<star> \<le> \<nu> (x\<^sup>\<star>)"
  by (metis add_commute local.less_eq_def local.meet_prop local.nc_nc local.nu_def local.order.refl local.s_le_nc local.star_induct star_iso)

lemma nu_star_nu [simp]: "\<nu> ((\<nu> x)\<^sup>\<star>) = (\<nu> x)\<^sup>\<star>"
  using local.nu_ideal1 local.nu_ret nu_star_sub by blast

lemma nu_star_tau [simp]: "\<nu> ((\<tau> x)\<^sup>\<star>) = 1\<^sub>\<sigma>"
  using tau_star by fastforce

lemma tau_star_tau [simp]: "\<tau> ((\<tau> x)\<^sup>\<star>) = \<tau> x"
  using local.s_prod_distr tau_star by auto

lemma tau_star_nu [simp]: "\<tau> ((\<nu> x)\<^sup>\<star>) = 0"
  using local.alpha_fp local.tau_def nu_star_nu by presburger


lemma d_star_unfold [simp]: 
assumes "\<And>x y z. (x \<cdot> y) \<cdot> d z = x \<cdot> (y \<cdot> d z)"
shows "d y + d (x \<cdot> d (x\<^sup>\<star> \<cdot> y)) = d (x\<^sup>\<star> \<cdot> y)"
proof -
  have "d y + d (x \<cdot> d (x\<^sup>\<star> \<cdot> y)) = d y + d (x \<cdot> (x\<^sup>\<star> \<cdot> d y))"
    by (metis local.c4 local.d_def local.dc_prop1)
  moreover have "... =  d (1\<^sub>\<sigma> \<cdot> d y + (x \<cdot> (x\<^sup>\<star> \<cdot> d y)))"
    by (simp add: local.d_add_ax)
  moreover have "... =  d (1\<^sub>\<sigma> \<cdot> d y + (x \<cdot> x\<^sup>\<star>) \<cdot> d y)"
    by (simp add: assms)
  moreover have "... = d ((1\<^sub>\<sigma> + x \<cdot> x\<^sup>\<star>) \<cdot> d y)"
    using local.s_prod_distr by presburger
  ultimately show ?thesis
    by simp
qed

lemma d_star_sim1: 
assumes "\<And> x y z. d z + x \<cdot> y \<le> y \<Longrightarrow> x\<^sup>\<star> \<cdot> d z \<le> y"
and "\<And> x y z. (x \<cdot> d y) \<cdot> z = x \<cdot> (d y \<cdot> z)"
and "\<And> x y z. (d x \<cdot> y) \<cdot> z = d x \<cdot> (y \<cdot> z)"
shows "x \<cdot> d z \<le> d z \<cdot> y \<Longrightarrow> x\<^sup>\<star> \<cdot> d z \<le> d z \<cdot> y\<^sup>\<star>"
proof -
fix x y z
assume a: "x \<cdot> d z \<le> d z \<cdot> y"
  have b: "x \<cdot> (d z \<cdot> y\<^sup>\<star>) \<le> d z \<cdot> (y \<cdot> y\<^sup>\<star>)"
    by (metis a assms(2) assms(3) local.s_prod_isor)
  hence "x \<cdot> (d z \<cdot> y\<^sup>\<star>) \<le> d z \<cdot> y\<^sup>\<star>"
  proof -
    have f1: "x \<cdot> (y\<^sup>\<star> \<parallel> (z \<cdot> 1\<^sub>\<pi>)) \<le> z \<cdot> 1\<^sub>\<pi> \<parallel> (y \<cdot> y\<^sup>\<star>)"
      using b local.c2_d local.mult_commute by auto
    have "\<exists>a. (a + z \<cdot> 1\<^sub>\<pi>) \<parallel> (y \<cdot> y\<^sup>\<star>) \<le> y\<^sup>\<star> \<parallel> (z \<cdot> 1\<^sub>\<pi>)"
      by (metis (no_types) local.eq_refl local.mult_commute local.mult_isol_var local.join.sup_idem star_unfold_part)
    hence "x \<cdot> (y\<^sup>\<star> \<parallel> (z \<cdot> 1\<^sub>\<pi>)) \<le> y\<^sup>\<star> \<parallel> (z \<cdot> 1\<^sub>\<pi>)"
      using f1 by (metis (no_types) local.distrib_right' local.dual_order.trans local.join.sup.cobounded2)
    thus ?thesis
      using local.c2_d local.mult_commute by auto
  qed
  hence "d z + x \<cdot> (d z \<cdot> y\<^sup>\<star>)\<le> d z \<cdot> y\<^sup>\<star>"
    using local.s_prod_isol star_irr by fastforce
  thus "x\<^sup>\<star> \<cdot> d z \<le> d z \<cdot> y\<^sup>\<star>" 
    using assms(1) by force
qed

lemma d_star_induct: 
assumes "\<And> x y z. d z + x \<cdot> y \<le> y \<Longrightarrow> x\<^sup>\<star> \<cdot> d z \<le> y"
and "\<And> x y z. (x \<cdot> d y) \<cdot> z = x \<cdot> (d y \<cdot> z)"
and "\<And> x y z. (d x \<cdot> y) \<cdot> z = d x \<cdot> (y \<cdot> z)"
shows "d (x \<cdot> y) \<le> d y \<Longrightarrow> d (x\<^sup>\<star> \<cdot> y) \<le> d y"
proof -
  fix x y
  assume "d (x \<cdot> y) \<le> d y"
  hence  "x \<cdot> d y \<le> d y \<cdot> x"
    by (simp add: demod1)
  hence  "x\<^sup>\<star> \<cdot> d y \<le> d y \<cdot> x\<^sup>\<star>"
    using assms(1) assms(2) assms(3) d_star_sim1 by blast
  thus "d (x\<^sup>\<star> \<cdot> y) \<le> d y"
    by (simp add: demod2)
qed

end


many lemmas from Section 13 can be proved in this setting. The proto-quantales and c-quantales
need not be postulated; they exists due to properties of sequential composition and addition over 
complete lattices.\<close>
text \<open>Lemma 13.4.\<close>
text \<open>Lemma 13.5.\<close>
text \<open>Lemma 13.6.\<close>
text \<open>Lemma 13.7.\<close>
subsection \<open>C-Nabla Algebras\<close>
text \<open>Nabla-algebras provide yet another way of formalising non-terminating behaviour in Section 13.\<close>
text \<open>Proposition 13.9.\<close>
text \<open>Corollary 13.10.\<close>
text \<open>Lemma 13.11.\<close>
text \<open>Proposition 13.12.\<close>
subsection \<open>Proto-Quantales\<close>
text \<open>Finally we define the class of proto-quantales and prove some of the 
remaining facts from the article. Full c-quantales, as defined there, are not needed
for these proofs.\<close>
text \<open>Now we prove Lemma 12.6.\<close>
text \<open>The following lemma should be somewhere close to complete lattices.\<close>
