theory Sepref_Translate
imports 
  Sepref_Monadify 
  Sepref_Constraints 
  Sepref_Frame 
  "Lib/Pf_Mono_Prover"
  Sepref_Rules 
  Sepref_Combinator_Setup
  "Lib/User_Smashing"
begin



definition COPY -- "Copy operation"
   where [simp]: "COPY \<equiv> RETURN" 

lemma tagged_nres_monad1: "Refine_Basic.bind$(RETURN$x)$(\<lambda>\<^sub>2x. f x) = f x" by simp

definition PREPARED_TAG :: "'a => nat => 'a"
  where [simp]: "PREPARED_TAG x i == x"
lemma PREPARED_TAG_I: 
  "hn_refine \<Gamma> c \<Gamma>' R a \<Longrightarrow> hn_refine \<Gamma> c \<Gamma>' R (PREPARED_TAG a i)"
  by simp

lemmas prepare_refine_simps = tagged_nres_monad1 COPY_def 
  PREPARED_TAG_def

lemma mono_trigger: "mono_Heap F \<Longrightarrow> mono_Heap F" .
*)
(*
abbreviation DEP_SIDE_PRECOND
  where "DEP_SIDE_PRECOND \<Phi> \<equiv> DEFER_tag (PRECOND_tag \<Phi>)"

lemma DEP_SIDE_PRECOND_D: "DEP_SIDE_PRECOND P \<Longrightarrow> P"
  by simp
*)
(*lemma hn_pass_pure[sepref_fr_rules]:
  shows "hn_refine (hn_val P x x') (return x') (hn_val P x x') (pure P) (PASS$x)"
  by rule (sep_auto simp: hn_ctxt_def pure_def)
*)
  (*assumes PREC[unfolded CONSTRAINT_def]: "CONSTRAINT precise Ry"*)
  (*"WHILET \<equiv> WHILEIT$(\<lambda>\<^sub>2_. True)"*)
  (*assumes PREC: "precise Rs"*)
          (*apply (tactic {* Sepref_Frame.frame_tac @{context} 1*})*)
