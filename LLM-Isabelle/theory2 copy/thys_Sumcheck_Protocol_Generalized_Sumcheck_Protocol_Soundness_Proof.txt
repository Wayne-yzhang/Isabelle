theory Soundness_Proof
  imports
    Probability_Tools
    Sumcheck_Protocol
begin

context multi_variate_polynomial begin

lemma prob_roots:
  assumes "deg q2 \<le> deg p" and "vars q2 \<subseteq> {x}" 
  shows "measure_pmf.prob (pmf_of_set UNIV) 
        {r. deg q1 \<le> deg p \<and> vars q1 \<subseteq> {x} \<and> q1 \<noteq> q2 \<and> eval q1 [x \<mapsto> r] = eval q2 [x \<mapsto> r]} 
        \<le> real (deg p) / real CARD('a)"
proof -
  have "card {r. deg q1 \<le> deg p \<and> vars q1 \<subseteq> {x} \<and> 
                 q1 \<noteq> q2 \<and> eval q1 [x \<mapsto> r] = eval q2 [x \<mapsto> r]} = 
         card {r. deg q1 \<le> deg p \<and> vars q1 \<subseteq> {x} \<and> 
                  deg q2 \<le> deg p \<and> vars q2 \<subseteq> {x} \<and>
                  q1 \<noteq> q2 \<and> eval q1 [x \<mapsto> r] = eval q2 [x \<mapsto> r]}" using assms by(auto)
   also have "\<dots> \<le> deg p"  by(auto simp add: roots)
   finally show ?thesis by(auto simp add: measure_pmf_of_set divide_right_mono) 
qed   



theorem soundness_inductive:
  assumes 
    "vars p \<subseteq> set vs" and
    "deg p \<le> d" and 
    "distinct vs" and 
    "H \<noteq> {}"
  shows 
    "measure_pmf.prob 
       (pmf_of_set (tuples UNIV (length vs)))
       {rs. 
          sumcheck pr s (H, p, v) r (zip vs rs) \<and> 
          v \<noteq> (\<Sum>\<sigma> \<in> substs (set vs) H. eval p \<sigma>)} 
     \<le> real (length vs) * real d / real (CARD('a))"
  using assms
proof(induction vs arbitrary: s p v r)
  case Nil
  show ?case
    by(simp)
next
  case (Cons x vs)

  let ?prob = "measure_pmf.prob (pmf_of_set (tuples UNIV (Suc (length vs))))"
  let ?reduced_prob = "measure_pmf.prob (pmf_of_set (tuples UNIV (length vs)))"




  have P0: 
  proof -
    have "(\<Sum>a\<in>H. eval (?q) [x \<mapsto> a]) = 
          (\<Sum>a\<in>H. \<Sum>\<sigma> \<in> substs (set vs) H. eval (p) ([x \<mapsto> a] ++ \<sigma>))"
      by(auto simp add: eval_sum_inst)
    moreover 
    have "(\<Sum>a\<in>H. \<Sum>\<sigma> \<in> substs (set vs) H. eval (p) ([x \<mapsto> a] ++ \<sigma>)) =
      by(auto simp add: sum_merge) 
    ultimately
    have "{r1#rs | r1 rs.                      
                 v = (\<Sum>a\<in>H. eval (?pr_q) [x \<mapsto> a]) \<and>
                 v \<noteq> (\<Sum>\<sigma> \<in> substs (insert x (set vs)) H. eval (p) \<sigma>) \<and> ?pr_q = ?q} = {}" 
      by(auto)    
    then show "?thesis" 
      by (intro prob_empty) (auto 4 4)
  qed

      by (intro prob_mono) (auto 4 4) 

      by (auto simp add: prob_tuples_hd_tl_indep[where Q = "\<lambda>rs. True", simplified]) 

      by(auto simp add: prob_roots honest_prover_deg honest_prover_vars)

      by (simp add: divide_right_mono) 

    finally
  }
  note RP_left = this

  {
      by(auto simp add: eval_sum_inst_commute)

      by fastforce
      using le_trans by blast

      by(intro prob_mono) (auto simp add: *)
