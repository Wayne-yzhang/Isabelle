theory Types
imports Main
begin



type_synonym ('id, 'val) State = "'id \<Rightarrow> 'val"

type_synonym ('exp, 'id, 'val) Evalfunction = 
  "'exp \<Rightarrow> ('id, 'val) State \<Rightarrow> 'val"

type_synonym ('id, 'val, 'com) TConfig = "'com \<times> ('id, 'val) State"

type_synonym ('id, 'val, 'com) TPConfig = 
  "('com list) \<times> ('id, 'val) State"

type_synonym 'com ProgramState = "'com option"

type_synonym ('id, 'val, 'com) PSConfig = 
  "'com ProgramState \<times> ('id, 'val) State"

type_synonym 'com Label = "'com list"

type_synonym ('exp, 'id, 'val, 'com) TLSteps = "
  (('id, 'val, 'com) TConfig \<times> 'com Label 
    \<times> ('id, 'val, 'com) PSConfig) set"

type_synonym ('exp, 'id, 'val, 'com) TLSteps_curry =
"'com \<Rightarrow> ('id, 'val) State \<Rightarrow> 'com Label \<Rightarrow> 'com ProgramState 
  \<Rightarrow> ('id, 'val) State \<Rightarrow> bool"

type_synonym ('exp, 'id, 'val, 'com) TPSteps = "
  (('id, 'val, 'com) TPConfig \<times> ('id, 'val, 'com) TPConfig) set"

type_synonym ('exp, 'id, 'val, 'com) TPSteps_curry =
"'com list \<Rightarrow> ('id, 'val) State \<Rightarrow> 'com list \<Rightarrow> ('id, 'val) State \<Rightarrow> bool"

type_synonym ('exp, 'id, 'val, 'com) TSteps = 
  "(('id, 'val, 'com) TConfig \<times> ('id, 'val, 'com) TPConfig) set"

type_synonym ('exp, 'id, 'val, 'com) TSteps_curry =
"'com \<Rightarrow> ('id, 'val) State \<Rightarrow> 'com list \<Rightarrow> ('id, 'val) State \<Rightarrow> bool"

type_synonym ('id, 'd) DomainAssignment = "'id \<Rightarrow> 'd::order"

type_synonym 'com Bisimulation_type = "(('com list) \<times> ('com list)) set"

type_synonym ('d, 'exp) Hatch = "'d \<times> 'exp"

type_synonym ('d, 'exp) Hatches = "(('d, 'exp) Hatch) set"

type_synonym ('d, 'exp) lHatch = "'d \<times> 'exp \<times> nat"

type_synonym ('d, 'exp) lHatches = "(('d, 'exp) lHatch) set"


end
