theory Lyndon_Addition
  imports Lyndon Szpilrajn.Szpilrajn

begin

subsection "The minimal relation"


inductive_set rotate_rel :: "'a list \<Rightarrow> 'a rel" for w
  where  "0 < n \<Longrightarrow> n < \<^bold>|w\<^bold>| \<Longrightarrow> (mismatch_pair w (rotate n w)) \<in> rotate_rel w"


lemma (in linorder) rotate_rel_iff: assumes "w \<noteq> \<epsilon>"
  shows  "Lyndon w \<longleftrightarrow> rotate_rel w \<subseteq> {(x,y). x < y}" (is "?L \<longleftrightarrow> ?R")
proof
  assume "Lyndon w" show "rotate_rel w \<subseteq> {(x,y). x < y}"
  proof
    fix  x assume "x \<in> rotate_rel w"
    then obtain n where "x = mismatch_pair w (rotate n w)" and "0 < n" and "n < \<^bold>|w\<^bold>|"
      using rotate_rel.cases by blast
    have "w <lex rotate n w"
    from this[unfolded lexordp_conv_lexord]
    show "x \<in> {(a, b). a < b}"
      unfolding irrefl_def by blast
  qed
next
  assume "?R"
  show "?L"
    unfolding Lyndon.simps
  proof(simp add: assms)
    have "w <lex rotate n w" if "0 < n"  "n < \<^bold>|w\<^bold>|" for n
    proof-
      have "\<not> w \<bowtie> rotate n w"
          mismatch_pair_lcp[of w "rotate n w"] by fastforce
      show "w <lex rotate n w".
    qed
    thus "\<forall>n. 0 < n \<and> n < \<^bold>|w\<^bold>| \<longrightarrow> w <lex rotate n w"  by blast
  qed
qed

lemma Lyndon_rotate_rel_iff:
  "acyclic (rotate_rel w) \<longleftrightarrow> (\<exists> r. strict_linear_order r \<and> rotate_rel w \<subseteq> r)" (is "?L \<longleftrightarrow> ?R")
proof
  assume "?R" thus "?L"
    unfolding strict_linear_order_on_def acyclic_def irrefl_def
    using trancl_id trancl_mono by metis
next
  assume "?L" thus "?R"
    using acyclic_order_extension by auto
qed

lemma slo_linorder: "strict_linear_order r \<Longrightarrow> class.linorder (\<lambda> a b. (a,b) \<in> r\<^sup>=) (\<lambda> a b. (a,b) \<in> r)"
    unfolding strict_linear_order_on_def strict_partial_order_def irrefl_def trans_def total_on_def
    by unfold_locales blast+


lemma assumes "w \<noteq> \<epsilon>" and "acyclic (rotate_rel w)" shows "primitive w"
proof-
  obtain r where "strict_linear_order r" and "rotate_rel w \<subseteq> r"
    using Lyndon_rotate_rel_iff assms by blast

  interpret r: linorder "\<lambda> a b. (a,b) \<in> r\<^sup>=" "\<lambda> a b. (a,b) \<in> r"

  have "r.Lyndon w"

  from r.Lyndon_prim[OF this]
  show "primitive w".

qed

lemma assumes "w \<noteq> \<epsilon>" and "acyclic (rotate_rel w)" shows "\<not> bordered w"
proof-
  obtain r where "strict_linear_order r" and "rotate_rel w \<subseteq> r"
    using Lyndon_rotate_rel_iff assms by blast

  interpret r: linorder "\<lambda> a b. (a,b) \<in> r\<^sup>=" "\<lambda> a b. (a,b) \<in> r"

  have "r.Lyndon w"

  from r.Lyndon_unbordered[OF this]
  show "\<not> bordered w".
qed

end
