theory sum_list
  imports "../utp_easy_parser"
begin


alphabet st_sum_list = 
  i   :: nat
  xs  :: "int list"
  ans :: int


abbreviation Sum_List :: "st_sum_list hrel" where
  "Sum_List \<equiv>
  i := 0 ;;
  ans := 0 ;;
  while (i < #xs) invr (ans = list_sum(take(i, xs)))
  do
    ans := ans + xs[i] ;;
    i := i + 1
  od"


lemma "TRY([&xs \<mapsto>\<^sub>s \<guillemotleft>[4,3,7,1,12,8]\<guillemotright>] \<Turnstile> Sum_List)"
  apply (sym_eval) oops


theorem Sum_List_sums:
  "{{xs = \<guillemotleft>XS\<guillemotright>}} Sum_List {{ans = list_sum(xs)}}"
  by (hoare_auto, metis add.foldr_snoc take_Suc_conv_app_nth)

end