theory AGM_Logic

imports Main

begin






declare infer_def[simp]

  using true_PL by auto

  using Cn_same true_PL by auto

  using false_PL by auto

  using Cn_same imp_PL idempotency_L inclusion_L infer_def subset_insertI by force+

  using Cn_false Cn_imp notE_PL not_PL by fastforce

  apply(intro iffI conjI_PL, frule conjE1_PL, frule conjE2_PL) 
  using Cn_same Un_insert_right bot.extremum idempotency_L inclusion_L by auto

  by (unfold Cn_same)
     (meson Supraclassical_logic.conj_PL Supraclassical_logic_axioms insert_subset)

  using disj_PL Cn_same imp_PL idempotency_L inclusion_L infer_def subset_insertI by force+

  by (metis Cn_imp_bis equivE1_PL equivE2_PL equivI_PL set_eq_subset)

  using nonemptyCn Cn_imp Cn_not Cn_conj Cn_disj Cn_equiv valid_def by auto

proof
  { fix q
    hence "{} \<turnstile> p .\<longrightarrow>. q" and "{} \<turnstile> (.\<not> p) .\<longrightarrow>. q" 
      using impI_PL by auto
  }
next
qed

  by (metis (no_types, opaque_lifting) notnot_PL valid_Cn_equiv valid_equiv_PL)

  using conj_PL by auto

  by (simp add: Cn_conj_bis insert_commute) 

proof -
  { fix p q
      apply(erule disjE_PL) 
      using assumption_L disjI2_PL disjI1_PL impI_PL by auto 
  }
  then show ?thesis by auto
qed

  unfolding Cn_same using disj_com by simp

  by (metis Cn_not Un_insert_left Un_insert_right imp_PL notnot_PL)

  using equivE1_PL equivE2_PL equivI_PL imp_contrapos by blast

  using Cn_imp_bis by auto

  apply(subst disj_PL, subst imp_contrapos)
  using assumption_L impI_PL by auto

  using disjE_PL[OF imp_recovery0, of A p p q] assumption_L imp_PL by auto

  using imp_PL imp_recovery1 imp_trans by blast

  by (meson assumption_L impI_PL in_mono sup_ge1 transitivity2_L)

  by (metis Un_insert_right assumption_L conjE2_PL conjI_PL equiv_PL impI2 imp_PL insertI1 sup_bot.right_neutral)

proof
  assume "A \<turnstile> (p .\<and>. q) .\<longrightarrow>. r"
  then have "Cn (A \<union> {r}) \<subseteq> Cn (A \<union> {p, q})"
    by (metis (no_types) Cn_conj_bis Cn_imp_bis Cn_union Un_insert_right sup_bot.right_neutral)
    by (metis Un_insert_right impI_PL inclusion_L infer_def insert_commute insert_subset subset_eq sup_bot.right_neutral)
next
   assume "A \<turnstile> p .\<longrightarrow>. (q .\<longrightarrow>. r)"
  then have "A \<union> {p} \<union> {q} \<turnstile> r"
    using imp_PL by auto
  then show "A \<turnstile> (p .\<and>. q) .\<longrightarrow>. r"
    by (metis (full_types) Cn_conj_bis Cn_union impI_PL infer_def insert_is_Un sup_assoc)
qed

  by (meson conj_imp disjE_PL ex_mid_PL imp_PL)

  using Cn_imp Cn_imp_bis Cn_not disjE_PL notnot_PL by blast

  by (metis Un_insert_right disjE_PL disj_PL disj_com ex_mid_PL insert_commute sup_bot.right_neutral)

  apply(intro impI_PL conjI_PL, unfold imp_PL[symmetric])
  by (meson assumption_L conjE1_PL conjE2_PL imp_trans infer_def insertI1 validD_L valid_imp_PL)+

  by (meson conj_PL disjI2_PL disj_com disj_notE_PL)

  by (meson conj_imp disj_PL disj_com imp_PL imp_contrapos notE_PL notI_PL)

  using conj_PL disjI1_PL morgan by auto

  using conj_PL disjI1_PL by auto

end

locale Compact_logic = Tarskian_logic +

begin

if we accumulate an infinity of hypothesis groups which locally do not deduce phi\<close>
lemma chain_closure: \<open>\<not> \<tturnstile> \<phi> \<Longrightarrow> subset.chain {B. \<not> B \<turnstile> \<phi>} C \<Longrightarrow> \<not> \<Union>C \<turnstile> \<phi>\<close> 
  assume a:\<open>subset.chain {B. \<not> B \<turnstile> \<phi>} C\<close> and b:\<open>\<not> \<tturnstile> \<phi>\<close> and \<open>\<Union> C \<turnstile> \<phi>\<close>
  then obtain A' where c:\<open>A'\<subseteq> \<Union> C\<close> and d:\<open>finite A'\<close>  and e:\<open>A' \<turnstile> \<phi>\<close> using compactness_L by blast
  define f where f:\<open>f \<equiv> \<lambda>a. SOME B. B \<in> C \<and> a \<in> B\<close>
  have g:\<open>finite (f ` A')\<close> using f d by simp
  have h:\<open>(f ` A') \<subseteq> C\<close> 
  have i:\<open>subset.chain {B. \<not> B \<turnstile> \<phi>} (f ` A')\<close> using a h
  have \<open>A' \<noteq> {} \<Longrightarrow> \<Union> (f ` A') \<in> {B. \<not> B \<turnstile> \<phi>}\<close> using g i 
  hence j:\<open>A' \<noteq> {} \<Longrightarrow> \<not> \<Union>(f ` A') \<turnstile> \<phi>\<close> by simp
  have \<open>A' \<subseteq> \<Union>(f ` A')\<close> 
