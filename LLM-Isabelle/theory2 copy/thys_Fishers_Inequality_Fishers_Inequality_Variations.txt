theory Fishers_Inequality_Variations imports Dual_Systems Rank_Argument_General
Vector_Matrix_Mod Linear_Bound_Argument
begin


context mat_mod
begin

lemma mat_mod_proper_iff:  "proper_inc_mat (mat_mod N)  \<longleftrightarrow> proper_inc_mat N"
  by (simp add: proper_inc_mat_def)

lemma mat_mod_rep_num_eq:  "i < dim_row N \<Longrightarrow> elements_mat N \<subseteq> {0..<m} \<Longrightarrow> 
    mat_rep_num (mat_mod N) i = mat_rep_num N i"
  by (simp add: mat_mod_count_row_eq mat_rep_num_def)

lemma mat_point_index_eq: "elements_mat N \<subseteq> {0..<m} \<Longrightarrow> 
    mat_point_index (mat_mod N) I = mat_point_index N I"
  by (simp add:  mat_mod_eq_cond) 

lemma mod_mat_inter_num_eq: "elements_mat N \<subseteq> {0..<m} \<Longrightarrow> 
    mat_inter_num (mat_mod N) j1 j2 = mat_inter_num N j1 j2"
  by (simp add: mat_mod_eq_cond) 

lemma mod_mat_block_size: "elements_mat N \<subseteq> {0..<m} \<Longrightarrow> mat_block_size (mat_mod N) j = mat_block_size N j"
  by (simp add: mat_mod_eq_cond) 

lemma mat_mod_non_empty_col_iff: "elements_mat M \<subseteq> {0..<m} \<Longrightarrow> 
    non_empty_col (mat_mod M) j \<longleftrightarrow> non_empty_col M j"
  using mat_mod_eq_cond by auto 
end

context mat_mod_type
begin

lemma mat_rep_num_MM_Rel: 
  assumes "MM_Rel A B"
  assumes "i < dim_row A"
  shows "mat_rep_num (mat_mod A) i = mat_rep_num B i"
  unfolding mat_rep_num_def using vec_count_MV_Rel_direct assms mat_mod_vec_mod_row row_map_mat
  by (metis MM_Rel_def MV_Rel_def index_map_mat(2) mat_mod_dim(1) to_int_mod_ring_hom.hom_one) 


lemma mat_block_size_MM_Rel: 
  assumes "MM_Rel A B"
  assumes " j < dim_col A"
  shows "mat_block_size (mat_mod A) j = mat_block_size B j"
  unfolding mat_block_size_def using vec_count_MV_Rel_direct assms MM_Rel_MV_Rel_col
  by (metis mat_mod_vec_mod_col to_int_mod_ring_hom.hom_one) 

lemma mat_inter_num_MM_Rel: 
  assumes "MM_Rel A B"
  assumes "j1 < dim_col A" "j2 < dim_col B"
  shows "mat_inter_num (mat_mod A) j1 j2 = mat_inter_num B j1 j2"
  unfolding mat_inter_num_def using assms index_map_mat mat_mod_dim(2)
  by (smt (z3) Collect_cong MM_Rel_def to_int_mod_ring_hom.hom_1 to_int_mod_ring_hom.hom_one) 



lemma of_int_mod_ring_lift_01_eq: 
  assumes "zero_one_matrix N"
  shows "map_mat (of_int_mod_ring) N = (lift_01_mat) N"
  apply (auto simp add: mat_eq_iff[of "map_mat (of_int_mod_ring) N" "lift_01_mat N"])
  using assms zero_one_matrix.M_not_one_simp by fastforce

lemma to_int_mod_ring_lift_01_eq: 
  assumes "zero_one_matrix N"
  shows "to_int_mat N = (lift_01_mat) N"
  apply (auto simp add: mat_eq_iff[of "to_int_mat N" "lift_01_mat N"])
  using assms using zero_one_matrix.M_not_zero_simp by fastforce 

end

introductory problems for applying the linear algebra bound method to a combinatorial problem. 
In mathematical literature, it is considered simpler than Fisher's Inequality, however presents some 
interesting challenges to formalisation. Most significantly, it considers the incidence matrix to have 
elements of types integers mod 2. \<close>
text \<open>Initially, define a locale to represent the odd town context (a town with v people, and b groups) 
which must each be of odd size, but have an even intersection number with any other group \<close>
  then have "odd (card (\<B>s ! j))" using \<open>j < \<b>\<close> odd_groups by auto 
text \<open>The odd town locale must be simple by definition \<close>
text \<open>The upper bound lemma (i.e. variation on Fisher's) for the odd town property using the linear 
bound argument. Notice it follows exactly the same pattern as the generalised version, however
it's sum manipulation argument is significantly simpler (in line with the mathematical proofs) \<close>
