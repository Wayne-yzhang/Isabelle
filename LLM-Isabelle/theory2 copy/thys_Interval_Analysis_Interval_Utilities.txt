theory
  Interval_Utilities
imports
  "HOL-Library.Interval"
  "HOL-Analysis.Analysis"
  "HOL-Library.Interval_Float"
begin


lemma compact_set_of: 
  by(simp add:set_of_eq compact_interval[of "lower X" "upper X"]) 

lemma bounded_set_of:
  by(simp add:set_of_eq compact_interval[of "lower X" "upper X"]) 

lemma compact_img_set_of:
  using compact_continuous_image[of "set_of X" f, simplified assms] compact_interval 
  unfolding set_of_eq 
  by simp  

lemma sup_inf_dist_bounded:
  using cInf_lower[of _ X] cSup_upper[of _ X] 
  apply(auto simp add:dist_real_def)[1]
  by (smt (z3))

  by(simp add:set_of_eq)

  by(simp add: in_intervalI)

  by(simp add: in_intervalI)

  by (metis atLeastAtMost_iff bdd_below.unfold set_of_eq)

  by (metis atLeastAtMost_iff bdd_above.unfold set_of_eq)

  by (metis  closed_real_atLeastAtMost set_of_eq)

  apply(simp add:image_def set_of_eq)
  by fastforce

lemma interval_linorder_case_split[case_names LeftOf Including  RightOf]:
proof(insert assms, cases " upper x < c")
  case True
  then show ?thesis
    using assms(1) by blast 
next
  case False
  then show ?thesis 
  proof(cases "c \<in>\<^sub>i x")
    case True
    then show ?thesis
      using assms(2) by blast 
  next
    case False
    then show ?thesis 
      by (meson assms(1) assms(3) in_intervalI not_le_imp_less) 
  qed
qed

lemma foldl_conj_True:
  by(induction xs rule:rev_induct, auto)
  
lemma foldl_conj_set_True:
  by(induction xs rule:rev_induct, auto)


section "Interval Bounds and Set Conversion "

lemma sup_set_of:
  fixes X :: "'a::{conditionally_complete_lattice} interval"
  shows "Sup (set_of X) = upper X"
  unfolding set_of_def upper_def
  using cSup_atLeastAtMost lower_le_upper[of X]
  by (simp add: upper_def lower_def) 
 
lemma inf_set_of:
  fixes X :: "'a::{conditionally_complete_lattice} interval"
  shows "Inf (set_of X) = lower X" 
  unfolding set_of_def lower_def
  using cInf_atLeastAtMost lower_le_upper[of X]
  by (simp add: upper_def lower_def)

lemma inf_le_sup_set_of: 
  fixes X :: "'a::{conditionally_complete_lattice} interval"
  shows"Inf (set_of X) \<le> Sup (set_of X)"
  using sup_set_of inf_set_of lower_le_upper
  by metis   

  by (simp add: set_of_eq)

lemma lower_bounds[simp]: 
  using assms
  apply (simp add: lower.rep_eq)
  by (simp add: bounds_of_interval_eq_lower_upper lower_Interval upper_Interval)

lemma upper_bounds [simp]: 
  using assms
  apply (simp add: upper.rep_eq)
  by (simp add: bounds_of_interval_eq_lower_upper lower_Interval upper_Interval)

  by (simp) 
  by (simp)

lemma map2_nth:
  using assms  by simp

  by auto
  by (meson map_set set_zip_leftD)
  by (meson map_set set_zip_rightD) 
  by (meson map_pair_set_left set_zip_rightD zip_same) 

lemma map_pair_f_all: 
  by(insert assms(1), induction X Y rule:list_induct2, auto)




lemma map_interval_swap_code[code]:
  unfolding map_interval_swap_def by(rule ext, rule arg_cong, auto simp add: Interval'.abs_eq)

lemma  mk_interval_code[code]:
  unfolding mk_interval_def by(rule ext, rule arg_cong, auto simp add: Interval'.abs_eq)

lemma  mk_interval':
  unfolding mk_interval_def by(rule ext, rule arg_cong, auto)

  by(simp add: lower_def Interval_inverse mk_interval_def) 

  by(simp add: upper_def Interval_inverse mk_interval_def) 


definition 
  where 

  unfolding le_interval_list_def by simp

  unfolding le_interval_list_def by simp

  unfolding le_interval_list_def 
  by(safe, simp_all add: foldl_conj_set_True zip_rev)

lemma le_interval_list_imp_length: 
using assms unfolding le_interval_list_def
  by simp


      ((\<forall> n < length xs. xs!n \<le> ys!n) \<and> x \<le> y)\<close>
lemma lsplit_right: assumes \<open>length (xs) = length (ys)\<close>
  and  \<open>((\<forall> n < length xs. xs!n \<le> ys!n) \<and> x \<le> y)\<close>
shows \<open>(n<length (x # xs) \<longrightarrow> (x # xs) ! n \<le> (y # ys) ! n)\<close>
lemma lsplit: assumes \<open>length (xs) = length (ys)\<close>
  shows \<open>(\<forall>n<length (x # xs). (x # xs) ! n \<le> (y # ys) ! n) =  
      ((\<forall> n < length xs. xs!n \<le> ys!n) \<and> x \<le> y)\<close>
  assumes \<open>length Xs = length Ys\<close> and \<open>Xs \<le>\<^sub>I Ys\<close> shows \<open>\<forall> n < length Xs. Xs!n \<le> Ys!n\<close>
  assumes \<open>length Xs = length Ys\<close>  
    and \<open>\<forall> n<length Xs . (Xs!n  \<le> Ys!n)\<close>
  shows  \<open>Xs \<le>\<^sub>I Ys\<close> 
  assumes \<open>Xs \<le>\<^sub>I Ys\<close> shows \<open>\<forall> n < length Xs. Xs!n \<le> Ys!n\<close>
  assumes \<open>Xs \<le>\<^sub>I Ys\<close> shows \<open>n < length Xs \<longrightarrow>  Xs!n \<le> Ys!n\<close>
lemma  interval_set_leq_eq: \<open>(X \<le> Y) = (set_of X \<subseteq> set_of Y)\<close>
  for X :: \<open>'a::linordered_ring interval\<close>
  fixes X Y C ::\<open>'a::linordered_ring interval\<close>
  assumes \<open>X \<le> Y\<close> 
  shows \<open>C * X \<le> C * Y\<close>
  fixes X Y C ::\<open>'a::{real_normed_algebra,linordered_ring,linear_continuum_topology} interval\<close>
  assumes \<open>X \<le> Y\<close> 
  shows \<open>X * C \<le> Y * C\<close>
section\<open>Support for Lists of Intervals \<close>
abbreviation in_interval_list::\<open>('a::preorder) list \<Rightarrow> 'a interval list \<Rightarrow> bool\<close> ("(_/ \<in>\<^sub>I _)" [51, 51] 50)
  where \<open>in_interval_list xs Xs \<equiv> foldl (\<and>) True (map2 (in_interval) xs Xs)\<close>
lemma interval_of_in_interval_list[simp]: \<open>xs \<in>\<^sub>I map interval_of xs\<close>
lemma interval_of_in_eq:  \<open>interval_of x \<le> X = (x \<in>\<^sub>i X)\<close>
  assumes \<open>length inputs = length Inputs\<close>
shows \<open>(map interval_of inputs \<le>\<^sub>I Inputs) = (inputs \<in>\<^sub>I Inputs)\<close>
section \<open>Interval Width and Arithmetic Operations\<close>
  shows \<open>width (A + B) = width A + width B\<close>
lemma width_expanded: \<open>interval_of (width Y) = Interval(upper Y - lower Y, upper Y - lower Y)\<close>
  fixes X :: \<open>'a::{linordered_ring} interval\<close>
  shows \<open>0 \<le> width X\<close>
section \<open>Interval Multiplication\<close>
\<open>X * Y = Interval(Min {(lower X * lower Y), (lower X * upper Y), (upper X * lower Y), (upper X * upper Y)}, 
                  Max {(lower X * lower Y), (lower X * upper Y), (upper X * lower Y), (upper X * upper Y)})\<close>
lemma interval_times_scalar: \<open>interval_of a * A = mk_interval(a * lower A, a * upper A)\<close>
  assumes \<open>0 \<le> a \<close> 
  shows \<open>interval_of a * A = Interval(a * lower A, a * upper A)\<close> 
  assumes \<open>0 \<le> a\<close> 
  shows \<open>A * interval_of a = Interval(a * lower A, a * upper A)\<close>
section \<open>Distance-based Properties of Intervals\<close>
text \<open>Given two real intervals @{term \<open>X\<close>} and @{term \<open>Y\<close>}, and two real numbers  @{term \<open>a\<close>} 
and @{term \<open>b\<close>}, the width of the sum of the scaled intervals is equivalent to the width of the 
