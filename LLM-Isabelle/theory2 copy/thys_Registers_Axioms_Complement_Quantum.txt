theory Axioms_Complement_Quantum
  imports Laws_Quantum Finite_Tensor_Product Quantum_Extra
begin

no_notation m_inv ("inv\<index> _" [81] 80)
no_notation Lattice.join (infixl "\<squnion>\<index>" 65)

  by auto

instance complement_domain :: (finite, finite) finite
proof intro_classes
    by (simp add: Rep_complement_domain_inject inj_on_def)
    by (metis finite_lessThan type_definition.Rep_range type_definition_complement_domain)
    using finite_image_iff by blast
qed

lemma CARD_complement_domain: 
proof -
    by (metis zero_less_card_finite zero_less_mult_pos2)
    by (simp add: Rep_complement_domain_inject inj_on_def)
    apply (subst type_definition.Rep_range[OF type_definition_complement_domain])
  ultimately show ?thesis
    by (metis card_image)
qed


lemma register_decomposition:
proof -
  note [[simproc del: compatibility_warn]]
  fix \<xi>0 :: 'a

    by simp

    by (simp add: P_def butterfly_eq_proj)

    by (simp add: P_def P'_def register_projector)
    using sum_butterfly_ket P_butter by simp
    unfolding P'_def 
    by auto

    using S_def that proj_P'
    by (metis cblinfun_fixes_range is_Proj_algebraic)

    apply atomize_elim apply (simp flip: all_conj_distrib) apply (rule choice)
    by (meson cfinite_dim_finite_subspace_basis csubspace_space_as_set)

    apply atomize_elim apply (simp flip: all_conj_distrib) apply (rule choice)
    using orthonormal_basis_of_cspan[OF finiteB0] by blast

    by simp
    by (metis ccspan.rep_eq closure_finite_cspan finiteB space_as_set_inject)
    by (simp add: Complex_Inner_Product.is_ortho_set_cindependent)

  proof -
      by (metis S_def cblinfun_fixes_range complex_vector.span_base cspanB is_Proj_idempotent proj_P')
      by (metis S_def cblinfun_fixes_range complex_vector.span_base cspanB is_Proj_idempotent proj_P')
      using x y by simp
      by (metis cinner_adj_left is_Proj_algebraic proj_P')
      unfolding P_butter by simp
      by (metis butterfly_comp_butterfly complex_vector.scale_eq_0_iff orthogonal_ket that(3))
      by (simp add: complex_vector.linear_0)
    finally show ?thesis
      by -
  qed



    unfolding ccspanB S_def
    using proj_P' Proj_on_own_range'[symmetric] is_Proj_algebraic by blast

  proof (unfold B'_def, use finite[of UNIV] in induction)
    case empty
    show ?case by auto
  next
    case (insert j M)
      by (meson insert.hyps(1) insert.hyps(2) sum.insert)
      unfolding P'B insert.IH[symmetric] by simp
      apply (rule Proj_orthog_ccspan_union[symmetric])
      using orthoBiBj insert.hyps(2) by auto
      by auto
    finally show ?case
      by simp
  qed

  with sumP'id 
    by (metis Proj_range cblinfun_image_id)
    by (metis B'_def finiteB ccspan.rep_eq finite_UN_I finite_class.finite_UNIV closure_finite_cspan top_ccsubspace.rep_eq)

    unfolding B'_def is_ortho_set_def by blast
    using is_ortho_set_cindependent by blast
    apply (subst complex_vector.dim_span_eq_card_independent[symmetric])
     apply (rule indepB')
    apply (subst cspanB')
    using cdim_UNIV_ell2 by auto

  from orthoBiBj orthoB
    unfolding is_ortho_set_def
    apply auto by (metis cinner_eq_zero_iff that)

  proof -
      using that P'id
      by (simp add: Si_to_Sj_def cblinfun_apply_cblinfun_compose[symmetric] register_mult P_butter P'_def)
      unfolding Si_to_Sj_def by simp
    proof -
        by (simp add: Si_to_Sj_def cblinfun_apply_cblinfun_compose[symmetric] register_mult P_butter P'_def)
        by (simp add: S_def)
      finally show ?thesis by -
    qed
      using S2S S2S2S by (auto intro!: funcsetI)
      using bij apply (auto simp: bij_betw_def)
      by (metis complex_vector.span_span cspanB)
    then show ?thesis
      by (metis complex_vector.dim_span_eq_card_independent cspanB indepB)
  qed

  proof -
      using cardB' by simp
      unfolding B'_def apply (rule card_UN_disjoint)
      using finiteB Bdisj by auto
      using cardBsame by metis
      by auto
    finally show ?thesis by -
  qed

    apply atomize_elim apply (rule finite_same_card_bij)
    using finiteB CARD_complement_domain[OF CARD'b] by auto

    apply atomize_elim
    apply (subst cblinfun_extension_apply)
      apply (rule cblinfun_extension_exists_finite_dim)
    by (auto simp add: inj_ket cindependent_ket)


  proof -
      apply atomize_elim by auto
      unfolding Uapply u_def by simp
      by (simp add: cinner_adj_left)
      by (metis (no_types, lifting) assms register_def)
      by (simp add: register_mult cblinfun_apply_cblinfun_compose[symmetric])
      by (simp add: eqa_def cinner_ket) 
              cinner_scaleC_left cinner_zero_right complex_cnj_one complex_vector.linear_scale)
      using P_butter P'_def by simp
      apply (subst P'id)
       apply (metis bij_betw_imp_surj_on bij_f complex_vector.span_base cspanB rangeI)
      by simp
      using bij_f orthoB normalB unfolding is_ortho_set_def eqc_def apply auto
       apply (metis bij_betw_imp_surj_on cnorm_eq_1 rangeI)
      by (smt (z3) bij_betw_iff_bijections iso_tuple_UNIV_I)
    finally show ?thesis
      by (simp add: eqa_def eqac_def eqc_def \<xi>'\<alpha>' \<xi>\<alpha>)
  qed
    using eqac_def by auto

  proof (rule equal_ket, rename_tac \<xi>1\<alpha>)
      apply atomize_elim by auto
      unfolding cblinfun_apply_cblinfun_compose \<xi>1\<alpha> Uapply u_def by simp
      by (metis (no_types, lifting) assms butterfly_comp_butterfly lift_cblinfun_comp(4) register_mult)
      by (simp add: eqa_def cinner_ket)
      by (simp add: complex_vector.linear_scale)
      unfolding Uapply u_def by simp
      unfolding cblinfun_apply_cblinfun_compose[symmetric] by simp
      by (simp add: eqa_def tensor_ell2_scaleC1)
      by (simp add: \<xi>1\<alpha> tensor_op_ket)
      by -
  qed
    apply (rule_tac clinear_eq_butterfly_ketI[THEN fun_cong, where x=\<theta>])
    by (auto intro!: clinearI simp add: bounded_cbilinear.add_left bounded_cbilinear_cblinfun_compose complex_vector.linear_add complex_vector.linear_scale)

  proof -
    proof -
         apply (simp add: u_def, metis bij_betw_inv_into_right bij_f that)
        by (metis Uapply cblinfun_apply_in_image)

        unfolding cblinfun_compose_image[symmetric] register_mult[OF assms]
        by simp
        by (meson cblinfun_image_mono top_greatest)
        by (simp add: S_def P'_def P_butter)
        by (simp add: ccspanB)
        by (meson cblinfun_image_ccspan)
        by (rule ccspan_leqI, use * in auto)
      finally show ?thesis by -
    qed
      unfolding sum_butterfly_ket[symmetric]
      apply (subst complex_vector.linear_sum, simp)
      by (rule cblinfun_sum_image_distr)
      apply auto by (meson SUP_le_iff order.trans)
      apply auto
      using top.extremum_unique by blast
      by (rule surj_isometry_is_unitary)
  qed

  proof -
      by simp
      by (simp add: cblinfun_assoc_left)
      using 1 by simp
    finally show ?thesis
      by -
  qed

    by (auto simp: sandwich_def)
qed

lemma register_decomposition_converse: 
  using _ unitary_sandwich_register apply (rule register_comp[unfolded o_def])
  using assms by auto


proof -
    by (rule inj_tensor_left, simp)
    unfolding F
    by (smt (z3) inj_def) 
qed

lemma iso_register_decomposition:
proof -
    using assms iso_register_is_register by blast 


    by auto

    by (meson assms iso_register_inv_comp2 surj_iff)
    by (smt (verit, best) surjD)

    apply auto
    by (metis butterfly_apply cblinfun.zero_left complex_vector.scale_eq_0_iff ket_nonzero orthogonal_ket)

    apply atomize_elim
    by (metis butterfly_apply cinner_scaleC_right id_cblinfun_apply cinner_ket_same mult.right_neutral scaleC_one)
    by (smt (z3) \<gamma> butterfly_apply butterfly_scaleC_left cblinfun_id_cblinfun_apply complex_vector.scale_cancel_right cinner_ket_same ket_nonzero)

    unfolding T_def
    apply (subst bounded_clinear_CBlinfun_apply)
    by (auto intro!: bounded_clinear_finite_dim clinear_tensor_ell22)
    apply (rule fun_cong[where x=a])
    apply (rule clinear_eq_butterfly_ketI)
      apply auto

    by (simp add: Misc.sandwich_def FV)
    by (simp add: U_def butterfly_comp_cblinfun cblinfun_comp_butterfly)
    apply (rule_tac fun_cong[where x=a])
    apply (rule_tac clinear_eq_butterfly_ketI)
      apply auto
    by (metis (no_types, lifting) cblinfun_apply_clinear clinear_iff sandwich_apply)

    by (auto simp: T)
  proof -
    proof -
        by (simp add: T tensor_ell2_scaleC2)
        by simp
        by simp
      finally show ?thesis
        by (metis range_eqI)
    qed

      by (simp add: full_SetCompr_eq)
      apply (rule ccspan_mono)
      by (auto simp flip: tensor_ell2_ket)
      by (auto intro!: ccspan_mono)
      by (metis (mono_tags, opaque_lifting) calculation cblinfun_image_ccspan cblinfun_image_mono eq_iff top_greatest)
      using top.extremum_uniqueI by blast
  qed

    by (rule surj_isometry_is_unitary)

    by (auto simp: sandwich_def[abs_def])
qed

lemma complement_exists:
proof -
  note [[simproc del: Laws_Quantum.compatibility_warn]]
    apply atomize_elim using assms by (rule register_decomposition)
    unfolding G_def apply (rule register_decomposition_converse) by simp
  proof -
      apply (auto simp: F G_def sandwich_def)
      apply (auto simp: F G_def sandwich_def)
    ultimately show ?thesis by simp
  qed
  proof -
      apply (auto simp: register_pair_apply F G_def sandwich_def)
      apply (rule tensor_extensionality[rotated -1])
      by (simp_all add: bounded_cbilinear.add_left bounded_cbilinear_cblinfun_compose bounded_cbilinear.add_right clinearI)
      by (simp add: I_def unitary_sandwich_register)
       apply (auto intro!:ext simp: I_def[abs_def] FG sandwich_def)
      by (auto intro!: iso_registerI)
  qed
  ultimately show ?thesis
    apply (rule_tac exI[of _ G]) by (auto)
qed


lemma commutant_exchange:
proof (rule Set.set_eqI)
  from assms
    using iso_register_def by blast
    using iso_register_def by blast
    by (simp add: commutant_def)
    by (simp add: commutant_def)
    by -
qed

proof (rule Set.set_eqI, rule iffI)
  fix \<gamma> :: 'a
    by (metis (mono_tags, lifting) commutant_def mem_Collect_eq rangeI cblinfun_apply_cblinfun_compose)

  proof atomize_elim
      apply (atomize_elim, rule choice, rule allI)
      by (simp add: cinner_ket_left Abs_ell2_inverse)
      apply atomize_elim
      apply (subst cblinfun_extension_apply)
        apply (rule cblinfun_extension_exists_finite_dim)
      by (auto simp add: inj_ket cindependent_ket)
      by auto
      by auto
  qed

  proof -
      by (auto simp: tensor_op_ket)
      by (metis (no_types, lifting) cinner_adj_left butterfly_adjoint id_cblinfun_adjoint tensor_op_adjoint)
      unfolding comm by (simp add: cblinfun_apply_cblinfun_compose)
      by (simp add: comp_tensor_op tensor_op_ket tensor_op_scaleC_left)
      by (simp add: x')
      apply (simp add: tensor_op_ket)
      by (simp flip: tensor_ell2_ket)
    finally show ?thesis by -
  qed
    by (auto intro!: equal_ket cinner_ket_eqI)
    by auto
next
    by auto
    by (auto simp: x commutant_def comp_tensor_op)
qed

lemma complement_range:
proof -
    using assms compatible_def by metis+
    using Laws_Quantum.register_pair_apply assms by blast
    by force
    by force
    by (simp add: commutant_exchange commutant_tensor1)
qed

lemma same_range_equivalent:
proof -
    by (simp add: assms)
    by (simp add: assms(3)[symmetric])
    by (simp_all add: register_inj)
    by simp_all
    unfolding I_def
    apply (subst Hilbert_Choice.f_inv_into_f[where f=F], simp)+
    by (simp add: complex_vector.linear_add)
    unfolding J_def
    apply (subst Hilbert_Choice.f_inv_into_f[where f=G], simp)+
    by (simp add: complex_vector.linear_add)
    unfolding I_def
    apply (subst Hilbert_Choice.f_inv_into_f[where f=F], simp)+
    by (simp add: complex_vector.linear_scale)
    unfolding J_def
    apply (subst Hilbert_Choice.f_inv_into_f[where f=G], simp)+
    by (simp add: complex_vector.linear_scale)
    unfolding I_def
    apply (subst Hilbert_Choice.f_inv_into_f[where f=F])
     apply auto
    by (metis register_of_id G_rangeF assms(2))
    unfolding J_def
    apply (subst Hilbert_Choice.f_inv_into_f[where f=G])
     apply auto
    by (metis register_of_id F_rangeG assms(1))
    unfolding I_def
    apply (subst Hilbert_Choice.f_inv_into_f[where f=F], simp)+
    by (simp add: register_mult)
    unfolding J_def
    apply (subst Hilbert_Choice.f_inv_into_f[where f=G], simp)+
    by (simp add: register_mult)
    unfolding I_def
    apply (subst Hilbert_Choice.f_inv_into_f[where f=F], simp)+
    using assms(2) register_adjoint by blast
    unfolding J_def
    apply (subst Hilbert_Choice.f_inv_into_f[where f=G], simp)+
    using assms(1) register_adjoint by blast

  from addI scaleI unitalI multI adjI
    unfolding register_def by (auto intro!: clinearI)
  from addJ scaleJ unitalJ multJ adjJ
    unfolding register_def by (auto intro!: clinearI)

    unfolding I_def J_def o_def
    apply (subst Hilbert_Choice.f_inv_into_f[where f=G], simp)
    by auto
    unfolding I_def J_def o_def
    apply (subst Hilbert_Choice.f_inv_into_f[where f=F], simp)
    by auto

    using iso_register_def by blast

    unfolding I_def o_def
    by (subst Hilbert_Choice.f_inv_into_f[where f=F], auto)

    unfolding equivalent_registers_def by auto
qed

lemma complement_unique:
  by (metis assms compatible_def complement_range same_range_equivalent)

end
