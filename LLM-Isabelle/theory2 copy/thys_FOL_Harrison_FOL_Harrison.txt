theory FOL_Harrison
imports
  Main
begin



type_synonym id = String.literal

datatype tm = Var id | Fn id "tm list"

datatype 'a fm = Truth | Falsity | Atom 'a | Imp "'a fm" "'a fm" | Iff "'a fm" "'a fm" |
    And "'a fm" "'a fm" | Or "'a fm" "'a fm" | Not "'a fm" | Exists id "'a fm" | Forall id "'a fm"

datatype fol = Rl id "tm list"

datatype "thm" = Thm (concl: "fol fm")


abbreviation (input) "fail_thm \<equiv> Thm Truth"

definition fol_equal :: "fol fm \<Rightarrow> fol fm \<Rightarrow> bool"
where
  "fol_equal p q \<equiv> p = q"

definition zip_eq :: "tm list \<Rightarrow> tm list \<Rightarrow> fol fm list"
where
  "zip_eq l l' \<equiv> map (\<lambda>(t, t'). Atom (Rl (STR ''='') [t, t'])) (zip l l')"

primrec occurs_in :: "id \<Rightarrow> tm \<Rightarrow> bool" and occurs_in_list :: "id \<Rightarrow> tm list \<Rightarrow> bool"
where
  "occurs_in i (Var x) = (i = x)" |
  "occurs_in i (Fn _ l) = occurs_in_list i l" |
  "occurs_in_list _ [] = False" |
  "occurs_in_list i (h # t) = (occurs_in i h \<or> occurs_in_list i t)"

primrec free_in :: "id \<Rightarrow> fol fm \<Rightarrow> bool"
where
  "free_in _ Truth = False" |
  "free_in _ Falsity = False" |
  "free_in i (Atom a) = (case a of Rl _ l \<Rightarrow> occurs_in_list i l)" |
  "free_in i (Imp p q) = (free_in i p \<or> free_in i q)" |
  "free_in i (Iff p q) = (free_in i p \<or> free_in i q)" |
  "free_in i (And p q) = (free_in i p \<or> free_in i q)" |
  "free_in i (Or p q) = (free_in i p \<or> free_in i q)" |
  "free_in i (Not p) = free_in i p" |
  "free_in i (Exists x p) = (i \<noteq> x \<and> free_in i p)" |
  "free_in i (Forall x p) = (i \<noteq> x \<and> free_in i p)"

primrec equal_length :: "tm list \<Rightarrow> tm list \<Rightarrow> bool"
where
  "equal_length l [] = (case l of [] \<Rightarrow> True | _ # _ \<Rightarrow> False)" |
  "equal_length l (_ # r') = (case l of [] \<Rightarrow> False | _ # l' \<Rightarrow> equal_length l' r')"

definition modusponens :: "thm \<Rightarrow> thm \<Rightarrow> thm"
where
  "modusponens s s' \<equiv> case concl s of Imp p q \<Rightarrow>
      let p' = concl s' in if fol_equal p p' then Thm q else fail_thm | _ \<Rightarrow> fail_thm"

definition gen :: "id \<Rightarrow> thm \<Rightarrow> thm"
where
  "gen x s \<equiv> Thm (Forall x (concl s))"

definition axiom_addimp :: "fol fm \<Rightarrow> fol fm \<Rightarrow> thm"
where
  "axiom_addimp p q \<equiv> Thm (Imp p (Imp q p))"

definition axiom_distribimp :: "fol fm \<Rightarrow> fol fm \<Rightarrow> fol fm \<Rightarrow> thm"
where
  "axiom_distribimp p q r \<equiv> Thm (Imp (Imp p (Imp q r)) (Imp (Imp p q) (Imp p r )))"

definition axiom_doubleneg :: "fol fm \<Rightarrow> thm"
where
  "axiom_doubleneg p \<equiv> Thm (Imp (Imp (Imp p Falsity) Falsity) p)"

definition axiom_allimp :: "id \<Rightarrow> fol fm \<Rightarrow> fol fm \<Rightarrow> thm"
where
  "axiom_allimp x p q \<equiv> Thm (Imp (Forall x (Imp p q)) (Imp (Forall x p) (Forall x q)))"

definition axiom_impall :: "id \<Rightarrow> fol fm \<Rightarrow> thm"
where
  "axiom_impall x p \<equiv> if \<not> free_in x p then Thm (Imp p (Forall x p)) else fail_thm"

definition axiom_existseq :: "id \<Rightarrow> tm \<Rightarrow> thm"
where
  "axiom_existseq x t \<equiv> if \<not> occurs_in x t
      then Thm (Exists x (Atom (Rl (STR ''='') [Var x, t]))) else fail_thm"

definition axiom_eqrefl :: "tm \<Rightarrow> thm"
where
  "axiom_eqrefl t \<equiv> Thm (Atom (Rl (STR ''='') [t, t]))"

definition axiom_funcong :: "id \<Rightarrow> tm list \<Rightarrow> tm list \<Rightarrow> thm"
where
  "axiom_funcong i l l' \<equiv> if equal_length l l'
      then Thm (foldr Imp (zip_eq l l') (Atom (Rl (STR ''='') [Fn i l, Fn i l']))) else fail_thm"

definition axiom_predcong :: "id \<Rightarrow> tm list \<Rightarrow> tm list \<Rightarrow> thm"
where
  "axiom_predcong i l l' \<equiv> if equal_length l l'
      then Thm (foldr Imp (zip_eq l l') (Imp (Atom (Rl i l)) (Atom (Rl i l')))) else fail_thm"

definition axiom_iffimp1 :: "fol fm \<Rightarrow> fol fm \<Rightarrow> thm"
where
  "axiom_iffimp1 p q \<equiv> Thm (Imp (Iff p q) (Imp p q))"

definition axiom_iffimp2 :: "fol fm \<Rightarrow> fol fm \<Rightarrow> thm"
where
  "axiom_iffimp2 p q \<equiv> Thm (Imp (Iff p q) (Imp q p))"

definition axiom_impiff :: "fol fm \<Rightarrow> fol fm \<Rightarrow> thm"
where
  "axiom_impiff p q \<equiv> Thm (Imp (Imp p q) (Imp (Imp q p) (Iff p q)))"

definition axiom_true :: "thm"
where
  "axiom_true \<equiv> Thm (Iff Truth (Imp Falsity Falsity))"

definition axiom_not :: "fol fm \<Rightarrow> thm"
where
  "axiom_not p \<equiv> Thm (Iff (Not p) (Imp p Falsity))"

definition axiom_and :: "fol fm \<Rightarrow> fol fm \<Rightarrow> thm"
where
  "axiom_and p q \<equiv> Thm (Iff (And p q) (Imp (Imp p (Imp q Falsity)) Falsity))"

definition axiom_or :: "fol fm \<Rightarrow> fol fm \<Rightarrow> thm"
where
  "axiom_or p q \<equiv> Thm (Iff (Or p q) (Not (And (Not p) (Not q))))"

definition axiom_exists :: "id \<Rightarrow> fol fm \<Rightarrow> thm"
where
  "axiom_exists x p \<equiv> Thm (Iff (Exists x p) (Not (Forall x (Not p))))"



export_code
  modusponens gen axiom_addimp axiom_distribimp axiom_doubleneg axiom_allimp axiom_impall
  axiom_existseq axiom_eqrefl axiom_funcong axiom_predcong axiom_iffimp1 axiom_iffimp2
  axiom_impiff axiom_true axiom_not axiom_and axiom_or axiom_exists concl
in SML module_name Proven


export_code
  modusponens gen axiom_addimp axiom_distribimp axiom_doubleneg axiom_allimp axiom_impall
  axiom_existseq axiom_eqrefl axiom_funcong axiom_predcong axiom_iffimp1 axiom_iffimp2
  axiom_impiff axiom_true axiom_not axiom_and axiom_or axiom_exists concl
in SML module_name Proven


export_code
  modusponens gen axiom_addimp axiom_distribimp axiom_doubleneg axiom_allimp axiom_impall
  axiom_existseq axiom_eqrefl axiom_funcong axiom_predcong axiom_iffimp1 axiom_iffimp2
  axiom_impiff axiom_true axiom_not axiom_and axiom_or axiom_exists concl
in SML module_name Proven


definition length2 :: "tm list \<Rightarrow> bool"
where
  "length2 l \<equiv> case l of [_,_] \<Rightarrow> True | _ \<Rightarrow> False"

  semantics_term :: "(id \<Rightarrow> 'a) \<Rightarrow> (id \<Rightarrow> 'a list \<Rightarrow> 'a) \<Rightarrow> tm \<Rightarrow> 'a" and
  semantics_list :: "(id \<Rightarrow> 'a) \<Rightarrow> (id \<Rightarrow> 'a list \<Rightarrow> 'a) \<Rightarrow> tm list \<Rightarrow> 'a list"
where
  "semantics_term e _ (Var x) = e x" |
  "semantics_term e f (Fn i l) = f i (semantics_list e f l)" |
  "semantics_list _ _ [] = []" |
  "semantics_list e f (t # l) = semantics_term e f t # semantics_list e f l"

  semantics :: "(id \<Rightarrow> 'a) \<Rightarrow> (id \<Rightarrow> 'a list \<Rightarrow> 'a) \<Rightarrow> (id \<Rightarrow> 'a list \<Rightarrow> bool) \<Rightarrow> fol fm \<Rightarrow> bool"
where
  "semantics _ _ _ Truth = True" |
  "semantics _ _ _ Falsity = False" |
  "semantics e f g (Atom a) = (case a of Rl i l \<Rightarrow> if i = STR ''='' \<and> length2 l
      then (semantics_term e f (hd l) = semantics_term e f (hd (tl l)))
      else g i (semantics_list e f l))" |
  "semantics e f g (Imp p q) = (semantics e f g p \<longrightarrow> semantics e f g q)" |
  "semantics e f g (Iff p q) = (semantics e f g p \<longleftrightarrow> semantics e f g q)" |
  "semantics e f g (And p q) = (semantics e f g p \<and> semantics e f g q)" |
  "semantics e f g (Or p q) = (semantics e f g p \<or> semantics e f g q)" |
  "semantics e f g (Not p) = (\<not> semantics e f g p)" |
  "semantics e f g (Exists x p) = (\<exists>v. semantics (e(x := v)) f g p)" |
  "semantics e f g (Forall x p) = (\<forall>v. semantics (e(x := v)) f g p)"


inductive OK :: "fol fm \<Rightarrow> bool" ("\<turnstile> _" 0)
where
  modusponens:
                    "\<turnstile> concl s \<Longrightarrow> \<turnstile> concl s' \<Longrightarrow> \<turnstile> concl (modusponens s s')" |
  gen:
                    "\<turnstile> concl s \<Longrightarrow> \<turnstile> concl (gen _ s)" |
  axiom_addimp:
                    "\<turnstile> concl (axiom_addimp _ _)" |
  axiom_distribimp:
                    "\<turnstile> concl (axiom_distribimp _ _ _)" |
  axiom_doubleneg:
                    "\<turnstile> concl (axiom_doubleneg _)" |
  axiom_allimp:
                    "\<turnstile> concl (axiom_allimp _ _ _)" |
  axiom_impall:
                    "\<turnstile> concl (axiom_impall _ _)" |
  axiom_existseq:
                    "\<turnstile> concl (axiom_existseq _ _)" |
  axiom_eqrefl:
                    "\<turnstile> concl (axiom_eqrefl _)" |
  axiom_funcong:
                    "\<turnstile> concl (axiom_funcong _ _ _)" |
  axiom_predcong:
                    "\<turnstile> concl (axiom_predcong _ _ _)" |
  axiom_iffimp1:
                    "\<turnstile> concl (axiom_iffimp1 _ _)" |
  axiom_iffimp2:
                    "\<turnstile> concl (axiom_iffimp2 _ _)" |
  axiom_impiff:
                    "\<turnstile> concl (axiom_impiff _ _)" |
  axiom_true:
                    "\<turnstile> concl axiom_true" |
  axiom_not:
                    "\<turnstile> concl (axiom_not _)" |
  axiom_and:
                    "\<turnstile> concl (axiom_and _ _)" |
  axiom_or:
                    "\<turnstile> concl (axiom_or _ _)" |
  axiom_exists:
                    "\<turnstile> concl (axiom_exists _ _)"


proposition "\<turnstile> Imp p p"
proof -
  have 1: "\<turnstile> concl (Thm (Imp (Imp p (Imp (Imp p p) p)) (Imp (Imp p (Imp p p)) (Imp p p))))"
  using axiom_distribimp
  unfolding axiom_distribimp_def
  by simp

  have 2: "\<turnstile> concl (Thm (Imp p (Imp (Imp p p) p)))"
  using axiom_addimp
  unfolding axiom_addimp_def
  by simp

  have 3: "\<turnstile> concl (Thm (Imp (Imp p (Imp p p)) (Imp p p)))"
  using 1 2 modusponens
  unfolding modusponens_def fol_equal_def
  by fastforce

  have 4: "\<turnstile> concl (Thm (Imp p (Imp p p)))"
  using axiom_addimp
  unfolding axiom_addimp_def
  by simp

  have 5: "\<turnstile> concl (Thm (Imp p p))"
  using 3 4 modusponens
  unfolding modusponens_def fol_equal_def
  by fastforce

  show ?thesis
  using 5
  by simp
qed


lemma map':
  "\<not> occurs_in x t \<Longrightarrow> semantics_term e f t = semantics_term (e(x := v)) f t"
  "\<not> occurs_in_list x l \<Longrightarrow> semantics_list e f l = semantics_list (e(x := v)) f l"
by (induct t and l rule: semantics_term.induct semantics_list.induct) simp_all

lemma map:
  "\<not> free_in x p \<Longrightarrow> semantics e f g p \<longleftrightarrow> semantics (e(x := v)) f g p"
proof (induct p arbitrary: e)
  fix e
  show "\<not> free_in x Truth \<Longrightarrow> semantics e f g Truth \<longleftrightarrow> semantics (e(x := v)) f g Truth"
  by simp
next
  fix e
  show "\<not> free_in x Falsity \<Longrightarrow> semantics e f g Falsity \<longleftrightarrow> semantics (e(x := v)) f g Falsity"
  by simp
next
  fix a e
  show "\<not> free_in x (Atom a) \<Longrightarrow> semantics e f g (Atom a) \<longleftrightarrow> semantics (e(x := v)) f g (Atom a)"
  proof (cases a)
    fix i l
    show "\<not> free_in x (Atom a) \<Longrightarrow> a = Rl i l \<Longrightarrow>
        semantics e f g (Atom a) \<longleftrightarrow> semantics (e(x := v)) f g (Atom a)"
    proof -
      assume assm: "\<not> free_in x (Atom a)" "a = Rl i l"
      then have fresh: "\<not> occurs_in_list x l"
      by simp
      show "semantics e f g (Atom a) \<longleftrightarrow> semantics (e(x := v)) f g (Atom a)"
      proof cases
        assume eq: "i = STR ''='' \<and> length2 l"
        then have "semantics e f g (Atom (Rl i l)) \<longleftrightarrow>
            semantics_term e f (hd l) = semantics_term e f (hd (tl l))"
        by simp
        also have "... \<longleftrightarrow>
            semantics_term (e(x := v)) f (hd l) = semantics_term (e(x := v)) f (hd (tl l))"
        using map'(1) fresh occurs_in_list.simps(2) eq list.case_eq_if list.collapse
        unfolding length2_def
        by metis
        finally show ?thesis
        using eq assm(2)
        by simp
      next
        assume not_eq: "\<not> (i = STR ''='' \<and> length2 l)"
        then have "semantics e f g (Atom (Rl i l)) \<longleftrightarrow> g i (semantics_list e f l)"
        by simp iprover
        also have "... \<longleftrightarrow> g i (semantics_list (e(x := v)) f l)"
        using map'(2) fresh
        by metis
        finally show ?thesis
        using not_eq assm(2)
        by simp iprover
      qed
    qed
  qed
next
  fix p1 p2 e
  assume assm1: "\<not> free_in x p1 \<Longrightarrow> semantics e f g p1 \<longleftrightarrow> semantics (e(x := v)) f g p1" for e
  assume assm2: "\<not> free_in x p2 \<Longrightarrow> semantics e f g p2 \<longleftrightarrow> semantics (e(x := v)) f g p2" for e
  show "\<not> free_in x (Imp p1 p2) \<Longrightarrow>
      semantics e f g (Imp p1 p2) \<longleftrightarrow> semantics (e(x := v)) f g (Imp p1 p2)"
  using assm1 assm2
  by simp
next
  fix p1 p2 e
  assume assm1: "\<not> free_in x p1 \<Longrightarrow> semantics e f g p1 \<longleftrightarrow> semantics (e(x := v)) f g p1" for e
  assume assm2: "\<not> free_in x p2 \<Longrightarrow> semantics e f g p2 \<longleftrightarrow> semantics (e(x := v)) f g p2" for e
  show "\<not> free_in x (Iff p1 p2) \<Longrightarrow>
      semantics e f g (Iff p1 p2) \<longleftrightarrow> semantics (e(x := v)) f g (Iff p1 p2)"
  using assm1 assm2
  by simp
next
  fix p1 p2 e
  assume assm1: "\<not> free_in x p1 \<Longrightarrow> semantics e f g p1 \<longleftrightarrow> semantics (e(x := v)) f g p1" for e
  assume assm2: "\<not> free_in x p2 \<Longrightarrow> semantics e f g p2 \<longleftrightarrow> semantics (e(x := v)) f g p2" for e
  show "\<not> free_in x (And p1 p2) \<Longrightarrow>
      semantics e f g (And p1 p2) \<longleftrightarrow> semantics (e(x := v)) f g (And p1 p2)"
  using assm1 assm2
  by simp
next
  fix p1 p2 e
  assume assm1: "\<not> free_in x p1 \<Longrightarrow> semantics e f g p1 \<longleftrightarrow> semantics (e(x := v)) f g p1" for e
  assume assm2: "\<not> free_in x p2 \<Longrightarrow> semantics e f g p2 \<longleftrightarrow> semantics (e(x := v)) f g p2" for e
  show "\<not> free_in x (Or p1 p2) \<Longrightarrow>
      semantics e f g (Or p1 p2) \<longleftrightarrow> semantics (e(x := v)) f g (Or p1 p2)"
  using assm1 assm2
  by simp
next
  fix p e
  assume "\<not> free_in x p \<Longrightarrow> semantics e f g p \<longleftrightarrow> semantics (e(x := v)) f g p" for e
  then show "\<not> free_in x (Not p) \<Longrightarrow> semantics e f g (Not p) \<longleftrightarrow> semantics (e(x := v)) f g (Not p)"
  by simp
next
  fix x1 p e
  assume "\<not> free_in x p \<Longrightarrow> semantics e f g p \<longleftrightarrow> semantics (e(x := v)) f g p" for e
  then show "\<not> free_in x (Exists x1 p) \<Longrightarrow>
      semantics e f g (Exists x1 p) \<longleftrightarrow> semantics (e(x := v)) f g (Exists x1 p)"
  by simp (metis fun_upd_twist fun_upd_upd)
next
  fix x1 p e
  assume "\<not> free_in x p \<Longrightarrow> semantics e f g p \<longleftrightarrow> semantics (e(x := v)) f g p" for e
  then show "\<not> free_in x (Forall x1 p) \<Longrightarrow>
      semantics e f g (Forall x1 p) \<longleftrightarrow> semantics (e(x := v)) f g (Forall x1 p)"
  by simp (metis fun_upd_twist fun_upd_upd)
qed

lemma length2_equiv:
  "length2 l \<longleftrightarrow> [hd l, hd (tl l)] = l"
proof -
  have "length2 l \<Longrightarrow> [hd l, hd (tl l)] = l"
  unfolding length2_def
  using list.case_eq_if list.exhaust_sel
  by metis
  then show ?thesis
  unfolding length2_def
  using list.case list.case_eq_if
  by metis
qed

lemma equal_length_sym:
  "equal_length l l' \<Longrightarrow> equal_length l' l"
proof (induct l' arbitrary: l)
  fix l
  assume "equal_length l []"
  then show "equal_length [] l"
  using equal_length.simps list.case_eq_if
  by metis
next
  fix l l' a
  assume sym: "equal_length l l' \<Longrightarrow> equal_length l' l" for l
  assume "equal_length l (a # l')"
  then show "equal_length (a # l') l"
  using equal_length.simps list.case_eq_if list.collapse list.inject sym
  by metis
qed

lemma equal_length2:
  "equal_length l l' \<Longrightarrow> length2 l \<longleftrightarrow> length2 l'"
proof -
  assume assm: "equal_length l l'"
  have "equal_length l [t, t'] \<Longrightarrow> length2 l" for t t'
  unfolding length2_def
  using equal_length.simps list.case_eq_if
  by metis
  moreover have "equal_length [t, t'] l' \<Longrightarrow> length2 l'" for t t'
  unfolding length2_def
  using equal_length.simps list.case_eq_if equal_length_sym
  by metis
  ultimately show ?thesis
  using assm length2_equiv
  by metis
qed

lemma imp_chain_equiv:
  "semantics e f g (foldr Imp l p) \<longleftrightarrow> (\<forall>q \<in> set l. semantics e f g q) \<longrightarrow> semantics e f g p"
using imp_conjL
by (induct l) simp_all

lemma imp_chain_zip_eq:
  "equal_length l l' \<Longrightarrow>
      semantics e f g (foldr Imp (zip_eq l l') p) \<longleftrightarrow>
      semantics_list e f l = semantics_list e f l' \<longrightarrow> semantics e f g p"
proof -
  assume "equal_length l l'"
  then have "(\<forall>q \<in> set (zip_eq l l'). semantics e f g q) \<longleftrightarrow>
      semantics_list e f l = semantics_list e f l'"
  unfolding zip_eq_def
  using length2_def
  by (induct l l' rule: list_induct2') simp_all
  then show ?thesis
  using imp_chain_equiv
  by iprover
qed

lemma funcong:
  "equal_length l l' \<Longrightarrow>
      semantics e f g (foldr Imp (zip_eq l l') (Atom (Rl (STR ''='') [Fn i l, Fn i l'])))"
proof -
  assume assm: "equal_length l l'"
  show ?thesis
  proof cases
    assume "semantics_list e f l = semantics_list e f l'"
    then have "semantics e f g (Atom (Rl (STR ''='') [Fn i l, Fn i l']))"
    using length2_def
    by simp
    then show ?thesis
    using imp_chain_equiv
    by iprover
  next
    assume "semantics_list e f l \<noteq> semantics_list e f l'"
    then show ?thesis
    using assm imp_chain_zip_eq
    by iprover
  qed
qed

lemma predcong:
  "equal_length l l' \<Longrightarrow>
      semantics e f g (foldr Imp (zip_eq l l') (Imp (Atom (Rl i l)) (Atom (Rl i l'))))"
proof -
  assume assm: "equal_length l l'"
  show ?thesis
  proof cases
    assume eq: "i = STR ''='' \<and> length2 l \<and> length2 l'"
    show ?thesis
    proof cases
      assume "semantics_list e f l = semantics_list e f l'"
      then have "semantics_list e f [hd l, hd (tl l)] = semantics_list e f [hd l', hd (tl l')]"
      using eq length2_equiv
      by simp
      then have "semantics e f g (Imp (Atom (Rl (STR ''='') l)) (Atom (Rl (STR ''='') l')))"
      using eq
      by simp
      then show ?thesis
      using eq imp_chain_equiv
      by iprover
    next
      assume "semantics_list e f l \<noteq> semantics_list e f l'"
      then show ?thesis
      using assm imp_chain_zip_eq
      by iprover
    qed
  next
    assume not_eq: "\<not> (i = STR ''='' \<and> length2 l \<and> length2 l')"
    show ?thesis
    proof cases
      assume "semantics_list e f l = semantics_list e f l'"
      then have "semantics e f g (Imp (Atom (Rl i l)) (Atom (Rl i l')))"
      using assm not_eq equal_length2
      by simp iprover
      then show ?thesis
      using imp_chain_equiv
      by iprover
    next
      assume "semantics_list e f l \<noteq> semantics_list e f l'"
      then show ?thesis
      using assm imp_chain_zip_eq
      by iprover
    qed
  qed
qed

theorem soundness:
  "\<turnstile> p \<Longrightarrow> semantics e f g p"
proof (induct arbitrary: e rule: OK.induct)
  fix e s s'
  assume "semantics e f g (concl s)" "semantics e f g (concl s')" for e
  then show "semantics e f g (concl (modusponens s s'))"
  unfolding modusponens_def
  proof (cases s)
    fix r
    assume "semantics e f g (concl s)" "semantics e f g (concl s')" "s = Thm r" for e
    then show "semantics e f g (concl (case (concl s) of Imp p q \<Rightarrow>
        let p' = concl s' in if fol_equal p p' then Thm q else fail_thm | _ \<Rightarrow> fail_thm))"
    unfolding fol_equal_def
    by (cases r) simp_all
  qed
next
  fix e x s
  assume "semantics e f g (concl s)" for e
  then show "semantics e f g (concl (gen x s))"
  unfolding gen_def
  by simp
next
  fix e p q
  show "semantics e f g (concl (axiom_addimp p q))"
  unfolding axiom_addimp_def
  by simp
next
  fix e p q r
  show "semantics e f g (concl (axiom_distribimp p q r))"
  unfolding axiom_distribimp_def
  by simp
next
  fix e g p
  show "semantics e f g (concl (axiom_doubleneg p))"
  unfolding axiom_doubleneg_def
  by simp
next
  fix e x p q
  show "semantics e f g (concl (axiom_allimp x p q))"
  unfolding axiom_allimp_def
  by simp
next
  fix e x p
  show "semantics e f g (concl (axiom_impall x p))"
  unfolding axiom_impall_def
  using map
  by simp iprover
next
  fix e x t
  show "semantics e f g (concl (axiom_existseq x t))"
  unfolding axiom_existseq_def
  using map'(1) length2_def
  by simp iprover
next
  fix e t
  show "semantics e f g (concl (axiom_eqrefl t))"
  unfolding axiom_eqrefl_def
  using length2_def
  by simp
next
  fix e i l l'
  show "semantics e f g (concl (axiom_funcong i l l'))"
  unfolding axiom_funcong_def
  using funcong
  by simp standard
next
  fix e i l l'
  show "semantics e f g (concl (axiom_predcong i l l'))"
  unfolding axiom_predcong_def
  using predcong
  by simp standard
next
  fix e p q
  show "semantics e f g (concl (axiom_iffimp1 p q))"
  unfolding axiom_iffimp1_def
  by simp
next
  fix e p q
  show "semantics e f g (concl (axiom_iffimp2 p q))"
  unfolding axiom_iffimp2_def
  by simp
next
  fix e p q
  show "semantics e f g (concl (axiom_impiff p q))"
  unfolding axiom_impiff_def
  by (simp add: iffI)
next
  fix e
  show "semantics e f g (concl (axiom_true))"
  unfolding axiom_true_def
  by simp
next
  fix e p
  show "semantics e f g (concl (axiom_not p))"
  unfolding axiom_not_def
  by simp
next
  fix e p q
  show "semantics e f g (concl (axiom_and p q))"
  unfolding axiom_and_def
  by simp
next
  fix e p q
  show "semantics e f g (concl (axiom_or p q))"
  unfolding axiom_or_def
  by simp
next
  fix e x p
  show "semantics e f g (concl (axiom_exists x p))"
  unfolding axiom_exists_def
  by simp
qed

corollary "\<not> (\<turnstile> Falsity)"
using soundness
by fastforce


code_reflect
  Proven
datatypes
  fm = Falsity | Truth | Atom | Imp | Iff | And | Or | Not | Exists | Forall
and
  tm = Var | Fn
and
  fol = Rl
functions
  modusponens gen axiom_addimp axiom_distribimp axiom_doubleneg axiom_allimp axiom_impall
  axiom_existseq axiom_eqrefl axiom_funcong axiom_predcong axiom_iffimp1 axiom_iffimp2
  axiom_impiff axiom_true axiom_not axiom_and axiom_or axiom_exists concl





























































































end
