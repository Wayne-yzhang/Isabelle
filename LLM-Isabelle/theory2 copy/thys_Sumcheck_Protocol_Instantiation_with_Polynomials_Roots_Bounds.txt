theory Roots_Bounds
  imports 
    "Polynomials.MPoly_Type_Univariate"
    Univariate_Roots_Bound
begin




lemma mpoly_to_poly_zero_iff:
  fixes p::"'a::comm_monoid_add mpoly"
  shows "mpoly_to_poly v p = 0 \<longleftrightarrow> p = 0"
  by (metis assms mpoly_to_poly_inverse poly_to_mpoly0 poly_to_mpoly_inverse)

lemma keys_monom_subset_vars:
  fixes p::"'a::zero mpoly"
  shows "keys m \<subseteq> vars p" 
  using assms 
  by (auto simp add: vars_def)

lemma sum_lookup_keys_eq_lookup:
  fixes p::"'a::zero mpoly"
  shows "sum (lookup m) (keys m) = lookup m v"
  using assms
  by (auto simp add: subset_singleton_iff dest!: keys_monom_subset_vars)



lemma poly_degree_eq_mpoly_degree:
  fixes p::"'a::comm_monoid_add mpoly"
  shows "degree (mpoly_to_poly v p) = MPoly_Type.degree p v"
  using assms
proof - 
  have *: "\<And>n. MPoly_Type.coeff p (Poly_Mapping.single v n) \<noteq> 0 
               \<longleftrightarrow> (\<exists>m\<in>keys (mapping_of p). n = lookup m v)"  
    by (metis (no_types, opaque_lifting) Diff_eq_empty_iff Diff_insert add_0 keys_eq_empty 
              keys_monom_subset_vars lookup_single_eq remove_key_keys remove_key_sum 
              singleton_insert_inj_eq' coeff_keys[symmetric] assms)

  have "degree (mpoly_to_poly v p) 
      = Max (insert 0 {n. MPoly_Type.coeff p (Poly_Mapping.single v n) \<noteq> 0})" 
    by (simp add: poly_degree_eq_Max_non_zero_coeffs) 
  also have "\<dots> = MPoly_Type.degree p v"
    by (simp add: degree.rep_eq image_def *)
