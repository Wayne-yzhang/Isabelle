theory Graph
imports Main
begin


locale node = 
  fixes nil    :: "'node"
  fixes root   :: "'node"

locale graph = node +
  fixes "next" :: "('node \<times> 'node) set"
  assumes next_not_nil_left: "(!! x . (nil, x) \<notin> next)" 
  assumes next_not_nil_right: "(!! x . (x, nil) \<notin> next)"
begin

  definition
    "head S \<equiv> (if S = [] then nil else (hd S))"
    
  definition
    "tail (S::'a list) \<equiv> (if S = [] then [] else (tl S))"

  lemma [simp]: "((nil, x) \<in> next) = False"
    by (simp add: next_not_nil_left)
  
  lemma [simp]: "((x, nil) \<in> next) = False"
    by (simp add: next_not_nil_right)


  theorem head_not_nil [simp]:
    "(head S \<noteq> nil) = (head S = hd S \<and> tail S = tl S \<and> hd S \<noteq> nil \<and> S \<noteq> [])"
    by (simp add: head_def tail_def)
  
  theorem nonempty_head [simp]:
    "head (x # S) = x"
    by (simp add: head_def)

  theorem nonempty_tail [simp]:
    "tail (x # S) = S"
    by (simp add: tail_def)

  definition (in graph)
    "reach x \<equiv> {y . (x, y) \<in> next\<^sup>* \<and> y \<noteq> nil}"

  theorem (in graph) reach_nil [simp]: "reach nil = {}"
    apply (simp add: reach_def, safe)
    apply (drule rtrancl_induct)
    by auto

  theorem (in graph)  reach_next: "b \<in> reach a \<Longrightarrow> (b, c) \<in> next \<Longrightarrow> c \<in> reach a"
    apply (simp add: reach_def)
    by auto

  definition (in graph) 
    "path S mrk \<equiv> {x . (\<exists> s . s \<in> S \<and> (s, x) \<in> next O (next \<inter> ((-mrk)\<times>(-mrk)))\<^sup>* )}"
  end
  
end
