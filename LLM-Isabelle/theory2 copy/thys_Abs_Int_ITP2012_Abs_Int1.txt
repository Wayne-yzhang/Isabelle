theory Abs_Int1
imports Abs_State
begin

functions.\<close>
text\<open>The for-clause (here and elsewhere) only serves the purpose of fixing
the name of the type parameter @{typ 'av} which would otherwise be renamed to
@{typ 'a}.\<close>
text\<open>Soundness:\<close>
text\<open>The soundness proofs are textually identical to the ones for the step
function operating on states as functions.\<close>
    by (metis (no_types) \<open>c1 \<le> \<gamma>\<^sub>c c1'\<close> join_ge1 le_post mono_gamma_o order_trans post_map_acom)
    by (metis (no_types) \<open>c2 \<le> \<gamma>\<^sub>c c2'\<close> join_ge2 le_post mono_gamma_o order_trans post_map_acom)
  ultimately show ?case using \<open>S \<subseteq> \<gamma>\<^sub>o S'\<close> by (simp add: If.IH subset_iff)
    using \<open>S \<subseteq> \<gamma>\<^sub>o S'\<close> le_post[OF \<open>c1 \<le> \<gamma>\<^sub>c c1'\<close>, simplified]
text\<open>ACC for option type:\<close>
    moreover have "None \<in> Qo" using \<open>?Q = {}\<close> \<open>xo : Qo\<close>
text\<open>ACC for abstract states, via measure functions.\<close>
    from \<open>S \<sqsubseteq> S'\<close> have "\<forall>y\<in>?Y'\<inter>?X. ?f y \<sqsubseteq> ?g y"
    from \<open>~ S' \<sqsubseteq> S\<close> obtain u where u: "u : ?X" "~ lookup S' u \<sqsubseteq> ?f u"
    have "?Y'-?X = {}" using \<open>S \<sqsubseteq> S'\<close> by(fastforce simp: le_st_def lookup_def)
      apply (metis \<open>S \<sqsubseteq> S'\<close> le_st_def lookup_def preord_class.le_trans)
      using \<open>?Y'-?X = {}\<close> by (metis Un_empty_left)
      hence "m(?g u) < m(?f u)" using assms(1) \<open>S \<sqsubseteq> S'\<close> u
        using \<open>u:?X\<close> \<open>u:?Y'\<close> \<open>m(?g u) < m(?f u)\<close>
        by(simp add: sum_mono2[OF _ \<open>?Y'\<inter>?X <= ?X'\<close>])
      with \<open>?Y'\<inter>?X <= ?X'\<close> have "?Y'\<inter>?X - {u} <= ?X' - {u}" by blast
        have "?Y'\<inter>?X = ?Y'\<inter>?X - {u}" using \<open>u \<notin> ?Y'\<close> by auto
        by(simp add: sum_mono2[OF _ \<open>?Y'\<inter>?X-{u} <= ?X'-{u}\<close>])
        using \<open>u:?X'\<close> by(subst sum.union_disjoint[symmetric]) auto
        using \<open>u : ?X'\<close> by(simp add:insert_absorb)
text\<open>ACC for acom. First the ordering on acom is related to an ordering on
lists of annotations.\<close>
  have refl: "!!x. (x,x) : r" using \<open>refl r\<close> unfolding refl_on_def by blast
    using \<open>trans r\<close> unfolding trans_def by blast
        case Nil with \<open>xs : Q\<close> have "?P Q []" by auto
        have "x : ?Q1" using \<open>xs : Q\<close> Cons by auto
        have "ms1 : ?Q2" using \<open>m1#ms1 : Q\<close> by(blast intro: refl)
        from IH[OF \<open>size ms1 < size xs\<close> this]
          apply (metis \<open>length ms1 = length ys\<close> listrel_eq_len trans)
          by (metis \<open>length ms1 = length ys\<close> listrel_eq_len trans)
text\<open>Termination of the fixed-point finders, assuming monotone functions:\<close>
