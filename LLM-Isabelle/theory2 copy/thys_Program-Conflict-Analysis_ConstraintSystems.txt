theory ConstraintSystems
imports Main AcquisitionHistory Normalization
begin



subsection "Same-level paths"



inductive_set
  S_cs :: "('n,'p,'ba,'m,'more) flowgraph_rec_scheme \<Rightarrow> nat \<Rightarrow> 
             ('n \<times> 'm set \<times> 'p multiset) set"
  for fg k
  where
    S_init: "(entry fg p,{},{#})\<in>S_cs fg k" 
  | S_base: "\<lbrakk>(u,Base a,v)\<in>edges fg; (u,M,P)\<in>S_cs fg k\<rbrakk> \<Longrightarrow> (v,M,P)\<in>S_cs fg k" 
  | S_call: "\<lbrakk>(u,Call q,v)\<in>edges fg; (u,M,P)\<in>S_cs fg k; 
              (return fg q,Ms,Ps)\<in>S_cs fg k; P'\<subseteq>#P+Ps; size P' \<le> k \<rbrakk>
             \<Longrightarrow> (v,mon fg q \<union> M \<union> Ms,P')\<in>S_cs fg k" 
  | S_spawn: "\<lbrakk>(u,Spawn q,v)\<in>edges fg; (u,M,P)\<in>S_cs fg k; 
               P'\<subseteq>#{#q#}+P; size P' \<le> k\<rbrakk>
             \<Longrightarrow> (v,M,P')\<in>S_cs fg k" 



lemma (in flowgraph) S_sound: "!!p v c' P. 
  \<lbrakk>(([entry fg p],{#}),w,([v],c'))\<in>trcl (trss fg); 
    size P\<le>k; (\<lambda>p. [entry fg p]) `# P \<subseteq># c' \<rbrakk>
  \<Longrightarrow> (v,mon_w fg w,P)\<in>S_cs fg k"
proof (induct w rule: length_compl_rev_induct) 
  case Nil thus ?case by (auto intro: S_init)
next
  case (snoc w e) then obtain sh ch where SPLIT: "(([entry fg p],{#}),w,(sh,ch))\<in>trcl (trss fg)" "((sh,ch),e,([v],c'))\<in>trss fg" by (fast dest: trcl_rev_uncons)
  from SPLIT(2) show ?case proof (cases rule: trss.cases)
    case trss_base then obtain u a where CASE: "e=LBase a" "sh=[u]" "ch=c'" "(u,Base a,v)\<in>edges fg" by auto 
    with snoc.hyps[of w p u c', OF _ _ snoc.prems(2,3)] SPLIT(1) have "(u,mon_w fg w,P)\<in>S_cs fg k" by blast
    moreover from CASE(1) have "mon_e fg e = {}" by simp
    ultimately show ?thesis using S_base[OF CASE(4)] by (auto simp add: mon_w_unconc)
  next
    case trss_ret then obtain q where CASE: "e=LRet" "sh=return fg q#[v]" "ch=c'" by auto
    with SPLIT(1) have "(([entry fg p], {#}), w, [return fg q,v], c') \<in> trcl (trss fg)" by simp
    from trss_find_call'[OF this] obtain ut ct w1 w2 where FC:
      "w=w1@LCall q#w2" 
      "(([entry fg p],{#}),w1,([ut],ct))\<in>trcl (trss fg)" 
      "(([ut],ct),LCall q,([entry fg q,v],ct))\<in>trss fg"
      "(ut,Call q,v)\<in>edges fg" 
      "(([entry fg q],ct),w2,([return fg q],c'))\<in>trcl (trss fg)" .
    from trss_drop_all_context[OF FC(5)] obtain csp' where SLP: "c'=ct+csp'" "(([entry fg q],{#}),w2,([return fg q],csp'))\<in>trcl (trss fg)" by (auto simp add: union_ac)
    from FC(1) have LEN: "length w1 \<le> length w" "length w2 \<le> length w" by auto
    from mset_map_split_orig_le SLP(1) snoc.prems(3) obtain P1 P2 where PSPLIT: "P=P1+P2" "(\<lambda>p. [entry fg p]) `# P1 \<subseteq># ct" "(\<lambda>p. [entry fg p]) `# P2 \<subseteq># csp'" by blast
    with snoc.prems(2) have PSIZE: "size P1 \<le> k" "size P2 \<le> k" by auto
    from snoc.hyps[OF LEN(1) FC(2) PSIZE(1) PSPLIT(2)] snoc.hyps[OF LEN(2) SLP(2) PSIZE(2) PSPLIT(3)] have IHAPP: "(ut, mon_w fg w1, P1) \<in> S_cs fg k" "(return fg q, mon_w fg w2, P2) \<in> S_cs fg k" .
    from S_call[OF FC(4) IHAPP subset_mset.eq_refl[OF PSPLIT(1)] snoc.prems(2)] FC(1) CASE(1) show "(v, mon_w fg (w@[e]), P) \<in> S_cs fg k" by (auto simp add: mon_w_unconc Un_ac)
  next
    case trss_spawn then obtain u q where CASE: "e=LSpawn q" "sh=[u]" "c'={#[entry fg q]#}+ch" "(u,Spawn q,v)\<in>edges fg" by auto
    from mset_map_split_orig_le CASE(3) snoc.prems(3) obtain P1 P2 where PSPLIT: "P=P1+P2" "(\<lambda>p. [entry fg p]) `# P1 \<subseteq># {#[entry fg q]#}" "(\<lambda>p. [entry fg p]) `# P2 \<subseteq># ch" by blast
    with snoc.prems(2) have PSIZE: "size P2 \<le> k" by simp
    from snoc.hyps[OF _ _ PSIZE PSPLIT(3)] SPLIT(1) CASE(2) have IHAPP: "(u,mon_w fg w,P2)\<in>S_cs fg k" by blast
    have PCOND: "P \<subseteq># {#q#}+P2" proof -
      from PSPLIT(2) have "P1\<subseteq>#{#q#}" by (auto elim!: mset_le_single_cases mset_map_single_rightE)
      with PSPLIT(1) show ?thesis by simp
    qed
    from S_spawn[OF CASE(4) IHAPP PCOND snoc.prems(2)] CASE(1) show "(v, mon_w fg (w @ [e]), P) \<in> S_cs fg k" by (auto simp add: mon_w_unconc)
  qed
qed
    

lemma (in flowgraph) S_precise: "(v,M,P)\<in>S_cs fg k 
  \<Longrightarrow> \<exists>p c' w. 
        (([entry fg p],{#}),w,([v],c'))\<in>trcl (trss fg) \<and> 
        size P\<le>k \<and> 
        (\<lambda>p. [entry fg p]) `# P \<subseteq># c' \<and>
        M=mon_w fg w"
proof (induct rule: S_cs.induct)
  case (S_init p) have "(([entry fg p],{#}),[],([entry fg p],{#}))\<in>trcl (trss fg)" by simp_all
  thus ?case by fastforce
next
  case (S_base u a v M P) then obtain p c' w where IHAPP: "(([entry fg p], {#}), w, [u], c') \<in> trcl (trss fg)" "size P \<le> k" "(\<lambda>p. [entry fg p]) `# P \<subseteq># c'" "M = mon_w fg w" by blast
  note IHAPP(1)
  also from S_base have "(([u],c'),LBase a,([v],c'))\<in>trss fg" by (auto intro: trss_base)
  finally have "(([entry fg p], {#}), w @ [LBase a], [v], c') \<in> trcl (trss fg)" .
  moreover from IHAPP(4) have "M=mon_w fg (w @ [LBase a])" by (simp add: mon_w_unconc)
  ultimately show ?case using IHAPP(2,3,4) by blast
next
  case (S_call u q v M P Ms Ps P') then obtain p csp1 w1 where REACHING_PATH: "(([entry fg p], {#}), w1, [u], csp1) \<in> trcl (trss fg)" "size P \<le> k" "(\<lambda>p. [entry fg p]) `# P \<subseteq># csp1" "M = mon_w fg w1" by blast
  from S_call obtain csp2 w2 where SL_PATH: "(([entry fg q], {#}), w2, [return fg q], csp2) \<in> trcl (trss fg)" "size Ps \<le> k" "(\<lambda>p. [entry fg p]) `# Ps \<subseteq># csp2" "Ms = mon_w fg w2"
    by (blast dest: trss_er_path_proc_const)
  from trss_c_no_mon[OF REACHING_PATH(1)] trss_c_no_mon[OF SL_PATH(1)] have NOMON: "mon_c fg csp1 = {}" "mon_c fg csp2 = {}" by auto
  have "(([entry fg p], {#}), w1@LCall q#w2@[LRet],([v],csp1+csp2))\<in>trcl (trss fg)" proof -
    note REACHING_PATH(1)
    also from trss_call[OF S_call(1)] NOMON have "(([u],csp1),LCall q,([entry fg q,v],csp1))\<in>trss fg" by (auto)
    also from trss_add_context[OF trss_stack_comp[OF SL_PATH(1)]] NOMON have "(([entry fg q,v],csp1),w2,([return fg q,v],csp1+csp2))\<in>trcl (trss fg)" by (simp add: union_ac)
    also have "(([return fg q,v],csp1+csp2),LRet,([v],csp1+csp2))\<in>trss fg" by (rule trss_ret)
    finally show ?thesis by simp
  qed
  moreover from REACHING_PATH(4) SL_PATH(4) have "mon fg q \<union> M \<union> Ms = mon_w fg (w1@LCall q#w2@[LRet])" by (auto simp add: mon_w_unconc)
  moreover have "(\<lambda>p. [entry fg p]) `# (P') \<subseteq># csp1+csp2" (is "?f `# P' \<subseteq># _") proof -
    from image_mset_subseteq_mono[OF S_call(6)] have "?f `# P' \<subseteq># ?f `# P + ?f `# Ps" by auto
    also from mset_subset_eq_mono_add[OF REACHING_PATH(3) SL_PATH(3)] have "\<dots> \<subseteq># csp1+csp2" .
    finally show ?thesis .
  qed
  moreover note S_call(7)
  ultimately show ?case by blast
next
  case (S_spawn u q v M P P') then obtain p c' w where IHAPP: "(([entry fg p], {#}), w, [u], c') \<in> trcl (trss fg)" "size P \<le> k" "(\<lambda>p. [entry fg p]) `# P \<subseteq># c'" "M = mon_w fg w" by blast
  note IHAPP(1)
  also from S_spawn(1) have "(([u],c'),LSpawn q,([v],add_mset [entry fg q] c'))\<in>trss fg" by (rule trss_spawn)
  finally have "(([entry fg p], {#}), w @ [LSpawn q], [v], add_mset [entry fg q] c') \<in> trcl (trss fg)" .
  moreover from IHAPP(4) have "M=mon_w fg (w @ [LSpawn q])" by (simp add: mon_w_unconc)
  moreover have "(\<lambda>p. [entry fg p]) `# P' \<subseteq># {#[entry fg q]#} + c'" (is "?f `# _ \<subseteq># _") proof -
    from image_mset_subseteq_mono[OF S_spawn(4)] have "?f `# P' \<subseteq># {#[entry fg q]#} + ?f `# P" by auto
    also from mset_subset_eq_mono_add[OF _ IHAPP(3)] have "\<dots> \<subseteq># {#[entry fg q]#} + c'" by (auto intro: IHAPP(3))
    finally show ?thesis .
  qed
  moreover note S_spawn(5)
  ultimately show ?case by auto
qed

theorem (in flowgraph) S_sound_precise: 
  "(v,M,P)\<in>S_cs fg k \<longleftrightarrow> 
  (\<exists>p c' w. (([entry fg p],{#}),w,([v],c'))\<in>trcl (trss fg) \<and> 
    size P\<le>k \<and> (\<lambda>p. [entry fg p]) `# P \<subseteq># c' \<and> M=mon_w fg w)"
  using S_sound S_precise by blast


lemma (in flowgraph) S_sound_ntrp: 
  assumes A: "(([u],{#}),eel,(sh,ch))\<in>ntrp fg" and 
  CASE: "!!p u' v w. \<lbrakk>
    eel=LOC (LCall p#w); 
    (u,Call p,u')\<in>edges fg; 
    sh=[v,u']; 
    proc_of fg v = p; 
    mon_c fg ch = {}; 
    !!s. s \<in># ch \<Longrightarrow> \<exists>p u v. s=[entry fg p] \<and> 
                     (u,Spawn p,v)\<in>edges fg \<and> 
                     initialproc fg p; 
    !!P. (\<lambda>p. [entry fg p]) `# P \<subseteq># ch \<Longrightarrow>
                    (v,mon_w fg w,P)\<in>S_cs fg (size P)
  \<rbrakk> \<Longrightarrow> Q"
  shows Q
proof -
  from A obtain ee where EE: "eel=LOC ee" "(([u],{#}),ee,(sh,ch))\<in>ntrs fg" by (auto elim: gtrp.cases)
  have CHFMT: "!!s. s \<in># ch \<Longrightarrow> \<exists>p u v. s=[entry fg p] \<and> (u,Spawn p,v)\<in>edges fg \<and> initialproc fg p" by (auto intro: ntrs_c_cases_s[OF EE(2)])
  with c_of_initial_no_mon have CHNOMON: "mon_c fg ch = {}" by blast
  from EE(2) obtain p u' v w where FIRSTSPLIT: "ee=LCall p#w" "(([u],{#}),LCall p,([entry fg p,u'],{#}))\<in>trss fg" "sh=[v,u']" "(([entry fg p],{#}),w,([v],ch))\<in>trcl (trss fg)" by (auto elim!: ntrs.cases[simplified])
  from FIRSTSPLIT have EDGE: "(u,Call p,u')\<in>edges fg" by (auto elim!: trss.cases)
  from trss_bot_proc_const[where s="[]" and s'="[]", simplified, OF FIRSTSPLIT(4)] have PROC_OF_V: "proc_of fg v = p" by simp
  have "!!P. (\<lambda>p. [entry fg p]) `# P \<subseteq># ch \<Longrightarrow> (v,mon_w fg w,P)\<in>S_cs fg (size P)" proof -
    fix P assume "(\<lambda>p. [entry fg p]) `# P \<subseteq># ch"
    from S_sound[OF FIRSTSPLIT(4) _ this, of "size P"] show "?thesis P" by simp
  qed
  with EE(1) FIRSTSPLIT(1,3) EDGE PROC_OF_V CHNOMON CHFMT show Q by (rule_tac CASE) auto 
qed

lemma (in flowgraph) S_precise_ntrp: 
  assumes ENTRY: "(v,M,P)\<in>S_cs fg k" and 
              P: "proc_of fg v = p" and 
           EDGE: "(u,Call p,u')\<in>edges fg"
  shows "\<exists>w ch. 
    (([u],{#}),LOC (LCall p#w),([v,u'],ch))\<in>ntrp fg \<and> 
    size P \<le> k \<and> 
    M=mon_w fg w \<and> 
    mon_n fg v = mon fg p \<and> 
    (\<lambda>p. [entry fg p]) `# P \<subseteq># ch \<and>
    mon_c fg ch={}"
proof -
  from P S_precise[OF ENTRY, simplified] trss_bot_proc_const[where s="[]" and s'="[]", simplified] obtain wsl ch where 
    SLPATH: "(([entry fg p], {#}), wsl, [v], ch) \<in> trcl (trss fg)" "size P \<le> k" "(\<lambda>p. [entry fg p]) `# P \<subseteq># ch" "M = mon_w fg wsl" by fastforce
  from mon_n_same_proc[OF trss_bot_proc_const[where s="[]" and s'="[]", simplified, OF SLPATH(1)]] have MON_V: "mon_n fg v = mon fg p" by (simp)
  from trss_c_cases[OF SLPATH(1), simplified] have CHFMT: "\<And>s. s \<in># ch \<Longrightarrow> \<exists>p. s = [entry fg p] \<and> (\<exists>u v. (u, Spawn p, v) \<in> edges fg) \<and> initialproc fg p" by blast
  with c_of_initial_no_mon have CHNOMON: "mon_c fg ch = {}" by blast
  have FS: "(([u],{#}),LCall p#wsl,([v,u'],ch))\<in>ntrs fg" proof (rule ntrs_step[where r="[]", simplified])
    from EDGE show "(([u], {#}), LCall p, [entry fg p, u'], {#}) \<in> trss fg" by (auto intro: trss_call)
  qed (rule SLPATH(1))
  hence FSP: "(([u],{#}),LOC (LCall p#wsl),([v,u'],ch))\<in>ntrp fg" by (blast intro: gtrp_loc) 
  from FSP SLPATH(2,3,4) CHNOMON MON_V show ?thesis by blast 
qed


subsection "Single reaching path"
  

subsubsection "Constraint system"

inductive_set
  RU_cs :: "('n,'p,'ba,'m,'more) flowgraph_rec_scheme \<Rightarrow> 'n set \<Rightarrow> 
              ('n \<times> 'm set \<times> 'm set \<times> ('m \<Rightarrow> 'm set)) set"
  for fg U
  where
    RU_init: "u\<in>U \<Longrightarrow> (u,{},{},\<lambda>x.{})\<in>RU_cs fg U"
  | RU_call: "\<lbrakk> (u,Call p,u')\<in>edges fg; proc_of fg v = p; (v,M,P)\<in>S_cs fg 0; 
                (v,Ml,Me,h)\<in>RU_cs fg U; mon_n fg u \<inter> Me = {} \<rbrakk> 
    \<Longrightarrow> ( u, mon fg p \<union> M \<union> Ml, Me, ah_update h (mon fg p,M) (Ml\<union>Me)) 
        \<in> RU_cs fg U"
  | RU_spawn: "\<lbrakk> (u,Call p,u')\<in>edges fg; proc_of fg v = p; (v,M,P)\<in>S_cs fg 1; 
                 q \<in># P; (entry fg q,Ml,Me,h)\<in>RU_cs fg U; 
                 (mon_n fg u \<union> mon fg p) \<inter> (Ml \<union> Me)={} \<rbrakk> 
    \<Longrightarrow> (u,mon fg p \<union> M, Ml \<union> Me, ah_update h (mon fg p,M) (Ml\<union>Me))
        \<in> RU_cs fg U"



subsubsection "Soundness and precision"

lemma (in flowgraph) ntr_reverse_split_atU: 
  assumes V: "valid fg c" and 
          A: "atU U c'" and 
          B: "(c,w,c')\<in>trcl (ntr fg)" 
  shows "\<exists>s w' c1'. 
           s \<in># c \<and> w'\<preceq>w \<and> c1' \<subseteq># c' \<and>
           atU U c1' \<and> ({#s#},w',c1')\<in>trcl (ntr fg)" 
proof -
  obtain ui r ce' where C'FMT: "c'={#ui#r#}+ce'" "ui\<in>U" by (rule atU_fmt[OF A], simp only: mset_contains_eq) (blast dest: sym)
  with ntr_reverse_split[OF _ V] B obtain s ce w1 w2 ce1' ce2' where RSPLIT: "c={#s#}+ce" "ce'=ce1'+ce2'" "w\<in>w1\<otimes>\<^bsub>\<alpha>n fg\<^esub>w2" "({#s#}, w1, {#ui#r#} + ce1') \<in> trcl (ntr fg)" by blast
  with C'FMT have "s \<in># c" "w1\<preceq>w" "{#ui#r#}+ce1' \<subseteq># c'" "atU U ({#ui#r#}+ce1')" by (auto dest: cil_ileq)
  with RSPLIT(4) show ?thesis by blast
qed

lemma (in flowgraph) RU_sound: 
  "!!u s' c'. \<lbrakk>(([u],{#}),w,(s',c'))\<in>trcl (ntrp fg); atU U (add_mset s' c')\<rbrakk> 
  \<Longrightarrow> \<exists>Ml Me h. 
    (u,Ml,Me,h)\<in>RU_cs fg U \<and> 
    Ml \<subseteq> mon_loc fg w \<and> 
    Me \<subseteq> mon_env fg w \<and> 
    h \<le> \<alpha>ah (map (\<alpha>nl fg) w)"
proof (induct w rule: length_compl_induct) 
  case Nil thus ?case by auto (auto intro!: RU_init) 
next
  case (Cons eel wwl) 
  then obtain sh ch where SPLIT: 
    "(([u],{#}),eel,(sh,ch))\<in>ntrp fg" 
    "((sh,ch),wwl,(s',c'))\<in>trcl (ntrp fg)" 
    by (fast dest: trcl_uncons)
  obtain p u' v w where 
    FS_FMT: "eel = LOC (LCall p # w)" "(u, Call p, u') \<in> edges fg" "sh = [v, u']" "proc_of fg v = p" "mon_c fg ch = {}" 
    and CHFMT: "\<And>s. s \<in># ch \<Longrightarrow> \<exists>p u v. s=[entry fg p] \<and> (u,Spawn p,v)\<in>edges fg \<and> initialproc fg p"
    and S_ENTRY_PAT: "\<And>P. (\<lambda>p. [entry fg p]) `# P \<subseteq># ch \<Longrightarrow> (v, mon_w fg w, P) \<in> S_cs fg (size P)"
    by (rule S_sound_ntrp[OF SPLIT(1)]) blast
  from ntrp_valid_preserve_s[OF SPLIT(1)] have HVALID: "valid fg ({#sh#} + ch)" by simp
  from ntrp_split[where ?c1.0="{#}", simplified, OF SPLIT(2) ntrp_valid_preserve_s[OF SPLIT(1)], simplified] obtain w1 w2 c1' c2' where 
    LESPLIT: 
      "wwl\<in>w1\<otimes>\<^bsub>\<alpha>nl fg\<^esub> map ENV w2" 
      "c' = c1' + c2'" 
      "((sh, {#}), w1, s', c1') \<in> trcl (ntrp fg)" 
      "(ch, w2, c2') \<in> trcl (ntr fg)" 
      "mon_ww fg (map le_rem_s w1) \<inter> mon_c fg ch = {}" 
      "mon_ww fg w2 \<inter> mon_s fg sh = {}" 
    by blast
  from Cons.prems(2) LESPLIT(2) have "atU U (({#s'#}+c1') + c2')" by (auto simp add: union_ac)
  thus ?case proof (cases rule: atU_union_cases) 
    from cil_ileq[OF LESPLIT(1)] have ILEQ: "w1\<preceq>wwl" and LEN: "length w1 \<le> length wwl" by (auto simp add: le_list_length)
    from FS_FMT(3) LESPLIT(3) ntrp_stack_decomp[of v "[]" "[u']" "{#}" w1 s' c1' fg, simplified] obtain v' rr where DECOMP: "s'=v'#rr@[u']" "(([v],{#}),w1,(v'#rr,c1'))\<in>trcl (ntrp fg)" by auto
    from atU_xchange_stack left DECOMP(1) have ATU: "atU U (add_mset (v'#rr) c1')" by fastforce 
    from Cons.hyps[OF LEN DECOMP(2) ATU] obtain Ml Me h where IHAPP: "(v,Ml,Me,h)\<in>RU_cs fg U" "Ml \<subseteq> mon_loc fg w1" "Me \<subseteq> mon_env fg w1" "h \<le> \<alpha>ah (map (\<alpha>nl fg) w1)" by blast 
    from S_ENTRY_PAT[of "{#}", simplified] have S_ENTRY: "(v, mon_w fg w, {#}) \<in> S_cs fg 0" .
    have MON_U_ME: "mon_n fg u \<inter> Me = {}" proof -
      from ntrp_mon_env_w_no_ctx[OF Cons.prems(1)] have "mon_env fg wwl \<inter> mon_n fg u = {}" by (auto)
      with mon_env_ileq[OF ILEQ] IHAPP(3) show ?thesis by fast
    qed
    from RU_call[OF FS_FMT(2,4) S_ENTRY IHAPP(1) MON_U_ME] have "(u, mon fg p \<union> mon_w fg w \<union> Ml, Me, ah_update h (mon fg p, mon_w fg w) (Ml \<union> Me)) \<in> RU_cs fg U" . 
    moreover have "mon fg p \<union> mon_w fg w \<union> Ml \<subseteq> mon_loc fg (eel#wwl)" using mon_loc_ileq[OF ILEQ] IHAPP(2) FS_FMT(1) by fastforce
    moreover have "Me \<subseteq> mon_env fg (eel#wwl)" using mon_env_ileq[OF ILEQ, of fg] IHAPP(3) by auto
    moreover have "ah_update h (mon fg p, mon_w fg w) (Ml \<union> Me) \<le> \<alpha>ah (map (\<alpha>nl fg) (eel#wwl))" proof (simp add: ah_update_cons)
      show "ah_update h (mon fg p, mon_w fg w) (Ml \<union> Me) \<le> ah_update (\<alpha>ah (map (\<alpha>nl fg) wwl)) (\<alpha>nl fg eel) (mon_pl (map (\<alpha>nl fg) wwl))" proof (rule ah_update_mono)
        from IHAPP(4) have "h \<le> \<alpha>ah (map (\<alpha>nl fg) w1)" .
        also from \<alpha>ah_ileq[OF le_list_map[OF ILEQ]] have "\<alpha>ah (map (\<alpha>nl fg) w1) \<le> \<alpha>ah (map (\<alpha>nl fg) wwl)" .
        finally show "h \<le> \<alpha>ah (map (\<alpha>nl fg) wwl)" .
      next
        from FS_FMT(1) show "(mon fg p, mon_w fg w) = \<alpha>nl fg eel" by auto
      next
        from IHAPP(2,3) have "(Ml \<union> Me) \<subseteq> mon_pl (map (\<alpha>nl fg) w1)" by (auto simp add: mon_pl_of_\<alpha>nl)
        also from mon_pl_ileq[OF le_list_map[OF ILEQ]] have "\<dots> \<subseteq> mon_pl (map (\<alpha>nl fg) wwl)" .
        finally show "(Ml \<union> Me) \<subseteq> mon_pl (map (\<alpha>nl fg) wwl)" .
      qed
    qed
    ultimately show ?thesis by blast
  next
    from cil_ileq[OF LESPLIT(1)] le_list_length[of "map ENV w2" "wwl"] have ILEQ: "map ENV w2\<preceq>wwl" and LEN: "length w2 \<le> length wwl" by (auto)
    from HVALID have CHVALID: "valid fg ch" "mon_s fg sh \<inter> mon_c fg ch = {}" by (auto simp add: valid_unconc)
    from ntr_reverse_split_atU[OF CHVALID(1) right LESPLIT(4)] obtain q wr cr' where RI: "[entry fg q] \<in># ch" "wr\<preceq>w2" "cr'\<subseteq>#c2'" "atU U cr'" "({#[entry fg q]#},wr,cr')\<in>trcl (ntr fg)" by (blast dest: CHFMT)
    from ntrs.gtr2gtrp[where c="{#}", simplified, OF RI(5)] obtain sr' cre' wwr where RI_NTRP: "cr'=add_mset sr' cre'" "wr=map le_rem_s wwr" "(([entry fg q],{#}),wwr,(sr',cre'))\<in>trcl (ntrp fg)" by blast
    from LEN le_list_length[OF RI(2)] RI_NTRP(2) have LEN': "length wwr \<le> length wwl" by simp
    from Cons.hyps[OF LEN' RI_NTRP(3)] RI_NTRP(1) RI(4) obtain Ml Me h where IHAPP: "(entry fg q, Ml, Me, h)\<in>RU_cs fg U" "Ml \<subseteq> mon_loc fg wwr" "Me \<subseteq> mon_env fg wwr" "h \<le> \<alpha>ah (map (\<alpha>nl fg) wwr)" by auto 
    from S_ENTRY_PAT[of "{#q#}", simplified] RI(1) have S_ENTRY: "(v, mon_w fg w, {#q#}) \<in> S_cs fg 1" by auto 
    have MON_MLE_ENV: "Ml \<union> Me \<subseteq> mon_env fg wwl" proof -
      from IHAPP(2,3) have "Ml \<union> Me \<subseteq> mon_loc fg wwr \<union> mon_env fg wwr" by auto
      also from mon_ww_of_le_rem[symmetric] RI_NTRP(2) have "\<dots> = mon_ww fg wr" by fastforce
      also from mon_env_ileq[OF ILEQ] mon_ww_ileq[OF RI(2)] have "\<dots> \<subseteq> mon_env fg wwl" by fastforce
      finally show ?thesis .
    qed
    have MON_UP_MLE: "(mon_n fg u \<union> mon fg p) \<inter> (Ml \<union> Me) = {}" proof -
      from ntrp_mon_env_w_no_ctx[OF SPLIT(2)] FS_FMT(3,4) edges_part[OF FS_FMT(2)] have "(mon_n fg u \<union> mon fg p) \<inter> mon_env fg wwl = {}" by (auto simp add: mon_n_def)
      with MON_MLE_ENV show ?thesis by auto
    qed
    from RU_spawn[OF FS_FMT(2,4) S_ENTRY _ IHAPP(1) MON_UP_MLE] have "(u, mon fg p \<union> mon_w fg w, Ml \<union> Me, ah_update h (mon fg p, mon_w fg w) (Ml \<union> Me)) \<in> RU_cs fg U" by simp 
    moreover have "mon fg p \<union> mon_w fg w \<subseteq> mon_loc fg (eel#wwl)" using FS_FMT(1) by fastforce
    moreover have "Ml \<union> Me \<subseteq> mon_env fg (eel#wwl)" using MON_MLE_ENV by auto
    proof (simp add: ah_update_cons)
      have MAP_HELPER: "map (\<alpha>nl fg) wwr \<preceq> map (\<alpha>nl fg) wwl" proof -
        from RI_NTRP(2) have "map (\<alpha>nl fg) wwr = map (\<alpha>n fg) wr" by (simp add: \<alpha>n_\<alpha>nl)
        also from le_list_map[OF RI(2)] have "\<dots> \<preceq> map (\<alpha>n fg) w2" .
        also have "\<dots> = map (\<alpha>nl fg) (map ENV w2)" by simp
        also from le_list_map[OF ILEQ] have "\<dots> \<preceq> map (\<alpha>nl fg) wwl" .
        finally show "?thesis" .
      qed
      show "ah_update h (mon fg p, mon_w fg w) (Ml \<union> Me) \<le> ah_update (\<alpha>ah (map (\<alpha>nl fg) wwl)) (\<alpha>nl fg eel) (mon_pl (map (\<alpha>nl fg) wwl))" proof (rule ah_update_mono)
        from IHAPP(4) have "h \<le> \<alpha>ah (map (\<alpha>nl fg) wwr)" .
        also have "\<dots> \<le> \<alpha>ah (map (\<alpha>nl fg) wwl)" by (rule \<alpha>ah_ileq[OF MAP_HELPER])
        finally show "h \<le> \<alpha>ah (map (\<alpha>nl fg) wwl)" .
      next
        from FS_FMT(1) show "(mon fg p, mon_w fg w) = \<alpha>nl fg eel" by simp
      next
        from IHAPP(2,3) mon_pl_ileq[OF MAP_HELPER] show "Ml \<union> Me \<subseteq> mon_pl (map (\<alpha>nl fg) wwl)" by (auto simp add: mon_pl_of_\<alpha>nl)
      qed
    qed
    ultimately show ?thesis by blast
  qed
qed


lemma (in flowgraph) RU_precise: "(u,Ml,Me,h)\<in>RU_cs fg U 
  \<Longrightarrow> \<exists>w s' c'. 
    (([u],{#}),w,(s',c'))\<in>trcl (ntrp fg) \<and> 
    atU U ({#s'#}+c') \<and> 
    mon_loc fg w = Ml \<and> 
    mon_env fg w = Me \<and> 
    \<alpha>ah (map (\<alpha>nl fg) w) = h"
proof (induct rule: RU_cs.induct)
  case (RU_init u) thus ?case by (auto intro: exI[of _ "[]"]) 
next
  case (RU_call u p u' v M P Ml Me h) 
  then obtain w s' c' where IHAPP: "(([v], {#}), w, s', c') \<in> trcl (ntrp fg)" "atU U ({#s'#} + c')" "mon_loc fg w = Ml" "mon_env fg w = Me" "\<alpha>ah (map (\<alpha>nl fg) w) = h" by blast
  from RU_call.hyps(2) S_precise[OF RU_call.hyps(3), simplified] trss_bot_proc_const[where s="[]" and s'="[]", simplified] obtain wsl ch where 
    SLPATH: "(([entry fg p], {#}), wsl, [v], ch) \<in> trcl (trss fg)" "M = mon_w fg wsl" by fastforce
  from trss_c_cases[OF SLPATH(1), simplified] have CHFMT: "\<And>s. s \<in># ch \<Longrightarrow> \<exists>p. s = [entry fg p] \<and> (\<exists>u v. (u, Spawn p, v) \<in> edges fg) \<and> initialproc fg p" by blast
  with c_of_initial_no_mon have CHNOMON: "mon_c fg ch = {}" by blast
  have FS: "(([u],{#}),LCall p#wsl,([v,u'],ch))\<in>ntrs fg" proof (rule ntrs_step[where r="[]", simplified])
    from RU_call.hyps(1) show "(([u], {#}), LCall p, [entry fg p, u'], {#}) \<in> trss fg" by (auto intro: trss_call)
  qed (rule SLPATH(1))
  hence FSP: "(([u],{#}),LOC (LCall p#wsl),([v,u'],ch))\<in>ntrp fg" by (blast intro: gtrp_loc) 
  also 
  have "(([v, u'], ch), w, s' @ [u'], c' + ch) \<in> trcl (ntrp fg)" proof (rule ntrp_add_context[OF ntrp_stack_comp[OF IHAPP(1), where r="[u']"], where cn=ch, simplified])
    from RU_call.hyps(1,6) IHAPP(4) show "mon_n fg u' \<inter> mon_env fg w = {}" by (auto simp add: mon_n_def edges_part)
    from CHNOMON show "mon_ww fg (map le_rem_s w) \<inter> mon_c fg ch = {}" by auto
  qed
  finally have "(([u], {#}), LOC (LCall p # wsl) # w, s' @ [u'], c' + ch) \<in> trcl (ntrp fg)" . 
  moreover from IHAPP(2) have "atU U ({# s'@[u'] #}+(c'+ch))" by auto
  moreover have "mon_loc fg (LOC (LCall p # wsl) # w) = mon fg p \<union> M \<union> Ml" using SLPATH(2) IHAPP(3) by auto
  moreover have "mon_env fg (LOC (LCall p # wsl) # w) = Me" using IHAPP(4) by auto
  moreover have "\<alpha>ah (map (\<alpha>nl fg) (LOC (LCall p # wsl) # w)) = ah_update h (mon fg p, M) (Ml \<union> Me)" proof -
    have "\<alpha>ah (map (\<alpha>nl fg) (LOC (LCall p # wsl) # w)) = ah_update (\<alpha>ah (map (\<alpha>nl fg) w)) (mon fg p, mon_w fg wsl) (mon_pl (map (\<alpha>nl fg) w))" by (auto simp add: ah_update_cons)
    also have "\<dots> = ah_update h (mon fg p, M) (Ml \<union> Me)" proof -
      from IHAPP(5) have "\<alpha>ah (map (\<alpha>nl fg) w) = h" .
      moreover from SLPATH(2) have "(mon fg p, mon_w fg wsl) = (mon fg p, M)" by (simp add: mon_pl_of_\<alpha>nl)
      moreover from IHAPP(3,4) have "mon_pl (map (\<alpha>nl fg) w) = Ml \<union> Me" by (auto simp add: mon_pl_of_\<alpha>nl)
      ultimately show ?thesis by simp
    qed
    finally show ?thesis .
  qed
  ultimately show ?case by blast
next
  case (RU_spawn u p u' v M P q Ml Me h) then obtain w s' c' where IHAPP: "(([entry fg q], {#}), w, s', c') \<in> trcl (ntrp fg)" "atU U ({#s'#} + c')" "mon_loc fg w = Ml" "mon_env fg w = Me" "\<alpha>ah (map (\<alpha>nl fg) w) = h" by blast
  from RU_spawn.hyps(2) S_precise[OF RU_spawn.hyps(3), simplified] trss_bot_proc_const[where s="[]" and s'="[]", simplified] obtain wsl ch where 
    SLPATH: "(([entry fg p], {#}), wsl, [v], ch) \<in> trcl (trss fg)" "M = mon_w fg wsl" "size P \<le> 1" "(\<lambda>p. [entry fg p]) `# P \<subseteq># ch" by fastforce
  with RU_spawn.hyps(4) obtain che where PFMT: "P={#q#}" "ch = {#[entry fg q]#} + che" by (auto elim!: mset_size_le1_cases mset_le_addE)
  from trss_c_cases[OF SLPATH(1), simplified] have CHFMT: "\<And>s. s \<in># ch \<Longrightarrow> \<exists>p. s = [entry fg p] \<and> (\<exists>u v. (u, Spawn p, v) \<in> edges fg) \<and> initialproc fg p" by blast
  with c_of_initial_no_mon have CHNOMON: "mon_c fg ch = {}" by blast
  have FS: "(([u],{#}),LCall p#wsl,([v,u'],ch))\<in>ntrs fg" proof (rule ntrs_step[where r="[]", simplified])
    from RU_spawn.hyps(1) show "(([u], {#}), LCall p, [entry fg p, u'], {#}) \<in> trss fg" by (auto intro: trss_call)
  qed (rule SLPATH(1))
  hence FSP: "(([u],{#}),LOC (LCall p#wsl),([v,u'],ch))\<in>ntrp fg" by (blast intro: gtrp_loc) 
  also have "(([v, u'], ch), map ENV (map le_rem_s w), [v,u'], che+({#s'#}+c')) \<in> trcl (ntrp fg)" proof -
    from IHAPP(3,4) have "mon_ww fg (map le_rem_s w) \<subseteq> Ml \<union> Me" by (auto simp add: mon_ww_of_le_rem)
    with RU_spawn.hyps(1,2,7) have "(mon_n fg v \<union> mon_n fg u') \<inter> mon_ww fg (map le_rem_s w) = {}" by (auto simp add: mon_n_def edges_part)
    with ntr2ntrp[OF gtrp2gtr[OF IHAPP(1)], of "[v,u']" che] PFMT(2) CHNOMON show ?thesis by (auto simp add: union_ac mon_c_unconc)
  qed
  finally have "(([u], {#}), LOC (LCall p # wsl) # map ENV (map le_rem_s w), [v, u'], che + ({#s'#} + c')) \<in> trcl (ntrp fg)" .
  moreover from IHAPP(2) have "atU U ({#[v,u']#} + (che+({#s'#} + c')))" by auto
  moreover have "mon_loc fg (LOC (LCall p # wsl) # map ENV (map le_rem_s w)) = mon fg p \<union> M" using SLPATH(2) by (auto simp del: map_map)
  moreover have "mon_env fg (LOC (LCall p # wsl) # map ENV (map le_rem_s w)) = Ml \<union> Me" using IHAPP(3,4) by (auto simp add: mon_ww_of_le_rem simp del: map_map)
  moreover have "\<alpha>ah (map (\<alpha>nl fg) (LOC (LCall p # wsl) # map ENV (map le_rem_s w))) = ah_update h (mon fg p, M) (Ml \<union> Me)" proof -
    have "\<alpha>ah (map (\<alpha>nl fg) (LOC (LCall p # wsl) # map ENV (map le_rem_s w))) = ah_update (\<alpha>ah (map (\<alpha>n fg) (map le_rem_s w))) (mon fg p, mon_w fg wsl) (mon_pl (map (\<alpha>n fg) (map le_rem_s w)))" by (simp add: ah_update_cons o_assoc)
    also have "\<dots> = ah_update h (mon fg p, M) (Ml \<union> Me)" proof -
      from IHAPP(5) have "\<alpha>ah (map (\<alpha>n fg) (map le_rem_s w)) = h" by (simp add: \<alpha>n_\<alpha>nl)
      moreover from SLPATH(2) have "(mon fg p, mon_w fg wsl) = (mon fg p, M)" by simp
      moreover from IHAPP(3,4) have "mon_pl (map (\<alpha>n fg) (map le_rem_s w)) = Ml \<union> Me" by (auto simp add: mon_pl_of_\<alpha>nl \<alpha>n_\<alpha>nl)
      ultimately show ?thesis by simp
    qed
    finally show ?thesis .
  qed
  ultimately show ?case by blast
qed


subsection "Simultaneously reaching path"

subsubsection "Constraint system"
inductive_set
  RUV_cs :: "('n,'p,'ba,'m,'more) flowgraph_rec_scheme \<Rightarrow> 
             'n set \<Rightarrow> 'n set \<Rightarrow> ('n \<times> 'm set \<times> 'm set) set"
  for fg U V
where
    RUV_call: 
      "\<lbrakk> (u,Call p,u')\<in>edges fg; proc_of fg v = p; (v,M,P)\<in>S_cs fg 0; 
         (v,Ml,Me)\<in>RUV_cs fg U V; mon_n fg u \<inter> Me = {} \<rbrakk> 
      \<Longrightarrow> (u,mon fg p \<union> M \<union> Ml,Me)\<in>RUV_cs fg U V"
  | RUV_spawn: 
      "\<lbrakk> (u,Call p,u')\<in>edges fg; proc_of fg v = p; (v,M,P)\<in>S_cs fg 1; q \<in># P; 
         (entry fg q,Ml,Me)\<in>RUV_cs fg U V; 
         (mon_n fg u \<union> mon fg p) \<inter> (Ml \<union> Me) = {} \<rbrakk> 
      \<Longrightarrow> (u, mon fg p \<union> M, Ml\<union>Me)\<in>RUV_cs fg U V"
  | RUV_split_le: 
      "\<lbrakk> (u,Call p,u')\<in>edges fg; proc_of fg v = p; (v,M,P)\<in>S_cs fg 1; q \<in># P; 
         (v,Ml,Me,h)\<in>RU_cs fg U; (entry fg q,Ml',Me',h')\<in>RU_cs fg V; 
         (mon_n fg u \<union> mon fg p) \<inter> (Me\<union>Ml'\<union>Me')={}; h [*] h' \<rbrakk> 
      \<Longrightarrow> (u, mon fg p \<union> M \<union> Ml, Me \<union> Ml' \<union> Me')\<in>RUV_cs fg U V"
  | RUV_split_el: 
      "\<lbrakk> (u,Call p,u')\<in>edges fg; proc_of fg v = p; (v,M,P)\<in>S_cs fg 1; q \<in># P; 
         (v,Ml,Me,h)\<in>RU_cs fg V; (entry fg q,Ml',Me',h')\<in>RU_cs fg U; 
         (mon_n fg u \<union> mon fg p) \<inter> (Me\<union>Ml'\<union>Me')={}; h [*] h' \<rbrakk> 
      \<Longrightarrow> (u, mon fg p \<union> M \<union> Ml, Me \<union> Ml' \<union> Me')\<in>RUV_cs fg U V"
  | RUV_split_ee: 
      "\<lbrakk> (u,Call p,u')\<in>edges fg; proc_of fg v = p; (v,M,P)\<in>S_cs fg 2; 
         {#q#}+{#q'#} \<subseteq># P;
         (entry fg q,Ml,Me,h)\<in>RU_cs fg U; (entry fg q',Ml',Me',h')\<in>RU_cs fg V; 
         (mon_n fg u \<union> mon fg p) \<inter> (Ml\<union>Me\<union>Ml'\<union>Me') = {}; h [*] h' \<rbrakk> 
      \<Longrightarrow> (u, mon fg p \<union> M, Ml\<union>Me\<union>Ml'\<union>Me')\<in>RUV_cs fg U V"



lemma (in flowgraph) RUV_sound: "!!u s' c'. 
  \<lbrakk> (([u],{#}),w,(s',c'))\<in>trcl (ntrp fg); atUV U V ({#s'#}+c') \<rbrakk> 
  \<Longrightarrow> \<exists>Ml Me. 
    (u,Ml,Me)\<in>RUV_cs fg U V \<and> 
    Ml \<subseteq> mon_loc fg w \<and> 
    Me \<subseteq> mon_env fg w"
proof (induct w rule: length_compl_induct)
  case Nil hence False by simp thus ?case .. 
next
  case (Cons ee ww) then obtain sh ch where SPLIT: "(([u],{#}),ee,(sh,ch))\<in>ntrp fg" "((sh,ch),ww,(s',c'))\<in>trcl (ntrp fg)" by (fast dest: trcl_uncons)
  from ntrp_split[where ?c1.0="{#}", simplified, OF SPLIT(2) ntrp_valid_preserve_s[OF SPLIT(1)], simplified] obtain w1 w2 c1' c2' where 
    LESPLIT: "ww \<in> w1 \<otimes>\<^bsub>\<alpha>nl fg\<^esub> map ENV w2" "c' = c1' + c2'" "((sh, {#}), w1, s', c1') \<in> trcl (ntrp fg)" "(ch, w2, c2') \<in> trcl (ntr fg)" "mon_ww fg (map le_rem_s w1) \<inter> mon_c fg ch = {}" "mon_ww fg w2 \<inter> mon_s fg sh = {}"
    by blast
  obtain p u' v w where 
    FS_FMT: "ee = LOC (LCall p # w)" "(u, Call p, u') \<in> edges fg" "sh = [v, u']" "proc_of fg v = p" "mon_c fg ch = {}" 
    and CHFMT: "\<And>s. s \<in># ch \<Longrightarrow> \<exists>p u v. s = [entry fg p] \<and> (u, Spawn p, v) \<in> edges fg \<and> initialproc fg p"
    and S_ENTRY_PAT: "\<And>P. (\<lambda>p. [entry fg p]) `# P \<subseteq># ch \<Longrightarrow> (v, mon_w fg w, P) \<in> S_cs fg (size P)"
    by (rule S_sound_ntrp[OF SPLIT(1)]) blast
  from ntrp_mon_env_w_no_ctx[OF SPLIT(2)] FS_FMT(3,4) edges_part[OF FS_FMT(2)] have MON_PU: "mon_env fg ww \<inter> (mon fg p \<union> mon_n fg u) = {}" by (auto simp add: mon_n_def)
  from cil_ileq[OF LESPLIT(1)] mon_loc_ileq[of w1 ww fg] mon_env_ileq[of w1 ww fg] have MON1_LEQ: "mon_loc fg w1 \<subseteq> mon_loc fg ww" "mon_env fg w1 \<subseteq> mon_env fg ww" by auto
  from cil_ileq[OF LESPLIT(1)] mon_env_ileq[of "map ENV w2" ww fg] have MON2_LEQ: "mon_ww fg w2 \<subseteq> mon_env fg ww" by simp
  from LESPLIT(3) FS_FMT(3) ntrp_stack_decomp[of v "[]" "[u']" "{#}" w1 s' c1', simplified] obtain v' rr where DECOMP_LOC: "s'=v'#rr@[u']" "(([v],{#}),w1,(v'#rr,c1'))\<in>trcl (ntrp fg)" by (simp, blast)
  from Cons.prems(2) LESPLIT(2) have "atUV U V (({#s'#}+c1') + c2')" by (simp add: union_ac)
  thus ?case proof (cases rule: atUV_union_cases)
    case left with DECOMP_LOC(1) have ATUV: "atUV U V ({# v'#rr #}+c1')" by simp
    from Cons.hyps[OF _ DECOMP_LOC(2) ATUV] cil_length[OF LESPLIT(1)] obtain Ml Me where IHAPP: "(v, Ml, Me) \<in> RUV_cs fg U V" "Ml \<subseteq> mon_loc fg w1" "Me \<subseteq> mon_env fg w1" by auto
    from RUV_call[OF FS_FMT(2,4) S_ENTRY_PAT[of "{#}", simplified] IHAPP(1)] have "(u, mon fg p \<union> mon_w fg w \<union> Ml, Me) \<in> RUV_cs fg U V" using IHAPP(3) MON_PU MON1_LEQ by fastforce
    moreover have "mon fg p \<union> mon_w fg w \<union> Ml \<subseteq> mon_loc fg (ee#ww)" using FS_FMT(1) IHAPP(2) MON1_LEQ by auto
    moreover have "Me \<subseteq> mon_env fg (ee#ww)" using IHAPP(3) MON1_LEQ by auto
    ultimately show ?thesis by blast
  next
    then obtain s1' s2' where R_STACKS: "{#s1'#}+{#s2'#} \<subseteq># c2'" "atU_s U s1'" "atU_s V s2'" by (unfold atUV_def) auto
    then obtain ce2' where C2'FMT: "c2'={#s1'#}+({#s2'#}+ce2')" by (auto simp add: mset_subset_eq_exists_conv union_ac)
    obtain q ceh w21 w22 ce21' ce22' where 
      REVSPLIT: "ch={#[entry fg q]#}+ceh" "add_mset s2' ce2' = ce21'+ce22'" "w2\<in>w21\<otimes>\<^bsub>\<alpha>n fg\<^esub>w22" "mon fg q \<inter> (mon_c fg ceh \<union> mon_ww fg w22)={}" "mon_c fg ceh \<inter> (mon fg q \<union> mon_ww fg w21) = {}"
      "({#[entry fg q]#},w21,{#s1'#}+ce21')\<in>trcl (ntr fg)" "(ceh,w22,ce22')\<in>trcl (ntr fg)" 
    proof -
      from ntr_reverse_split[of ch w2 s1' "{#s2'#}+ce2'"] ntrp_valid_preserve_s[OF SPLIT(1), simplified] C2'FMT LESPLIT(4)
      obtain seh ceh w21 w22 ce21' ce22' where 
        *: "ch={#seh#}+ceh" "{#s2'#}+ce2' = ce21'+ce22'" "w2\<in>w21\<otimes>\<^bsub>\<alpha>n fg\<^esub>w22" "mon_s fg seh \<inter> (mon_c fg ceh \<union> mon_ww fg w22)={}" "mon_c fg ceh \<inter> (mon_s fg seh \<union> mon_ww fg w21) = {}"
        "({#seh#},w21,{#s1'#}+ce21')\<in>trcl (ntr fg)" "(ceh,w22,ce22')\<in>trcl (ntr fg)" by (auto simp add: valid_unconc)
      from this(1) CHFMT[of seh] obtain q where "seh=[entry fg q]" by auto
      with * have "ch={#[entry fg q]#}+ceh" "add_mset s2' ce2' = ce21'+ce22'" "w2\<in>w21\<otimes>\<^bsub>\<alpha>n fg\<^esub>w22" "mon fg q \<inter> (mon_c fg ceh \<union> mon_ww fg w22)={}" "mon_c fg ceh \<inter> (mon fg q \<union> mon_ww fg w21) = {}"
        "({#[entry fg q]#},w21,{#s1'#}+ce21')\<in>trcl (ntr fg)" "(ceh,w22,ce22')\<in>trcl (ntr fg)" by auto
      thus thesis using that by (blast)
    qed
    from ntrs.gtr2gtrp[where c="{#}", simplified, OF REVSPLIT(6)] obtain sq' csp_q ww21 where 
      R_CONV: "add_mset s1' ce21' = add_mset sq' csp_q" "w21 = map le_rem_s ww21" "(([entry fg q], {#}), ww21, sq', csp_q) \<in> trcl (ntrp fg)" by auto  
    from cil_ileq[OF REVSPLIT(3)] mon_ww_ileq[of w21 w2 fg] mon_ww_ileq[of w22 w2 fg] have MON2N_LEQ: "mon_ww fg w21 \<subseteq> mon_ww fg w2" "mon_ww fg w22 \<subseteq> mon_ww fg w2" by auto
    from REVSPLIT(2) show ?thesis proof (cases rule: mset_unplusm_dist_cases[case_names left' right'])
      have ATUV: "atUV U V ({#sq'#}+csp_q)" using right C2'FMT R_STACKS(2,3) left'(1)
        by (metis R_CONV(1) add_mset_add_single atUV_union atU_add_mset union_commute)
      from Cons.hyps[OF _ R_CONV(3) ATUV] cil_length[OF REVSPLIT(3)] cil_length[OF LESPLIT(1)] R_CONV(2) obtain Ml Me where IHAPP: "(entry fg q, Ml, Me) \<in> RUV_cs fg U V" "Ml \<subseteq> mon_loc fg ww21" "Me \<subseteq> mon_env fg ww21" by auto
      from REVSPLIT(1) S_ENTRY_PAT[of "{#q#}", simplified] have S_ENTRY: "(v, mon_w fg w, {#q#}) \<in> S_cs fg 1" by simp
      have MON_COND: "(mon_n fg u \<union> mon fg p) \<inter> (Ml \<union> Me) = {}" proof -
        from R_CONV(2) have "mon_ww fg w21 = mon_loc fg ww21 \<union> mon_env fg ww21" by (simp add: mon_ww_of_le_rem)
        with IHAPP(2,3) MON2N_LEQ(1) MON_PU MON2_LEQ show ?thesis by blast
      qed
      from RUV_spawn[OF FS_FMT(2) FS_FMT(4) S_ENTRY _ IHAPP(1) MON_COND] have "(u, mon fg p \<union> mon_w fg w, Ml \<union> Me) \<in> RUV_cs fg U V" by simp
      moreover have "mon fg p \<union> mon_w fg w \<subseteq> mon_loc fg (ee#ww)" using FS_FMT(1) by auto
      moreover have "Ml \<union> Me \<subseteq> mon_env fg (ee#ww)" using IHAPP(2,3) R_CONV(2) MON2N_LEQ(1) MON2_LEQ by (auto simp add: mon_ww_of_le_rem)
      ultimately show ?thesis by blast
    next
      from R_STACKS(2,3) have ATUV: "atU U (add_mset sq' csp_q)" "atU V ce22'" by (-) (subst R_CONV(1)[symmetric], simp, subst right'(1), simp)
      obtain q' w22' ce22e' where REVSPLIT': "[entry fg q'] \<in># ceh" "w22'\<preceq>w22" "ce22e' \<subseteq># ce22'" "atU V ce22e'" "({#[entry fg q']#},w22',ce22e')\<in>trcl (ntr fg)"
      proof -
        from ntr_reverse_split_atU[OF _ ATUV(2) REVSPLIT(7)] ntrp_valid_preserve_s[OF SPLIT(1), simplified] REVSPLIT(1) obtain sq'' w22' ce22e' where 
          *: "sq'' \<in># ceh" "w22'\<preceq>w22" "ce22e' \<subseteq># ce22'" "atU V ce22e'" "({#sq''#},w22',ce22e')\<in>trcl (ntr fg)" by (auto simp add: valid_unconc)
        from CHFMT[of sq''] REVSPLIT(1) this(1) obtain q' where "sq''=[entry fg q']" by auto 
        with * show thesis using that by blast 
      qed
      from ntrs.gtr2gtrp[where c="{#}", simplified, OF REVSPLIT'(5)] obtain sq'' ce22ee' ww22' where R_CONV': "ce22e' = add_mset sq'' ce22ee'" "w22'=map le_rem_s ww22'" "(([entry fg q'],{#}),ww22',(sq'',ce22ee'))\<in>trcl (ntrp fg)" by blast
      from RU_sound[OF R_CONV(3) ATUV(1)] obtain Ml Me h where RU: "(entry fg q, Ml, Me, h) \<in> RU_cs fg U" "Ml \<subseteq> mon_loc fg ww21" "Me \<subseteq> mon_env fg ww21" "h \<le> \<alpha>ah (map (\<alpha>nl fg) ww21)" by blast
      from RU_sound[OF R_CONV'(3), of V] REVSPLIT'(4) R_CONV'(1) obtain Ml' Me' h' where RV: "(entry fg q', Ml', Me', h') \<in> RU_cs fg V" "Ml' \<subseteq> mon_loc fg ww22'" "Me' \<subseteq> mon_env fg ww22'" "h' \<le> \<alpha>ah (map (\<alpha>nl fg) ww22')" by auto 
      from S_ENTRY_PAT[of "{#q#}+{#q'#}", simplified] REVSPLIT(1) REVSPLIT'(1) have S_ENTRY: "(v, mon_w fg w, {#q#} + {#q'#}) \<in> S_cs fg (2::nat)" by (simp add: numerals)
      have "(u, mon fg p \<union> mon_w fg w, Ml \<union> Me \<union> Ml' \<union> Me') \<in> RUV_cs fg U V" proof (rule RUV_split_ee[OF FS_FMT(2,4) S_ENTRY _ RU(1) RV(1)])
        from MON_PU MON2_LEQ MON2N_LEQ R_CONV(2) R_CONV'(2) mon_ww_ileq[OF REVSPLIT'(2), of fg] RU(2,3) RV(2,3) show "(mon_n fg u \<union> mon fg p) \<inter> (Ml \<union> Me \<union> Ml' \<union> Me') = {}" by (simp add: mon_ww_of_le_rem) blast
      next
        from ah_interleavable1[OF REVSPLIT(3)] have "\<alpha>ah (map (\<alpha>n fg) w21) [*] \<alpha>ah (map (\<alpha>n fg) w22)" .
        thus "h [*] h'" 
        proof (erule_tac ah_leq_il)
          note RU(4)
          also have "map (\<alpha>nl fg) ww21 \<preceq> map (\<alpha>n fg) w21" using R_CONV(2) by (simp add: \<alpha>n_\<alpha>nl)
          hence "\<alpha>ah (map (\<alpha>nl fg) ww21) \<le> \<alpha>ah (map (\<alpha>n fg) w21)" by (rule \<alpha>ah_ileq)
          finally show "h \<le> \<alpha>ah (map (\<alpha>n fg) w21)" .
        next
          note RV(4)
          also have "map (\<alpha>nl fg) ww22' \<preceq> map (\<alpha>n fg) w22" using R_CONV'(2) REVSPLIT'(2) by (simp add: \<alpha>n_\<alpha>nl[symmetric] le_list_map map_map[symmetric] del: map_map)
          hence "\<alpha>ah (map (\<alpha>nl fg) ww22') \<le> \<alpha>ah (map (\<alpha>n fg) w22)" by (rule \<alpha>ah_ileq)
          finally show "h' \<le> \<alpha>ah (map (\<alpha>n fg) w22)" .
        qed
      qed (simp)
      moreover have "mon fg p \<union> mon_w fg w \<subseteq> mon_loc fg (ee#ww)" using FS_FMT(1) by auto
      moreover have "Ml \<union> Me \<union> Ml' \<union> Me' \<subseteq> mon_env fg (ee#ww)" using RV(2,3) RU(2,3) mon_ww_ileq[OF REVSPLIT'(2), of fg] MON2N_LEQ R_CONV(2) R_CONV'(2) MON2_LEQ by (simp add: mon_ww_of_le_rem) blast
      ultimately show ?thesis by blast
    qed
  next
    from RU_sound[OF DECOMP_LOC(2), of U] lr(1) DECOMP_LOC(1) obtain Ml Me h where RU: "(v, Ml, Me, h) \<in> RU_cs fg U" "Ml \<subseteq> mon_loc fg w1" "Me \<subseteq> mon_env fg w1" "h \<le> \<alpha>ah (map (\<alpha>nl fg) w1)" by auto
    obtain Ml' Me' h' q' where RV: "[entry fg q'] \<in># ch" "(entry fg q', Ml', Me', h') \<in> RU_cs fg V" "Ml' \<subseteq> mon_ww fg w2" "Me' \<subseteq> mon_ww fg w2" "h' \<le> \<alpha>ah (map (\<alpha>n fg) w2)"
    proof -
      obtain q' w2' c2i' where REVSPLIT: "[entry fg q'] \<in># ch" "w2'\<preceq>w2" "c2i' \<subseteq># c2'" "atU V c2i'" "({#[entry fg q']#},w2',c2i')\<in>trcl (ntr fg)"
        using ntr_reverse_split_atU[OF _ lr(2) LESPLIT(4)] ntrp_valid_preserve_s[OF SPLIT(1), simplified] CHFMT by (simp add: valid_unconc) blast
      from ntrs.gtr2gtrp[where c="{#}", simplified, OF REVSPLIT(5)] obtain s2i' c2ie' ww2' where R_CONV: "c2i'=add_mset s2i' c2ie'" "w2'=map le_rem_s ww2'" "(([entry fg q'], {#}), ww2', s2i', c2ie') \<in> trcl (ntrp fg)" .
      from RU_sound[OF R_CONV(3), of V] REVSPLIT(4) R_CONV(1) obtain Ml' Me' h' where RV: "(entry fg q', Ml', Me', h') \<in> RU_cs fg V" "Ml' \<subseteq> mon_loc fg ww2'" "Me' \<subseteq> mon_env fg ww2'" "h' \<le> \<alpha>ah (map (\<alpha>nl fg) ww2')" by auto
      moreover have "mon_loc fg ww2' \<subseteq> mon_ww fg w2" "mon_env fg ww2' \<subseteq> mon_ww fg w2" using mon_ww_ileq[OF REVSPLIT(2), of fg] R_CONV(2) by (auto simp add: mon_ww_of_le_rem)
      moreover have "\<alpha>ah (map (\<alpha>nl fg) ww2') \<le> \<alpha>ah (map (\<alpha>n fg) w2)" using REVSPLIT(2) R_CONV(2) by (auto simp add: \<alpha>n_\<alpha>nl[symmetric] le_list_map map_map[symmetric] simp del: map_map intro: \<alpha>ah_ileq del: predicate2I)
      ultimately show thesis using that REVSPLIT(1) by (blast intro: order_trans)
    qed
    from S_ENTRY_PAT[of "{#q'#}", simplified] RV(1) have S_ENTRY: "(v, mon_w fg w, {#q'#}) \<in> S_cs fg 1" by simp
    have "(u, mon fg p \<union> mon_w fg w \<union> Ml, Me \<union> Ml' \<union> Me') \<in> RUV_cs fg U V" proof (rule RUV_split_le[OF FS_FMT(2,4) S_ENTRY _ RU(1) RV(2)])
      from MON_PU MON1_LEQ MON2_LEQ RU(3) RV(3,4) show "(mon_n fg u \<union> mon fg p) \<inter> (Me \<union> Ml' \<union> Me') = {}" by blast
    next
      from ah_interleavable1[OF LESPLIT(1)] have "\<alpha>ah (map (\<alpha>nl fg) w1) [*] \<alpha>ah (map (\<alpha>n fg) w2)" by simp
      thus "h [*] h'" using RU(4) RV(5) by (auto elim: ah_leq_il) 
    qed (simp)
    moreover have "mon fg p \<union> mon_w fg w \<union> Ml \<subseteq> mon_loc fg (ee # ww)" using FS_FMT(1) MON1_LEQ RU(2) by (simp) blast
    moreover have "Me \<union> Ml' \<union> Me' \<subseteq> mon_env fg (ee # ww)" using MON1_LEQ MON2_LEQ RU(3) RV(3,4) by (simp) blast
    ultimately show ?thesis by blast
  next
    from RU_sound[OF DECOMP_LOC(2), of V] rl(1) DECOMP_LOC(1) obtain Ml Me h where RV: "(v, Ml, Me, h) \<in> RU_cs fg V" "Ml \<subseteq> mon_loc fg w1" "Me \<subseteq> mon_env fg w1" "h \<le> \<alpha>ah (map (\<alpha>nl fg) w1)" by auto
    obtain Ml' Me' h' q' where RU: "[entry fg q'] \<in># ch" "(entry fg q', Ml', Me', h') \<in> RU_cs fg U" "Ml' \<subseteq> mon_ww fg w2" "Me' \<subseteq> mon_ww fg w2" "h' \<le> \<alpha>ah (map (\<alpha>n fg) w2)"
    proof -
      obtain q' w2' c2i' where REVSPLIT: "[entry fg q'] \<in># ch" "w2'\<preceq>w2" "c2i' \<subseteq># c2'" "atU U c2i'" "({#[entry fg q']#},w2',c2i')\<in>trcl (ntr fg)"
        using ntr_reverse_split_atU[OF _ rl(2) LESPLIT(4)] ntrp_valid_preserve_s[OF SPLIT(1), simplified] CHFMT by (simp add: valid_unconc) blast
      from ntrs.gtr2gtrp[where c="{#}", simplified, OF REVSPLIT(5)] obtain s2i' c2ie' ww2' where R_CONV: "c2i'=add_mset s2i' c2ie'" "w2'=map le_rem_s ww2'" "(([entry fg q'], {#}), ww2', s2i', c2ie') \<in> trcl (ntrp fg)" .
      from RU_sound[OF R_CONV(3), of U] REVSPLIT(4) R_CONV(1) obtain Ml' Me' h' where RU: "(entry fg q', Ml', Me', h') \<in> RU_cs fg U" "Ml' \<subseteq> mon_loc fg ww2'" "Me' \<subseteq> mon_env fg ww2'" "h' \<le> \<alpha>ah (map (\<alpha>nl fg) ww2')" by auto
      moreover have "mon_loc fg ww2' \<subseteq> mon_ww fg w2" "mon_env fg ww2' \<subseteq> mon_ww fg w2" using mon_ww_ileq[OF REVSPLIT(2), of fg] R_CONV(2) by (auto simp add: mon_ww_of_le_rem)
      moreover have "\<alpha>ah (map (\<alpha>nl fg) ww2') \<le> \<alpha>ah (map (\<alpha>n fg) w2)" using REVSPLIT(2) R_CONV(2) by (auto simp add: \<alpha>n_\<alpha>nl[symmetric] le_list_map map_map[symmetric] simp del: map_map intro: \<alpha>ah_ileq del: predicate2I)
      ultimately show thesis using that REVSPLIT(1) by (blast intro: order_trans)
    qed
    from S_ENTRY_PAT[of "{#q'#}", simplified] RU(1) have S_ENTRY: "(v, mon_w fg w, {#q'#}) \<in> S_cs fg 1" by simp
    have "(u, mon fg p \<union> mon_w fg w \<union> Ml, Me \<union> Ml' \<union> Me') \<in> RUV_cs fg U V" proof (rule RUV_split_el[OF FS_FMT(2,4) S_ENTRY _ RV(1) RU(2)])
      from MON_PU MON1_LEQ MON2_LEQ RV(3) RU(3,4) show "(mon_n fg u \<union> mon fg p) \<inter> (Me \<union> Ml' \<union> Me') = {}" by blast
    next
      from ah_interleavable1[OF LESPLIT(1)] have "\<alpha>ah (map (\<alpha>nl fg) w1) [*] \<alpha>ah (map (\<alpha>n fg) w2)" by simp
      thus "h [*] h'" using RV(4) RU(5) by (auto elim: ah_leq_il) 
    qed (simp)
    moreover have "mon fg p \<union> mon_w fg w \<union> Ml \<subseteq> mon_loc fg (ee # ww)" using FS_FMT(1) MON1_LEQ RV(2) by (simp) blast
    moreover have "Me \<union> Ml' \<union> Me' \<subseteq> mon_env fg (ee # ww)" using MON1_LEQ MON2_LEQ RV(3) RU(3,4) by (simp) blast
    ultimately show ?thesis by blast
  qed
qed
   
lemma (in flowgraph) RUV_precise: "(u,Ml,Me)\<in>RUV_cs fg U V 
  \<Longrightarrow> \<exists>w s' c'. 
    (([u],{#}),w,(s',c'))\<in>trcl (ntrp fg) \<and> 
    atUV U V ({#s'#}+c') \<and> 
    mon_loc fg w = Ml \<and> 
    mon_env fg w = Me"
proof (induct rule: RUV_cs.induct)
  case (RUV_call u p u' v M P Ml Me) then obtain ww s' c' where IH: "(([v], {#}), ww, s', c') \<in> trcl (ntrp fg)" "atUV U V ({#s'#} + c')" "mon_loc fg ww = Ml" "mon_env fg ww = Me" by blast
  from S_precise_ntrp[OF RUV_call(3,2,1), simplified] obtain w ch where FS: "(([u], {#}), LOC (LCall p # w), [v, u'], ch) \<in> ntrp fg" "P = {#}" "M = mon_w fg w"  "mon_n fg v = mon fg p" "mon_c fg ch = {}" by blast
  note FS(1)
  also have "(([v, u'], ch), ww, s' @ [u'], c' + ch) \<in> trcl (ntrp fg)" 
    using ntrp_add_context[OF ntrp_stack_comp[OF IH(1), of "[u']"], of ch, simplified] FS(5) IH(4) RUV_call.hyps(6) mon_n_same_proc[OF edges_part[OF RUV_call.hyps(1)]] by simp
  finally have "(([u], {#}), LOC (LCall p # w) # ww, s' @ [u'], c' + ch) \<in> trcl (ntrp fg)" .
  moreover from IH(2) have "atUV U V ({#s' @ [u']#}+(c'+ch))" by auto
  moreover have "mon_loc fg (LOC (LCall p # w) # ww) = mon fg p \<union> M \<union> Ml" using IH(3) FS(3) by auto
  moreover have "mon_env fg (LOC (LCall p # w) # ww) = Me" using IH(4) by auto
  ultimately show ?case by blast
next
  case (RUV_spawn u p u' v M P q Ml Me) then obtain ww s' c' where IH: "(([entry fg q], {#}), ww, s', c') \<in> trcl (ntrp fg)" "atUV U V ({#s'#} + c')" "mon_loc fg ww = Ml" "mon_env fg ww = Me" by blast
  from S_precise_ntrp[OF RUV_spawn(3,2,1), simplified] mset_size1elem[OF _ RUV_spawn(4)] obtain w che where 
    FS: "(([u], {#}), LOC (LCall p # w), [v, u'], {#[entry fg q]#} + che) \<in> ntrp fg" "P={#q#}" "M = mon_w fg w" "mon_n fg v = mon fg p" "mon_c fg ({#[entry fg q]#}+che) = {}" by (auto elim: mset_le_addE)
  moreover
  have "(([v, u'], che + {#[entry fg q]#}), map ENV (map le_rem_s ww), ([v,u'],che+({#s'#} + c')))\<in>trcl (ntrp fg)" 
    using ntr2ntrp[OF gtrp2gtr[OF IH(1)], of "[v,u']" che] IH(3,4) RUV_spawn(7) FS(4,5) mon_n_same_proc[OF edges_part[OF RUV_spawn(1)]]
    by (auto simp add: mon_c_unconc mon_ww_of_le_rem)
  ultimately have "(([u], {#}), LOC (LCall p # w) # map ENV (map le_rem_s ww), ([v,u'],che+({#s'#} + c'))) \<in> trcl (ntrp fg)" by (auto simp add: union_ac)
  moreover have "atUV U V ({#[v,u']#} + (che+({#s'#} + c')))" using IH(2) by auto
  moreover have "mon_loc fg (LOC (LCall p # w) # map ENV (map le_rem_s ww)) = mon fg p \<union> M" using FS(3) by (simp del: map_map)
  moreover have "mon_env fg (LOC (LCall p # w) # map ENV (map le_rem_s ww)) = Ml \<union> Me" using IH(3,4) by (auto simp add: mon_ww_of_le_rem simp del: map_map)
  ultimately show ?case by blast
next
  case (RUV_split_le u p u' v M P q Ml Me h Ml' Me' h')
  from S_precise_ntrp[OF RUV_split_le(3,2,1), simplified] mset_size1elem[OF _ RUV_split_le(4)] obtain w che where 
    FS: "(([u], {#}), LOC (LCall p # w), [v, u'], {#[entry fg q]#} + che) \<in> ntrp fg" "P={#q#}" "M = mon_w fg w" "mon_n fg v = mon fg p" "mon_c fg ({#[entry fg q]#}+che) = {}" by (auto elim: mset_le_addE)
  from RU_precise[OF RUV_split_le(5)] obtain ww1 s1' c1' where P1: "(([v], {#}), ww1, s1', c1') \<in> trcl (ntrp fg)" "atU U ({#s1'#} + c1')" "mon_loc fg ww1 = Ml" "mon_env fg ww1 = Me" "\<alpha>ah (map (\<alpha>nl fg) ww1) = h" by blast
  from RU_precise[OF RUV_split_le(6)] obtain ww2 s2' c2' where P2: "(([entry fg q], {#}), ww2, s2', c2') \<in> trcl (ntrp fg)" "atU V ({#s2'#} + c2')" "mon_loc fg ww2 = Ml'" "mon_env fg ww2 = Me'" "\<alpha>ah (map (\<alpha>nl fg) ww2) = h'" by blast
  from P2(5) have "\<alpha>ah (map (\<alpha>nl fg) (map ENV (map le_rem_s ww2))) = h'" by (simp add: \<alpha>n_\<alpha>nl o_assoc)
  with P1(5) RUV_split_le(8) obtain ww where IL: "ww\<in>ww1\<otimes>\<^bsub>\<alpha>nl fg\<^esub>(map ENV (map le_rem_s ww2))" using ah_interleavable2 by (force)
  from ntrp_unsplit[where ca="{#}",OF IL P1(1) gtrp2gtr[OF P2(1)], simplified] have "(([v], {#[entry fg q]#}), ww, s1', c1' + ({#s2'#} + c2')) \<in> trcl (ntrp fg)" 
    using FS(4,5) RUV_split_le(7)
    by (auto simp add: mon_c_unconc mon_ww_of_le_rem P2(3,4))
  from ntrp_add_context[OF ntrp_stack_comp[OF this, of "[u']"], of che] have "(([v] @ [u'], {#[entry fg q]#} + che), ww, s1' @ [u'], c1' + ({#s2'#} + c2') + che) \<in> trcl (ntrp fg)"
    using mon_n_same_proc[OF edges_part[OF RUV_split_le(1)]] mon_loc_cil[OF IL, of fg] mon_env_cil[OF IL, of fg] FS(4,5) RUV_split_le(7) by (auto simp add: mon_c_unconc P1(3,4) P2(3,4) mon_ww_of_le_rem simp del: map_map)
  with FS(1) have "(([u], {#}), LOC (LCall p # w) # ww, (s1' @ [u'], c1' + ({#s2'#} + c2') + che))\<in>trcl (ntrp fg)" by simp
  moreover have "atUV U V ({#s1' @ [u']#}+(c1' + ({#s2'#} + c2') + che))" using P1(2) P2(2) by auto
  moreover have "mon_loc fg (LOC (LCall p # w) # ww) = mon fg p \<union> M \<union> Ml" using FS(3) P1(3) mon_loc_cil[OF IL, of fg] by (auto simp del: map_map)
  moreover have "mon_env fg (LOC (LCall p # w) # ww) = Me \<union> Ml' \<union> Me'" using P1(4) P2(3,4) mon_env_cil[OF IL, of fg] by (auto simp add: mon_ww_of_le_rem simp del: map_map)
  ultimately show ?case by blast
next
  from S_precise_ntrp[OF RUV_split_el(3,2,1), simplified] mset_size1elem[OF _ RUV_split_el(4)] obtain w che where 
    FS: "(([u], {#}), LOC (LCall p # w), [v, u'], {#[entry fg q]#} + che) \<in> ntrp fg" "P={#q#}" "M = mon_w fg w" "mon_n fg v = mon fg p" "mon_c fg ({#[entry fg q]#}+che) = {}" by (auto elim: mset_le_addE)
  from RU_precise[OF RUV_split_el(5)] obtain ww1 s1' c1' where P1: "(([v], {#}), ww1, s1', c1') \<in> trcl (ntrp fg)" "atU V ({#s1'#} + c1')" "mon_loc fg ww1 = Ml" "mon_env fg ww1 = Me" "\<alpha>ah (map (\<alpha>nl fg) ww1) = h" by blast
  from RU_precise[OF RUV_split_el(6)] obtain ww2 s2' c2' where P2: "(([entry fg q], {#}), ww2, s2', c2') \<in> trcl (ntrp fg)" "atU U ({#s2'#} + c2')" "mon_loc fg ww2 = Ml'" "mon_env fg ww2 = Me'" "\<alpha>ah (map (\<alpha>nl fg) ww2) = h'" by blast
  from P2(5) have "\<alpha>ah (map (\<alpha>nl fg) (map ENV (map le_rem_s ww2))) = h'" by (simp add: \<alpha>n_\<alpha>nl o_assoc)
  with P1(5) RUV_split_el(8) obtain ww where IL: "ww\<in>ww1\<otimes>\<^bsub>\<alpha>nl fg\<^esub>(map ENV (map le_rem_s ww2))" using ah_interleavable2 by (force)
  from ntrp_unsplit[where ca="{#}",OF IL P1(1) gtrp2gtr[OF P2(1)], simplified] have "(([v], {#[entry fg q]#}), ww, s1', c1' + ({#s2'#} + c2')) \<in> trcl (ntrp fg)" 
    using FS(4,5) RUV_split_el(7)
    by (auto simp add: mon_c_unconc mon_ww_of_le_rem P2(3,4))
  from ntrp_add_context[OF ntrp_stack_comp[OF this, of "[u']"], of che] have "(([v] @ [u'], {#[entry fg q]#} + che), ww, s1' @ [u'], c1' + ({#s2'#} + c2') + che) \<in> trcl (ntrp fg)"
    using mon_n_same_proc[OF edges_part[OF RUV_split_el(1)]] mon_loc_cil[OF IL, of fg] mon_env_cil[OF IL, of fg] FS(4,5) RUV_split_el(7) by (auto simp add: mon_c_unconc P1(3,4) P2(3,4) mon_ww_of_le_rem simp del: map_map)
  with FS(1) have "(([u], {#}), LOC (LCall p # w) # ww, (s1' @ [u'], c1' + ({#s2'#} + c2') + che))\<in>trcl (ntrp fg)" by simp
  moreover have "atUV U V ({#s1' @ [u']#}+(c1' + ({#s2'#} + c2') + che))" using P1(2) P2(2) by auto
  moreover have "mon_loc fg (LOC (LCall p # w) # ww) = mon fg p \<union> M \<union> Ml" using FS(3) P1(3) mon_loc_cil[OF IL, of fg] by (auto simp del: map_map)
  moreover have "mon_env fg (LOC (LCall p # w) # ww) = Me \<union> Ml' \<union> Me'" using P1(4) P2(3,4) mon_env_cil[OF IL, of fg] by (auto simp add: mon_ww_of_le_rem simp del: map_map)
  ultimately show ?case by blast
next
  case (RUV_split_ee u p u' v M P q q' Ml Me h Ml' Me' h')
  from S_precise_ntrp[OF RUV_split_ee(3,2,1), simplified] mset_size2elem[OF _ RUV_split_ee(4)] obtain w che where 
    FS: "(([u], {#}), LOC (LCall p # w), [v, u'], {#[entry fg q]#} + {#[entry fg q']#} + che) \<in> ntrp fg" "P={#q#}+{#q'#}" "M = mon_w fg w" "mon_n fg v = mon fg p" "mon_c fg ({#[entry fg q]#}+{#[entry fg q']#}+che) = {}" 
    by (auto elim: mset_le_addE)
  from RU_precise[OF RUV_split_ee(5)] obtain ww1 s1' c1' where P1: "(([entry fg q], {#}), ww1, s1', c1') \<in> trcl (ntrp fg)" "atU U ({#s1'#} + c1')" "mon_loc fg ww1 = Ml" "mon_env fg ww1 = Me" "\<alpha>ah (map (\<alpha>nl fg) ww1) = h" by blast
  from RU_precise[OF RUV_split_ee(6)] obtain ww2 s2' c2' where P2: "(([entry fg q'], {#}), ww2, s2', c2') \<in> trcl (ntrp fg)" "atU V ({#s2'#} + c2')" "mon_loc fg ww2 = Ml'" "mon_env fg ww2 = Me'" "\<alpha>ah (map (\<alpha>nl fg) ww2) = h'" by blast

  from P1(5) P2(5) have "\<alpha>ah (map (\<alpha>n fg) (map le_rem_s ww1)) = h" "\<alpha>ah (map (\<alpha>n fg) (map le_rem_s ww2)) = h'" by (auto simp add: \<alpha>n_\<alpha>nl o_assoc)
  with RUV_split_ee(8) obtain ww where IL: "ww \<in> (map le_rem_s ww1) \<otimes>\<^bsub>\<alpha>n fg\<^esub> (map le_rem_s ww2)" using ah_interleavable2 by (force simp del: map_map)
  from ntr_unsplit[OF IL gtrp2gtr[OF P1(1)] gtrp2gtr[OF P2(1)], simplified] have PC: "({#[entry fg q]#} + {#[entry fg q']#}, ww, {#s1'#} + c1' + ({#s2'#} + c2')) \<in> trcl (ntr fg)" using FS(5) by (auto simp add: mon_c_unconc)
  from ntr2ntrp[OF PC(1), of "[v,u']" che] have "(([v, u'], che + ({#[entry fg q]#} + {#[entry fg q']#})), map ENV ww, [v, u'], che + ({#s1'#} + c1' + ({#s2'#} + c2'))) \<in> trcl (ntrp fg)"
    using RUV_split_ee(7) FS(5) mon_ww_cil[OF IL, of fg] FS(4) mon_n_same_proc[OF edges_part[OF RUV_split_ee(1)]] by (auto simp add: mon_c_unconc mon_ww_of_le_rem P1(3,4) P2(3,4))
  with FS(1) have "(([u], {#}), LOC (LCall p # w) # map ENV ww, ([v, u'], che + ({#s1'#} + c1' + ({#s2'#} + c2')))) \<in> trcl (ntrp fg)" by (auto simp add: union_ac)
  moreover have "atUV U V ({#[v, u']#}+(che + ({#s1'#} + c1' + ({#s2'#} + c2'))))" using P1(2) P2(2) by auto
  moreover have "mon_loc fg (LOC (LCall p # w) # map ENV ww) = mon fg p \<union> M" using FS(3) by auto
  moreover have "mon_env fg (LOC (LCall p # w) # map ENV ww) = Ml \<union> Me \<union> Ml' \<union> Me'" using mon_ww_cil[OF IL, of fg] by (auto simp add: P1(3,4) P2(3,4) mon_ww_of_le_rem)
  ultimately show ?case by blast
qed
  
end
