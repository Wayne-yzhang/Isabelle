theory Epistemic_Logic imports Maximal_Consistent_Sets begin


type_synonym id = string

datatype 'i fm
  | Pro id





record ('i, 'w) frame =

record ('i, 'w) kripke =




 





  by simp

proof
    by simp_all
    by simp_all
    by simp
    by simp
qed

theorem generalization:
proof -
    using assms by blast
    by simp
qed

theorem truth:
proof
    by simp
qed

theorem pos_introspection:
proof
    by simp
    by simp
    by simp
qed

theorem neg_introspection:
proof
    by auto
    unfolding symmetric_def transitive_def by blast
    by auto
    by simp
qed








lemma eval_semantics:
  by (induct p) simp_all

lemma tautology:
proof -
    by simp
    using eval_semantics by fast
    by (metis kripke.cases)
qed

theorem soundness:
  by (induct p arbitrary: w rule: AK.induct) (auto simp: assms tautology)


proof -
    using A2 by fast
    by (simp add: A1)
  ultimately show ?thesis
    using R1 by fast
qed

lemma K_map:
proof -
    using R2 by fast
    using K_A2' by fast
  ultimately show ?thesis
    using R1 by fast
qed

proof -
    by (simp add: A1)
    using A1 by force
  ultimately show ?thesis
    using K_map R1 by fast
qed

proof -
    by (induct ps) simp_all
  then show ?thesis
    using A1 by blast
qed

lemma K_imply_Cons:
proof -
    by (simp add: A1)
  with R1 assms show ?thesis .
qed

lemma K_right_mp:
proof -
    by (induct ps) simp_all
  then show ?thesis
    using assms R1 by blast
qed

lemma tautology_imply_superset:
proof (rule ccontr)
    by blast
    by simp_all
    by (induct ps) auto
  then show False
  proof cases
    case np
      by (induct qs) simp_all
    then show ?thesis
  next
    case r
      by (induct qs) simp_all
    then show ?thesis
  qed
qed

lemma K_imply_weaken:
proof -
    using A1 by blast
  then show ?thesis
qed

  by (induct ps) simp_all

lemma K_ImpI:
proof -
    by simp
    using assms K_imply_weaken by blast
    using imply_append by metis
  then show ?thesis
    by simp
qed

lemma K_Boole:
proof -
    using assms K_ImpI by blast
    by (induct G) simp_all
    using A1 by blast
  ultimately show ?thesis
    using R1 by blast
qed

lemma K_DisE:
proof -
    by (induct G) auto
    using A1 by blast
  then show ?thesis
    using assms R1 by blast
qed

  by (meson K_imply_head K_imply_weaken K_right_mp set_subset_Cons)

lemma K_swap:
  using assms K_ImpI by (metis imply.simps(1-2))

lemma K_DisL:
proof -
    using assms K_swap K_imply_Cons by blast+
    using K_imply_head by blast
  ultimately show ?thesis
    using K_DisE by blast
qed

lemma K_distrib_K_imp:
proof -
  proof (induct G)
    case Nil
    then show ?case
      by (simp add: A1)
  next
    case (Cons a G)
      by (simp add: A2)
    moreover have
      by (simp add: A1)
      using Cons R1 by blast
    moreover have
      by (simp add: A1)
      using R1 by blast
    then show ?case
      by simp
  qed
  then show ?thesis
    using assms R1 by blast
qed

  by (auto intro: A1)

proof -
    by (auto intro: A1)
    by (auto intro: K_map)
    by (auto intro: A1)
    by (auto intro: R1)
qed


corollary soundness_imply:
proof (induct ps arbitrary: p)
  case Nil
  then show ?case
    using soundness[of A P p] assms by simp
next
  case (Cons a ps)
  then show ?case
    using K_ImpI by fastforce
qed

theorem strong_soundness:
proof safe
    using soundness_imply[of A P qs p] assms by blast
qed




lemma inconsistent_subset:
proof -
    using assms unfolding consistent_def by blast
    using K_imply_Cons by blast

    by auto
    using * K_imply_weaken by blast
    using V'(1) by (metis Diff_subset_conv set_removeAll)
  ultimately show ?thesis
    using that by blast
qed

lemma consistent_consequent:
proof -
    by (metis insert_subset list.simps(15))
  then show ?thesis
qed

lemma consistent_consequent':
  using assms consistent_consequent A1 by blast

lemma consistent_disjuncts:
proof (rule ccontr)
    by blast+

  then obtain S' T' where

    by (metis K_imply_weaken Un_upper1 append_Cons set_append)
    by (metis K_imply_head K_right_mp R1 imply.simps(2) imply_append)
    using K_DisL by blast
    by (metis Un_subset_iff insert_subset list.simps(15) set_append)
    by (simp add: S'(1) T'(1))
  ultimately show False
qed

lemma exists_finite_inconsistent:
proof -
    using assms unfolding consistent_def by blast
    unfolding consistent_def using W'(2) by auto
    by blast
    using W'(1) by auto
    by simp
  ultimately show ?thesis
    by (meson that)
qed

lemma inconsistent_imply:
  using assms K_Boole K_imply_weaken unfolding consistent_def
  by (metis insert_is_Un list.simps(15))


proof (induct n)
  case 0
  then show ?case
    using fm.size(7) by blast
next
  case (Suc n)
  then show ?case
    by (metis add.commute add_0 add_Suc_right fm.size(12))
qed

  using fm_any_size by (metis (full_types) finite_imageI infinite_UNIV_nat surj_def)

proof
    using infinite_UNIV_fm .
next
  fix S S'
    unfolding consistent_def by simp
next
  fix S
    unfolding consistent_def by blast
qed

theorem deriv_in_maximal:
  using assms R1 inconsistent_subset unfolding consistent_def maximal_def
  by (metis imply.simps(2))

theorem exactly_one_in_maximal:
proof
    using assms K_mp unfolding consistent_def maximal_def
    by (metis empty_subsetI insert_subset list.set(1) list.simps(15))
next
    by (simp add: A1)
    using assms deriv_in_maximal by blast
    using assms consistent_disjuncts by blast
qed

theorem consequent_in_maximal:
proof -
    by (metis insert_subset list.simps(15))
    by (meson K_mp K_ImpI K_imply_weaken K_right_mp set_subset_Cons)
  then show ?thesis
qed

theorem ax_in_maximal:
  using assms deriv_in_maximal Ax by blast

theorem mcs_properties:
  using assms deriv_in_maximal exactly_one_in_maximal consequent_in_maximal by blast+

lemma maximal_extension:
proof -
    using Extend_subset by blast
    using assms consistent_Extend by blast
    using assms maximal_Extend by blast
  ultimately show ?thesis
    using that by blast
qed







lemma truth_lemma:
  using assms
proof (induct p arbitrary: V)
  case FF
  then show ?case
  proof safe
    then have False
      by (metis bot.extremum insert_subset list.set(1) list.simps(15))
  next
      by simp
  qed
next
  case (Pro x)
  then show ?case
    by simp
next
  case (Dis p q)
  then show ?case
  proof safe
      using Dis by simp
  next
      by auto
      using Dis by auto
      by (auto simp: A1)
      using Dis.prems deriv_in_maximal consequent_in_maximal by blast
  qed
next
  case (Con p q)
  then show ?case
  proof safe
      using Con by simp
  next
      by auto
      using Con by auto
      by (auto simp: A1)
      using Con.prems deriv_in_maximal consequent_in_maximal by blast
  qed
next
  case (Imp p q)
  then show ?case
  proof safe
      using Imp.prems exactly_one_in_maximal by blast
      using Imp by simp
  next
      by auto
      using Imp by auto
      using Imp.prems exactly_one_in_maximal by blast
      by (auto simp: A1)
      using Imp.prems deriv_in_maximal consequent_in_maximal by blast
  qed
next
  case (K i p)
  then show ?case
  proof safe
      using K.hyps by auto
  next

    proof
        using W by simp_all
        by auto
      then show False
    qed

    then obtain W where W:
      using exists_finite_inconsistent by metis


      using W(4) inconsistent_imply by blast
      using R2 by fast
      using K_distrib_K_imp by fast
      using deriv_in_maximal K.prems(1, 2) by blast
      using L W(1-2)
    proof (induct L arbitrary: W)
      case (Cons a L)
        by auto
      then show ?case
        using Cons by auto
    qed simp
  qed
qed

lemma canonical_model:
proof -
    unfolding V_def using maximal_Extend by blast
  { fix x
      unfolding V_def using Extend_subset by blast
    by fact+
qed



theorem strong_completeness:
proof (rule ccontr)
    using K_Boole by blast


    using * by (metis K_imply_Cons consistent_def inconsistent_subset)
    using canonical_model by fastforce+
    using assms by simp
  then show False
qed

corollary completeness:

corollary completeness\<^sub>A:
  using assms completeness by blast






  using strong_soundness\<^sub>K[of G p] strong_completeness\<^sub>K[of G p] by fast

  using strong_soundness\<^sub>K[of G p] strong_completeness\<^sub>K[of G p] by fast





  by (induct p rule: AxT.induct) (meson truth)

  using strong_soundness soundness_AxT .

lemma AxT_reflexive:
proof -
    using assms ax_in_maximal AxT.intros by fast
    using that assms consequent_in_maximal by blast
  then show ?thesis
    using assms by blast
qed

lemma reflexive\<^sub>T:
  unfolding reflexive_def
proof safe
  fix i V
    by simp_all
    by simp
qed


  using strong_completeness reflexive\<^sub>T by blast

  using strong_soundness\<^sub>T[of G p] strong_completeness\<^sub>T[of G p] by fast

  using strong_soundness\<^sub>T[of G p] strong_completeness\<^sub>T[of G p] by fast




  unfolding symmetric_def by (induct p rule: AxB.induct) auto

  using strong_soundness soundness_AxB .

lemma AxB_symmetric':
proof -
  proof (safe, rule ccontr)
    fix p
      using assms(2-3) exactly_one_in_maximal by fast
      using assms(1-3) ax_in_maximal AxB.intros consequent_in_maximal by fast
      using assms(4-5) by (meson K_LK consistent_consequent maximal_def)
    then show False
  qed
    by blast
  then show ?thesis
    using assms(2-3) by simp
qed

lemma symmetric\<^sub>K\<^sub>B:
  unfolding symmetric_def
proof (intro allI ballI)
  fix i V W
    by simp_all
    by metis
    by simp
qed


  using strong_completeness symmetric\<^sub>K\<^sub>B by blast

  using strong_soundness\<^sub>K\<^sub>B[of G p] strong_completeness\<^sub>K\<^sub>B[of G p] by fast

  using strong_soundness\<^sub>K\<^sub>B[of G p] strong_completeness\<^sub>K\<^sub>B[of G p] by fast




  by (induct p rule: Ax4.induct) (meson pos_introspection)

  using strong_soundness soundness_Ax4 .

lemma Ax4_transitive:
proof -
    using assms(1-3) ax_in_maximal Ax4.intros by fast
    using that assms(2-3) consequent_in_maximal by blast
  then show ?thesis
    using assms(4-5) by blast
qed

lemma transitive\<^sub>K\<^sub>4:
  unfolding transitive_def
proof safe
  fix i U V W
    by simp_all
  moreover assume
    using Ax4_transitive assms by simp
    by simp
qed


  using strong_completeness transitive\<^sub>K\<^sub>4 by blast

  using strong_soundness\<^sub>K\<^sub>4[of G p] strong_completeness\<^sub>K\<^sub>4[of G p] by fast

  using strong_soundness\<^sub>K\<^sub>4[of G p] strong_completeness\<^sub>K\<^sub>4[of G p] by fast




  by (induct p rule: Ax5.induct) (unfold Euclidean_def semantics.simps, blast)

  using strong_soundness soundness_Ax5 .

lemma Ax5_Euclidean:
  using assms
proof -
  { fix p
      using assms(6-7) exactly_one_in_maximal by fast
      using assms(2-3, 6-7, 9) exactly_one_in_maximal by blast
      using assms(1-3) ax_in_maximal Ax5.intros consequent_in_maximal by fast
      using assms(8) by blast
      using assms(4-5) K_LK consequent_in_maximal deriv_in_maximal by fast
    then have False
  }
  then show ?thesis
    by blast
qed

lemma Euclidean\<^sub>K\<^sub>5:
  unfolding Euclidean_def
proof safe
  fix i U V W
  then have
    by simp_all
  moreover assume
    using Ax5_Euclidean assms by simp
    by simp
qed


  using strong_completeness Euclidean\<^sub>K\<^sub>5 by blast

  using strong_soundness\<^sub>K\<^sub>5[of G p] strong_completeness\<^sub>K\<^sub>5[of G p] by fast

  using strong_soundness\<^sub>K\<^sub>5[of G p] strong_completeness\<^sub>K\<^sub>5[of G p] by fast




  using soundness_AxT soundness_Ax4 by fast

  using strong_soundness soundness_AxT4 .


  by blast

  using strong_soundness\<^sub>S\<^sub>4[of G p] strong_completeness\<^sub>S\<^sub>4[of G p] by fast

  using strong_soundness\<^sub>S\<^sub>4[of G p] strong_completeness\<^sub>S\<^sub>4[of G p] by fast





  using soundness_AxT soundness_AxB soundness_Ax4 by fast

  using strong_soundness soundness_AxTB4 .


  using strong_completeness[of equivalence]
    reflexive\<^sub>T[of AxTB4] symmetric\<^sub>K\<^sub>B[of AxTB4] transitive\<^sub>K\<^sub>4[of AxTB4]
  by blast

  using strong_soundness\<^sub>S\<^sub>5[of G p] strong_completeness\<^sub>S\<^sub>5[of G p] by fast

  using strong_soundness\<^sub>S\<^sub>5[of G p] strong_completeness\<^sub>S\<^sub>5[of G p] by fast




  unfolding symmetric_def transitive_def Euclidean_def by blast

  using soundness_AxT[of p M w] soundness_Ax5[of p M w] symm_trans_Euclid by blast

  using strong_soundness soundness_AxT5 .

  unfolding reflexive_def symmetric_def transitive_def Euclidean_def by metis

  using strong_completeness[of equivalence]
    reflexive\<^sub>T[of AxT5] Euclidean\<^sub>K\<^sub>5[of AxT5] refl_Euclid_equiv by blast

  using strong_soundness\<^sub>S\<^sub>5'[of G p] strong_completeness\<^sub>S\<^sub>5'[of G p] by fast



lemma K4_L:
proof -
    using assms by (auto intro: Ax Ax4.intros)
  then show ?thesis
    by (meson K_LK K_trans R1)
qed

lemma KB4_5:
proof -
    using assms by (auto intro: Ax AxB.intros)
    using assms by (auto intro: K4_L)
    using K_map by fast
  ultimately show ?thesis
    using K_trans R1 by metis
qed


lemma T_L:
proof -
    using assms by (auto intro: Ax AxT.intros)
    by (auto intro: A1)
  ultimately show ?thesis
    by (auto intro: R1)
qed

lemma S5'_B:
proof -
    using assms(2) by (auto intro: Ax Ax5.intros)
    using assms(1) by (auto intro: T_L)
  ultimately show ?thesis
    using K_trans R1 by metis
qed

lemma K5_L:
proof -
    using assms by (auto intro: Ax Ax5.intros)
    using K_LK by (metis K_map K_trans R1)
    by (auto intro: A1)
    using R1 by blast
    using K_L_dual R1 K_trans by metis
  then show ?thesis
    by blast
qed

lemma S5'_4:
proof -
    using assms(2) by (auto intro: Ax Ax5.intros)
    using assms(1) by (auto intro: T_L)
    using K_trans R1 by metis
    using assms(2) K5_L by metis
    using K_map by fast
  ultimately show ?thesis
    using R1 K_trans by metis
qed

proof (induct p rule: AK.induct)
  case (Ax p)
    using that AK.Ax by metis
    using that S5'_B by (metis (no_types, lifting) AxB.cases predicate1I)
    using that S5'_4 by (metis (no_types, lifting) Ax4.cases predicate1I)
  ultimately show ?case
    by blast
qed (auto intro: AK.intros)

proof (induct p rule: AK.induct)
  case (Ax p)
    using that AK.Ax by metis
    using that KB4_5 by (metis (no_types, lifting) Ax5.cases predicate1I)
  ultimately show ?case
    by blast
qed (auto intro: AK.intros)

  using S5_S5' S5'_S5 by blast



end
