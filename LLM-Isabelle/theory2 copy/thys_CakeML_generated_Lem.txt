theory "Lem"

imports
         LemExtraDefs
         "HOL-Library.Word"
         "Word_Lib.Reversed_Bit_Lists"
begin

type_synonym numeral = nat


abbreviation (input) "map_find k m \<equiv> the (m k)"
abbreviation (input) "map_update k v m \<equiv> m (k \<mapsto> v)"
abbreviation (input) "map_remove k m \<equiv> m |` (- {k})"
abbreviation (input) "map_any P m \<equiv> \<exists> (k, v) \<in> map_to_set m. P k v"
abbreviation (input) "map_all P m \<equiv> \<forall> (k, v) \<in> map_to_set m. P k v"


abbreviation (input) "list_mem e l \<equiv> (e \<in> set l)"
abbreviation (input) "list_forall P l \<equiv> (\<forall>e\<in>set l. P e)"
abbreviation (input) "list_exists P l \<equiv> (\<exists>e\<in>set l. P e)"
abbreviation (input) "list_unzip l \<equiv> (map fst l, map snd l)"


abbreviation (input) "set_filter P (s::'a set) \<equiv> {x \<in> s. P x}"
abbreviation (input) "set_bigunion S \<equiv> \<Union> S"
abbreviation (input) "set_biginter S \<equiv> \<Inter> S"





consts
  bitwise_xor :: "nat \<Rightarrow> nat \<Rightarrow> nat"
  num_asr :: "nat \<Rightarrow> nat \<Rightarrow> nat"
  num_lsl :: "nat \<Rightarrow> nat \<Rightarrow> nat"
  bitwise_or :: "nat \<Rightarrow> nat \<Rightarrow> nat"
  bitwise_not :: "nat \<Rightarrow> nat"
  bitwise_and :: "nat \<Rightarrow> nat \<Rightarrow> nat"


definition word_update :: "'a::len word \<Rightarrow> nat \<Rightarrow> nat \<Rightarrow> 'b::len word \<Rightarrow> 'a word" where
  "word_update v lo hi w =
    (let sz = size v in
    of_bl (take (sz-hi-1) (to_bl v) @ to_bl w @ drop (sz-lo) (to_bl v)))"

end
