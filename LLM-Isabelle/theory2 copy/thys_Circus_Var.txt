theory Var
imports Main
begin


type_synonym ('a, 'r) var = "('r \<Rightarrow> 'a) * (('a \<Rightarrow> 'a) \<Rightarrow> 'r \<Rightarrow> 'r)"


definition lookup :: "('a, 'r) var \<Rightarrow> 'r \<Rightarrow> 'a"
  where "lookup f \<equiv> (fst f)"


definition assign :: "('a, 'r) var \<Rightarrow> 'a \<Rightarrow> 'r \<Rightarrow> 'r"
  where "assign f v \<equiv> (snd f) (\<lambda> _ . v)"


syntax "_VAR" :: "id \<Rightarrow> ('a, 'r) var"  ("VAR _")
translations "VAR x" => "(x, _update_name x)"

end
