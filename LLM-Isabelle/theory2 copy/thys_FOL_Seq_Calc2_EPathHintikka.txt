theory EPathHintikka imports Hintikka ProverLemmas begin






  by (induct n) (auto elim: epath.cases)

proof (induct n arbitrary: s)
  case (Suc n)
  then show ?case
    by (metis in_mono sdrop_simps(2) stl_sset subsetI)
qed simp


lemma epath_eff:
  using assms by (metis (mono_tags, lifting) epath.simps eff_def)

lemma effect_tms:
  using assms by (smt (verit, best) effect.simps fempty_iff fimageE prod.simps(1))

lemma epath_effect:
  using assms epath_eff effect_tms
  by (metis (mono_tags, lifting) eff_def fst_conv prod.collapse snd_conv)

lemma epath_stl_ptms:
  using assms epath_effect
  by (metis (mono_tags) eff_def effect_tms epath_eff pseq_def ptms_def surjective_pairing)

lemma epath_sdrop_ptms:
  using assms
proof (induct n)
  case (Suc n)
    using epath_sdrop by blast
  then show ?case
    using Suc epath_stl_ptms by fastforce
qed simp


lemma ev_prefix_sdrop:
  using assms
proof (induct xs)
  case (base xs)
  then show ?case
    by (metis list.pred_inject(1) sdrop.simps(1) stake.simps(1))
next
  case (step xs)
  then show ?case
    by (metis holds.elims(1) list.pred_inject(2) list_all_simps(2) sdrop.simps(1-2) stake.simps(1-2))
qed

lemma ev_prefix:
  using assms ev_prefix_sdrop by (metis stake_sdrop)

  by (simp add: RuleSystem_Defs.enabled_def eff_def)

lemma epath_preserves_unaffected:
  using assms
proof (induct pre arbitrary: steps)
  case Nil
  then show ?case
    by simp
next
  case (Cons q pre)
  from this(3) show ?case
  proof cases
    case (epath sl)
    from this(2-4) show ?thesis
      using Cons(1-2, 4-5) effect_preserves_unaffected unfolding eff_def pseq_def list_all_def
      by (metis (no_types, lifting) list.sel(1) list.set_intros(1-2) prod.exhaust_sel
          shift.simps(2) shift_simps(1) stream.sel(2))
  qed
qed



  using pseq_def tree_fms_def by blast

  unfolding pseq_def tree_fms_def using sset_range[of steps] by simp

  by (simp add: RuleSystem_Defs.Saturated_def alw_iff_sdrop saturated_def)


lemma Saturated_ev_rule:
proof -
    by (metis rules_repeat snth_sset)
    unfolding Saturated_def by fast
  then show ?thesis
    unfolding saturated_def using always_enabledAtStep holds.elims(3) by blast
qed

lemma epath_never_branchDone:
proof (rule ccontr)
    by (simp add: alw_iff_sdrop ev_iff_sdrop)
    using sdrop_wait by blast
    unfolding effect_def using n by simp
    using epath_effect by (metis calculation prod.exhaust_sel pseq_def)
  ultimately show False
    by blast
qed

lemma escape_path_Hintikka:
proof
  fix n ts
    using tree_fms_in_pseq by auto

  proof
      using tree_fms_in_pseq by auto


    have
      unfolding affects_def by (cases r, simp_all)+

      unfolding list_all_def using 1 by (induct ?pre) simp_all
      by (metis (no_types, lifting) list.pred_mono_strong list_all_append
          sdrop_add stake_add stake_sdrop)

      unfolding list_all_def using 2 by (induct ?pre) simp_all
      by (smt (verit, best) add.commute list.pred_mono_strong list_all_append sdrop_add
          stake_add stake_sdrop)

      using p np branchDone_contradiction by auto
    ultimately show False
      by blast
  qed
next
  fix p q
    using tree_fms_in_pseq by auto
  let ?r = AlphaDis
  then obtain pre suf where
    using ev_prefix by blast

    unfolding affects_def by (cases r) simp_all
    using pre by simp
    using epath_preserves_unaffected n ori by metis

  then obtain B z' r' where
    using suf epath_effect unfolding pseq_def ptms_def
    by (metis (mono_tags, lifting) holds.elims(2) prod.collapse)
    using parts_in_effect unfolding parts_def by fastforce+

    using z'(2) ori pseq_in_tree_fms
    by (metis (no_types, opaque_lifting) Un_iff fst_conv pseq_def shd_sset snd_conv sset_sdrop
        sset_shift stl_sset subset_eq)
next
  fix p q
    using tree_fms_in_pseq by auto
  let ?r = AlphaImp
  then obtain pre suf where
    using ev_prefix by blast

    unfolding affects_def by (cases r) simp_all
    using pre by simp
    using epath_preserves_unaffected n ori by metis

  then obtain B z' r' where
    using suf epath_effect unfolding pseq_def ptms_def
    by (metis (mono_tags, lifting) holds.elims(2) prod.collapse)
    using parts_in_effect unfolding parts_def by fastforce+

    using z'(2) ori pseq_in_tree_fms
    by (metis (no_types, opaque_lifting) Un_iff fst_conv pseq_def shd_sset snd_conv sset_sdrop
        sset_shift stl_sset subset_eq)
next
  fix p q
    using tree_fms_in_pseq by auto
  let ?r = AlphaCon
  then obtain pre suf where
    using ev_prefix by blast

    unfolding affects_def by (cases r) simp_all
    using pre by simp
    using epath_preserves_unaffected n ori by metis

  then obtain B z' r' where
    using suf epath_effect unfolding pseq_def ptms_def
    by (metis (mono_tags, lifting) holds.elims(2) prod.collapse)
    using parts_in_effect unfolding parts_def by fastforce+

    using z'(2) ori pseq_in_tree_fms
    by (metis (no_types, opaque_lifting) Un_iff fst_conv pseq_def shd_sset snd_conv sset_sdrop
        sset_shift stl_sset subset_eq)
next
  fix p q
    using tree_fms_in_pseq by auto
  let ?r = BetaCon
  then obtain pre suf where
    using ev_prefix by blast

    unfolding affects_def by (cases r) simp_all
    using pre by simp
    using epath_preserves_unaffected n ori by metis

  then obtain B z' r' where
    using suf epath_effect unfolding pseq_def ptms_def
    by (metis (mono_tags, lifting) holds.elims(2) prod.collapse)
    using parts_in_effect unfolding parts_def by fastforce

    using z'(2) ori pseq_in_tree_fms
    by (metis (no_types, opaque_lifting) Un_iff fst_conv pseq_def shd_sset snd_conv sset_sdrop
        sset_shift stl_sset subset_eq)
next
  fix p q
    using tree_fms_in_pseq by auto
  let ?r = BetaImp
  then obtain pre suf where
    using ev_prefix by blast

    unfolding affects_def by (cases r) simp_all
    using pre by simp
    using epath_preserves_unaffected n ori by metis

  then obtain B z' r' where
    using suf epath_effect unfolding pseq_def ptms_def
    by (metis (mono_tags, lifting) holds.elims(2) prod.collapse)
    using parts_in_effect unfolding parts_def by fastforce

    using z'(2) ori pseq_in_tree_fms
    by (metis (no_types, opaque_lifting) Un_iff fst_conv pseq_def shd_sset snd_conv sset_sdrop
        sset_shift stl_sset subset_eq)
next
  fix p q
    using tree_fms_in_pseq by auto
  let ?r = BetaDis
  then obtain pre suf where
    using ev_prefix by blast

    unfolding affects_def by (cases r) simp_all
    using pre by simp
    using epath_preserves_unaffected n ori by metis

  then obtain B z' r' where
    using suf epath_effect unfolding pseq_def ptms_def
    by (metis (mono_tags, lifting) holds.elims(2) prod.collapse)
    using parts_in_effect unfolding parts_def by fastforce

    using z'(2) ori pseq_in_tree_fms
    by (metis (no_types, opaque_lifting) Un_iff fst_conv pseq_def shd_sset snd_conv sset_sdrop
        sset_shift stl_sset subset_eq)
next
  fix p
    using tree_fms_in_pseq by auto

  let ?r = GammaExi

  proof
    fix t
    proof -
        case True
          unfolding tree_fms_def by (metis pseq_in_tree_fms shd_sset tree_fms_def)
          by simp
          unfolding subterms_def by (metis list.simps(4) remdups_eq_nil_iff)
        then show ?thesis
          using True t unfolding terms_def
          by (metis empty_iff insert_iff list.set_intros(1) sdrop.simps(1))
      next
        case False
          using t unfolding terms_def by (metis (no_types, lifting) UN_E)
          using tree_fms_in_pseq by auto
        then show ?thesis
          using pt(1) set_subterms by fastforce
      qed
        by blast
        by (metis (no_types, opaque_lifting) Un_iff set_append set_remdups)
        using epath_sdrop_ptms by (metis (no_types, lifting) le_Suc_ex sdrop_add sdrop_stl subsetD)
        by (metis Nat.lessE less_irrefl_nat less_trans_Suc linorder_not_less sdrop_simps(2))


        unfolding affects_def by (cases r, simp_all)+

      then obtain pre suf k where
        using ev_prefix_sdrop by blast

        using ori by (meson le_add2 less_add_one order_le_less_trans sdrop_add trans_less_add1)

        unfolding list_all_def using * by (induct ?pre) simp_all
        by (metis (no_types, lifting) list.pred_mono_strong list_all_append
            sdrop_add stake_add stake_sdrop)
        by (metis (no_types, lifting) list.pred_mono_strong pre stake_sdrop)
      then obtain B z' r' where
        using suf epath_effect unfolding pseq_def ptms_def
        by (metis (mono_tags, lifting) holds.elims(2) prod.collapse)

        using above k by (meson le_add2 less_add_one order_le_less_trans)
      then show ?thesis
        using k pseq_in_tree_fms z'(2)
        by (metis Pair_inject in_mono prod.collapse pseq_def shd_sset sset_sdrop stl_sset)
    qed
  qed
next
  fix p
    using tree_fms_in_pseq by auto

  let ?r = GammaUni

  proof
    fix t
    proof -
        case True
          unfolding tree_fms_def by (metis pseq_in_tree_fms shd_sset tree_fms_def)
          by simp
          unfolding subterms_def by (metis list.simps(4) remdups_eq_nil_iff)
        then show ?thesis
          using True t unfolding terms_def
          by (metis empty_iff insert_iff list.set_intros(1) sdrop.simps(1))
      next
        case False
          using t unfolding terms_def by (metis (no_types, lifting) UN_E)
          using tree_fms_in_pseq by auto
        then show ?thesis
          using pt(1) set_subterms by fastforce
      qed
        by blast
        by (metis (no_types, lifting) Un_iff set_append set_remdups)
        using epath_sdrop_ptms by (metis (no_types, lifting) le_Suc_ex sdrop_add sdrop_stl subsetD)
        by (metis Nat.lessE less_irrefl_nat less_trans_Suc linorder_not_less sdrop_simps(2))


        unfolding affects_def by (cases r, simp_all)+

      then obtain pre suf k where
        using ev_prefix_sdrop by blast

        using ori by (meson le_add2 less_add_one order_le_less_trans sdrop_add trans_less_add1)

        unfolding list_all_def using * by (induct ?pre) simp_all
        by (metis (no_types, lifting) list.pred_mono_strong list_all_append
            sdrop_add stake_add stake_sdrop)
        by (metis (no_types, lifting) list.pred_mono_strong pre stake_sdrop)
      then obtain B z' r' where
        using suf epath_effect unfolding pseq_def ptms_def
        by (metis (mono_tags, lifting) holds.elims(2) prod.collapse)

        using above k by (meson le_add2 less_add_one order_le_less_trans)
      then show ?thesis
        using k pseq_in_tree_fms z'(2)
        by (metis Pair_inject in_mono prod.collapse pseq_def shd_sset sset_sdrop stl_sset)
    qed
  qed
next
  fix p
    using tree_fms_in_pseq by auto
  let ?r = DeltaUni
  then obtain pre suf where
    using ev_prefix by blast

    unfolding affects_def by (cases r) simp_all
    using pre by simp
    using epath_preserves_unaffected n ori by metis

  then obtain B z' r' where
    using suf epath_effect unfolding pseq_def ptms_def
    by (metis (mono_tags, lifting) holds.elims(2) prod.collapse)
  ultimately obtain C where
    unfolding parts_def by auto
    using z'(2) ori pseq_in_tree_fms
    by (metis (no_types, lifting) Pair_inject Un_iff in_mono prod.collapse pseq_def shd_sset
        sset_sdrop sset_shift stl_sset)
    case True
      unfolding terms_def using * by (metis UN_I empty_iff)
    then show ?thesis
      using * by blast
  next
    case False
      using sub_const_transfer by metis
      unfolding terms_def by simp
      by blast
    ultimately show ?thesis
      using * by metis
  qed
next
  fix p
    using tree_fms_in_pseq by auto
  let ?r = DeltaExi
  then obtain pre suf where
    using ev_prefix by blast

    unfolding affects_def by (cases r) simp_all
    using pre by simp
    using epath_preserves_unaffected n ori by metis

  then obtain B z' r' where
    using suf epath_effect unfolding pseq_def ptms_def
    by (metis (mono_tags, lifting) holds.elims(2) prod.collapse)
  ultimately obtain C where
    unfolding parts_def by auto
    using z'(2) ori pseq_in_tree_fms
    by (metis (no_types, lifting) Pair_inject Un_iff in_mono prod.collapse pseq_def shd_sset
        sset_sdrop sset_shift stl_sset)
    case True
      unfolding terms_def using * by (metis UN_I empty_iff)
    then show ?thesis
      using * by blast
  next
    case False
      using sub_const_transfer by (metis subtermFm.simps(7))
      unfolding terms_def by simp
      by blast
    ultimately show ?thesis
      using * by metis
  qed
next
  fix p
    using tree_fms_in_pseq by auto
  let ?r = NegNeg
  then obtain pre suf where
    using ev_prefix by blast

    unfolding affects_def by (cases r) simp_all
    using pre by simp
    using epath_preserves_unaffected n ori by metis

  then obtain B z' r' where
    using suf epath_effect unfolding pseq_def ptms_def
    by (metis (mono_tags, lifting) holds.elims(2) prod.collapse)
    using parts_in_effect unfolding parts_def by fastforce

    using z'(2) ori pseq_in_tree_fms
    by (metis (no_types, lifting) Pair_inject Un_iff in_mono prod.collapse pseq_def shd_sset
        sset_sdrop sset_shift stl_sset)
qed

end
