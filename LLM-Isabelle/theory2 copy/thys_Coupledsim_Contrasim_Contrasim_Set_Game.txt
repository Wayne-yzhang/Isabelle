theory Contrasim_Set_Game
imports
  Simple_Game
  Contrasimulation
begin

datatype ('s, 'a) c_set_game_node =
  AttackerNode 's "'s set" |
  DefenderSimNode 'a 's "'s set" |
  DefenderSwapNode 's "'s set"

fun (in lts_tau) c_set_game_moves ::

  simulation_challenge:

  simulation_answer:

  swap_challenge:

  swap_answer:

  c_set_game_moves_no_step:



locale c_set_game =
  lts_tau trans \<tau> +
  simple_game c_set_game_moves c_set_game_defender_node
for
begin

fun strategy_from_mimicking_of_C ::
  where
  
  
   

lemma csg_atknodes_precede_defnodes_in_plays:
  assumes 
proof -
    by (metis list.inject list.sel(1) plays.cases) 
  from assms(1) have def_cases: 
    using c_set_game_defender_node.elims(2) by blast
  then obtain p1 Q where
    by auto
  proof (rule disjE)
    thus ?thesis using  c_set_game_moves.elims(2)[OF mov] c_set_game_node.distinct(5) by auto
  next 
    thus ?thesis using c_set_game_moves.elims(2)[OF mov] c_set_game_node.distinct(5) by auto
  qed
  thus ?thesis using mov by auto
qed

lemma csg_second_play_elem_in_play_set:
  assumes 
  shows
proof - 
    using assms(1) plays.cases no_empty_plays by blast
    using plays.cases by blast 
qed

lemma csg_only_defnodes_move_to_atknodes:
  assumes  
  shows 
proof (cases n0 rule: c_set_game_node.exhaust)
  case (AttackerNode s T)
  then show ?thesis by auto
next
  case (DefenderSimNode a s T)
  then show ?thesis using assms by auto
next
  case (DefenderSwapNode s T)
  then show ?thesis using DefenderSwapNode by auto
qed

lemma c_set_game_strategy_retains_mimicking:
  assumes
  shows
proof (induct arbitrary: n p Q rule: plays_for_0strategy.induct[OF assms(3)])
  case init: 1
    using assms R_is_in_mimicking_of_R set_lifted_def by simp
next
  case p0moved: (2 n0 play) 
  thus ?case
  proof(rule disjE)
    thus ?thesis using p0moved.prems p0moved.hyps(1,2) by blast 
  next
        p0moved.prems(1)
      by blast 
    thus ?case 
    proof (rule disjE)
        using strategy_from_mimicking_of_C.simps(2) by auto
        using strat by (simp add: p0moved.prems(1))
        using csg_atknodes_precede_defnodes_in_plays
              strategy0_plays_subset[OF p0moved.hyps(1)] assms(2,3) n0_def by force
        using csg_second_play_elem_in_play_set strategy0_plays_subset[OF p0moved.hyps(1)]
          assms(3) n0_def
        by (simp add: assms(3))
        using p0moved.hyps(2) ppred_def by blast
        by auto
        unfolding Q_def
        using n0_def p0moved.hyps(4) by auto
    next
      then obtain q Ppred where
        by auto
        using strategy_from_mimicking_of_C.simps(1) by auto
        using strat p0moved.prems by auto
        using csg_atknodes_precede_defnodes_in_plays
          strategy0_plays_subset[OF p0moved.hyps(1)] assms(3) n0_def
        by force
        using csg_second_play_elem_in_play_set strategy0_plays_subset[OF p0moved.hyps(1)]
          assms(3) n0_def
        by simp 
        using p0moved.hyps(2) qpred_def by blast
        using qpred_q_move assms(1,2) mimicking_of_C_guarantees_tau_succ by blast
    qed
  qed
next
  case p1moved: (3 n1 play n1') 
  thus ?case
  proof (rule disjE)
    thus ?case using p1moved.prems p1moved.hyps(1,2) by blast 
  next
      using csg_only_defnodes_move_to_atknodes p1moved.hyps(3, 4) p1moved.prems(1)
        by fastforce
    thus ?case by auto
  qed
qed

lemma contrasim_set_game_complete:
  assumes
  shows
  unfolding player0_winning_strategy_def
proof (safe)
  fix play
    unfolding player1_wins_immediately_def
  proof clarify
    assume A:
    have player0_has_succ_node:
    proof (induct rule: simple_game.plays_for_0strategy.induct[OF A1])
      case init: 1
      then show ?case ..
    next
      case p0moved: (2 n0 play)
        by (meson c_set_game_defender_node.elims(2)) 
        using p0moved.hyps(4) 
        by force 
        by simp
      then show ?case ..
    next
      case p1moved: (3 n1 play n1') 
        using p1moved.hyps by simp
        using c_set_game_defender_node.elims(3) by auto
        by auto
        using p1moved.prems n1_def p1moved.hyps(4)
        by (metis c_set_game_defender_node.elims(2) list.sel(1)
            local.simulation_challenge local.swap_challenge)
      thus ?case
      proof (rule disjE)
          using p1moved.hyps n1_def n1'_def by auto
          using mimicking_of_C_guarantees_action_succ move
          by (metis in_mimicking assms(1) simulation_challenge tau_tau) 
          using A n1'_def by auto
      next
          using p1moved.hyps(4) n1_def by auto
          using in_mimicking mimicking_of_C_guarantees_tau_succ assms(1) by auto
      qed
    qed
    thus ?thesis by auto
  qed
qed

lemma csg_strategy_from_mimicking_of_C_sound:
  assumes
  shows
  unfolding sound_0strategy_def
proof (safe)
  fix n0 play
  assume A:
    by (meson c_set_game_defender_node.elims(2))
  proof(rule disjE)
      using A
      by (metis csg_atknodes_precede_defnodes_in_plays simulation_challenge strategy0_plays_subset)
      by (metis A n0_def csg_atknodes_precede_defnodes_in_plays strategy0_plays_subset)
      using c_set_game_strategy_retains_mimicking[OF assms] A p_def
        assms(2) csg_second_play_elem_in_play_set strategy0_plays_subset
      by fastforce
      by blast 
    from n0_def have strat_succ:
      by auto
    then obtain Q1 where 
      by blast
      by auto
    have next_is_atk:
      using strat_succ Q1_def by auto
    with someI_ex[OF Q1_ex] Q1_def
      by blast
    thus ?thesis using next_is_atk by auto
  next 
      by (metis csg_atknodes_precede_defnodes_in_plays swap_challenge strategy0_plays_subset) 
      by (metis A n0_def csg_atknodes_precede_defnodes_in_plays strategy0_plays_subset)
      using c_set_game_strategy_retains_mimicking[OF assms] A p_def
        csg_second_play_elem_in_play_set strategy0_plays_subset 
      by fastforce 
      using weak_tau_succs_def by auto
      using n0_def by auto
    then obtain q1 where 
    hence q1_def:
      by auto
    with someI_ex[OF q1_ex] have
      by blast
      using weak_tau_succs_def by auto
    thus ?thesis  using n0_def strat q1_def by auto
  qed
qed


lemma csg_move_defsimnode_to_atknode:
  assumes 
  shows
proof - 
    by (metis assms c_set_game_defender_node.elims(2, 3) c_set_game_moves_no_step(1, 6))
    using assms local.simulation_answer by blast
qed

lemma csg_move_defswapnode_to_atknode:
  assumes 
  shows
proof - 
    using assms c_set_game_moves_no_step(3, 4) c_set_game_defender_node.elims(2)
    by metis
    by (meson c_set_game_defender_node.elims(3))
qed

lemma csg_defsimnode_never_stuck: 
proof -
  thus ?thesis using assms by auto
qed

lemma csg_defender_can_simulate_prefix: 
  assumes 
  shows
  using assms(1-3)
proof (induct arbitrary: p1 rule: rev_nonempty_induct[OF assms(1)])
  case single: (1 a)
    using assms(5,6)
    by (metis c_set_game_defender_node.simps(1) list.collapse no_empty_plays 
          plays_for_0strategy.p1move strategy0_plays_subset)
  hence inplay:
    by auto
  then show ?case using inplay by auto
next
  case snoc: (2 a as)
    using list_rev_split[OF snoc.hyps(1)] by auto
    using rev_seq_split[OF snoc.prems(2)] by blast
    using p'_def snoc by auto
  then obtain play p0
    where play_def:
    by auto
  hence
    using as_def by auto
  then obtain n0 where
    by auto
  then obtain n1 where
    using csg_defsimnode_never_stuck by meson
    using csg_move_defsimnode_to_atknode[OF n1_def] by auto
    using n1_def n0_in_play n0_def
    by (metis assms(4) csg_move_defsimnode_to_atknode c_set_game_defender_node.simps(2)
        plays_for_0strategy.simps sound_0strategy_def)
  then obtain n0' where
    n0'_def:
    using p'_step n1_atk
        simulation_challenge play_def(2) steps_concat tau_tau)
    using n1_in_play
    by (simp add: n1_atk plays_for_0strategy.p1move) 
    using n0'_def  by auto
    using as_def by auto
    using word_reachable_via_delay_def by auto
  then show ?case using n0'_is_defSimNode in_play by auto
qed

lemma contrasim_set_game_sound: 
  assumes
  defines
  shows
  unfolding contrasimulation_def
proof (safe) 
  fix p q p1 A
  from this obtain play where
    by auto
    using assms(1) player0_winning_strategy_def by auto
    using player1_wins_immediately_def by auto
  hence Def_not_stuck:
  proof (cases A rule: rev_cases)
    case Nil
      by (metis hd_Cons_tl no_empty_plays play_def strategy0_plays_subset)
      using n0_def n0_move play_def play_hd
      by (metis c_set_game_defender_node.simps(1) play_def 
          plays_for_0strategy.p1move) 
      using assms(2) n0_def sound_0strategy_def
      by (meson c_set_game_defender_node.simps(3) plays_for_0strategy.p0move) 
      by (metis c_set_game_defender_node.elims(2, 3) c_set_game_moves_no_step(3, 4)
          swap_answer n0_def) 
    then show ?thesis using q_tau Nil by auto 
  next
    case (snoc as a)
    then obtain A_play p0 where gotoA:
      using in_dsuccs_implies_word_reachable by auto
    then obtain n0 where
      by auto
      using gotoA snoc by auto
      using n0_def
      by (meson assms(2) c_set_game_defender_node.simps(2) sound_0strategy_def)
      using csg_move_defsimnode_to_atknode n0_def by blast
      using dsuccs_seq_rec.simps(2) by auto
      using snoc by auto
      using n0_def A_play_def n1_move assms(2) csg_move_defsimnode_to_atknode
        plays_for_0strategy.p0move sound_0strategy_def
      by fastforce
      using word_reachable_via_delay_def by auto
      using  swap_challenge tau_tau n1_def by blast
    hence n0'_in_play:
      using n1_in_play by (simp add: n1_def plays_for_0strategy.p1move) 
      using Def_not_stuck n0'_def assms(2) sound_0strategy_def by auto
      by (metis c_set_game_defender_node.cases c_set_game_moves_no_step(3, 7)) 
      using weak_tau_succs_def by auto
      using in_dsuccs_implies_word_reachable by auto
      using word_tau_concat by auto
    from n1'_move in_strat have
      using in_strat plays_for_0strategy.p0move[OF n0'_in_play _ move_f] n0'_def by auto
    thus ?thesis using q_goal by auto
  qed
qed

theorem winning_strategy_in_c_set_game_iff_contrasim:
  shows
proof safe
  fix f
  assume
    using contrasim_set_game_sound by blast
next
  fix C
  thus
    using contrasim_set_game_complete[OF _ _]
      csg_strategy_from_mimicking_of_C_sound[OF _ _]
    by blast
qed

end
end