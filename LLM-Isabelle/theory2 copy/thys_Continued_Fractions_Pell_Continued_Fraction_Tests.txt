theory Pell_Continued_Fraction_Tests
imports
  Pell.Efficient_Discrete_Sqrt
  "HOL-Library.Code_Lazy"
  "HOL-Library.Code_Target_Numeral"
  Pell_Continued_Fraction
  Pell_Lifting
begin

code_lazy_type stream

lemma lnth_code [code]:
 "lnth xs 0 = (if lnull xs then undefined (0 :: nat) else lhd xs)"
 "lnth xs (Suc n) = (if lnull xs then undefined (Suc n) else lnth (ltl xs) n)"
  by (auto simp: lnth.simps split: llist.splits)

value "let c = sqrt_cfrac 1339 in map (cfrac_nth c) [0..<30]"


fun arg_max_list where
  "arg_max_list _ [] = undefined"
| "arg_max_list f (x # xs) = 
     foldl (\<lambda>(x, y) x'. let y' = f x' in if y' > y then (x', y') else (x, y)) (x, f x) xs"


value [code] "sqrt_cfrac_info 17"
value [code] "sqrt_cfrac_info 1339"
value [code] "sqrt_cfrac_info 121"
value [code] "sqrt_nat_period_length 410286423278424"

value [code] "arg_max_list sqrt_nat_period_length [0..<100000]"



value [code] "pell.fund_sol 12"
value [code] "pell.fund_sol 13"
value [code] "pell.fund_sol 61"
value [code] "pell.fund_sol 661"
value [code] "pell.fund_sol 6661"
value [code] "pell.fund_sol 4729494"


value [code] "arg_max_list (fst \<circ> find_fund_sol) [0..<1001]"



value [code] "arg_max_list (fst \<circ> find_fund_sol) [0..<100000]"



fun log10_aux :: "nat \<Rightarrow> nat \<Rightarrow> nat" where
  "log10_aux acc n =
     (if n \<ge> 10000000000 then log10_aux (acc + 10) (n div 10000000000)
      else if n = 0 then acc else log10_aux (Suc acc) (n div 10))"

definition log10 where "log10 = log10_aux 0"

value [code] "map_prod log10 log10 (pell.fund_sol 410286423278424)"

value [code] "map_prod log10 log10 (find_fund_sol_fast 410286423278424)"



value [code] "pell.nth_solution 13 100"
value [code] "pell.nth_solution 4729494 3"

value [code] "stake 10 (pell_solutions 13)"
value [code] "stake 10 (pell_solutions 61)"

value [code] "pell.nth_solution 23 8"

end