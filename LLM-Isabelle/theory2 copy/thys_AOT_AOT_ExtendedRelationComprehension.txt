theory AOT_ExtendedRelationComprehension
  imports AOT_RestrictedVariables
begin


interpretation AOT_ExtendedModel by (standard; auto)

proof(rule "\<rightarrow>I")
  proof (rule "safe-ext"[axiom_inst, THEN "\<rightarrow>E", OF "&I"])
  next
      using 0 "exist-nec"[THEN "\<rightarrow>E"] by blast
      by(rule RM; safe intro!: GEN "\<equiv>I" "\<rightarrow>I" "\<beta>\<rightarrow>C"(2) "\<beta>\<leftarrow>C"(2) "cqt:2")
      using "\<rightarrow>E" by blast
  qed
qed

proof(rule "\<rightarrow>I")
  proof (rule "safe-ext"[axiom_inst, THEN "\<rightarrow>E", OF "&I"])
  next
      using 0 "exist-nec"[THEN "\<rightarrow>E"] "&E"
            "KBasic:3" "df-simplify:2" "intro-elim:3:b" by blast
    moreover AOT_have
      by(rule RM; auto intro!: GEN "\<equiv>I" "\<rightarrow>I" "cqt:2" "&I"
                        intro: "\<beta>\<leftarrow>C"
                         dest: "&E" "\<beta>\<rightarrow>C")
      using "\<rightarrow>E" by blast
  qed
qed

AOT_register_rigid_restricted_type
proof
  AOT_modally_strict {
      by (meson "B\<diamond>" "T\<diamond>" "o-objects-exist:1" "\<rightarrow>E")
  }
next
  AOT_modally_strict {
      by (simp add: "\<rightarrow>I" "cqt:5:a[1]"[axiom_inst, THEN "\<rightarrow>E", THEN "&E"(2)])
  }
next
  AOT_modally_strict {
      by (simp add: GEN "oa-facts:1")
  }
qed

AOT_register_variable_names
  Ordinary: u v r t s


proof -
  proof -
    AOT_modally_strict {
    {
        by (metis "cqt-further:4" "\<rightarrow>E")
      proof (rule GEN; rule "\<equiv>I"; rule "\<rightarrow>I")
        fix F
          using 0[THEN "\<forall>E"(2)] by blast
          by (metis "&I" "raa-cor:1") 
      next
        fix F
          by (metis "\<not>\<not>I" "\<beta>\<rightarrow>C"(2))
          apply (rule 0[THEN "\<forall>E"(1)]) by "cqt:2[lambda]"
          by (metis "&I" "raa-cor:3")
        {
            by (auto intro!: "\<beta>\<leftarrow>C"(1) "cqt:2")
            using 1 by (metis "raa-cor:3")
        }
      qed
        using "ind-nec"[THEN "\<rightarrow>E"] by blast
        by (metis "CBF" "\<rightarrow>E")
    } note indistI = this
    {
        using "&E"(1) "\<exists>I"(2) "\<rightarrow>E" "encoders-are-abstract" by blast
  
      {
        {
          fix F
          {
              using "Ordinary.res-var-bound-reas[BF]"[THEN "\<rightarrow>E"] by simp
                 (auto intro!: "eqE"[THEN "\<equiv>Df", THEN "\<equiv>S"(1), OF "&I"] "cqt:2")
              using 0[THEN "\<forall>E"(2)] "\<equiv>E" "\<rightarrow>E" by meson
              using G_prop "&E" "\<equiv>E" by blast
          }
            by (rule "\<rightarrow>I")
        }
          by (rule GEN)
        proof (rule "raa-cor:2")
            using "Ordinary.res-var-bound-reas[BF]"
                  "Ordinary.res-var-bound-reas[CBF]"
                  "intro-elim:2" apply presburger
            by simp
               (auto intro!: "eqE"[THEN "\<equiv>Df", THEN "\<equiv>S"(1), OF "&I"] "cqt:2")
            by (auto intro!: "eqE"[THEN "\<equiv>\<^sub>d\<^sub>fI"] "cqt:2" RN "&I" GEN "\<rightarrow>I" "\<equiv>I")
        qed
        proof(rule "raa-cor:1")
            using indistinguishable_ord_enc_all[axiom_inst, THEN "\<rightarrow>E", OF "&I",
                      OF "&I", OF "&I", OF "cqt:2[const_var]"[axiom_inst],
                      OF Ax, OF Ay, OF indist, THEN "\<equiv>E"(1), OF xprop].
            using yprop "&I" by blast
        qed
      }
      moreover {
          using Ax notAy "&I" apply blast
          by (simp add: "oa-exist:2")
      }
        by (metis "raa-cor:1")
    }
    moreover {
        by (meson "&E"(2) "encoders-are-abstract" "existential:2[const_var]" "\<rightarrow>E")
        using "\<equiv>E"(1) "oa-contingent:3" by blast
      {
        {
          fix F
          {
                 (auto intro!: "eqE"[THEN "\<equiv>Df", THEN "\<equiv>S"(1), OF "&I"] "cqt:2")
              using 0[THEN "\<forall>E"(2)] "\<equiv>E" "\<rightarrow>E" by meson
              using G_prop "&E" "\<equiv>E" by blast
          }
            by (rule "\<rightarrow>I")
        }
          by (rule GEN)
        proof (rule "raa-cor:2")
            using "\<exists>E"[rotated] by blast
            using F_prop[THEN "&E"(1), THEN "Ordinary.\<forall>E"].
            by (rule Ordinary.GEN)
            by (metis "Ordinary.res-var-bound-reas[BF]" "\<rightarrow>E")
            using x_prop[THEN "\<forall>E"(2), THEN "\<rightarrow>E"] by blast
            using F_prop[THEN "&E"(2)] by (metis "raa-cor:3")
        qed
        proof (rule "raa-cor:1")
            using "cqt-further:4"[THEN "\<rightarrow>E"] by blast
          {
            fix F
            {
                using 0[THEN "\<forall>E"(2)] "&I" "raa-cor:1" by meson
            }
              by (rule "\<rightarrow>I")
          }
            by (rule GEN)
            by (simp add: RN "oth-class-taut:3:a" "universal-cor" "\<rightarrow>I")
            using "\<forall>E"(2) "\<rightarrow>E" by blast
            using G_prop "&E" by (metis "raa-cor:3")
        qed
        proof(rule "raa-cor:1")
            using indistI by blast
            using indistinguishable_ord_enc_ex[axiom_inst, THEN "\<rightarrow>E", OF "&I",
                    OF "&I", OF "&I", OF "cqt:2[const_var]"[axiom_inst],
                    OF Ax, OF Ay, OF indist, THEN "\<equiv>E"(2), OF y_prop]
                x_prop "&I" by blast
        qed
      }
      moreover {
          using "\<or>E"(3) "oa-exist:3" by blast
          using Ox notOy "&I" apply blast
          by (simp add: "oa-exist:1")
      }
        by (metis "raa-cor:1")
    }
      using G_prop by (metis "&I" "\<rightarrow>I" "\<equiv>I" "raa-cor:1")
  }
  qed

  AOT_modally_strict {
    fix x y
      using "ind-nec" "vdash-properties:10" by blast
      using "CBF" "vdash-properties:10" by blast
         (auto intro!: "eqE"[THEN "\<equiv>Df", THEN "\<equiv>S"(1), OF "&I"] "cqt:2")
      by (safe intro!: 1[THEN "\<forall>E"(2), THEN "\<rightarrow>E"] GEN "\<rightarrow>I" RN "\<equiv>I")
    proof(rule "raa-cor:1")
        using "cqt-further:2" "\<rightarrow>E" by blast
        using "\<exists>E"[rotated] by blast
        by (metis "\<equiv>E"(1) "oth-class-taut:1:b")
        using 0[THEN "\<forall>E"(2), THEN "\<rightarrow>E"] 1[THEN "&E"(1)] by blast
        using 1[THEN "&E"(2)] "&I" by blast
        using "&E"(2) "\<equiv>E"(1) "reductio-aa:1" xG by blast
      {
        fix H
        {
            using 1 by (metis "KBasic:3" "con-dis-i-e:1" "con-dis-i-e:2:a"
                              "intro-elim:3:b")
          proof(rule RM)
            AOT_modally_strict {
              proof (safe intro!: "\<rightarrow>I" "eqE"[THEN "\<equiv>\<^sub>d\<^sub>fI"] "&I" "cqt:2" Ordinary.GEN)
                fix u
                  using "eqE"[THEN "\<equiv>\<^sub>d\<^sub>fE"] "&E" by blast+
                  by (auto dest!: "Ordinary.\<forall>E" dest: "\<equiv>E")
              qed
            }
          qed
            using "\<rightarrow>E" by blast
            using 0[THEN "\<forall>E"(2)] "\<rightarrow>E" by blast
            using xG "\<equiv>I" "\<rightarrow>I" by blast
        }
      }
        by (rule GEN)
        using Aux[OF A, OF B] "\<exists>E"[rotated] by blast
        using indist[THEN "\<forall>E"(2), THEN "\<equiv>E"(1), OF F_prop[THEN "&E"(1)]].
        using F_prop[THEN "&E"(2)] by (metis "raa-cor:3")
    qed
  } note 0 = this
  AOT_modally_strict {
    fix x y
      by (metis calculation "cqt-basic:11" "\<equiv>E"(2))
      using 0 "\<equiv>I" "\<rightarrow>I" by auto
  } note 1 = this
    by (safe intro!: RN GEN "\<rightarrow>I" 1 "kirchner-thm:2"[THEN "\<equiv>E"(2)])

  AOT_modally_strict {
    fix x y
      using "ind-nec" "vdash-properties:10" by blast
      using "CBF" "vdash-properties:10" by blast
         (auto intro!: "eqE"[THEN "\<equiv>Df", THEN "\<equiv>S"(1), OF "&I"] "cqt:2")
      by (safe intro!: 1[THEN "\<forall>E"(2), THEN "\<rightarrow>E"] GEN "\<rightarrow>I" RN "\<equiv>I")
    proof(rule "raa-cor:1")
        using "cqt-further:2" "\<rightarrow>E" by blast
        using "\<exists>E"[rotated] by blast
        by (metis "\<equiv>E"(1) "oth-class-taut:1:b")
        using G_prop "\<rightarrow>I" "raa-cor:3" by blast
        using 0[THEN "\<forall>E"(2), THEN "\<rightarrow>E"] 1[THEN "&E"(1)] by blast
        using "&I" by blast
        by (metis "12" "\<equiv>E"(3) "raa-cor:3" yG)
      {
        fix H
        {
            using 1
            by (metis "KBasic:3" "con-dis-i-e:1" "\<rightarrow>I" "intro-elim:3:b"
                      "reductio-aa:1" G_prop)
          proof (rule RM)
            AOT_modally_strict {
              proof (safe intro!: "\<rightarrow>I" "eqE"[THEN "\<equiv>\<^sub>d\<^sub>fI"] "&I" "cqt:2" Ordinary.GEN)
                fix u
                  using "eqE"[THEN "\<equiv>\<^sub>d\<^sub>fE"] "&E" by blast+
                  by (auto dest!: "Ordinary.\<forall>E" dest: "\<equiv>E")
              qed
            }
          qed
            using "\<rightarrow>E" by blast
            using 0[THEN "\<forall>E"(2)] "\<rightarrow>E" by blast
            using 12 "\<equiv>I" "\<rightarrow>I" by (metis "raa-cor:3")
        }
          by (rule "\<rightarrow>I")
      }
        by (rule GEN)
        using Aux[OF A, OF B] "\<exists>E"[rotated] by blast
        using indist[THEN "\<forall>E"(2), THEN "\<equiv>E"(1), OF F_prop[THEN "&E"(1)]].
        using F_prop[THEN "&E"(2)] by (metis "raa-cor:3")
    qed
  } note 0 = this
  AOT_modally_strict {
    fix x y
      by (metis calculation "cqt-basic:11" "\<equiv>E"(2))
      using 0 "\<equiv>I" "\<rightarrow>I" by auto
  } note 1 = this
    by (safe intro!: RN GEN "\<rightarrow>I" 1 "kirchner-thm:2"[THEN "\<equiv>E"(2)])
qed


proof (rule "safe-ext"[axiom_inst, THEN "\<rightarrow>E", OF "&I"])
    using denotes_all_neg[THEN negation_denotes[THEN "\<rightarrow>E"]].
next
       (auto simp: "conventions:1" "rule-eq-df:1"
             intro: "oth-class-taut:4:b"[THEN "\<equiv>E"(2)]
                    "intro-elim:3:f"[OF "cqt-further:3", OF "oth-class-taut:3:b"]
             intro!: RN GEN)
qed

proof (rule "safe-ext"[axiom_inst, THEN "\<rightarrow>E", OF "&I"])
    using denotes_all[THEN negation_denotes[THEN "\<rightarrow>E"]].
next
       (auto simp: "oth-class-taut:1:b"
             intro: "oth-class-taut:4:b"[THEN "\<equiv>E"(2)]
                    "intro-elim:3:f"[OF "cqt-further:3", OF "oth-class-taut:3:b"]
             intro!: RN GEN)
qed


AOT_theorem Comprehension_1:
proof(rule "\<rightarrow>I")
  AOT_modally_strict {
    fix x y
      using "\<exists>E"[rotated] by blast
      by (auto intro!: RN eqE[THEN "\<equiv>\<^sub>d\<^sub>fI"] "&I" "cqt:2" GEN "\<equiv>I" "\<rightarrow>I" dest: "&E")
      by (rule "\<exists>I")
      by (safe intro!: "\<beta>\<leftarrow>C" denotes_ex "cqt:2")
      using indist[THEN "\<forall>E"(1), OF denotes_ex, THEN "\<equiv>E"(1)] by blast
      using "\<beta>\<rightarrow>C" by blast
      using "\<exists>E"[rotated] by blast
      using 0[THEN "\<forall>E"(2), THEN "\<forall>E"(2), THEN "\<rightarrow>E", THEN "\<equiv>E"(1)]
            F_prop[THEN "&E"(1)] "&E" "&I" by blast
      by (rule "\<exists>I")
  } note 1 = this
  AOT_modally_strict {
    {
      fix x y
      {
          by (metis calculation "cqt-basic:11" "\<equiv>E"(1))
          using 0 1[OF 0] "\<equiv>I" "\<rightarrow>I" by simp
      }
        using "\<rightarrow>I" by blast
    }
      by (auto intro!: GEN)
  } note 1 = this
    by (rule "\<rightarrow>I")
    by (rule RM)
    using "\<rightarrow>E" assm by blast
    by (safe intro!: "kirchner-thm:2"[THEN "\<equiv>E"(2)])
qed

AOT_theorem Comprehension_2:
proof(rule "\<rightarrow>I")
  AOT_modally_strict {
    fix x y
      using "\<exists>E"[rotated] by blast
      by (auto intro!: RN eqE[THEN "\<equiv>\<^sub>d\<^sub>fI"] "&I" "cqt:2" GEN "\<equiv>I" "\<rightarrow>I" dest: "&E")
      by (rule "\<exists>I")
      by (safe intro!: "\<beta>\<leftarrow>C" denotes_ex_neg "cqt:2")
      using indist[THEN "\<forall>E"(1), OF denotes_ex_neg, THEN "\<equiv>E"(1)] by blast
      using "\<beta>\<rightarrow>C" by blast
      using "\<exists>E"[rotated] by blast
      using 0[THEN "\<forall>E"(2), THEN "\<forall>E"(2), THEN "\<rightarrow>E", THEN "\<equiv>E"(1)]
            F_prop[THEN "&E"(1)] "&E" "&I" by blast
      by (rule "\<exists>I")
  } note 1 = this
  AOT_modally_strict {
    {
      fix x y
      {
          by (metis calculation "cqt-basic:11" "\<equiv>E"(1))
          using 0 1[OF 0] "\<equiv>I" "\<rightarrow>I" by simp
      }
        using "\<rightarrow>I" by blast
    }
      by (auto intro!: GEN)
  } note 1 = this
    by (rule "\<rightarrow>I")
    by (rule RM)
    using "\<rightarrow>E" assm by blast
    by (safe intro!: "kirchner-thm:2"[THEN "\<equiv>E"(2)])
qed


AOT_theorem Comprehension_1':
proof(rule "\<rightarrow>I")
       (auto simp: "oth-class-taut:4:b")
  proof(rule "safe-ext"[axiom_inst, THEN "\<rightarrow>E", OF "&I"])
      using Comprehension_1[THEN "\<rightarrow>E", OF 0, THEN negation_denotes[THEN "\<rightarrow>E"]].
  next
         (auto simp: "oth-class-taut:1:b"[THEN "intro-elim:3:e",
                                          OF "oth-class-taut:2:a"]
             intro: "intro-elim:3:f"[OF "cqt-further:3", OF "oth-class-taut:3:a",
                                     symmetric]
             intro!: RN GEN)
  qed
qed

AOT_theorem Comprehension_2':
proof(rule "\<rightarrow>I")
  proof(rule "safe-ext"[axiom_inst, THEN "\<rightarrow>E", OF "&I"])
      using Comprehension_2[THEN "\<rightarrow>E", OF 0, THEN negation_denotes[THEN "\<rightarrow>E"]].
  next
         (auto simp: "oth-class-taut:1:b"
             intro: "intro-elim:3:f"[OF "cqt-further:3", OF "oth-class-taut:3:a",
                                     symmetric]
             intro!: RN GEN)
  qed
qed


AOT_theorem Comprehension_3:
proof(rule "\<rightarrow>I")
  proof(rule "safe-ext"[axiom_inst, THEN "\<rightarrow>E", OF "&I"])
      by (safe intro!: conjunction_denotes[THEN "\<rightarrow>E", OF "&I"]
                       Comprehension_1'[THEN "\<rightarrow>E"]
                       Comprehension_2'[THEN "\<rightarrow>E"] 0)
  next
      by (auto intro!: RN GEN "\<equiv>I" "\<rightarrow>I" "&I" dest: "&E" "\<forall>E"(2) "\<rightarrow>E" "\<equiv>E"(1,2))
  qed
qed

notepad
begin
AOT_modally_strict {
  fix x y H
  proof(rule "\<rightarrow>I")
    {
      fix x y
        using "Ordinary.res-var-bound-reas[BF]" "Ordinary.res-var-bound-reas[CBF]"
              "intro-elim:2"
            (safe intro!: "eqE"[THEN "\<equiv>Df", THEN "\<equiv>S"(1), OF "&I"] "cqt:2")
           (auto simp: "oth-class-taut:1:b" "cqt-further:3"[THEN "\<equiv>E"(1)])
        by (auto intro: "\<beta>\<rightarrow>C")
        using indist[THEN "\<forall>E"(1), OF denotes_ex_neg,
                     THEN "qml:2"[axiom_inst, THEN "\<rightarrow>E"],
                     THEN "\<equiv>E"(3)] by blast
        by (safe intro!: "\<beta>\<leftarrow>C" denotes_ex_neg "cqt:2")
        using "cqt-further:4"[THEN "\<rightarrow>E"] by blast
           (auto simp: "oth-class-taut:1:a")
           (safe intro!: "eqE"[THEN "\<equiv>Df", THEN "\<equiv>S"(1), OF "&I"] "cqt:2") 
        using "Ordinary.res-var-bound-reas[BF]" "Ordinary.res-var-bound-reas[CBF]"
              "intro-elim:2"
    } note 0 = this
      using "&E" by blast+
      using calculation(3)
      apply (safe intro!: CBF[THEN "\<rightarrow>E"] dest!: BF[THEN "\<rightarrow>E"])
      using "RM:3" "cqt-basic:11" "intro-elim:3:b" by fast
      using 0 by (auto intro!: "\<equiv>I" "\<rightarrow>I")
  qed
  
  proof(rule "\<rightarrow>I")
    {
      fix x y
        using "Ordinary.res-var-bound-reas[BF]" "Ordinary.res-var-bound-reas[CBF]"
              "intro-elim:2"
           (safe intro!: "eqE"[THEN "\<equiv>Df", THEN "\<equiv>S"(1), OF "&I"] "cqt:2") 
        by (safe intro!: "\<beta>\<leftarrow>C" denotes_ex "cqt:2")
        using indist[THEN "\<forall>E"(1), OF denotes_ex,
                     THEN "qml:2"[axiom_inst, THEN "\<rightarrow>E"],
                     THEN "\<equiv>E"(1)] by blast
        by (rule "\<beta>\<rightarrow>C")
           (safe intro!: "eqE"[THEN "\<equiv>Df", THEN "\<equiv>S"(1), OF "&I"] "cqt:2") 
        using "Ordinary.res-var-bound-reas[BF]"
              "Ordinary.res-var-bound-reas[CBF]"
              "intro-elim:2"
    } note 0 = this
      using "&E" by blast+
      using calculation(3)
      apply (safe intro!: CBF[THEN "\<rightarrow>E"] dest!: BF[THEN "\<rightarrow>E"])
      using "RM:3" "cqt-basic:11" "intro-elim:3:b" by fast
      using 0 by (auto intro!: "\<equiv>I" "\<rightarrow>I")
  qed
}
end
end