theory Stuttering
imports StutteringLemmas

begin


lemma sporadic_sub:
proof -
  from assms(1) is_subrun_def obtain f
  moreover from assms(2) have
  thus ?thesis by auto
qed

theorem implies_sub:
proof -
  moreover from assms(2) have
    using ticks_imp_ticks_subk ticks_sub by blast
  thus ?thesis by simp
qed

theorem implies_not_sub:
proof -
  moreover from assms(2) have
    using ticks_imp_ticks_subk ticks_sub by blast
  thus ?thesis by simp
qed

theorem weakly_precedes_sub:
proof -
  from assms(2) have
  from dil_tick_count[OF assms(1) this]
  thus ?thesis by simp
qed

theorem strictly_precedes_sub:
proof -
  from assms(2) have
  by simp
  by blast
    by simp
  hence
  by (simp add: tick_count_is_fun)
  proof -
    { fix n::nat
          show ?thesis
                using  dilating_def dilating_fun_def by blast
              thus ?thesis using fn fsn tick_count_sub[OF *] by simp
          next
                using * by (simp add: dilating_def dilating_fun_def)
                by (simp add: tick_count_suc)
                using fn tick_count_sub[OF *] by simp
                by (simp add: tick_count_suc)
              ultimately have
              moreover have
              thus ?thesis using tick_count_sub[OF *] fn by simp
          qed
      next
          from greatest_prev_image[OF * this] obtain n\<^sub>p  where
          from tick_count_latest[OF * this] have
            using tick_count_sub[OF *] by simp
          show ?thesis
              thus ?thesis using tick_count_sub[OF *] fsn a by auto
          next
                using * by (simp add: dilating_def dilating_fun_def)
                by (simp add: tick_count_suc)
                by (simp add: tick_count_latest[OF * np_prop])
                by (simp add: tick_count_suc)
              ultimately have
              moreover have
              thus ?thesis using np_prop mono_tick_count  using a by linarith
          qed
      qed
    } thus ?thesis ..
  qed
    using * empty_dilated_prefix ticks_sub by fastforce
  ultimately show ?thesis by (simp add: tick_count_is_fun strictly_precedes_alt_def2) 
qed

theorem time_delayed_sub:
proof -
    using first_time_image[OF *] dilating_def * by fastforce
  proof -
      with ** assm have ft0:
      proof -
          case True
          ultimately show ?thesis using ft0 hyp nfn0 by (simp add: strict_mono_less_eq)
        next
          case False thus ?thesis
            case True
              then show ?thesis using False by blast
          next
            case False
              using dilating_def dilating_fun_def by blast
              by (auto simp add: first_time_def)
            thus ?thesis by simp
          qed
        qed
      } thus ?thesis by simp
      qed
    } thus ?thesis by simp
  qed
  thus ?thesis by simp
qed

lemma tagrel_sub':
proof -
  moreover from assms(2) TESL_interpretation_atomic.simps(2) have
  show ?thesis
  proof (induction n)
    case 0
        by (simp add: dilating_def)
      ultimately show ?case by simp
  next
    case (Suc n)
    then show ?case
      case True
        by (simp add: dilating_def dilating_fun_def) 
      thus ?thesis using Suc.IH by simp
    next
      case False
        by (simp add: dilating_def)
        by (simp add: dilating_def)
      ultimately show ?thesis by simp
    qed
  qed
qed

corollary tagrel_sub:
using tagrel_sub'[OF assms] unfolding TESL_interpretation_atomic.simps(3) by simp

lemma tagrel_sub_inv:
proof -
  moreover from assms(2) TESL_interpretation_atomic.simps(2) have
  moreover from dilating_def df have
  thus ?thesis by simp
qed

theorem kill_sub:
proof -
  from assms(2) TESL_interpretation_atomic.simps(8) have
    using ticks_sub[OF *] by simp
  proof -
      proof -
            case True
                using * dilating_def dilating_fun_def h strict_mono_less_eq by fastforce
              with 2 show ?thesis using fm0 by blast
          next
            case False
              thus ?thesis  using ticks_image_sub'[OF *] by blast
          qed
        } thus ?thesis by simp
      qed
    } thus ?thesis by simp
  qed
    using ticks_imp_ticks_subk[OF *] by blast
  thus ?thesis using TESL_interpretation_atomic.simps(8) by blast
qed

lemmas atomic_sub_lemmas = sporadic_sub tagrel_sub implies_sub implies_not_sub
                           time_delayed_sub weakly_precedes_sub
                           strictly_precedes_sub kill_sub

lemma atomic_sub: 
using assms(2) atomic_sub_lemmas[OF assms(1)] by (cases \<phi>, simp_all)

theorem TESL_stuttering_invariant:
proof (induction S)
  case Nil
    thus ?case by simp
next
  case (Cons a s)
      using TESL_interpretation_image by simp+
    ultimately show ?case using  TESL_interpretation_image by simp
qed

end
