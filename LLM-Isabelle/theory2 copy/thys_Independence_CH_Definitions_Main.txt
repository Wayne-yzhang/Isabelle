theory Definitions_Main
  imports
    Absolute_Versions
begin


declare [[show_question_marks=false]]



thm bij_def[unfolded inj_def surj_def]

thm eqpoll_def

thm Transset_def

thm Ord_def

thm lt_def le_iff

lemma empty_def': "\<forall>x. x \<notin> 0" by simp
lemma succ_def': "succ(i) = i \<union> {i}" by blast

sources, it is  defined as a fixpoint, but here we just write
its characterization as the first limit ordinal.\<close>
text\<open>@{thm [display] Limit_nat[unfolded Limit_def]
 nat_le_Limit[unfolded Limit_def]}\<close>
text\<open>Then, addition and predecessor on \<^term>\<open>\<omega>\<close> are inductively
numbers using \<^term>\<open>Member\<close>, \<^term>\<open>Equal\<close>, \<^term>\<open>Nand\<close>,
and \<^term>\<open>Forall\<close>.\<close>
text\<open>@{thm [display] Member Equal Nand Forall formula.induct}\<close>
text\<open>Definitions for the other connectives and the internal existential
quantifier are also provided. For instance, negation:\<close>
text\<open>@{thm [display] Neg_def}\<close>
text\<open>@{thm [display] arity.simps}\<close>
text\<open>We have the satisfaction relation between $\in$-models and
    first order formulas (given a ``environment'' list representing
    the assignment of free variables),\<close>
text\<open>@{thm [display] mem_iff_sats equal_iff_sats sats_Nand_iff sats_Forall_iff}\<close>
text\<open>as well as the satisfaction of an arbitrary set of sentences.\<close>
text\<open>@{thm [display] satT_def}\<close>
text\<open>The internalized (viz. as elements of the set \<^term>\<open>formula\<close>)
    locale \<^term>\<open>M_cardinals\<close>. They comprise a finite set
    closure properties of the transitive class \<^term>\<open>M\<close>.\<close>
text\<open>Below, $\mu$ denotes the minimum operator on the ordinals.\<close>
text\<open>Analogous to the previous Lemma @{thm [source] eqpoll_def'}, we are now under
    included are sufficient to state and prove the defining
    (in particular, the required ability to perform transfinite recursions).\<close>
text\<open>@{thm [display] Aleph_rel_zero Aleph_rel_succ Aleph_rel_limit}\<close>
end \<comment> \<open>\<^locale>\<open>M_aleph\<close>\<close>
text\<open>Under appropriate hypotheses (this time, from the locale \<^term>\<open>M_ZF_library\<close>),
   \<^term>\<open>CH\<^bsup>M\<^esup>\<close> is equivalent to its fully relational version \<^term>\<open>is_ContHyp\<close>.
    As a sanity check, we see that if the transitive class is indeed \<^term>\<open>\<V>\<close>,
    transitive \<^term>\<open>A\<close> is equivalent to the satisfaction of the
    first-order formula \<^term>\<open>\<cdot>CH\<cdot>\<close>.\<close>
text\<open>@{thm [display] is_ContHyp_iff_sats}\<close>
subsection\<open>Forcing \label{sec:def-main-forcing}\<close>
text\<open>Our first milestone was to obtain a proper extension using forcing.
Its original proof didn't required the previous developments involving
the relativization of material on cardinal arithmetic. Now it is
derived from a stronger result, namely @{thm [source] extensions_of_ctms}
below.\<close>
text\<open>@{thm [display] extensions_of_ctms_ZF}\<close>
text\<open>We can finally state our main results, namely, the existence of models
for $\ZFC + \CH$ and $\ZFC + \neg\CH$ under the assumption of a ctm of $\ZFC$.\<close>
text\<open>@{thm [display] ctm_ZFC_imp_ctm_not_CH}\<close>
text\<open>@{thm [display] ctm_ZFC_imp_ctm_CH}\<close>
text\<open>These results can be strengthened by enumerating six finite sets of
replacement instances which are sufficient to develop forcing and for
For example, we have:\<close>
text\<open>@{thm [display] instances1_fms_def}\<close>
text\<open>@{thm [display] overhead_def overhead_notCH_def overhead_CH_def}\<close>
text\<open>One further instance is needed to force $\CH$, with a total count
of $32$ instances:\<close>
text\<open>@{thm [display] overhead_CH_def}\<close>
text\<open>@{thm [display] extensions_of_ctms}\<close>
text\<open>@{thm [display] ctm_of_not_CH}\<close>
text\<open>@{thm [display] ctm_of_CH}\<close>
text\<open>In the above three statements, the function \<^term>\<open>ground_repl_fm\<close>
takes an element \<^term>\<open>\<phi>\<close> of \<^term>\<open>formula\<close> and returns the
\<^term>\<open>\<phi>\<close>-replacement instance in the generic extension. The next
result is stated in the context \<^locale>\<open>G_generic1\<close>, which assumes
