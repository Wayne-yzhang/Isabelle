theory Globular_Set
  
imports "HOL-Library.FuncSet"

begin


lemma PiE_imp_Pi: "f \<in> A \<rightarrow>\<^sub>E B \<Longrightarrow> f \<in> A \<rightarrow> B" by fast

lemma PiE_iff': "f \<in> A \<rightarrow>\<^sub>E B = (f \<in> A \<rightarrow> B \<and> f \<in> extensional A)"
  by (simp add: PiE_iff Pi_iff)

abbreviation composing ("_ \<circ> _ \<down> _" [60,0,60]59)
  where "g \<circ> f \<down> D \<equiv> compose D g f"

lemma compose_PiE: "f \<in> A \<rightarrow> B \<Longrightarrow> g \<in> B \<rightarrow> C \<Longrightarrow> g \<circ> f \<down> A \<in> A \<rightarrow>\<^sub>E C"
  by (metis funcset_compose compose_extensional PiE_iff')

lemma compose_eq_iff: "(g \<circ> f \<down> A = k \<circ> h \<down> A) = (\<forall>x \<in> A. g (f x) = k (h x))"
proof (safe)
  fix x assume "g \<circ> f \<down> A = k \<circ> h \<down> A" "x \<in> A"
  then show "g (f x) = k (h x)" by (metis compose_eq)
next
  assume "\<forall>x \<in> A. g (f x) = k (h x)"
  hence "\<And>x. x \<in> A \<Longrightarrow> (g \<circ> f \<down> A) x = (k \<circ> h \<down> A) x" by (metis compose_eq)
  then show "g \<circ> f \<down> A = k \<circ> h \<down> A" by (metis extensionalityI compose_extensional)
qed

lemma compose_eq_if: "(\<And>x. x \<in> A \<Longrightarrow> g (f x) = k (h x)) \<Longrightarrow> g \<circ> f \<down> A = k \<circ> h \<down> A"
  using compose_eq_iff by blast

lemma compose_compose_eq_iff2: "(h \<circ> (g \<circ> f \<down> A) \<down> A = h' \<circ> (g' \<circ> f' \<down> A) \<down> A) =
  (\<forall>x \<in> A. h (g (f x)) = h' (g' (f' x)))"
  by (simp add: compose_eq compose_eq_iff)

lemma compose_compose_eq_iff1: assumes "f \<in> A \<rightarrow> B" "f' \<in> A \<rightarrow> B"
  shows "((h \<circ> g \<down> B) \<circ> f \<down> A = (h' \<circ> g' \<down> B) \<circ> f' \<down> A) = (\<forall>x \<in> A. h (g (f x)) = h' (g' (f' x)))"
proof -
  have "(h \<circ> g \<down> B) \<circ> f \<down> A = h \<circ> (g \<circ> f \<down> A) \<down> A" by (metis assms(1) compose_assoc)
  moreover have "(h' \<circ> g' \<down> B) \<circ> f' \<down> A = h' \<circ> (g' \<circ> f' \<down> A) \<down> A" by (metis assms(2) compose_assoc)
  ultimately have h: "((h \<circ> g \<down> B) \<circ> f \<down> A = (h' \<circ> g' \<down> B) \<circ> f' \<down> A) =
    (h \<circ> (g \<circ> f \<down> A) \<down> A = h' \<circ> (g' \<circ> f' \<down> A) \<down> A)" by presburger
  then show ?thesis by (simp only: h compose_compose_eq_iff2)
qed

lemma compose_compose_eq_if1: "\<lbrakk>f \<in> A \<rightarrow> B; f' \<in> A \<rightarrow> B; \<forall>x \<in> A. h (g (f x)) = h' (g' (f' x))\<rbrakk> \<Longrightarrow>
  (h \<circ> g \<down> B) \<circ> f \<down> A = (h' \<circ> g' \<down> B) \<circ> f' \<down> A"
  using compose_compose_eq_iff1 by blast

lemma compose_compose_eq_if2: "\<forall>x \<in> A. h (g (f x)) = h' (g' (f' x)) \<Longrightarrow>
  h \<circ> (g \<circ> f \<down> A) \<down> A = h' \<circ> (g' \<circ> f' \<down> A) \<down> A"
  using compose_compose_eq_iff2 by blast

lemma compose_restrict_eq1: "f \<in> A \<rightarrow> B \<Longrightarrow>  restrict g B \<circ> f \<down> A = g \<circ> f \<down> A"
  by (smt (verit) PiE compose_eq_iff restrict_apply')

lemma compose_restrict_eq2: "g \<circ> (restrict f A) \<down> A = g \<circ> f \<down> A"
  by (metis (mono_tags, lifting) compose_eq_if restrict_apply')

lemma compose_Id_eq_restrict: "g \<circ> (\<lambda>x \<in> A. x) \<down> A = restrict g A"
  by (smt (verit) compose_restrict_eq1 compose_def restrict_apply' restrict_ext)




locale globular_set =
  fixes X :: "nat \<Rightarrow> 'a set" and s :: "nat \<Rightarrow> 'a \<Rightarrow> 'a" and t :: "nat \<Rightarrow> 'a \<Rightarrow> 'a"
  assumes s_fun: "s n \<in> X (Suc n) \<rightarrow> X n"
    and   t_fun: "t n \<in> X (Suc n) \<rightarrow> X n"
    and  s_comp: "x \<in> X (Suc (Suc n)) \<Longrightarrow> s n (t (Suc n) x) = s n (s (Suc n) x)"
    and  t_comp: "x \<in> X (Suc (Suc n)) \<Longrightarrow> t n (s (Suc n) x) = t n (t (Suc n) x)"
begin

lemma s_comp': "s n \<circ> t (Suc n) \<down> X (Suc (Suc n)) = s n \<circ> s (Suc n) \<down> X (Suc (Suc n))"
  by (metis (full_types) compose_eq_if s_comp)

lemma t_comp': "t n \<circ> s (Suc n) \<down> X (Suc (Suc n)) = t n \<circ> t (Suc n) \<down> X (Suc (Suc n))"
  by (metis (full_types) compose_eq_if t_comp)

