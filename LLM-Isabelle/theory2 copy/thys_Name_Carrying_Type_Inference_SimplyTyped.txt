theory SimplyTyped
imports PreSimplyTyped
begin

quotient_type 'a trm = "'a ptrm" / ptrm_alpha_equiv
proof(rule equivpI)
  show "reflp  ptrm_alpha_equiv" using ptrm_alpha_equiv_reflp.
  show "symp   ptrm_alpha_equiv" using ptrm_alpha_equiv_symp.
  show "transp ptrm_alpha_equiv" using ptrm_alpha_equiv_transp.
qed

lift_definition Unit :: "'a trm" is PUnit.
lift_definition Var :: "'a \<Rightarrow> 'a trm" is PVar.
lift_definition App :: "'a trm \<Rightarrow> 'a trm \<Rightarrow> 'a trm" is PApp using ptrm_alpha_equiv.app.
lift_definition Fn  :: "'a \<Rightarrow> type \<Rightarrow> 'a trm \<Rightarrow> 'a trm" is PFn using ptrm_alpha_equiv.fn1.
lift_definition Pair :: "'a trm \<Rightarrow> 'a trm \<Rightarrow> 'a trm" is PPair using ptrm_alpha_equiv.pair.
lift_definition Fst :: "'a trm \<Rightarrow> 'a trm" is PFst using ptrm_alpha_equiv.fst.
lift_definition Snd :: "'a trm \<Rightarrow> 'a trm" is PSnd using ptrm_alpha_equiv.snd.
lift_definition fvs :: "'a trm \<Rightarrow> 'a set" is ptrm_fvs using ptrm_alpha_equiv_fvs.
lift_definition prm :: "'a prm \<Rightarrow> 'a trm \<Rightarrow> 'a trm" (infixr "\<cdot>" 150) is ptrm_apply_prm
  using ptrm_alpha_equiv_prm.
lift_definition depth :: "'a trm \<Rightarrow> nat" is size using ptrm_size_alpha_equiv.

lemma depth_prm:
  shows "depth (\<pi> \<cdot> A) = depth A"
by(transfer, metis ptrm_size_prm)

lemma depth_app:
  shows "depth A < depth (App A B)" "depth B < depth (App A B)"
by(transfer, auto)+

lemma depth_fn:
  shows "depth A < depth (Fn x T A)"
by(transfer, auto)

lemma depth_pair:
  shows "depth A < depth (Pair A B)" "depth B < depth (Pair A B)"
by(transfer, auto)+

lemma depth_fst:
  shows "depth P < depth (Fst P)"
by(transfer, auto)

lemma depth_snd:
  shows "depth P < depth (Snd P)"
by(transfer, auto)
  
lemma unit_not_var:
  shows "Unit \<noteq> Var x"
proof(transfer)
  fix x :: 'a
  show "\<not> PUnit \<approx> PVar x"
  proof(rule classical)
    assume "\<not>\<not> PUnit \<approx> PVar x"
    hence False using unitE by fastforce
    thus ?thesis by blast
  qed
qed

lemma unit_not_app:
  shows "Unit \<noteq> App A B"
proof(transfer)
  fix A B :: "'a ptrm"
  show "\<not> PUnit \<approx> PApp A B"
  proof(rule classical)
    assume "\<not>\<not> PUnit \<approx> PApp A B"
    hence False using unitE by fastforce
    thus ?thesis by blast
  qed
qed

lemma unit_not_fn:
  shows "Unit \<noteq> Fn x T A"
proof(transfer)
  fix x :: 'a and T A
  show "\<not> PUnit \<approx> PFn x T A"
  proof(rule classical)
    assume "\<not>\<not> PUnit \<approx> PFn x T A"
    hence False using unitE by fastforce
    thus ?thesis by blast
  qed
qed

lemma unit_not_pair:
  shows "Unit \<noteq> Pair A B"
proof(transfer)
  fix A B :: "'a ptrm"
  show "\<not> PUnit \<approx> PPair A B"
  proof(rule classical)
    assume "\<not>\<not> PUnit \<approx> PPair A B"
    hence False using unitE by fastforce
    thus ?thesis by blast
  qed
qed

lemma unit_not_fst:
  shows "Unit \<noteq> Fst P"
proof(transfer)
  fix P :: "'a ptrm"
  show "\<not> PUnit \<approx> PFst P"
  proof(rule classical)
    assume "\<not>\<not> PUnit \<approx> PFst P"
    hence False using unitE by fastforce
    thus ?thesis by blast
  qed
qed

lemma unit_not_snd:
  shows "Unit \<noteq> Snd P"
proof(transfer)
  fix P :: "'a ptrm"
  show "\<not> PUnit \<approx> PSnd P"
  proof(rule classical)
    assume "\<not>\<not> PUnit \<approx> PSnd P"
    hence False using unitE by fastforce
    thus ?thesis by blast
  qed
qed

lemma var_not_app:
  shows "Var x \<noteq> App A B"
proof(transfer)
  fix x :: 'a and A B
  show "\<not>PVar x \<approx> PApp A B"
  proof(rule classical)
    assume "\<not>\<not>PVar x \<approx> PApp A B"
    hence False using varE by fastforce
    thus ?thesis by blast
  qed
qed

lemma var_not_fn:
  shows "Var x \<noteq> Fn y T A"
proof(transfer)
  fix x y :: 'a and T A
  show "\<not>PVar x \<approx> PFn y T A"
  proof(rule classical)
    assume "\<not>\<not>PVar x \<approx> PFn y T A" 
    hence False using varE by fastforce
    thus ?thesis by blast
  qed
qed

lemma var_not_pair:
  shows "Var x \<noteq> Pair A B"
proof(transfer)
  fix x :: 'a and A B
  show "\<not>PVar x \<approx> PPair A B"
  proof(rule classical)
    assume "\<not>\<not>PVar x \<approx> PPair A B"
    hence False using varE by fastforce
    thus ?thesis by blast
  qed
qed

lemma var_not_fst:
  shows "Var x \<noteq> Fst P"
proof(transfer)
  fix x :: 'a and P
  show "\<not>PVar x \<approx> PFst P"
  proof(rule classical)
    assume "\<not>\<not>PVar x \<approx> PFst P"
    hence False using varE by fastforce
    thus ?thesis by blast
  qed
qed

lemma var_not_snd:
  shows "Var x \<noteq> Snd P"
proof(transfer)
  fix x :: 'a and P
  show "\<not>PVar x \<approx> PSnd P"
  proof(rule classical)
    assume "\<not>\<not>PVar x \<approx> PSnd P"
    hence False using varE by fastforce
    thus ?thesis by blast
  qed
qed

lemma app_not_fn:
  shows "App A B \<noteq> Fn y T X"
proof(transfer)
  fix y :: 'a and A B T X
  show "\<not>PApp A B \<approx> PFn y T X"
  proof(rule classical)
    assume "\<not>\<not>PApp A B \<approx> PFn y T X"
    hence False using appE by auto
    thus ?thesis by blast
  qed
qed

lemma app_not_pair:
  shows "App A B \<noteq> Pair C D"
proof(transfer)
  fix A B C D :: "'a ptrm"
  show "\<not>PApp A B \<approx> PPair C D"
  proof(rule classical)
    assume "\<not>\<not>PApp A B \<approx> PPair C D"
    hence False using appE by auto
    thus ?thesis by blast
  qed
qed

lemma app_not_fst:
  shows "App A B \<noteq> Fst P"
proof(transfer)
  fix A B P :: "'a ptrm"
  show "\<not>PApp A B \<approx> PFst P"
  proof(rule classical)
    assume "\<not>\<not>PApp A B \<approx> PFst P"
    hence False using appE by auto
    thus ?thesis by blast
  qed
qed

lemma app_not_snd:
  shows "App A B \<noteq> Snd P"
proof(transfer)
  fix A B P :: "'a ptrm"
  show "\<not>PApp A B \<approx> PSnd P"
  proof(rule classical)
    assume "\<not>\<not>PApp A B \<approx> PSnd P"
    hence False using appE by auto
    thus ?thesis by blast
  qed
qed

lemma fn_not_pair:
  shows "Fn x T A \<noteq> Pair C D"
proof(transfer)
  fix x :: 'a and T A C D
  show "\<not>PFn x T A \<approx> PPair C D"
  proof(rule classical)
    assume "\<not>\<not>PFn x T A \<approx> PPair C D"
    hence False using fnE by fastforce
    thus ?thesis by blast
  qed
qed

lemma fn_not_fst:
  shows "Fn x T A \<noteq> Fst P"
proof(transfer)
  fix x :: 'a and T A P
  show "\<not>PFn x T A \<approx> PFst P"
  proof(rule classical)
    assume "\<not>\<not>PFn x T A \<approx> PFst P"
    hence False using fnE by fastforce
    thus ?thesis by blast
  qed
qed

lemma fn_not_snd:
  shows "Fn x T A \<noteq> Snd P"
proof(transfer)
  fix x :: 'a and T A P
  show "\<not>PFn x T A \<approx> PSnd P"
  proof(rule classical)
    assume "\<not>\<not>PFn x T A \<approx> PSnd P"
    hence False using fnE by fastforce
    thus ?thesis by blast
  qed
qed

lemma pair_not_fst:
  shows "Pair A B \<noteq> Fst P"
proof(transfer)
  fix A B P :: "'a ptrm"
  show "\<not>PPair A B \<approx> PFst P"
  proof(rule classical)
    assume "\<not>\<not>PPair A B \<approx> PFst P"
    hence False using pairE by auto
    thus ?thesis by blast
  qed
qed

lemma pair_not_snd:
  shows "Pair A B \<noteq> Snd P"
proof(transfer)
  fix A B P :: "'a ptrm"
  show "\<not>PPair A B \<approx> PSnd P"
  proof(rule classical)
    assume "\<not>\<not>PPair A B \<approx> PSnd P"
    hence False using pairE by auto
    thus ?thesis by blast
  qed
qed

lemma fst_not_snd:
  shows "Fst P \<noteq> Snd Q"
proof(transfer)
  fix P Q :: "'a ptrm"
  show "\<not>PFst P \<approx> PSnd Q"
  proof(rule classical)
    assume "\<not>\<not>PFst P \<approx> PSnd Q"
    hence False using fstE by auto
    thus ?thesis by blast
  qed
qed

lemma trm_simp:
  shows
    "Var x = Var y \<Longrightarrow> x = y"
    "App A B = App C D \<Longrightarrow> A = C"
    "App A B = App C D \<Longrightarrow> B = D"
    "Fn x T A = Fn y S B \<Longrightarrow>
      (x = y \<and> T = S \<and> A = B) \<or> (x \<noteq> y \<and> T = S \<and> x \<notin> fvs B \<and> A = [x \<leftrightarrow> y] \<cdot> B)"
    "Pair A B = Pair C D \<Longrightarrow> A = C"
    "Pair A B = Pair C D \<Longrightarrow> B = D"
    "Fst P = Fst Q \<Longrightarrow> P = Q"
    "Snd P = Snd Q \<Longrightarrow> P = Q"
proof -
  show "Var x = Var y \<Longrightarrow> x = y" by (transfer, insert ptrm.inject varE, fastforce)
  show "App A B = App C D \<Longrightarrow> A = C" by (transfer, insert ptrm.inject appE, auto)
  show "App A B = App C D \<Longrightarrow> B = D" by (transfer, insert ptrm.inject appE, auto)
  show "Pair A B = Pair C D \<Longrightarrow> A = C" by (transfer, insert ptrm.inject pairE, auto)
  show "Pair A B = Pair C D \<Longrightarrow> B = D" by (transfer, insert ptrm.inject pairE, auto)
  show "Fst P = Fst Q \<Longrightarrow> P = Q" by (transfer, insert ptrm.inject fstE, auto)
  show "Snd P = Snd Q \<Longrightarrow> P = Q" by (transfer, insert ptrm.inject sndE, auto)
  show "Fn x T A = Fn y S B \<Longrightarrow>
      (x = y \<and> T = S \<and> A = B) \<or> (x \<noteq> y \<and> T = S \<and> x \<notin> fvs B \<and> A = [x \<leftrightarrow> y] \<cdot> B)"
  proof(transfer')
    fix x y :: 'a and T S :: type and A B :: "'a ptrm"
    assume *: "PFn x T A \<approx> PFn y S B"
    thus "x = y \<and> T = S \<and> A \<approx> B \<or> x \<noteq> y \<and> T = S \<and> x \<notin> ptrm_fvs B \<and> A \<approx> [x \<leftrightarrow> y] \<bullet> B"
    proof(induction rule: fnE[where x=x and T=T and A=A and Y="PFn y S B"], metis *)
