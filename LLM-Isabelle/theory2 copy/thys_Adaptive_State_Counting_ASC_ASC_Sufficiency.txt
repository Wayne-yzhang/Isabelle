theory ASC_Sufficiency
  imports ASC_Suite
begin





lemma minimal_sequence_to_failure_extending_implies_Rep_Pre :
  assumes "minimal_sequence_to_failure_extending V M1 M2 vs xs"
  and     "OFSM M1"
  and     "OFSM M2"
  and     "test_tools M2 M1 FAIL PM V \<Omega>"
  and     "V'' \<in> N (vs@xs') M1 V"
  and     "prefix xs' xs"
  shows "\<not> Rep_Pre M2 M1 vs xs'"
proof 
  assume "Rep_Pre M2 M1 vs xs'" 
  then obtain xs1 xs2 s1 s2 where  "prefix xs1 xs2"   
                                   "prefix xs2 xs'"
                                   "xs1 \<noteq> xs2"
                                   "io_targets M2 (initial M2) (vs @ xs1) = {s2}" 
                                   "io_targets M2 (initial M2) (vs @ xs2) = {s2}"
                                   "io_targets M1 (initial M1) (vs @ xs1) = {s1}"
                                   "io_targets M1 (initial M1) (vs @ xs2) = {s1}"
    by auto
  then have "s2 \<in> io_targets M2 (initial M2) (vs @ xs1)"
            "s2 \<in> io_targets M2 (initial M2) (vs @ xs2)"
            "s1 \<in> io_targets M1 (initial M1) (vs @ xs1)"
            "s1 \<in> io_targets M1 (initial M1) (vs @ xs2)"            
    by auto

  have "vs@xs1 \<in> L M1" 
  have "vs@xs2 \<in> L M1" 
  have "vs@xs1 \<in> L M2" 
  have "vs@xs2 \<in> L M2" 

  obtain tr1_1 where "path M1 (vs@xs1 || tr1_1) (initial M1)" 
                     "length tr1_1 = length (vs@xs1)" 
                     "target (vs@xs1 || tr1_1) (initial M1) = s1"
  obtain tr1_2 where "path M1 (vs@xs2 || tr1_2) (initial M1)" 
                     "length tr1_2 = length (vs@xs2)" 
                     "target (vs@xs2 || tr1_2) (initial M1) = s1"
  obtain tr2_1 where "path M2 (vs@xs1 || tr2_1) (initial M2)" 
                     "length tr2_1 = length (vs@xs1)" 
                     "target (vs@xs1 || tr2_1) (initial M2) = s2"
  obtain tr2_2 where "path M2 (vs@xs2 || tr2_2) (initial M2)"
                     "length tr2_2 = length (vs@xs2)"
                     "target (vs@xs2 || tr2_2) (initial M2) = s2"


  have "productF M2 M1 FAIL PM" 
    using assms(4) by auto
  have "well_formed M1" 
    using assms(2) by auto
  have "well_formed M2" 
    using assms(3) by auto
  have "observable PM"
    by (meson assms(2) assms(3) assms(4) observable_productF)

  have "length (vs@xs1) = length tr2_1"
  then have "length tr2_1 = length tr1_1" 

  have "vs@xs1 \<in> L PM" 
    

  have "length (vs@xs2) = length tr2_2"
  then have "length tr2_2 = length tr1_2" 

  have "vs@xs2 \<in> L PM" 


  

  have "io_targets PM (initial M2, initial M1) (vs @ xs1) = {(s2, s1)}" 
    using productF_path_io_targets_reverse
  proof -
    have "\<forall>c f. c \<noteq> initial (f::('a, 'b, 'c) FSM) \<or> c \<in> nodes f"
      by blast
    then show ?thesis
          assms(2) assms(3))
  qed 

  have "io_targets PM (initial M2, initial M1) (vs @ xs2) = {(s2, s1)}" 
    using productF_path_io_targets_reverse
  proof -
    have "\<forall>c f. c \<noteq> initial (f::('a, 'b, 'c) FSM) \<or> c \<in> nodes f"
      by blast
    then show ?thesis
          assms(2) assms(3))
  qed

  have "prefix (vs @ xs1) (vs @ xs2)"



  have "sequence_to_failure M1 M2 (vs@xs)" 
    using assms(1) by auto
  

  have "prefix (vs@xs1) (vs@xs')"
    by blast 
  have "prefix (vs@xs2) (vs@xs')"

   

  have "io_targets PM (initial PM) (vs @ xs1) = {(s2,s1)}"
  have "io_targets PM (initial PM) (vs @ xs2) = {(s2,s1)}"


  have "(vs @ xs2) @ (drop (length xs2) xs) = vs@xs"
  moreover have "io_targets PM (initial PM) (vs@xs) = {FAIL}" 
    by assumption
  ultimately have "io_targets PM (initial PM) ((vs @ xs2) @ (drop (length xs2) xs)) = {FAIL}" 
    by auto
  
  have "io_targets PM (s2,s1) (drop (length xs2) xs) = {FAIL}" 
    using observable_io_targets_split
    by assumption

  have "io_targets PM (initial PM) (vs@xs1@(drop (length xs2) xs)) = {FAIL}"
    using observable_io_targets_append
    by simp
  have "sequence_to_failure M1 M2 (vs@xs1@(drop (length xs2) xs))"
    using sequence_to_failure_alt_def
          assms(4) 
    by blast 

  have "length xs1 < length xs2"

  have prefix_drop: "ys = ys1 @ (drop (length ys1)) ys" if "prefix ys1 ys"
    for ys ys1 :: "('a \<times> 'b) list"
    using that by (induction ys1) (auto elim: prefixE)
  then have "xs = (xs1 @ (drop (length xs1) xs))"
  then have "length xs1 < length xs"
    by (auto dest!: prefix_length_le)
  have "length (xs1@(drop (length xs2) xs)) < length xs"


  have "vs \<in> L\<^sub>i\<^sub>n M1 V 
        \<and> sequence_to_failure M1 M2 (vs @ xs1@(drop (length xs2) xs)) 
        \<and> length (xs1@(drop (length xs2) xs)) < length xs"
          assms(1) minimal_sequence_to_failure_extending.simps 
    by blast
  
  then have "\<not> minimal_sequence_to_failure_extending V M1 M2 vs xs"
    by (meson minimal_sequence_to_failure_extending.elims(2))
   

  then show "False" 
    using assms(1) by linarith
qed
  



lemma minimal_sequence_to_failure_extending_implies_Rep_Cov :
  assumes "minimal_sequence_to_failure_extending V M1 M2 vs xs"
  and     "OFSM M1"
  and     "OFSM M2"
  and     "test_tools M2 M1 FAIL PM V \<Omega>"
  and     "V'' \<in> N (vs@xsR) M1 V"
  and     "prefix xsR xs"
shows "\<not> Rep_Cov M2 M1 V'' vs xsR"
proof 
  assume "Rep_Cov M2 M1 V'' vs xsR"
  then obtain xs' vs' s2 s1 where "xs' \<noteq> []" 
                                  "prefix xs' xsR" 
                                  "vs' \<in> V''"
                                  "io_targets M2 (initial M2) (vs @ xs') = {s2}" 
                                  "io_targets M2 (initial M2) (vs') = {s2}"
                                  "io_targets M1 (initial M1) (vs @ xs') = {s1}" 
                                  "io_targets M1 (initial M1) (vs') = {s1}"
    by auto

  then have "s2 \<in> io_targets M2 (initial M2) (vs @ xs')"
            "s2 \<in> io_targets M2 (initial M2) (vs')"
            "s1 \<in> io_targets M1 (initial M1) (vs @ xs')"
            "s1 \<in> io_targets M1 (initial M1) (vs')"            
    by auto

  have "vs@xs' \<in> L M1" 
  have "vs' \<in> L M1" 
  have "vs@xs' \<in> L M2" 
  have "vs' \<in> L M2" 

  obtain tr1_1 where "path M1 (vs@xs' || tr1_1) (initial M1)"
                     "length tr1_1 = length (vs@xs')"
                     "target (vs@xs' || tr1_1) (initial M1) = s1"
  obtain tr1_2 where "path M1 (vs' || tr1_2) (initial M1)"
                     "length tr1_2 = length (vs')"
                     "target (vs' || tr1_2) (initial M1) = s1"
  obtain tr2_1 where "path M2 (vs@xs' || tr2_1) (initial M2)"
                     "length tr2_1 = length (vs@xs')"
                     "target (vs@xs' || tr2_1) (initial M2) = s2"
  obtain tr2_2 where "path M2 (vs' || tr2_2) (initial M2)"
                     "length tr2_2 = length (vs')"
                     "target (vs' || tr2_2) (initial M2) = s2" 


  have "productF M2 M1 FAIL PM" 
    using assms(4) by auto
  have "well_formed M1" 
    using assms(2) by auto
  have "well_formed M2" 
    using assms(3) by auto
  have "observable PM"
    by (meson assms(2) assms(3) assms(4) observable_productF)

  have "length (vs@xs') = length tr2_1"
  then have "length tr2_1 = length tr1_1" 

  have "vs@xs' \<in> L PM" 
    

  have "length (vs') = length tr2_2"
  then have "length tr2_2 = length tr1_2" 

  have "vs' \<in> L PM" 


  

  have "io_targets PM (initial M2, initial M1) (vs @ xs') = {(s2, s1)}" 
    using productF_path_io_targets_reverse
  proof -
    have "\<forall>c f. c \<noteq> initial (f::('a, 'b, 'c) FSM) \<or> c \<in> nodes f"
      by blast
    then show ?thesis
          assms(2) assms(3))
  qed 

  have "io_targets PM (initial M2, initial M1) (vs') = {(s2, s1)}" 
    using productF_path_io_targets_reverse
  proof -
    have "\<forall>c f. c \<noteq> initial (f::('a, 'b, 'c) FSM) \<or> c \<in> nodes f"
      by blast
    then show ?thesis
          assms(2) assms(3))
  qed
  have "io_targets PM (initial PM) (vs') = {(s2, s1)}"
   

  have "sequence_to_failure M1 M2 (vs@xs)" 
    using assms(1) by auto

  have "xs = xs' @ (drop (length xs') xs)"
  then have "io_targets PM (initial M2, initial M1) (vs @ xs' @ (drop (length xs') xs)) = {FAIL}"
        productF_simps(4) sequence_to_failure_reaches_FAIL_ob)
  then have "io_targets PM (initial M2, initial M1) ((vs @ xs') @ (drop (length xs') xs)) = {FAIL}"    
    by auto
  have "io_targets PM (s2, s1) (drop (length xs') xs) = {FAIL}" 
    using observable_io_targets_split
    by assumption

  have "io_targets PM (initial PM) (vs' @ (drop (length xs') xs)) = {FAIL}" 
    using observable_io_targets_append
    by assumption

  have "sequence_to_failure M1 M2 (vs' @ (drop (length xs') xs))"   
    using sequence_to_failure_alt_def
          assms(4) 
    by blast

  have "length (drop (length xs') xs) < length xs"
        length_greater_0_conv less_add_same_cancel2)   

  have "vs' \<in> L\<^sub>i\<^sub>n M1 V" 
  proof -
    have "V'' \<in> Perm V M1" 
      using assms(5) unfolding N.simps by blast

    then obtain f where f_def : "V'' = image f V 
                                  \<and> (\<forall> v \<in> V . f v \<in> language_state_for_input M1 (initial M1) v)"
      unfolding Perm.simps by blast
    then obtain v where "v \<in> V" "vs' = f v" 
    then have "vs' \<in> language_state_for_input M1 (initial M1) v" 
      using f_def by auto
    
    have "language_state_for_input M1 (initial M1) v = L\<^sub>i\<^sub>n M1 {v}"
      by auto
    moreover have "{v} \<subseteq> V" 
    ultimately have "language_state_for_input M1 (initial M1) v \<subseteq> L\<^sub>i\<^sub>n M1 V"
      unfolding language_state_for_inputs.simps language_state_for_input.simps by blast
    then show ?thesis
  qed
  
  have "\<not> minimal_sequence_to_failure_extending V M1 M2 vs xs" 
    using minimal_sequence_to_failure_extending.elims(2) by blast 
  then show "False" 
    using assms(1) by linarith
qed




lemma mstfe_no_repetition :
  assumes "minimal_sequence_to_failure_extending V M1 M2 vs xs"
  and     "OFSM M1"
  and     "OFSM M2"
  and     "test_tools M2 M1 FAIL PM V \<Omega>"
  and     "V'' \<in> N (vs@xs') M1 V"
  and     "prefix xs' xs"
shows "\<not> Rep_Pre M2 M1 vs xs'"
  and "\<not> Rep_Cov M2 M1 V'' vs xs'"
  using minimal_sequence_to_failure_extending_implies_Rep_Pre[OF assms]
        minimal_sequence_to_failure_extending_implies_Rep_Cov[OF assms]
  by linarith+





lemma asc_sufficiency :
  assumes "OFSM M1"
  and     "OFSM M2"
  and     "asc_fault_domain M2 M1 m"
  and     "test_tools M2 M1 FAIL PM V \<Omega>"
  and     "final_iteration M2 M1 \<Omega> V m i"  
shows "M1 \<preceq>\<lbrakk>(TS M2 M1 \<Omega> V m i) . \<Omega>\<rbrakk> M2 \<longrightarrow> M1 \<preceq> M2"
proof 
  assume "atc_io_reduction_on_sets M1 (TS M2 M1 \<Omega> V m i) \<Omega> M2"
  show "M1 \<preceq> M2"
  proof (rule ccontr)
  
    let ?TS = "\<lambda> n . TS M2 M1 \<Omega> V m n"
    let ?C = "\<lambda> n . C M2 M1 \<Omega> V m n"
    let ?RM = "\<lambda> n . RM M2 M1 \<Omega> V m n"
  
  
    assume "\<not> M1 \<preceq> M2"
    obtain vs xs where "minimal_sequence_to_failure_extending V M1 M2 vs xs" 
      using  assms(1) assms(2) assms(4) 
      by blast 
  
    then have "vs \<in> L\<^sub>i\<^sub>n M1 V" 
              "sequence_to_failure M1 M2 (vs @ xs)" 
              "\<not> (\<exists> io' . \<exists> w' \<in> L\<^sub>i\<^sub>n M1 V . sequence_to_failure M1 M2 (w' @ io') 
                                                          \<and> length io' < length xs)"
      by auto
  
    then have "vs@xs \<in> L M1 - L M2" 
      by auto
  
    have "vs@xs \<in> L\<^sub>i\<^sub>n M1 {map fst (vs@xs)}"
          language_state_for_inputs_map_fst)
  
    have "vs@xs \<notin> L\<^sub>i\<^sub>n M2 {map fst (vs@xs)}"
          subsetCE) 
  
    have "finite V" 
      using det_state_cover_finite assms(4,2) by auto
    then have "finite (?TS i)"
      using TS_finite[of V M2] assms(2) by auto
    then have "io_reduction_on M1 (?TS i) M2" 
      using io_reduction_from_atc_io_reduction
      by auto
  
    have "map fst (vs@xs) \<notin> ?TS i"
    proof -
      have f1: "\<forall>ps P Pa. (ps::('a \<times> 'b) list) \<notin> P - Pa \<or> ps \<in> P \<and> ps \<notin> Pa"
        by blast
      have "\<forall>P Pa ps. \<not> P \<subseteq> Pa \<or> (ps::('a \<times> 'b) list) \<in> Pa \<or> ps \<notin> P"
        by blast
      then show ?thesis
                     language_state_for_inputs_in_language_state language_state_for_inputs_map_fst)
    qed 
  
    have "map fst vs \<in> V"
    
    let ?stf = "map fst (vs@xs)"
    let ?stfV = "map fst vs"
    let ?stfX = "map fst xs"
    have "?stf = ?stfV @ ?stfX"
      by simp 
  
    then have "?stfV @ ?stfX \<notin> ?TS i"
  
    have "mcp (?stfV @ ?stfX) V ?stfV"
          minimal_sequence_to_failure_extending_mcp)
  
    have "set ?stf \<subseteq> inputs M1"
    then have "set ?stf \<subseteq> inputs M2"
      using assms(3) by blast 
    moreover have "set ?stf = set ?stfV \<union> set ?stfX"
      by simp 
    ultimately have "set ?stfX \<subseteq> inputs M2"
      by blast 
  
  
    obtain xr j where "xr \<noteq> ?stfX" 
                      "prefix xr ?stfX" 
                      "Suc j \<le> i" 
                      "?stfV@xr \<in> RM M2 M1 \<Omega> V m (Suc j)"
      by blast
  
    
    let ?yr = "take (length xr) (map snd xs)"
    have "length ?yr = length xr"
    have "(xr || ?yr) = take (length xr) xs"
          zip_map_fst_snd) 
  
    have "prefix (vs@(xr || ?yr)) (vs@xs)"
  
    have "xr = take (length xr) (map fst xs)"
  
    have "vs@(xr || ?yr) \<in> L M1"
  
    then have "vs@(xr || ?yr) \<in> L\<^sub>i\<^sub>n M1 {?stfV @ xr}"
          language_state_for_inputs_map_fst map_append map_fst_zip) 
  
    have "length xr < length xs"
          take_map)
  
  
  
        (\<not> (L\<^sub>i\<^sub>n M1 {xs'} \<subseteq> L\<^sub>i\<^sub>n M2 {xs'}))
        \<or> (\<forall> io \<in> L\<^sub>i\<^sub>n M1 {xs'} .
            (\<exists> V'' \<in> N io M1 V .  
              (\<exists> S1 . 
                (\<exists> vs xs .
                  io = (vs@xs)
                  \<and> mcp (vs@xs) V'' vs
                  \<and> S1 \<subseteq> nodes M2
                  \<and> (\<forall> s1 \<in> S1 . \<forall> s2 \<in> S1 .
                    s1 \<noteq> s2 \<longrightarrow> 
                      (\<forall> io1 \<in> RP M2 s1 vs xs V'' .
                         \<forall> io2 \<in> RP M2 s2 vs xs V'' .
                           B M1 io1 \<Omega> \<noteq> B M1 io2 \<Omega> ))
                  \<and> m < LB M2 M1 vs xs (TS M2 M1 \<Omega> V m j \<union> V) S1 \<Omega> V'' ))))}" 
      unfolding RM.simps by blast
  
    moreover have "\<forall> xs' \<in> ?C (Suc j) . L\<^sub>i\<^sub>n M1 {xs'} \<subseteq> L\<^sub>i\<^sub>n M2 {xs'}"
    proof 
      fix xs' assume "xs' \<in> ?C (Suc j)"
        using C_subset TS_subset by blast 
      then have "{xs'} \<subseteq> ?TS i" 
      show "L\<^sub>i\<^sub>n M1 {xs'} \<subseteq> L\<^sub>i\<^sub>n M2 {xs'}" 
        by assumption
    qed
  
    ultimately have "(\<forall> io \<in> L\<^sub>i\<^sub>n M1 {?stfV@xr} .
            (\<exists> V'' \<in> N io M1 V .  
              (\<exists> S1 . 
                (\<exists> vs xs .
                  io = (vs@xs)
                  \<and> mcp (vs@xs) V'' vs
                  \<and> S1 \<subseteq> nodes M2
                  \<and> (\<forall> s1 \<in> S1 . \<forall> s2 \<in> S1 .
                    s1 \<noteq> s2 \<longrightarrow> 
                      (\<forall> io1 \<in> RP M2 s1 vs xs V'' .
                         \<forall> io2 \<in> RP M2 s2 vs xs V'' .
                           B M1 io1 \<Omega> \<noteq> B M1 io2 \<Omega> ))
                  \<and> m < LB M2 M1 vs xs (TS M2 M1 \<Omega> V m j \<union> V) S1 \<Omega> V'' ))))"
      by blast 
  
    then have "
            (\<exists> V'' \<in> N (vs@(xr || ?yr)) M1 V .  
              (\<exists> S1 . 
                (\<exists> vs' xs' .
                  vs@(xr || ?yr) = (vs'@xs')
                  \<and> mcp (vs'@xs') V'' vs'
                  \<and> S1 \<subseteq> nodes M2
                  \<and> (\<forall> s1 \<in> S1 . \<forall> s2 \<in> S1 .
                    s1 \<noteq> s2 \<longrightarrow> 
                      (\<forall> io1 \<in> RP M2 s1 vs' xs' V'' .
                         \<forall> io2 \<in> RP M2 s2 vs' xs' V'' .
                           B M1 io1 \<Omega> \<noteq> B M1 io2 \<Omega> ))
                  \<and> m < LB M2 M1 vs' xs' (TS M2 M1 \<Omega> V m j \<union> V) S1 \<Omega> V'' )))"
      by blast 
  
    then obtain V'' S1 vs' xs' where RM_impl :  
                                     "V'' \<in> N (vs@(xr || ?yr)) M1 V"
                                     "vs@(xr || ?yr) = (vs'@xs')"
                                     "mcp (vs'@xs') V'' vs'"
                                     "S1 \<subseteq> nodes M2"
                                     "(\<forall> s1 \<in> S1 . \<forall> s2 \<in> S1 .
                                       s1 \<noteq> s2 \<longrightarrow> 
                                          (\<forall> io1 \<in> RP M2 s1 vs' xs' V'' .
                                             \<forall> io2 \<in> RP M2 s2 vs' xs' V'' .
                                               B M1 io1 \<Omega> \<noteq> B M1 io2 \<Omega> ))"
                                     " m < LB M2 M1 vs' xs' (TS M2 M1 \<Omega> V m j \<union> V) S1 \<Omega> V''"
      by blast
  
   
    have "?stfV = mcp' (map fst (vs @ (xr || take (length xr) (map snd xs)))) V"
          map_fst_zip mcp'_intro mcp_prefix_of_suffix) 
  
    have "is_det_state_cover M2 V"
      using assms(4) by blast 
    moreover have "well_formed M2" 
      using assms(2) by auto
    moreover have "finite V" 
      using det_state_cover_finite assms(4,2) by auto
    ultimately have "vs \<in> V''"  
                    "vs = mcp' (vs @ (xr || take (length xr) (map snd xs))) V''"
      by simp+
    
    have "vs' = vs"
     
    then have "xs' = (xr || ?yr)"
  
  
    have "V \<subseteq> ?TS i"
    proof -
      have "1 \<le> i"
      then have "?TS 1 \<subseteq> ?TS i"
        using TS_subset by blast   
      then show ?thesis 
        by auto
    qed
      
    have "?stfV@xr \<in> ?C (Suc j)" 
  
  
  
  
    have "(\<forall>vs'a\<in>V''. prefix vs'a (vs' @ xs') \<longrightarrow> length vs'a \<le> length vs')"
  
    moreover have "atc_io_reduction_on_sets M1 (?TS j \<union> V) \<Omega> M2"   
    proof -
      have "j < i" 
      then have "?TS j \<subseteq> ?TS i" 
        by (simp add: TS_subset) 
      then show ?thesis 
        using atc_io_reduction_on_subset
            atc_io_reduction_on_subset) 
    qed
  
    moreover have "finite (?TS j \<union> V)"
    proof -
      have "finite (?TS j)"
      then show ?thesis 
    qed
  
    moreover have "V \<subseteq> ?TS j \<union> V" 
      by blast
  
    moreover have "(\<forall> p . (prefix p xs' \<and> p \<noteq> xs') \<longrightarrow> map fst (vs' @ p) \<in> ?TS j \<union> V)"
    proof 
      fix p 
      show "prefix p xs' \<and> p \<noteq> xs' \<longrightarrow> map fst (vs' @ p) \<in> TS M2 M1 \<Omega> V m j \<union> V"
      proof
        assume "prefix p xs' \<and> p \<noteq> xs'"
  
        have "prefix (map fst (vs' @ p)) (map fst (vs' @ xs'))"
        have "prefix (map fst (vs' @ p)) (?stfV @ xr)"
          by auto
        then have "prefix (map fst vs' @ map fst p) (?stfV @ xr)"
          by simp 
        then have "prefix (map fst p) xr"
  
        have "?stfV @ xr \<in> ?TS (Suc j)" 
        proof (cases j)
          case 0
          then show ?thesis
        next
          case (Suc nat)
          then show ?thesis
        qed
  
        have "mcp (map fst vs @ xr) V (map fst vs)"
                mcp_prefix_of_suffix 
          by blast 
  
        have "map fst vs @ map fst p \<in> TS M2 M1 \<Omega> V m (Suc j)"
          by assumption
   
  
        have "Suc (length xr) = (Suc j)" 
          by assumption
        
        have"Suc (length p) < (Suc j)"
        proof -
          have "map fst xs' = xr"
          then show ?thesis
                append_eq_conv_conj length_map nat_less_le prefixE prefix_length_le take_all)
        qed
  
        have "mcp (map fst vs @ map fst p) V (map fst vs)"
          by blast 
  
        then have "map fst vs @ map fst p \<in> ?C (Suc (length (map fst p)))" 
  
        have "map fst vs @ map fst p \<in> ?TS j"
          using TS_union[of M2 M1 \<Omega> V m j]
        proof -
          have "Suc (length p) \<in> {0..<Suc j}"
          then show ?thesis
                length_map set_upt)
        qed 
  
        then show "map fst (vs' @ p) \<in> TS M2 M1 \<Omega> V m j \<union> V"
      qed
    qed
  
    
    moreover have "vs' @ xs' \<in> L M2 \<inter> L M1"
      by (metis (no_types, lifting) IntI RM_impl(2) 
          language_state_for_inputs_in_language_state subsetCE)
      
          
    
    ultimately have "Prereq M2 M1 vs' xs' (?TS j \<union> V) S1 \<Omega> V''"
      using RM_impl(4,5) unfolding Prereq.simps by blast
  
    have "V'' \<in> Perm V M1"
  
  
  

    have "\<not> Rep_Pre M2 M1 vs (xr || ?yr)"
      using minimal_sequence_to_failure_extending_implies_Rep_Pre
      by assumption
    then have "\<not> Rep_Pre M2 M1 vs' xs'"
  
    have "\<not> Rep_Cov M2 M1 V'' vs (xr || ?yr)" 
      using minimal_sequence_to_failure_extending_implies_Rep_Cov
      by assumption
    then have "\<not> Rep_Cov M2 M1 V'' vs' xs'"
  
    have "vs'@xs' \<in> L M1"
      by blast 
    
  
    
    have "LB M2 M1 vs' xs' (?TS j \<union> V) S1 \<Omega> V'' \<le> card (nodes M1)"
      by assumption
    then have "LB M2 M1 vs' xs' (?TS j \<union> V) S1 \<Omega> V'' \<le> m" 
      using assms(3) by linarith
  
    then show "False" 
  qed
qed






lemma asc_soundness :
  assumes     "OFSM M1"
  and         "OFSM M2"
shows "M1 \<preceq> M2 \<longrightarrow> atc_io_reduction_on_sets M1 T \<Omega> M2"
  using atc_io_reduction_on_sets_reduction assms by blast



lemma asc_main_theorem :
  assumes "OFSM M1"
  and     "OFSM M2"
  and     "asc_fault_domain M2 M1 m"
  and     "test_tools M2 M1 FAIL PM V \<Omega>"
  and     "final_iteration M2 M1 \<Omega> V m i"
shows     "M1 \<preceq> M2 \<longleftrightarrow> atc_io_reduction_on_sets M1 (TS M2 M1 \<Omega> V m i) \<Omega> M2"
by (metis asc_sufficiency assms(1-5) atc_io_reduction_on_sets_reduction)




end