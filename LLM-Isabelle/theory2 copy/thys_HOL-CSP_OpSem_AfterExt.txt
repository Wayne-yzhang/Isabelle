theory  AfterExt
  imports After
begin







lemma not_ready_AfterExt:
  by (auto simp add: AfterExt_def After_BOT intro: not_ready_After split: event.split)

lemma ready_set_AfterExt: 
  by (simp add: AfterExt_def ready_set_After ready_set_BOT 
                ready_set_STOP T_UU front_tickFree_butlast
         split: event.split) 



lemma F_AfterExt: 
proof (unfold AfterExt_def, split event.split, intro conjI allI impI)
    by (simp add: F_After)
next
    by (simp add: F_UU F_STOP BOT_iff_D ready_set_def set_eq_iff)
       (metis F_T T_nonTickFree_imp_decomp append_single_T_imp_tickFree hd_append2
              hd_in_set list.discI list.sel(1) list.sel(3) tickFree_def tick_T_F)
qed


lemma D_AfterExt:
proof (unfold AfterExt_def, split event.split, intro conjI allI impI)
    by (simp add: D_After)
       (metis Cons_in_T_imp_elem_ready_set D_T list.exhaust_sel)
next
    by (simp add: D_UU D_STOP BOT_iff_D)
       (metis D_imp_front_tickFree front_tickFree_implies_tickFree hd_append2
              hd_in_set is_processT9 nonTickFree_n_frontTickFree tickFree_def)
qed


lemma T_AfterExt:
proof (unfold AfterExt_def, split event.split, intro conjI allI impI)
    by (simp add: T_After set_eq_iff subset_iff)
       (metis Cons_in_T_imp_elem_ready_set list.collapse
              list.distinct(1) list.sel(1, 3) mem_Collect_eq ready_set_def)
next
  by (simp add: T_After T_UU T_STOP subset_iff)
     (metis front_tickFree_charn hd_append2 hd_in_set
            is_processT2_TR list.sel(3) tickFree_def tl_append_if)
qed




  by (auto simp add: AfterExt_def mono_After split: event.split)

  by (auto simp add: AfterExt_def mono_After_T split: event.split)

lemma mono_AfterExt_F :
  by (simp add: AfterExt_def mono_After_F) 

  by (auto simp add: AfterExt_def mono_After_D split: event.split)
     (meson BOT_iff_D divergence_refine_def subset_iff)

lemma mono_AfterExt_FD :
  by (auto simp add: AfterExt_def mono_After_FD FD_antisym split: event.split)

  by (auto simp add: AfterExt_def mono_After_DT split: event.split)
     (meson BOT_iff_D divergence_refine_def leDT_imp_leD subsetD)
 



  by (simp add: STOP_neq_BOT STOP_iff_T T_AfterExt ready_set_STOP T_STOP)

lemma AfterExt_is_STOP_iff:
  apply (cases e; simp add: AfterExt_def After_is_STOP_iff)
  by (metis After_BOT After_is_STOP_iff STOP_neq_BOT)
     (metis STOP_neq_BOT butlast.simps(2) front_tickFree_butlast is_processT2_TR tickFree_Cons)


  by (auto simp add: SKIP_neq_BOT STOP_iff_T T_AfterExt ready_set_SKIP T_SKIP)
 
  by (force simp add: BOT_iff_D D_AfterExt D_UU)

  apply (cases e; simp add: AfterExt_def After_is_BOT_iff)
  using BOT_iff_D D_UU STOP_neq_BOT is_processT9_tick by fastforce
 



lemma AfterExt_Mprefix_is_AfterExt_Mndetprefix: 
  by (simp add: AfterExt_def After_Mprefix_is_After_Mndetprefix 
                Mprefix_neq_BOT Mndetprefix_neq_BOT split: event.split)
  
  by (simp add: AfterExt_def After_Det_is_After_Ndet Det_is_BOT_iff Ndet_is_BOT_iff
         split: event.split)


lemma AfterExt_Ndet: 
  by (simp add: AfterExt_def Ndet_is_BOT_iff After_Ndet ready_set_BOT split: event.split)
  
 
lemma AfterExt_Mprefix: 
  by (simp add: AfterExt_def Mprefix_neq_BOT After_Mprefix split: event.split)

corollary AfterExt_prefix:
  unfolding write0_def by (simp add: AfterExt_Mprefix split: event.split)


lemmas AfterExt_Det = AfterExt_Ndet[folded AfterExt_Det_is_AfterExt_Ndet]
   and AfterExt_Mndetprefix = AfterExt_Mprefix
                              [unfolded AfterExt_Mprefix_is_AfterExt_Mndetprefix]


  apply (intro iffI)
   apply (simp add: BOT_iff_D D_Renaming)
  by (simp add: Renaming_BOT)

  apply (intro iffI, simp_all add: Renaming_STOP)
  by (auto simp add: STOP_iff_T T_Renaming intro: Nil_elem_T)


lemma AfterExt_Renaming:
  by (simp add: AfterExt_def After_Renaming Renaming_is_BOT_iff split: event.split)



  by (auto simp add: BOT_iff_D D_Seq D_UU)


lemma AfterExt_Seq:
  by (simp add: AfterExt_def After_Seq Ndet_id Ndet_is_BOT_iff 
                Seq_is_BOT_iff ready_set_def T_UU STOP_Seq split: event.split)


theorem AfterExt_Sync: 
  by (simp add: AfterExt_def After_Sync Sync_is_BOT_iff split: event.split)



lemma Hiding_FD_Hiding_AfterExt_if_ready_inside:
  and AfterExt_Hiding_FD_Hiding_AfterExt_if_ready_notin:
  by (simp add: AfterExt_def Hiding_FD_Hiding_After_if_ready_inside that)
     (simp add: AfterExt_def After_Hiding_FD_Hiding_After_if_ready_notin that)
 


lemmas Hiding_F_Hiding_AfterExt_if_ready_inside = 
       Hiding_FD_Hiding_AfterExt_if_ready_inside[THEN leFD_imp_leF]
   and AfterExt_Hiding_F_Hiding_AfterExt_if_ready_notin = 
       AfterExt_Hiding_FD_Hiding_AfterExt_if_ready_notin[THEN leFD_imp_leF]
   and Hiding_D_Hiding_AfterExt_if_ready_inside = 
       Hiding_FD_Hiding_AfterExt_if_ready_inside[THEN leFD_imp_leD]
   and AfterExt_Hiding_D_Hiding_AfterExt_if_ready_notin = 
       AfterExt_Hiding_FD_Hiding_AfterExt_if_ready_notin[THEN leFD_imp_leD]
   and Hiding_T_Hiding_AfterExt_if_ready_inside = 
       Hiding_FD_Hiding_AfterExt_if_ready_inside[THEN leFD_imp_leF, THEN leF_imp_leT]   
   and AfterExt_Hiding_T_Hiding_AfterExt_if_ready_notin = 
       AfterExt_Hiding_FD_Hiding_AfterExt_if_ready_notin[THEN leFD_imp_leF, THEN leF_imp_leT]

corollary Hiding_DT_Hiding_AfterExt_if_ready_inside:
  and AfterExt_Hiding_DT_Hiding_AfterExt_if_ready_notin: 
  by (simp add: Hiding_D_Hiding_AfterExt_if_ready_inside 
                Hiding_T_Hiding_AfterExt_if_ready_inside leD_leT_imp_leDT)
     (simp add: AfterExt_Hiding_D_Hiding_AfterExt_if_ready_notin 
                AfterExt_Hiding_T_Hiding_AfterExt_if_ready_notin leD_leT_imp_leDT)





lemma AfterExt_MultiDet_is_AfterExt_MultiNdet:
  by (auto simp add: AfterExt_def After_MultiDet_is_After_MultiNdet
                     MultiDet_is_BOT_iff MultiNdet_is_BOT_iff split: event.split)
 

lemma AfterExt_GlobalNdet: 
  and AfterExt_MultiNdet: 
  and AfterExt_MultiDet: 
  by ((cases e, simp_all add: AfterExt_def, 
       auto simp add: AfterExt_def ready_set_BOT After_GlobalNdet GlobalNdet_is_BOT_iff 
                      After_MultiNdet After_MultiDet MultiDet_is_BOT_iff MultiNdet_is_BOT_iff, 
       metis UNIV_I ready_set_BOT)[1])+






lemma AfterExt_Sliding_is_AfterExt_Ndet:
  by (simp add: AfterExt_def After_Sliding_is_After_Ndet Sliding_is_BOT_iff Ndet_is_BOT_iff
         split: event.split)

lemmas AfterExt_Sliding = AfterExt_Ndet[folded AfterExt_Sliding_is_AfterExt_Ndet]


lemma AfterExt_Throw:
  by (simp add: AfterExt_def After_Throw Throw_is_BOT_iff split: event.split)


lemma AfterExt_Interrupt:
  by (simp add: AfterExt_def After_Interrupt Interrupt_is_BOT_iff 
                Ndet_is_BOT_iff ready_set_BOT After_is_BOT_iff D_UU split: event.split)



 
lemma AfterExt_DF: 
  by (cases e) (simp_all add: AfterExt_def After_DF BOT_iff_D div_free_DF)

lemma AfterExt_DF\<^sub>S\<^sub>K\<^sub>I\<^sub>P:
  by (cases e) (simp_all add: AfterExt_def After_DF\<^sub>S\<^sub>K\<^sub>I\<^sub>P BOT_iff_D div_free_DF\<^sub>S\<^sub>K\<^sub>I\<^sub>P)

lemma AfterExt_RUN:
  by (cases e) (simp_all add: AfterExt_def After_RUN BOT_iff_D div_free_RUN)

lemma AfterExt_CHAOS:
  by (cases e) (simp_all add: AfterExt_def After_CHAOS BOT_iff_D div_free_CHAOS)

lemma AfterExt_CHAOS\<^sub>S\<^sub>K\<^sub>I\<^sub>P:
  by (cases e) (simp_all add: AfterExt_def After_CHAOS\<^sub>S\<^sub>K\<^sub>I\<^sub>P BOT_iff_D div_free_CHAOS\<^sub>S\<^sub>K\<^sub>I\<^sub>P)



lemma DF_FD_AfterExt:
  apply (cases e, simp add: AfterExt_def DF_FD_After)
  by (metis anti_mono_ready_set_FD event.distinct(1) image_iff ready_set_DF subsetD)

lemma DF\<^sub>S\<^sub>K\<^sub>I\<^sub>P_FD_AfterExt:
  by (simp add: AfterExt_def DF\<^sub>S\<^sub>K\<^sub>I\<^sub>P_FD_After)



lemma deadlock_free_AfterExt:
  by (cases e)
     (simp add: AfterExt_def deadlock_free_After, 
     simp add: AfterExt_def BOT_iff_D deadlock_free_implies_div_free non_deadlock_free_STOP)

lemma deadlock_free\<^sub>S\<^sub>K\<^sub>I\<^sub>P_AfterExt:
  by (cases e)
     (simp add: AfterExt_def deadlock_free\<^sub>S\<^sub>K\<^sub>I\<^sub>P_After, 
      simp add: AfterExt_def BOT_iff_D deadlock_free\<^sub>S\<^sub>K\<^sub>I\<^sub>P_implies_div_free non_deadlock_free\<^sub>S\<^sub>K\<^sub>I\<^sub>P_STOP)



end
    