theory Fixed_Length_Vector
  imports "HOL-Library.Numeral_Type" "HOL-Library.Code_Cardinality"
begin

  by (induction xs) auto



class index =
begin




  unfolding indexes_def by auto

lemma list_cong_index:
  apply (rule nth_equalityI)
  using assms from_index_surj by auto

lemma from_indexE:
  using assms by (metis from_index_surj)

end


class index1 = index +
begin


  by (metis less_nat_zero_code from_index_bound neq0_conv)

  by (metis card_nonzero  card.infinite less_irrefl)

sublocale finite
  by standard simp


  by (meson injD from_index_bound from_index_inj to_from_index)

  unfolding indexes_def by auto

  by (rule inj_onI) (force elim: from_indexE)


end


instantiation num0 :: index
begin


instance
  by standard auto

end


  by (auto simp: indexes_def)

instantiation num1 :: index1
begin


instance
  by standard (auto simp: inj_on_def)

end


  by (auto simp: indexes_def)

instantiation bit0 :: (finite) index1
begin



instance
  apply standard
  subgoal
    by (simp add: to_index_bit0_def from_index_bit0_def bit0.of_nat_eq Abs_bit0_inverse)
  subgoal for n
  subgoal for n
    using Rep_bit0[of n]
    by (simp add: from_index_bit0_def nat_less_iff)
  subgoal
    unfolding from_index_bit0_def inj_on_def
    by (metis Rep_bit0 Rep_bit0_inverse atLeastLessThan_iff int_nat_eq)
  done

end

instantiation bit1 :: (finite) index1
begin



instance
  apply standard
  subgoal
    by (simp add: to_index_bit1_def from_index_bit1_def bit1.of_nat_eq Abs_bit1_inverse)
  subgoal for n
  subgoal for n
    using Rep_bit1[of n]
    by (simp add: from_index_bit1_def nat_less_iff)
  subgoal
    unfolding from_index_bit1_def inj_on_def
    by (metis Rep_bit1 Rep_bit1_inverse atLeastLessThan_iff eq_nat_nat_iff)
  done

end

lemma indexes_bit_simps:
  unfolding indexes_def to_index_bit0_def to_index_bit1_def
  by simp+


class index_enum = index1 + enum +

instance num1 :: index_enum
  by standard (auto simp: indexes_def enum_num1_def)

instance bit0 :: (finite) index_enum
  by standard (auto simp: indexes_def to_index_bit0_def enum_bit0_def Abs_bit0'_def bit0.of_nat_eq)


instance bit1 :: (finite) index_enum
  by standard (auto simp: indexes_def to_index_bit1_def enum_bit1_def Abs_bit1'_def bit1.of_nat_eq)



typedef ('a, 'b) vec = "{xs. length xs = CARD('b)} :: 'a list set"
  morphisms list_of_vec vec_of_list

declare vec.list_of_vec_inverse[simp]

type_notation vec (infixl "^" 15)

setup_lifting type_definition_vec







  map: map_vec
  sets: set_vec
  bd: natLeq
  wits: replicate_vec
  rel: rel_vec
  pred: pred_vec
  subgoal
    apply (rule ext)
    by transfer' auto
  subgoal
    apply (rule ext)
    by transfer' auto
  subgoal
    by transfer' auto
  subgoal
    apply (rule ext)
    by transfer' auto
  subgoal by (fact natLeq_card_order)
  subgoal by (fact natLeq_cinfinite)
  subgoal by (fact regularCard_natLeq)
  subgoal
    apply transfer'
    apply (simp flip: finite_iff_ordLess_natLeq)
    done
  subgoal
    apply (rule predicate2I)
    apply transfer'
    by (smt (verit) list_all2_trans relcompp.relcompI)
  subgoal
    apply (rule ext)+
    apply transfer
    by (auto simp: list.in_rel)
  subgoal
    apply (rule ext)
    apply transfer'
    by (auto simp: list_all_iff)
  subgoal
    by transfer' auto
  done




  by transfer' auto



  by transfer auto




  by transfer auto

  by (rule unit_vec_unique)

  by transfer auto

  by simp

  by simp

  by transfer auto

  by (simp add: vec.pred_set)



lemmas vec_simps[simp] =
  map_vec.rep_eq
  zip_vec.rep_eq
  replicate_vec.rep_eq

lemmas map_vec_cong[fundef_cong] = map_cong[Transfer.transferred]

lemmas rel_vec_cong = list.rel_cong[Transfer.transferred]

lemmas pred_vec_cong = list.pred_cong[Transfer.transferred]

lemma vec_eq_if: "list_of_vec f = list_of_vec g \<Longrightarrow> f = g"
  by (metis list_of_vec_inverse)

lemma vec_cong: "(\<And>i. f $ i = g $ i) \<Longrightarrow> f = g"
  by transfer (simp add: list_cong_index)

  by transfer' auto

  by transfer auto

lemma set_vecE[elim]:
  using assms
  by transfer (auto simp: in_set_conv_nth elim: from_indexE)

  by transfer auto

  by transfer auto

  by transfer simp

  by (rule vec_cong) auto

lemma vec_explode1:
  apply (subst vec_explode[of v])
  apply (rule arg_cong[where f = vec_lambda])
  apply (rule ext)
  apply (subst num1_eq1)
  by (rule refl)

  by transfer auto

  by transfer auto

  by transfer auto

  by transfer' (simp add: zip_map_same)

  by transfer' (auto simp: zip_map1 zip_map2)

  using list_of_vec by blast

  by (subst vec.vec_of_list_inverse) auto

  by (rule map_vec.abs_eq) (auto simp: eq_onp_def)

  by (rule set_vec.abs_eq) (auto simp: eq_onp_def)

  by (erule list_induct2) auto

  by transfer (simp add: list_all_zip)

  by (erule list_induct2) auto

  by (erule list_induct2) auto

  by transfer (simp add: list_all2_left)

  by transfer (simp add: list_all2_right)




lemma bounded_lists_finite:
proof (induction n)
  case (Suc n)
    unfolding bounded_lists_def
    by (force simp: length_Suc_conv split_beta)
  ultimately show ?case
    using assms by (meson finite_SigmaI finite_imageI finite_subset)
qed (simp add: bounded_lists_def)

  unfolding bij_betw_def bounded_lists_def
  by (metis (no_types, lifting) Ball_set Collect_cong UNIV_I inj_def type_definition.Rep_range type_definition_vec vec_eq_if)



instance vec :: (finite, type) finite
  apply standard
  apply (subst bij_betw_finite[OF bounded_lists_bij])
  apply (rule bounded_lists_finite)
  by simp


instantiation vec :: (type, type) size
begin


instance ..

end

  by transfer simp


instantiation vec :: (equal, type) equal
begin


instance
  apply standard
  apply transfer'
  by (simp add: equal_list_def)

end




  apply transfer
  unfolding distinct_conv_nth comp_apply
  by (metis from_index_bound from_to_index to_from_index)

lemma distinct_vecI:
  using assms unfolding distinct_vec_alt_def by simp

  by transfer' (metis distinct_map)

  by transfer' (metis distinct_zipI1)

  by transfer' (metis distinct_zipI2)

  by transfer' (metis distinct_map)

  by (subst distinct_vec.rep_eq) (simp add: list_vec_list)



  by transfer simp

lemma elem_le_sum_vec:
  shows "f $ i \<le> sum_vec f"
  by transfer (simp add: elem_le_sum_list)





declare [[code abort: replicate']]

  by (auto simp: replicate'_def)


experiment begin

proposition
  by eval+

end

export_code
  sum_vec
  map_vec
  rel_vec
  pred_vec
  set_vec
  zip_vec
  distinct_vec
  list_of_vec
  vec_of_list'
  checking SML

lifting_update vec.lifting
lifting_forget vec.lifting

bundle vec_syntax begin
type_notation
  vec (infixl "^" 15)
notation
  nth_vec (infixl "$" 90) and
  vec_lambda (binder "\<chi>" 10)
end

bundle no_vec_syntax begin
no_type_notation
  vec (infixl "^" 15)
no_notation
  nth_vec (infixl "$" 90) and
  vec_lambda (binder "\<chi>" 10)
end

unbundle no_vec_syntax

end