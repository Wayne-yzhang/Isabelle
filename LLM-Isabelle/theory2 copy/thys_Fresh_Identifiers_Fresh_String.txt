theory Fresh_String
  imports Fresh
begin


text

definition ordst :: "string \<Rightarrow> string \<Rightarrow> bool" where
"ordst X Y \<equiv>
 (length X \<le> length Y \<and> X \<noteq> [] \<and> Y \<noteq> [] \<and> of_char (last X) < (of_char(last Y) :: nat))
 \<or> (length X < length Y)"

definition ordstNS :: "string \<Rightarrow> string \<Rightarrow> bool" where
"ordstNS X Y \<equiv> X = Y \<or> ordst X Y"

lemma ordst_antirefl: "\<not> ordst X X"
by(auto simp add: ordst_def)

lemma ordst_trans:
assumes As1: "ordst X Y" and As2: "ordst Y Z"
shows "ordst X Z"
proof(cases "(length X < length Y) \<or> (length Y < length Z)")
  assume "(length X < length Y) \<or> (length Y < length Z)"
  moreover
  {assume "length X < length Y"
   moreover have "length Y \<le> length Z"
   using As2 ordst_def by force
   ultimately have "length X < length Z" by force
   hence ?thesis using ordst_def by force}
  moreover
  {assume "length Y < length Z"
   moreover have "length X \<le> length Y"
   using As1 ordst_def by force
   ultimately have "length X < length Z" by force
   hence ?thesis using ordst_def by force}
  ultimately show ?thesis by force
next
  assume "\<not> (length X < length Y \<or> length Y < length Z)"
  hence Ft: "\<not> length X < length Y  \<and> \<not> length Y < length Z" by force
  hence "(of_char(last X) :: nat) < of_char(last Y) \<and>
         (of_char(last Y) :: nat) < of_char(last Z) \<and>
         length X \<le> length Y \<and> length Y \<le> length Z"
  using As1 As2 ordst_def by force
  hence "(of_char(last X) :: nat) < of_char(last Z) \<and>
         length X \<le> length Z" by force
  moreover have "X \<noteq> [] \<and> Z \<noteq> []"
  using As1 As2 Ft ordst_def by force
  ultimately show ?thesis using ordst_def[of X Z] by force
qed

lemma ordstNS_refl: "ordstNS X X"
by(simp add: ordstNS_def)

lemma ordstNS_trans:
"ordstNS X Y \<Longrightarrow> ordstNS Y Z \<Longrightarrow> ordstNS X Z"
by (metis ordstNS_def ordst_trans)

lemma ordst_ordstNS_trans:
"ordst X Y \<Longrightarrow> ordstNS Y Z \<Longrightarrow> ordst X Z"
by (metis ordstNS_def ordst_trans)

lemma ordstNS_ordst_trans:
"ordstNS X Y \<Longrightarrow> ordst Y Z \<Longrightarrow> ordst X Z"
by (metis ordstNS_def ordst_trans)



