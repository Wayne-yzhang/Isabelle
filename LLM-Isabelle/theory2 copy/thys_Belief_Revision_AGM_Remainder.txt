theory AGM_Remainder

imports AGM_Logic

begin






context Tarskian_logic

begin

  by (auto simp add:rem split:if_splits) 

lemma rem_closure: "K = Cn(A) \<Longrightarrow> B \<in> K .\<bottom>. \<phi> \<Longrightarrow> B = Cn(B)"
  by (simp add:rem infer_def) (metis idempotency_L inclusion_L monotonicity_L psubsetI)

  unfolding rem infer_def apply safe 
  by (simp_all add: Cn_same) blast+

  unfolding rem by auto                           

  unfolding rem by (simp add: infer_def validD_L)

end

context Supraclassical_logic

begin

proof -
  { fix \<psi> and B
      apply (simp add:rem, elim conjE)
      by (metis dual_order.order_iff_strict inclusion_L insert_subset)
    with d have False using rem imp_recovery1 
      by (metis (no_types, lifting) CollectD infer_def)
  }
    using idempotency_L by auto
qed

An important lemma states that the resulting remainder is also a remainder of any lost proposition\<close>
lemma remainder_recovery_bis: \<open>K = Cn(A) \<Longrightarrow> K \<turnstile> \<psi> \<Longrightarrow> \<not> B \<turnstile> \<psi> \<Longrightarrow> B \<in> K .\<bottom>. \<phi> \<Longrightarrow> B \<in> K .\<bottom>. \<psi>\<close>
  assume a:\<open>K = Cn(A)\<close> and b:\<open>\<not> B \<turnstile> \<psi>\<close> and c:\<open>B \<in> K .\<bottom>. \<phi>\<close> and d:\<open>K \<turnstile> \<psi>\<close>
  hence d:\<open>B \<turnstile> \<phi> .\<longrightarrow>. \<psi>\<close> using remainder_recovery by simp
  with c show \<open>B \<in> K .\<bottom>. \<psi>\<close>
corollary remainder_recovery_imp: \<open>K = Cn(A) \<Longrightarrow> K \<turnstile> \<psi> \<Longrightarrow> \<tturnstile> (\<psi> .\<longrightarrow>. \<phi>) \<Longrightarrow> B \<in> K .\<bottom>. \<phi> \<Longrightarrow> B \<in> K .\<bottom>. \<psi>\<close>
\<comment> \<open>If we integrate back the eliminated proposition into the remainder, we retrieve the original set!\<close>
lemma remainder_expansion: \<open>K = Cn(A) \<Longrightarrow> K \<turnstile> \<psi> \<Longrightarrow> \<not> B \<turnstile> \<psi> \<Longrightarrow> B \<in> K .\<bottom>. \<phi> \<Longrightarrow> B \<oplus> \<psi> = K\<close>
  assume a:\<open>K = Cn(A)\<close> and b:\<open>K \<turnstile> \<psi>\<close> and c:\<open>\<not> B \<turnstile> \<psi>\<close> and d:\<open>B \<in> K .\<bottom>. \<phi>\<close>
  then show \<open>B \<oplus> \<psi> \<subseteq> K\<close>
  assume a:\<open>K = Cn(A)\<close> and b:\<open>K \<turnstile> \<psi>\<close> and c:\<open>\<not> B \<turnstile> \<psi>\<close> and d:\<open>B \<in> K .\<bottom>. \<phi>\<close>
    assume \<open>\<chi> \<in> K\<close>
    hence e:\<open>B \<turnstile> \<phi> .\<longrightarrow>.\<chi>\<close> using remainder_recovery[OF a _ d, of \<chi>] assumption_L by blast 
    have \<open>\<psi> \<in> K\<close> using a b idempotency_L infer_def by blast
    hence f:\<open>B \<union> {\<psi>} \<turnstile> \<phi>\<close> using b c d apply(simp add:rem)
    from e f have \<open>B \<union> {\<psi>} \<turnstile> \<chi>\<close> using imp_PL imp_trans by blast
  then show \<open>K \<subseteq> B \<oplus> \<psi>\<close> 
text\<open>To eliminate a conjunction, we only need to remove one side\<close>
lemma remainder_conj: \<open>K = Cn(A) \<Longrightarrow> K \<turnstile> \<phi> .\<and>. \<psi> \<Longrightarrow> K .\<bottom>. (\<phi> .\<and>. \<psi>) = (K .\<bottom>. \<phi>) \<union> (K .\<bottom>. \<psi>)\<close>
   using remainder_recovery_imp[of K A \<open>\<phi> .\<and>. \<psi>\<close> \<phi>] 
  using remainder_recovery_imp[of K A \<open>\<phi> .\<and>. \<psi>\<close> \<psi>]
subsection \<open>Remainders in a compact logic\<close>
text\<open>In case of a supraclassical logic, remainders get impressive properties\<close>
text \<open>The following lemma is the Lindembaum's lemma requiring the Zorn's lemma (already available in standard Isabelle/HOL). 
proof -
    using b infer_def validD_L by blast
  define \<B> where "\<B> \<equiv> {B'. B \<subseteq> B' \<and> B' \<subseteq> A \<and> \<not> B' \<turnstile> \<phi>}"
    unfolding \<B>_def
    by (simp add: le_fun_def less_eq_set_def subset_chain_def)
    by (metis (no_types, lifting) \<B>_def subset_chain_def less_eq_Sup mem_Collect_eq subset_iff)
  { fix C
      using \<B>_def  e[OF f g] chain_closure[OF c d[OF g]] 
      by simp (metis (no_types, lifting) CollectD Sup_least Sup_subset_mono g subset.chain_def subset_trans)
  } note f=this 
     apply (meson Union_upper f) 
    using \<B>_def a b by blast
  then show ?thesis 
    by (simp add:rem \<B>_def, rule_tac x=B' in exI) (metis psubsetE subset_trans)
qed

  by (metis bot.extremum empty_iff upper_remainder valid_def)

end

end
