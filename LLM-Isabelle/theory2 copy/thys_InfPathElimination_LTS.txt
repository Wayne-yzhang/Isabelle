theory LTS
imports Graph Labels SymExec
begin





record ('vert,'var,'d) lts = "'vert rgraph" +
  labelling :: "'vert edge \<Rightarrow> ('var,'d) label"


abbreviation init :: 
"('vert,'var,'d,'x) lts_scheme \<Rightarrow> 'vert" 
where
  "init lts \<equiv> root lts"


abbreviation labels :: 
  "('vert,'var,'d,'x) lts_scheme \<Rightarrow> ('var,'d) label set" 
where
  "labels lts \<equiv> labelling lts ` edges lts"


abbreviation trace :: 
  "'vert edge list \<Rightarrow> ('vert edge \<Rightarrow> ('var,'d) label) \<Rightarrow> ('var,'d) label list" 
where
  "trace as L \<equiv> map L as"




abbreviation graph :: 
  "('vert,'var,'d,'x) lts_scheme \<Rightarrow> 'vert rgraph"
where
  "graph lts \<equiv> rgraph.truncate lts"


abbreviation wf_lts :: 
  "('vert,'var,'d,'x) lts_scheme \<Rightarrow> bool" 
where 
  "wf_lts lts \<equiv> wf_rgraph (graph lts)"


abbreviation finite_lts :: 
  "('vert,'var,'d,'x) lts_scheme \<Rightarrow> bool" 
where
  "finite_lts lts \<equiv> \<forall> l \<in> range (labelling lts). finite_label l"




abbreviation feasible_subpath ::
  "('vert,'var,'d,'x) lts_scheme \<Rightarrow> ('var,'d) conf \<Rightarrow> 'vert \<Rightarrow> 'vert edge list \<Rightarrow> 'vert \<Rightarrow> bool"
where
  "feasible_subpath lts pc l1 as l2 \<equiv> Graph.subpath lts l1 as l2 
                                    \<and> feasible pc (trace as (labelling lts))"
  

abbreviation feasible_subpath_from ::
  "('vert,'var,'d,'x) lts_scheme \<Rightarrow> ('var,'d) conf \<Rightarrow> 'vert \<Rightarrow> 'vert edge list \<Rightarrow> bool"
where
  "feasible_subpath_from lts pc l as \<equiv> \<exists> l'. feasible_subpath lts pc l as l'"

abbreviation feasible_subpaths_from ::
  "('vert,'var,'d,'x) lts_scheme \<Rightarrow> ('var,'d) conf \<Rightarrow> 'vert \<Rightarrow> 'vert edge list set"
where
  "feasible_subpaths_from lts pc l \<equiv> {ts. feasible_subpath_from lts pc l ts}"


abbreviation feasible_path ::
  "('vert,'var,'d,'x) lts_scheme \<Rightarrow> ('var,'d) conf \<Rightarrow> 'vert edge list \<Rightarrow> 'vert \<Rightarrow> bool"
where
  "feasible_path lts pc as l \<equiv> feasible_subpath lts pc (init lts) as l"

abbreviation feasible_paths ::
  "('vert,'var,'d,'x) lts_scheme \<Rightarrow> ('var,'d) conf \<Rightarrow> 'vert edge list set"
where
  "feasible_paths lts pc \<equiv> {as. \<exists> l. feasible_path lts pc as l}"

end
