theory CreateAlgorithms
  imports BasicAlgorithms
begin

fun is_visible :: "('\<I>, '\<Sigma>) woot_character \<Rightarrow> bool"
  where "is_visible (InsertMessage _ _ _ s) = (s \<noteq> None)"

fun nth_visible :: "('\<I>, '\<Sigma>) woot_character list \<Rightarrow> nat \<Rightarrow> error + '\<I> extended"
  where
    "nth_visible s k = (let v = ext_ids (filter is_visible s) in 
      if k < length v then 
        return (v ! k) 
      else 
        error (STR ''Argument k out of bounds.''))"


fun from_non_extended :: "'\<I> extended \<Rightarrow> error + '\<I>"
  where
    "from_non_extended \<lbrakk> i \<rbrakk> = Inr i" |
    "from_non_extended _ = error (STR ''Expected InString'')"

fun create_insert :: 
  "('\<I>, '\<Sigma>) woot_character list \<Rightarrow> nat \<Rightarrow> '\<Sigma> \<Rightarrow>  '\<I> \<Rightarrow> error + ('\<I>, '\<Sigma>) message"
  where "create_insert s n \<sigma>' i =
    do {
      p \<leftarrow> nth_visible s n;
      q \<leftarrow> nth_visible s (n + 1);
      return (Insert (InsertMessage p i q \<sigma>'))
    }"


fun create_delete :: "('\<I>, '\<Sigma>) woot_character list \<Rightarrow> nat \<Rightarrow> error + ('\<I>, '\<Sigma>) message"
  where "create_delete s n =
    do {
      m \<leftarrow> nth_visible s n;
      i \<leftarrow> from_non_extended m;
      return (Delete (DeleteMessage i))
    }"


end