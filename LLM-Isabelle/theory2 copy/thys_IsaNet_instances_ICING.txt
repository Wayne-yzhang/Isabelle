theory ICING
  imports
    "../Parametrized_Dataplane_3_undirected"
begin

locale icing_defs = network_assums_undirect _ _ _ auth_seg0 
  for auth_seg0 :: "(msgterm \<times> nat ahi_scheme list) set"
begin

type_synonym ICING_HF = "(nat, unit) HF"


fun sntag :: "nat ahi_scheme \<Rightarrow> msgterm" where
  "sntag \<lparr>UpIF = upif, DownIF = downif, ASID = asid, \<dots> = tag\<rparr> 
    = \<langle>macKey asid, if2term upif, if2term downif, Num tag\<rangle>"

lemma sntag_eq: "sntag ahi2 = sntag ahi1 \<Longrightarrow> ahi2 = ahi1"
  by(cases ahi1,cases ahi2) auto

fun hf2term :: "nat ahi_scheme \<Rightarrow> msgterm" where
  "hf2term \<lparr>UpIF = upif, DownIF = downif, ASID = asid, \<dots> = tag\<rparr> 
  = L [if2term upif, if2term downif, Num asid, Num tag]"

fun term2hf :: "msgterm \<Rightarrow> nat ahi_scheme" where
  "term2hf (L [upif, downif, Num asid, Num tag]) 
  = \<lparr>UpIF = term2if upif, DownIF = term2if downif, ASID = asid, \<dots> = tag\<rparr>"

lemma term2hf_hf2term[simp]: "term2hf (hf2term hf) = hf" apply(cases hf) by auto

definition fullpath :: "ICING_HF list \<Rightarrow> msgterm" where
  "fullpath hfs = L (map (hf2term o AHI) hfs)"

definition maccontents where
  "maccontents ahi hfs PoC_i_expire
  = \<langle>Mac[sntag ahi] \<langle>fullpath hfs, Num PoC_i_expire\<rangle>, \<langle>Num 0, Hash (fullpath hfs)\<rangle>\<rangle>"

fun hf_valid :: "msgterm \<Rightarrow> msgterm
    \<Rightarrow> ICING_HF list
    \<Rightarrow> ICING_HF 
    \<Rightarrow> bool" where 
  "hf_valid (Num PoC_i_expire) uinfo hfs \<lparr>AHI = ahi, UHI = uhi, HVF = A_i\<rparr> \<longleftrightarrow> 
    uhi = () \<and> uinfo = \<epsilon> \<and> A_i = Hash (maccontents ahi hfs PoC_i_expire)"
| "hf_valid _ _ _ _ = False"

fun extr :: "msgterm \<Rightarrow> nat ahi_scheme list" where
  "extr (Mac[Mac[_] \<langle>L fullpathhfs, Num PoC_i_expire\<rangle>] _)
 = map term2hf fullpathhfs"
| "extr _ = []"

fun extr_ainfo :: "msgterm \<Rightarrow> msgterm" where 
  "extr_ainfo (Mac[_] (L (Num ts # xs))) = Num ts"
| "extr_ainfo _ = \<epsilon>"

abbreviation term_ainfo :: "msgterm \<Rightarrow> msgterm" where
  "term_ainfo \<equiv> id"

definition auth_restrict where 
  "auth_restrict ainfo uinfo l \<equiv> (\<exists>ts. ainfo = Num ts) \<and> (uinfo = \<epsilon>)"

fun terms_hf :: "ICING_HF \<Rightarrow> msgterm set" where 
  "terms_hf hf = {HVF hf}"

abbreviation terms_uinfo :: "msgterm \<Rightarrow> msgterm set" where 
  "terms_uinfo x \<equiv> {x}"

abbreviation no_oracle where "no_oracle \<equiv> (\<lambda> _ _. True)"

lemma hf_valid_invert:
  "hf_valid tsn uinfo hfs hf \<longleftrightarrow>
(\<exists> PoC_i_expire ahi A_i . tsn = Num PoC_i_expire \<and> ahi = AHI hf \<and>
UHI hf = () \<and> uinfo = \<epsilon> \<and>
HVF hf = A_i \<and>
A_i = Hash (maccontents ahi hfs PoC_i_expire))"
  apply(cases hf) by(auto elim!: hf_valid.elims)

lemma hf_valid_auth_restrict[dest]: "hf_valid ainfo uinfo hfs hf \<Longrightarrow> auth_restrict ainfo uinfo l"
  by(auto simp add: hf_valid_invert auth_restrict_def)

lemma auth_restrict_ainfo[dest]: "auth_restrict ainfo uinfo l \<Longrightarrow> \<exists>ts. ainfo = Num ts"
  by(auto simp add: auth_restrict_def)
lemma auth_restrict_uinfo[dest]: "auth_restrict ainfo uinfo l \<Longrightarrow> uinfo = \<epsilon>"
  by(auto simp add: auth_restrict_def)

lemma info_hvf: 
  assumes "hf_valid ainfo uinfo hfs m" "hf_valid ainfo' uinfo' hfs' m'" 
          "HVF m = HVF m'" "m \<in> set hfs" "m' \<in> set hfs'"
  shows "ainfo' = ainfo" "m' = m"
  using assms
  apply(auto simp add: hf_valid_invert maccontents_def intro: ahi_eq)
  apply(cases m,cases m')
  by(auto intro: sntag_eq)



print_locale dataplane_3_undirected_defs
sublocale dataplane_3_undirected_defs _ _ _ auth_seg0 hf_valid auth_restrict extr extr_ainfo 
  term_ainfo terms_hf terms_uinfo no_oracle
  by unfold_locales

declare parts_singleton[dest]

definition ik_add :: "msgterm set" where
  "ik_add \<equiv> { PoC | ainfo l uinfo hf PoC pkthash.  
                 (ainfo, l) \<in> auth_seg2 uinfo
                  \<and> hf \<in> set l \<and> HVF hf = Mac[PoC] pkthash }"

lemma ik_addI:
  "\<lbrakk>(ainfo, l) \<in> local.auth_seg2 uinfo; hf \<in> set l; HVF hf = Mac[PoC] pkthash\<rbrakk> \<Longrightarrow> PoC \<in> ik_add"
  by(auto simp add: ik_add_def)

lemma ik_add_form: 
  "t \<in> ik_add \<Longrightarrow> \<exists> asid upif downif tag l . t = Mac[\<langle>macKey asid, if2term upif, if2term downif, Num tag\<rangle>] l"
  apply(auto simp add: ik_add_def auth_seg2_def maccontents_def dest!: TW.holds_set_list)
  apply(auto simp add: hf_valid_invert maccontents_def auth_restrict_def)
    by (meson sntag.elims)

lemma elem_eq: "\<lbrakk>x \<in> xs; x = y; xs = ys\<rbrakk> \<Longrightarrow> y \<in> ys"
  by simp

lemma valid_hf_eq: 
"\<lbrakk>HVF hf = Mac[Mac[sntag (AHI hf)] \<langle>fullpath hfs, ainfo'\<rangle>] \<langle>Num 0, Hash (fullpath hfs)\<rangle>;
 HVF hf' = Mac[Mac[sntag (AHI hf)] \<langle>fullpath hfs, ainfo'\<rangle>] pkthash; 
(ainfo', l) \<in> auth_seg2 uinfo; hf' \<in> set l\<rbrakk>
  \<Longrightarrow> hf = hf'"
  by(auto simp add: auth_seg2_def hf_valid_invert maccontents_def auth_restrict_def dest!: sntag_eq)

lemma parts_ik_add[simp]: "parts ik_add = ik_add"
  by (auto intro!: parts_Hash dest: ik_add_form)

abbreviation ik_oracle :: "msgterm set" where "ik_oracle \<equiv> {}"

lemma uinfo_empty[dest]: "(ainfo, hfs) \<in> auth_seg2 uinfo \<Longrightarrow> uinfo = \<epsilon>"
  by(auto simp add: auth_seg2_def auth_restrict_def)

print_locale dataplane_3_undirected_ik_defs
sublocale
  dataplane_3_undirected_ik_defs _ _ _ auth_seg0 terms_uinfo no_oracle hf_valid auth_restrict extr 
    extr_ainfo term_ainfo terms_hf ik_add ik_oracle
  by unfold_locales

lemma ik_hfs_form: "t \<in> parts ik_hfs \<Longrightarrow> \<exists> t' . t = Hash t'"
  apply auto apply(drule parts_singleton)
  by(auto simp add: auth_seg2_def hf_valid_invert)

declare ik_hfs_def[simp del]

lemma parts_ik_hfs[simp]: "parts ik_hfs = ik_hfs"
  by (auto intro!: parts_Hash ik_hfs_form)

lemma ik_hfs_simp: 
  "t \<in> ik_hfs \<longleftrightarrow> (\<exists>t' . t = Hash t') \<and> (\<exists>hf . t = HVF hf
                    \<and> (\<exists>hfs. hf \<in> set hfs \<and> (\<exists>ainfo uinfo. (ainfo, hfs) \<in> auth_seg2 uinfo
                    \<and> hf_valid ainfo uinfo hfs hf)))" (is "?lhs \<longleftrightarrow> ?rhs")
proof 
  assume asm: "?lhs" 
  then obtain ainfo uinfo hf hfs where 
    dfs: "hf \<in> set hfs" "(ainfo, hfs) \<in> auth_seg2 uinfo" "t = HVF hf"
    by(auto simp add: ik_hfs_def)
  then obtain uinfo where "hfs_valid_prefix ainfo uinfo [] hfs = hfs"  "(ainfo, AHIS hfs) \<in> auth_seg0"
    by(auto simp add: auth_seg2_def)
  then show "?rhs" using asm dfs 
    by (auto 3 4 simp add: auth_seg2_def intro!: ik_hfs_form intro!: exI[of _ hf])+
qed(auto simp add: ik_hfs_def)


lemma ik_uinfo_empty[simp]: "ik_uinfo = {\<epsilon>}" 
  by(auto simp add: ik_uinfo_def auth_seg2_def auth_restrict_def intro!: exI[of _ "[]"])
declare ik_uinfo_def[simp del]

lemma auth_ainfo[dest]: "\<lbrakk>(ainfo, hfs) \<in> auth_seg2 uinfo\<rbrakk> \<Longrightarrow> \<exists> ts . ainfo = Num ts"
  by(auto simp add: auth_seg2_def auth_restrict_def)

lemma Num_ik[intro]: "Num ts \<in> ik"
  by(auto simp add: ik_def auth_seg2_def auth_restrict_def intro!: exI[of _ "[]"])

lemma analz_parts_ik[simp]: "analz ik = parts ik"
  apply(rule no_crypt_analz_is_parts)
  by(auto simp add: ik_def auth_seg2_def auth_restrict_def ik_hfs_simp dest: ik_add_form)

lemma parts_ik[simp]: "parts ik = ik"
  by(auto 3 4 simp add: ik_def auth_restrict_def auth_seg2_def dest!: parts_singleton_set)

lemma sntag_synth_bad: "sntag ahi \<in> synth ik \<Longrightarrow> ASID ahi \<in> bad"
  by(cases ahi)
    (auto simp add: ik_def ik_hfs_simp auth_restrict_def auth_seg2_def dest: ik_add_form)

lemma HF_eq:
  "\<lbrakk>AHI hf' = AHI hf; UHI hf' = UHI hf; HVF hf' = HVF hf\<rbrakk> \<Longrightarrow> hf' = (hf::('x, 'y)HF)"
  apply(cases hf', cases hf)
  by(auto elim: HF.cases)



lemma COND_honest_hf_analz:
  assumes "ASID (AHI hf) \<notin> bad" "hf_valid ainfo uinfo hfs hf" "terms_hf hf \<subseteq> synth (analz ik)"
    "no_oracle ainfo uinfo" "hf \<in> set hfs"
    shows "terms_hf hf \<subseteq> analz ik"
proof-
  from assms(3) have hf_synth_ik: "HVF hf \<in> synth ik" by auto
  then have "\<exists>hfs uinfo. hf \<in> set hfs \<and> (ainfo, hfs) \<in> auth_seg2 uinfo"
    using assms(1,2,4,5) 
    apply(auto simp add: ik_def hf_valid_invert ik_hfs_simp)
    subgoal for PoC_i_expire hf' hfs' PoC_i_expire'
      by(auto intro!: exI[of _ hfs'] elim!: back_subst[where ?a=hf', where ?b=hf] 
              simp add: maccontents_def sntag_eq)
    subgoal by(auto simp add: ik_hfs_simp ik_def hf_valid_invert simp del: ik_uinfo_def)
    subgoal by(auto simp add: ik_hfs_simp ik_def hf_valid_invert maccontents_def 
               intro: sntag_synth_bad dest: ik_add_form)
    subgoal
      apply(auto simp add: ik_hfs_simp ik_def hf_valid_invert maccontents_def auth_restrict_def auth_seg2_def
      subgoal by (simp add: fullpath_def)
      subgoal using fullpath_def ik_add_form by auto
        apply (auto simp add: ik_add_def)
        subgoal for ainfoa l uinfoa hf' pkthash
          apply(frule valid_hf_eq[where ?hf'="hf'"])
          by(auto dest: valid_hf_eq simp add: hf_valid_invert maccontents_def auth_seg2_def auth_restrict_def)
      done
    done
  then have "HVF hf \<in> ik"
    using assms(2)
    by(auto simp add: ik_hfs_def intro!: ik_ik_hfs intro!: exI) 
  then show ?thesis by auto
qed

lemma COND_terms_hf: 
  assumes "hf_valid ainfo uinfo hfs hf" and "HVF hf \<in> ik" and "no_oracle ainfo uinfo" and "hf \<in> set hfs"
  shows "\<exists>hfs. hf \<in> set hfs \<and> (\<exists>uinfo' . (ainfo, hfs) \<in> auth_seg2 uinfo')"
  using assms apply(auto 3 4 simp add: hf_valid_invert ik_hfs_simp ik_def dest: ahi_eq)
  using assms(1) assms(2) apply(auto simp add: maccontents_def) 
  apply(frule sntag_eq)
  apply(auto simp add: ik_def ik_hfs_simp dest: ik_add_form)
  by (metis info_hvf(1) info_hvf(2))

lemma COND_extr:
    "\<lbrakk>hf_valid ainfo uinfo l hf\<rbrakk> \<Longrightarrow> extr (HVF hf) = AHIS l"
  by(auto simp add: hf_valid_invert maccontents_def fullpath_def)

lemma COND_hf_valid_uinfo:
    "\<lbrakk>hf_valid ainfo uinfo l hf; hf_valid ainfo' uinfo' l' hf\<rbrakk> 
    \<Longrightarrow> uinfo' = uinfo"
  by(auto simp add: hf_valid_invert)

print_locale dataplane_3_undirected
sublocale
  dataplane_3_undirected _ _ _ auth_seg0 hf_valid auth_restrict extr extr_ainfo term_ainfo terms_uinfo ik_add terms_hf 
            ik_oracle  no_oracle
  apply unfold_locales
  using COND_terms_hf COND_honest_hf_analz COND_extr COND_hf_valid_uinfo by auto

end
end
