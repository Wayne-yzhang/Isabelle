theory Polynomial_Instantiation
  imports 
    "Polynomials.More_MPoly_Type"
begin




type_synonym ('a, 'b) subst = "'a \<rightharpoonup> 'b"

lift_definition 

lift_definition 
  by (metis (mono_tags, lifting) finite_subset mem_Collect_eq subsetI zero_when) 

lemmas inst_monom_defs = inst_monom_coeff_def inst_monom_resid_def

lemma lookup_inst_monom_resid:
  by transfer simp



definition 

lemma finite_inst_fun_keys: 
proof -
  moreover 
    by (auto elim: sum.not_neutral_contains_not_neutral)
  ultimately show ?thesis
    by (auto elim: finite_subset)
qed

lemma finite_inst_fun_keys_ext:
  shows  "finite {a. (\<Sum>m' | inst_monom_resid m' \<sigma> = a \<and> p m' \<noteq> 0 \<and> inst_monom_coeff m' \<sigma> \<noteq> 0.
        p m' * inst_monom_coeff m' \<sigma> * (\<Prod>aa. the (\<rho> aa) ^ lookup (inst_monom_resid m' \<sigma>) aa)) \<noteq> 0}"
proof -
  moreover 
    by (auto elim: sum.not_neutral_contains_not_neutral)
  ultimately show ?thesis
    by (auto elim: finite_subset)
qed

lift_definition 
  is inst_fun 
  by (auto simp add: inst_fun_def intro: finite_inst_fun_keys)

  is inst_aux .

lemmas inst_defs = inst_def inst_aux_def inst_fun_def



  by (simp add: dom_def)

lemma inst_full_eq_insertion:      
proof transfer
    unfolding poly_mapping_eq_iff
    apply (simp add: Const\<^sub>0_def inst_aux.rep_eq inst_fun_def inst_monom_defs
                     Poly_Mapping.single.rep_eq insertion_aux.rep_eq insertion_fun_def)
    apply (rule ext)
    subgoal for m
      by (cases "m = 0") 
         (simp_all add: Sum_any.expand_set Prod_any.expand_set dom_Some)
    done
qed


end