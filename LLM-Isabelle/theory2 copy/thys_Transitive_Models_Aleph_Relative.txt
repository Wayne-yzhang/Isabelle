theory Aleph_Relative
  imports
    CardinalArith_Relative
begin

definition
  HAleph :: "[i,i] \<Rightarrow> i" where
  "HAleph(i,r) \<equiv> if(\<not>(Ord(i)),i,if(i=0, nat, if(\<not>Limit(i) \<and> i\<noteq>0,
                            csucc(r`( \<Union> i )),
                                   \<Union>j\<in>i. r`j)))"

reldb_add functional "Limit" "Limit"
relationalize "Limit" "is_Limit" external
synthesize "is_Limit" from_definition
arity_theorem for "is_Limit_fm"

relativize functional "HAleph" "HAleph_rel"
relationalize "HAleph_rel" "is_HAleph"

synthesize "is_HAleph" from_definition assuming "nonempty"
arity_theorem intermediate for "is_HAleph_fm"

lemma arity_is_HAleph_fm_aux:
  assumes
    "i \<in> nat" "r \<in> nat"
  shows
    "arity(Replace_fm(8 +\<^sub>\<omega> i, \<cdot>10 +\<^sub>\<omega> r`0 is 1\<cdot>, 3)) = 9 +\<^sub>\<omega> i \<union> pred(pred(11 +\<^sub>\<omega> r))"
  using arity_Replace_fm[of "\<cdot> (10+\<^sub>\<omega>r)`0 is 1\<cdot>" "8+\<^sub>\<omega>i" 3 "(11+\<^sub>\<omega>r) \<union> 1 \<union> 2"]
    ord_simp_union
  by (auto simp:arity)

lemma arity_is_HAleph_fm[arity]:
  assumes
    "i \<in> nat" "r \<in> nat" "l \<in> nat"
  shows
    "arity(is_HAleph_fm(i, r, l)) =  succ(i) \<union> succ(l) \<union> succ(r)"
  using assms pred_Un arity_is_HAleph_fm_aux arity_is_HAleph_fm'
  by auto

definition
  Aleph' :: "i => i"  where
  "Aleph'(a) == transrec(a,\<lambda>i r. HAleph(i,r))"

relativize functional "Aleph'" "Aleph_rel"
relationalize "Aleph_rel" "is_Aleph"

    in this schematic goal (and the following results on synthesis that
    depend on it) are imposed by @{thm [source] is_transrec_iff_sats}.\<close>
notation is_Aleph_fm (\<open>\<cdot>\<aleph>'(_') is _\<cdot>\<close>)
  unfolding is_Limit_def Limit_def using lt_abs transM[OF ltD \<open>M(a)\<close>] assms
  moreover from \<open>Ord(i)\<close>
  Aleph_r :: "[i,i\<Rightarrow>o] \<Rightarrow> i" (\<open>\<aleph>\<^bsub>_\<^esub>\<^bsup>_\<^esup>\<close>) where
  Aleph_r_set :: "[i,i] \<Rightarrow> i" (\<open>\<aleph>\<^bsub>_\<^esub>\<^bsup>_\<^esup>\<close>) where
    using transM[OF _ \<open>M(a)\<close>] by auto
    using transM[OF _ \<open>M(a)\<close>] RepFun_closed[OF apply_replacement] by simp
    using Replace_abs[of _ _ "\<lambda>j y. y = f ` j",OF \<open>M(a)\<close>,THEN iffD2]
  with \<open>M({f`j . j\<in>a})\<close>
    using univalent_triv[of M x "\<lambda>j .f ` j"] transM[OF _ \<open>M(x)\<close>]
  note Ord_cases[OF \<open>Ord(a)\<close>]
  note trans=transM[OF _ \<open>M(\<alpha>)\<close>]
  from \<open>M(\<alpha>)\<close>
    using Aleph_rel_closed[OF _ trans] Ord_in_Ord Limit_is_Ord[OF \<open>Limit(\<alpha>)\<close>] by auto
end \<comment> \<open>\<^locale>\<open>M_pre_aleph\<close>\<close>
  using \<open>Ord(a)\<close>
  with \<open>Ord(x)\<close>
  with \<open>Ord(x)\<close>
  with \<open>Ord(x)\<close> \<open>M(x)\<close>
  note trans=transM[OF _ \<open>M(x)\<close>]
    note \<open>M(b)\<close>
        from \<open>x<l\<close> \<open>Limit(l)\<close>
        with \<open>M(x)\<close>
            ltD[THEN [2] Ord_in_Ord] succ_in_MI[OF \<open>M(x)\<close>]
        from \<open>M(l)\<close> \<open>Limit(l)\<close>
  moreover from \<open>Ord(x)\<close>
  moreover from \<open>Ord(x)\<close> \<open>M(x)\<close>
  moreover from \<open>Ord(x)\<close> \<open>M(x)\<close>
end \<comment> \<open>\<^locale>\<open>M_aleph\<close>\<close>
