theory TuringReducible
  imports
    TuringDecidable
    StrongCopyTM
begin




definition turing_reducible :: "(nat list) set \<Rightarrow> (nat list) set  \<Rightarrow> bool"
  where

    "turing_reducible A B \<equiv>
         (\<exists>tm. \<forall>nl::nat list. \<exists>ml::nat list.
              \<lbrace>(\<lambda>tap. tap = ([], <nl>))\<rbrace> tm \<lbrace>(\<lambda>tap. \<exists>k l. tap = (Bk \<up> k, <ml> @ Bk\<up> l))\<rbrace> \<and>
              (nl \<in> A \<longleftrightarrow> ml \<in> B)
         )"


lemma turing_reducible_unfolded_into_TMC_yields_condition:
    "turing_reducible A B \<equiv>
         (\<exists>tm. \<forall>nl::nat list. \<exists>ml::nat list.
              TMC_yields_num_list_res tm nl ml \<and> (nl \<in> A \<longleftrightarrow> ml \<in> B)
         )"
  unfolding TMC_yields_num_list_res_unfolded_into_Hoare_halt
  by (simp add: turing_reducible_def)



lemma turing_reducible_A_B_imp_composable_reducer_ex: "turing_reducible A B
       \<Longrightarrow>
       \<exists>Red. composable_tm0 Red \<and>
             (\<forall>nl::nat list. \<exists>ml::nat list. TMC_yields_num_list_res Red nl ml \<and> (nl \<in> A \<longleftrightarrow> ml \<in> B))"
proof -
  assume "turing_reducible A B"
  then have "\<exists>tm. \<forall>nl::nat list. \<exists>ml::nat list. TMC_yields_num_list_res tm nl ml \<and> (nl \<in> A \<longleftrightarrow> ml \<in> B)"
    using turing_reducible_unfolded_into_TMC_yields_condition by auto

  then obtain Red' where
    w_RedTM': "\<forall>nl::nat list. \<exists>ml::nat list. TMC_yields_num_list_res Red' nl ml \<and> (nl \<in> A \<longleftrightarrow> ml \<in> B)"
    by blast


  then have "composable_tm0 (mk_composable0 Red') \<and>
             (\<forall>nl::nat list. \<exists>ml::nat list. TMC_yields_num_list_res (mk_composable0 Red') nl ml \<and> (nl \<in> A \<longleftrightarrow> ml \<in> B))"
    using w_RedTM' Hoare_halt_tm_impl_Hoare_halt_mk_composable0_cell_list_rev Hoare_halt_tm_impl_Hoare_halt_mk_composable0_cell_list composable_tm0_mk_composable0
    using TMC_yields_num_list_res_unfolded_into_Hoare_halt by blast

  then show "\<exists>Red. composable_tm0 Red \<and>
             (\<forall>nl::nat list. \<exists>ml::nat list. TMC_yields_num_list_res Red nl ml \<and> (nl \<in> A \<longleftrightarrow> ml \<in> B))"
    by (rule exI)
qed


theorem turing_reducible_AB_and_decB_imp_decA:
  "\<lbrakk> turing_reducible A B; turing_decidable B \<rbrakk> \<Longrightarrow> turing_decidable A"
proof -
  assume "turing_reducible A B"
    and  "turing_decidable B"


  have "\<exists>Red. composable_tm0 Red \<and>
               (\<forall>nl::nat list. \<exists>ml::nat list. TMC_yields_num_list_res Red nl ml \<and> (nl \<in> A \<longleftrightarrow> ml \<in> B))"
    by (rule turing_reducible_A_B_imp_composable_reducer_ex)

  then obtain Red where
    w_RedTM: "composable_tm0 Red \<and>
               (\<forall>nl::nat list. \<exists>ml::nat list. TMC_yields_num_list_res Red nl ml \<and> (nl \<in> A \<longleftrightarrow> ml \<in> B))"
    by blast


  have "(\<exists>D. (\<forall>nl::nat list. 
           (nl \<in> B \<longrightarrow> TMC_yields_num_res D nl (1::nat))
         \<and> (nl \<notin> B \<longrightarrow> TMC_yields_num_res D nl (0::nat))
       ))"
    unfolding turing_decidable_unfolded_into_TMC_yields_conditions by auto

  then obtain DB where
    w_DB: "(\<forall>nl. 
           (nl \<in> B \<longrightarrow> TMC_yields_num_res DB nl (1::nat))
         \<and> (nl \<notin> B \<longrightarrow> TMC_yields_num_res DB nl (0::nat))
       )" by blast


  define DA where "DA = Red |+| DB"

  show "turing_decidable A"
    unfolding turing_decidable_unfolded_into_TMC_yields_conditions
  proof -
    have "\<forall>nl. (nl \<in> A \<longrightarrow> TMC_yields_num_res DA nl (1::nat)) \<and>
                 (nl \<notin> A \<longrightarrow> TMC_yields_num_res DA nl (0::nat))"
    proof (rule allI)
      fix nl
      show "(nl \<in> A \<longrightarrow> TMC_yields_num_res DA nl (1::nat)) \<and>
              (nl \<notin> A \<longrightarrow> TMC_yields_num_res DA nl (0::nat))"
      proof
        show "nl \<in> A \<longrightarrow> TMC_yields_num_res DA nl (1::nat)"
        proof
          assume "nl \<in> A" 
          obtain ml where w_ml: "composable_tm0 Red \<and> TMC_yields_num_list_res Red nl ml \<and> (nl \<in> A \<longleftrightarrow> ml \<in> B)"
            by blast  
            using TMC_yields_num_res_Hoare_plus_halt by auto
          then show "TMC_yields_num_res DA nl 1"
            using DA_def by auto
        qed
      next
        show "nl \<notin> A \<longrightarrow>  TMC_yields_num_res DA nl 0"
        proof
          assume "nl \<notin> A"
          obtain ml where w_ml: "composable_tm0 Red \<and> TMC_yields_num_list_res Red nl ml \<and> (nl \<in> A \<longleftrightarrow> ml \<in> B)"
            by blast
            using TMC_yields_num_res_Hoare_plus_halt by auto
          then show "TMC_yields_num_res DA nl 0"
            using DA_def by auto
        qed
      qed
    qed
    then show "\<exists>D. \<forall>nl. (nl \<in> A \<longrightarrow> TMC_yields_num_res D nl 1) \<and> (nl \<notin> A \<longrightarrow> TMC_yields_num_res D nl 0)"
      by auto
  qed
qed


corollary turing_reducible_AB_and_non_decA_imp_non_decB:
  "\<lbrakk>turing_reducible A B; \<not> turing_decidable A \<rbrakk> \<Longrightarrow> \<not>turing_decidable B"
  using turing_reducible_AB_and_decB_imp_decA 
  by blast

end
