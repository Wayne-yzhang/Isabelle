theory Slice 
  imports Observable Distance DataDependence "../Basic/SemanticsCFG"  
begin

locale BackwardSlice = 
  CFG_wf sourcenode targetnode kind valid_edge Entry Def Use state_val
  for sourcenode :: "'edge \<Rightarrow> 'node" and targetnode :: "'edge \<Rightarrow> 'node"
  and kind :: "'edge \<Rightarrow> 'state edge_kind" and valid_edge :: "'edge \<Rightarrow> bool"
  and Entry :: "'node" ("'('_Entry'_')") and Def :: "'node \<Rightarrow> 'var set"
  and Use :: "'node \<Rightarrow> 'var set" and state_val :: "'state \<Rightarrow> 'var \<Rightarrow> 'val" +
  fixes backward_slice :: "'node set \<Rightarrow> 'node set"
  assumes valid_nodes:"n \<in> backward_slice S \<Longrightarrow> valid_node n"
  and refl:"\<lbrakk>valid_node n; n \<in> S\<rbrakk> \<Longrightarrow> n \<in> backward_slice S"
  and dd_closed:"\<lbrakk>n' \<in> backward_slice S; n influences V in n'\<rbrakk> 
  \<Longrightarrow> n \<in> backward_slice S"
  and obs_finite:"finite (obs n (backward_slice S))"
  and obs_singleton:"card (obs n (backward_slice S)) \<le> 1"

begin

lemma slice_n_in_obs:
  "n \<in> backward_slice S \<Longrightarrow> obs n (backward_slice S) = {n}"
by(fastforce intro!:n_in_obs dest:valid_nodes)

lemma obs_singleton_disj: 
  "(\<exists>m. obs n (backward_slice S) = {m}) \<or> obs n (backward_slice S) = {}"
proof -
  have "finite(obs n (backward_slice S))" by(rule obs_finite)
  show ?thesis
  proof(cases "card(obs n (backward_slice S)) = 0")
    case True
      by simp
    thus ?thesis by simp
  next
    case False
    have "card(obs n (backward_slice S)) \<le> 1" by(rule obs_singleton)
    with False have "card(obs n (backward_slice S)) = 1"
      by simp
    hence "\<exists>m. obs n (backward_slice S) = {m}" by(fastforce dest:card_eq_SucD)
    thus ?thesis by simp
  qed
qed


lemma obs_singleton_element:
  assumes "m \<in> obs n (backward_slice S)" shows "obs n (backward_slice S) = {m}"
proof -
  have "(\<exists>m. obs n (backward_slice S) = {m}) \<or> obs n (backward_slice S) = {}"
    by(rule obs_singleton_disj)
qed


lemma obs_the_element: 
  "m \<in> obs n (backward_slice S) \<Longrightarrow> (THE m. m \<in> obs n (backward_slice S)) = m"
by(fastforce dest:obs_singleton_element)



  sliced graph\<close>
  from \<open>m \<in> obs (sourcenode a) (backward_slice S)\<close>
  from \<open>m \<in> obs (sourcenode a) (backward_slice S)\<close>
  with \<open>sourcenode a \<notin> backward_slice S\<close> \<open>kind a = (Q)\<^sub>\<surd>\<close> in_obs the show ?thesis
      with \<open>sourcenode a \<notin> backward_slice S\<close> \<open>kind a = (Q)\<^sub>\<surd>\<close>
        \<open>obs (sourcenode a) (backward_slice S) = {}\<close>
      with \<open>sourcenode a \<notin> backward_slice S\<close> \<open>kind a = (Q)\<^sub>\<surd>\<close>
        \<open>obs (sourcenode a) (backward_slice S) = {}\<close>
        with \<open>sourcenode a \<notin> backward_slice S\<close> \<open>kind a = (Q)\<^sub>\<surd>\<close>
          \<open>m \<in> obs (sourcenode a) (backward_slice S)\<close>
          \<open>distance (targetnode a) m x\<close> \<open>distance (sourcenode a) m (x + 1)\<close>
        with \<open>sourcenode a \<notin> backward_slice S\<close> \<open>kind a = (Q)\<^sub>\<surd>\<close>
          \<open>m \<in> obs (sourcenode a) (backward_slice S)\<close>
          \<open>distance (targetnode a) m x\<close> \<open>distance (sourcenode a) m (x + 1)\<close>
      from \<open>m \<in> obs (sourcenode a) (backward_slice S)\<close>
      with \<open>sourcenode a \<notin> backward_slice S\<close> \<open>kind a = (Q)\<^sub>\<surd>\<close> False
        \<open>m \<in> obs (sourcenode a) (backward_slice S)\<close>
    also have "\<dots>" using \<open>valid_edge a\<close> by blast
  from \<open>valid_edge a\<close> have ex1:"\<exists>!a'. sourcenode a = sourcenode a' \<and> valid_edge a' \<and>
    with \<open>slice_kind S a = (\<lambda>s. True)\<^sub>\<surd>\<close> \<open>kind a = (Q)\<^sub>\<surd>\<close> have "Q = (\<lambda>s. True)"
    with True \<open>kind a' = (Q')\<^sub>\<surd>\<close> \<open>sourcenode a = sourcenode a'\<close> show ?thesis
      with \<open>sourcenode a \<notin> backward_slice S\<close> \<open>slice_kind S a = (\<lambda>s. True)\<^sub>\<surd>\<close>
        \<open>kind a = (Q)\<^sub>\<surd>\<close>
        with ex1 target \<open>sourcenode a = sourcenode a'\<close> \<open>valid_edge a\<close>
          \<open>valid_edge a'\<close> have "a = a'" by blast
        with \<open>targetnode a \<noteq> targetnode a'\<close> show False by simp
      with \<open>sourcenode a \<notin> backward_slice S\<close> True \<open>kind a' = (Q')\<^sub>\<surd>\<close>
        \<open>sourcenode a = sourcenode a'\<close> show ?thesis 
      with \<open>sourcenode a \<notin> backward_slice S\<close> 
        \<open>obs (sourcenode a) (backward_slice S) \<noteq> {}\<close> 
        \<open>slice_kind S a = (\<lambda>s. True)\<^sub>\<surd>\<close> \<open>kind a = (Q)\<^sub>\<surd>\<close>
        with \<open>sourcenode a \<notin> backward_slice S\<close> \<open>kind a' = (Q')\<^sub>\<surd>\<close>
          \<open>m \<in> obs (sourcenode a) (backward_slice S)\<close>
          \<open>distance (targetnode a) m x\<close> \<open>distance (sourcenode a) m (x + 1)\<close>
          \<open>sourcenode a = sourcenode a'\<close> show ?thesis
        from \<open>valid_edge a\<close> \<open>distance (targetnode a) m x\<close>
          \<open>distance (sourcenode a) m (x + 1)\<close>
          with ex1 target \<open>sourcenode a = sourcenode a'\<close> 
            \<open>valid_edge a\<close> \<open>valid_edge a'\<close> 
            \<open>distance (targetnode a) m x\<close> \<open>distance (sourcenode a) m (x + 1)\<close>
          with \<open>targetnode a \<noteq> targetnode a'\<close> show False by simp
        with \<open>sourcenode a \<notin> backward_slice S\<close> 
          \<open>kind a' = (Q')\<^sub>\<surd>\<close> \<open>m \<in> obs (sourcenode a) (backward_slice S)\<close>
          \<open>distance (targetnode a) m x\<close> \<open>distance (sourcenode a) m (x + 1)\<close>
          True \<open>sourcenode a = sourcenode a'\<close> show ?thesis
  from \<open>valid_edge a\<close> have ex1:"\<exists>!a'. sourcenode a = sourcenode a' \<and> valid_edge a' \<and>
    with \<open>kind a = (Q)\<^sub>\<surd>\<close> have "slice_kind S a = (Q)\<^sub>\<surd>"
    from True \<open>kind a' = (Q')\<^sub>\<surd>\<close> \<open>sourcenode a = sourcenode a'\<close>
    with \<open>slice_kind S a = (Q)\<^sub>\<surd>\<close> det show ?thesis by blast
    with \<open>kind a = (Q)\<^sub>\<surd>\<close> 
      with \<open>sourcenode a = sourcenode a'\<close> \<open>targetnode a \<noteq> targetnode a'\<close>
        \<open>valid_edge a\<close> \<open>valid_edge a'\<close>
      from False \<open>kind a' = (Q')\<^sub>\<surd>\<close> \<open>sourcenode a = sourcenode a'\<close>
subsection \<open>Observable and silent moves\<close>
  from \<open>nx \<in> obs n'' (backward_slice S)\<close>
    \<open>nx \<in> obs n'' (backward_slice S) \<Longrightarrow> nx \<in> obs n' (backward_slice S)\<close>
  from \<open>S,f \<turnstile> (n,s) -a\<rightarrow>\<^sub>\<tau> (n',s')\<close>
  note IH = \<open>valid_node n' \<Longrightarrow>
    preds (map f as) s' \<and> transfers (map f as) s' = s'' \<and> n' -as\<rightarrow>* n''\<close>
  from \<open>S,f \<turnstile> (n,s) -a\<rightarrow>\<^sub>\<tau> (n',s')\<close> have "pred (f a) s" and "transfer (f a) s = s'"
  from \<open>n' = targetnode a\<close> \<open>valid_edge a\<close> have "valid_node n'" by simp
  from \<open>n = sourcenode a\<close> \<open>n' = targetnode a\<close> \<open>valid_edge a\<close> \<open>n' -as\<rightarrow>* n''\<close>
  with \<open>pred (f a) s\<close> \<open>preds (map f as) s'\<close> \<open>transfer (f a) s = s'\<close> 
    \<open>transfers (map f as) s' = s''\<close> show ?case by simp
  from \<open>obs n (backward_slice S) = {n'}\<close> 
  from \<open>n -as\<rightarrow>* n'\<close> obtain x where "distance n n' x" and "x \<le> length as"
  from \<open>distance n n' x\<close> \<open>n' \<in> obs n (backward_slice S)\<close> 
    from \<open>n' \<in> obs n (backward_slice S)\<close>
    with \<open>distance n n' (Suc x)\<close>
      with \<open>valid_node n\<close> have "obs n (backward_slice S) = {n}"
      with \<open>n' \<in> obs n (backward_slice S)\<close> \<open>n \<noteq> n'\<close> show False by simp
    from \<open>distance n n' (Suc x)\<close> obtain a where "valid_edge a" 
    from \<open>n' \<in> obs n (backward_slice S)\<close>
    with \<open>valid_edge a\<close> \<open>n \<notin> backward_slice S\<close> \<open>n = sourcenode a\<close>
    from \<open>distance (targetnode a) n' x\<close> obtain asx where "targetnode a -asx\<rightarrow>* n'" 
    from \<open>targetnode a -asx\<rightarrow>* n'\<close> \<open>n' \<in> (backward_slice S)\<close>
    from IH[OF \<open>distance (targetnode a) n' x\<close> this,of "transfer (slice_kind S a) s"]
      with \<open>n \<notin> backward_slice S\<close> \<open>n = sourcenode a\<close> have "slice_kind S a = \<Up>id" 
      with \<open>n \<notin> backward_slice S\<close> \<open>n = sourcenode a\<close>
        \<open>n' \<in> obs n (backward_slice S)\<close> \<open>distance (targetnode a) n' x\<close>
        \<open>distance n n' (Suc x)\<close> target
    with \<open>n \<notin> backward_slice S\<close> \<open>n = sourcenode a\<close> \<open>valid_edge a\<close>
    with moves \<open>transfer (slice_kind S a) s = s\<close> \<open>n = sourcenode a\<close>
  from \<open>S,f \<turnstile> (n,s) -a\<rightarrow>\<^sub>\<tau> (nx,sx)\<close> \<open>S,f \<turnstile> (nx,sx) =as\<Rightarrow>\<^sub>\<tau> (n',s')\<close>
  with \<open>S,f \<turnstile> (n',s') -a'\<rightarrow> (n'',s'')\<close>
    with \<open>S,f \<turnstile> (n,s) =as\<Rightarrow>\<^sub>\<tau> (n',s')\<close> have "n = n'" and "s = s'"
    with \<open>S,f \<turnstile> (n',s') -a\<rightarrow> (n'',s'')\<close> show ?thesis
    with \<open>S,f \<turnstile> (n,s) =as\<Rightarrow>\<^sub>\<tau> (n',s')\<close> show ?thesis
  with \<open>S,f \<turnstile> (n,s) =as\<Rightarrow>\<^sub>\<tau> (n',s')\<close>
  from \<open>S,f \<turnstile> (n',s') -a\<rightarrow> (n'',s'')\<close> have "pred (f a) s'" 
  from \<open>n' = sourcenode a\<close> \<open>n'' = targetnode a\<close> \<open>valid_edge a\<close>
  with \<open>n -as\<rightarrow>* n'\<close> have "n -as@[a]\<rightarrow>* n''" by(rule path_Append)
  with \<open>preds (map f as) s\<close> \<open>pred (f a) s'\<close> \<open>transfer (f a) s' = s''\<close>
    \<open>transfers (map f as) s = s'\<close>
subsection \<open>Relevant variables\<close>
  from \<open>x \<in> rv S n\<close> obtain as m 
  from \<open>n -as\<rightarrow>* m\<close> have "valid_node m" by(fastforce dest:path_valid_node)
  from \<open>n -as\<rightarrow>* m\<close> \<open>m \<in> backward_slice S\<close> 
    with \<open>n -as\<rightarrow>* m\<close> \<open>m \<in> backward_slice S\<close> have "m \<in> obs n (backward_slice S)"
    with \<open>n -as\<rightarrow>* m\<close> \<open>valid_node m\<close> show ?thesis by(blast intro:empty_path)
    from \<open>sourcenodes as = ns@nx'#ns'\<close>
    from \<open>n -as\<rightarrow>* m\<close> \<open>as = as'@a'#as''\<close> \<open>sourcenode a' = nx'\<close>
    with \<open>sourcenode a' = nx'\<close> have "nx' -a'#as''\<rightarrow>* m" by(fastforce intro:Cons_path)
    from \<open>n -as'\<rightarrow>* nx'\<close> \<open>nx' \<in> backward_slice S\<close>
      \<open>\<forall>x \<in> set ns. x \<notin> backward_slice S\<close> \<open>ns = sourcenodes as'\<close> 
    with \<open>n -as'\<rightarrow>* nx'\<close> \<open>nx' -a'#as''\<rightarrow>* m\<close> \<open>as = as'@a'#as''\<close> show ?thesis by blast
  from \<open>nx \<in> obs n (backward_slice S)\<close> obs_eq 
  from \<open>as = as'@as''\<close> \<open>\<forall>nx\<in>set (sourcenodes as). x \<notin> Def nx\<close> 
  from \<open>\<forall>ni \<in> set(sourcenodes asx). ni \<notin> backward_slice S\<close> \<open>n' -asx\<rightarrow>* nx\<close>
    note IH = \<open>\<And>n'. \<lbrakk>\<forall>ni\<in>set (sourcenodes asx'). ni \<notin> backward_slice S; 
      n' -asx'\<rightarrow>* nx\<rbrakk> 
        \<Longrightarrow> \<forall>ni\<in>set (sourcenodes asx'). x \<notin> Def ni\<close>
    from \<open>n' -ax'#asx'\<rightarrow>* nx\<close> have "n' -[]@ax'#asx'\<rightarrow>* nx" by simp
    from \<open>\<forall>ni\<in>set (sourcenodes (ax'#asx')). ni \<notin> backward_slice S\<close>
    from IH[OF all \<open>targetnode ax' -asx'\<rightarrow>* nx\<close>]
    with \<open>\<forall>ni\<in>set (sourcenodes as''). x \<notin> Def ni\<close>
    from \<open>n' -ax'#asx'\<rightarrow>* nx\<close> \<open>nx -as''\<rightarrow>* m\<close> have "n' -(ax'#asx')@as''\<rightarrow>* m" 
      with \<open>x \<in> Use m\<close> \<open>\<forall>ni\<in>set (sourcenodes (asx'@as'')). x \<notin> Def ni\<close>
        \<open>n' -ax'#asx'@as''\<rightarrow>* m\<close> \<open>n' = sourcenode ax'\<close> 
      with \<open>m \<in> backward_slice S\<close> dd_closed have "n' \<in> backward_slice S" 
      with \<open>n' = sourcenode ax'\<close> \<open>sourcenode ax' \<notin> backward_slice S\<close>
    with \<open>\<forall>ni\<in>set (sourcenodes (asx'@as'')). x \<notin> Def ni\<close>
  with \<open>\<forall>ni\<in>set (sourcenodes as''). x \<notin> Def ni\<close> 
  from \<open>n' -asx\<rightarrow>* nx\<close> \<open>nx -as''\<rightarrow>* m\<close> have "n' -asx@as''\<rightarrow>* m" by(rule path_Append)
  with \<open>m \<in> backward_slice S\<close> \<open>x \<in> Use m\<close> 
    \<open>\<forall>ni\<in>set (sourcenodes (asx@as'')). x \<notin> Def ni\<close> show "x \<in> rv S n'" by -(rule rvI)
    with \<open>valid_node n\<close> obs_eq show "x \<in> rv S n'" by -(rule eq_obs_in_rv)
    with \<open>valid_node n'\<close> obs_eq[THEN sym] show "x \<in> rv S n" by -(rule eq_obs_in_rv)
      with \<open>preds (slice_kinds S (a#as)) s\<close> have "pred (kind a) s"
      from \<open>slice_kind S a = kind a\<close> \<open>preds (slice_kinds S (a#asx)) s'\<close>
      from \<open>valid_edge a\<close> \<open>sourcenode a = n\<close> have "n -[]\<rightarrow>* n"
      with True \<open>sourcenode a = n\<close> have "\<forall>V \<in> Use n. V \<in> rv S n"
      with \<open>\<forall>V\<in>rv S n. state_val s V = state_val s' V\<close> \<open>sourcenode a = n\<close>
      from \<open>valid_edge a\<close> this \<open>pred (kind a) s\<close> \<open>pred (kind a) s'\<close>
      with \<open>V \<in> Def n\<close> \<open>sourcenode a = n\<close> \<open>slice_kind S a = kind a\<close>
      from \<open>V \<in> rv S n''\<close> obtain xs nx where "n'' -xs\<rightarrow>* nx"
      from \<open>valid_edge a\<close> \<open>sourcenode a = n\<close> \<open>targetnode a = n''\<close> 
        \<open>n'' -xs\<rightarrow>* nx\<close>
      with \<open>V \<in> Def n\<close> \<open>V \<in> Use nx\<close> \<open>\<forall>nx' \<in> set(sourcenodes xs). V \<notin> Def nx'\<close>
      with \<open>nx \<in> backward_slice S\<close> have "n \<in> backward_slice S"
      with \<open>sourcenode a = n\<close> False have False by simp
    from \<open>V \<in> rv S n''\<close> obtain xs nx where "n'' -xs\<rightarrow>* nx"
    from \<open>valid_edge a\<close> \<open>sourcenode a = n\<close> \<open>targetnode a = n''\<close> \<open>n'' -xs\<rightarrow>* nx\<close>
    from False \<open>\<forall>nx' \<in> set(sourcenodes xs). V \<notin> Def nx'\<close> \<open>sourcenode a = n\<close>
    with \<open>n -a#xs\<rightarrow>* nx\<close> \<open>nx \<in> backward_slice S\<close> \<open>V \<in> Use nx\<close>
        with \<open>\<forall>V\<in>rv S n. state_val s V = state_val s' V\<close> \<open>V \<in> rv S n\<close>
        with \<open>\<forall>V\<in>rv S n. state_val s V = state_val s' V\<close> \<open>V \<in> rv S n\<close>
        with \<open>valid_edge a\<close> \<open>sourcenode a = n\<close> \<open>V \<notin> Def n\<close>
        with \<open>valid_edge a\<close> \<open>sourcenode a = n\<close> \<open>V \<notin> Def n\<close>
        with \<open>\<forall>V\<in>rv S n. state_val s V = state_val s' V\<close> \<open>V \<in> rv S n\<close>
          \<open>state_val (transfer (kind a) s) V = state_val s V\<close>
          \<open>slice_kind S a = kind a\<close>
        with \<open>\<forall>V\<in>rv S n. state_val s V = state_val s' V\<close> \<open>V \<in> rv S n\<close>
  from \<open>valid_edge a\<close> \<open>valid_edge ax\<close> \<open>sourcenode a = n\<close> \<open>sourcenode ax = n\<close>
    \<open>targetnode a = n''\<close> \<open>targetnode ax \<noteq> n''\<close>
  from \<open>valid_edge a\<close> \<open>valid_edge ax\<close> \<open>sourcenode a = n\<close> \<open>sourcenode ax = n\<close>
    \<open>targetnode a = n''\<close> \<open>targetnode ax \<noteq> n''\<close>
    with \<open>preds (slice_kinds S (a#as)) s\<close> \<open>kind a = (Q)\<^sub>\<surd>\<close> 
      \<open>slice_kind S a = (P)\<^sub>\<surd>\<close> have "pred (kind a) s"
    from True \<open>sourcenode a = n\<close> \<open>sourcenode ax = n\<close>
    with \<open>preds (slice_kinds S (ax#asx)) s'\<close> \<open>kind ax = (Q')\<^sub>\<surd>\<close>
      \<open>slice_kind S ax = (P')\<^sub>\<surd>\<close> have "pred (kind ax) s'" 
    with \<open>kind ax = (Q')\<^sub>\<surd>\<close> have "Q' s'" by simp
    from \<open>valid_edge a\<close> \<open>sourcenode a = n\<close> have "n -[]\<rightarrow>* n"
    with True \<open>sourcenode a = n\<close> have "\<forall>V \<in> Use n. V \<in> rv S n"
    with \<open>\<forall>V\<in>rv S n. state_val s V = state_val s' V\<close> \<open>sourcenode a = n\<close>
    with \<open>valid_edge a\<close> \<open>pred (kind a) s\<close> have "pred (kind a) s'"
    with \<open>kind a = (Q)\<^sub>\<surd>\<close> have "Q s'" by simp
    with \<open>Q' s'\<close> \<open>\<forall>s. (Q s \<longrightarrow> \<not> Q' s) \<and> (Q' s \<longrightarrow> \<not> Q s)\<close> have False by simp
    with \<open>kind a = (Q)\<^sub>\<surd>\<close> \<open>slice_kind S a = (P)\<^sub>\<surd>\<close>
    with \<open>slice_kind S a = (P)\<^sub>\<surd>\<close> \<open>preds (slice_kinds S (a#as)) s\<close>
    from \<open>kind ax = (Q')\<^sub>\<surd>\<close> \<open>slice_kind S ax = (P')\<^sub>\<surd>\<close> 
      \<open>sourcenode a = n\<close> \<open>sourcenode ax = n\<close> False
    with \<open>slice_kind S ax = (P')\<^sub>\<surd>\<close> \<open>preds (slice_kinds S (ax#asx)) s'\<close>
    with \<open>P = (\<lambda>s. True)\<close> \<open>\<forall>s. (P s \<longrightarrow> \<not> P' s) \<and> (P' s \<longrightarrow> \<not> P s)\<close>
subsection \<open>The set \<open>WS\<close>\<close>
  from \<open>((n\<^sub>1,s\<^sub>1),(n\<^sub>2,s\<^sub>2)) \<in> WS S\<close> have "valid_node n\<^sub>1" and "valid_node n\<^sub>2"
  from \<open>S,kind \<turnstile> (n\<^sub>1,s\<^sub>1) -a\<rightarrow>\<^sub>\<tau> (n\<^sub>1',s\<^sub>1')\<close> have "sourcenode a = n\<^sub>1"
  from \<open>targetnode a = n\<^sub>1'\<close> \<open>valid_edge a\<close> have "valid_node n\<^sub>1'"
  with \<open>obs n\<^sub>1' (backward_slice S) \<noteq> {}\<close> obtain n 
  from \<open>n\<^sub>1' -as\<rightarrow>* n\<close> \<open>valid_edge a\<close> \<open>sourcenode a = n\<^sub>1\<close> \<open>targetnode a = n\<^sub>1'\<close>
  from \<open>\<forall>nx \<in> set(sourcenodes as). nx \<notin> (backward_slice S)\<close> \<open>sourcenode a = n\<^sub>1\<close>
    \<open>n\<^sub>1 \<notin> backward_slice S\<close> 
  ultimately have "n \<in> obs n\<^sub>1 (backward_slice S)" using \<open>n \<in> (backward_slice S)\<close> 
  with \<open>obs n\<^sub>1' (backward_slice S) = {n}\<close> 
  with \<open>valid_node n\<^sub>1\<close> \<open>valid_node n\<^sub>1'\<close> have "rv S n\<^sub>1 = rv S n\<^sub>1'"
  from \<open>n \<in> obs n\<^sub>1 (backward_slice S)\<close> \<open>((n\<^sub>1,s\<^sub>1),(n\<^sub>2,s\<^sub>2)) \<in> WS S\<close> 
  from \<open>obs n\<^sub>1 (backward_slice S) = obs n\<^sub>2 (backward_slice S)\<close>
    \<open>obs n\<^sub>1 (backward_slice S) = {n}\<close> \<open>obs n\<^sub>1' (backward_slice S) = {n}\<close> 
    with \<open>rv S n\<^sub>1 = rv S n\<^sub>1'\<close> have "V \<in> rv S n\<^sub>1" by simp
    with \<open>n\<^sub>1 \<notin> backward_slice S\<close> have "V \<notin> Def n\<^sub>1"
    with \<open>valid_edge a\<close> \<open>sourcenode a = n\<^sub>1\<close> \<open>pred (kind a) s\<^sub>1\<close>
    with \<open>transfer (kind a) s\<^sub>1 = s\<^sub>1'\<close> have "state_val s\<^sub>1' V = state_val s\<^sub>1 V" by simp
    from \<open>V \<in> rv S n\<^sub>1\<close> \<open>\<forall>V \<in> rv S n\<^sub>1. state_val s\<^sub>1 V = state_val s\<^sub>2 V\<close>
    with \<open>state_val s\<^sub>1' V = state_val s\<^sub>1 V\<close> 
  with \<open>obs n\<^sub>1' (backward_slice S) = obs n\<^sub>2 (backward_slice S)\<close>
    \<open>valid_node n\<^sub>1'\<close> \<open>valid_node n\<^sub>2\<close> show ?thesis by(fastforce intro:WSI)
  note IH = \<open>\<lbrakk>((n',s'),(n\<^sub>2,s\<^sub>2)) \<in> WS S; f = kind; obs n'' (backward_slice S) \<noteq> {}\<rbrakk>
             \<Longrightarrow> ((n'',s''),(n\<^sub>2,s\<^sub>2)) \<in> WS S\<close>
  from \<open>S,f \<turnstile> (n',s') =as\<Rightarrow>\<^sub>\<tau> (n'',s'')\<close> \<open>obs n'' (backward_slice S) \<noteq> {}\<close>
  with \<open>((n,s),(n\<^sub>2,s\<^sub>2)) \<in> WS S\<close> \<open>S,f \<turnstile> (n,s) -a\<rightarrow>\<^sub>\<tau> (n',s')\<close> \<open>f = kind\<close>
  from IH[OF this \<open>f = kind\<close> \<open>obs n'' (backward_slice S) \<noteq> {}\<close>]
  from \<open>((n\<^sub>1,s\<^sub>1),(n\<^sub>2,s\<^sub>2)) \<in> WS S\<close> have "valid_node n\<^sub>1" by(auto dest:WSD)
  from \<open>S,kind \<turnstile> (n\<^sub>1,s\<^sub>1) -a\<rightarrow> (n\<^sub>1',s\<^sub>1')\<close> have [simp]:"n\<^sub>1 = sourcenode a" 
  from  \<open>valid_edge a\<close> have "valid_node n\<^sub>1'" by(auto simp:valid_node_def)
  from \<open>valid_node n\<^sub>1\<close> \<open>n\<^sub>1 \<in> (backward_slice S)\<close> 
  with \<open>((n\<^sub>1,s\<^sub>1),(n\<^sub>2,s\<^sub>2)) \<in> WS S\<close> have "obs n\<^sub>2 (backward_slice S) = {n\<^sub>1}" 
  from \<open>valid_node n\<^sub>1\<close> have "n\<^sub>1 -[]\<rightarrow>* n\<^sub>1" by(rule empty_path)
  with \<open>n\<^sub>1 \<in> (backward_slice S)\<close> have "\<forall>V \<in> Use n\<^sub>1. V \<in> rv S n\<^sub>1"
  with \<open>\<forall>V \<in> rv S n\<^sub>1. state_val s\<^sub>1 V = state_val s\<^sub>2 V\<close>
  with \<open>valid_edge a\<close>  \<open>pred (kind a) s\<^sub>1\<close> have "pred (kind a) s\<^sub>2"
  with \<open>n\<^sub>1 \<in> (backward_slice S)\<close> have "pred (slice_kind S a) s\<^sub>2"
  from \<open>n\<^sub>1 \<in> (backward_slice S)\<close> obtain s\<^sub>2' 
  with \<open>pred (slice_kind S a) s\<^sub>2\<close> \<open>n\<^sub>1 \<in> (backward_slice S)\<close> \<open>valid_edge a\<close> 
  from \<open>obs n\<^sub>2 (backward_slice S) = {n\<^sub>1}\<close>
  with \<open>S,slice_kind S \<turnstile> (n\<^sub>1,s\<^sub>2) -a\<rightarrow> (n\<^sub>1',s\<^sub>2')\<close> 
        with \<open>transfer (kind a) s\<^sub>1 = s\<^sub>1'\<close> have "s\<^sub>1' = f s\<^sub>1" by simp
        from Update[THEN sym] \<open>n\<^sub>1 \<in> (backward_slice S)\<close> 
        with \<open>transfer (slice_kind S a) s\<^sub>2 = s\<^sub>2'\<close> have "s\<^sub>2' = f s\<^sub>2" by simp
        from \<open>valid_edge a\<close> \<open>\<forall>V \<in> Use n\<^sub>1. state_val s\<^sub>1 V = state_val s\<^sub>2 V\<close>
          True Update \<open>s\<^sub>1' = f s\<^sub>1\<close> \<open>s\<^sub>2' = f s\<^sub>2\<close> show ?thesis
        with \<open>transfer (kind a) s\<^sub>1 = s\<^sub>1'\<close> have "s\<^sub>1' = s\<^sub>1" by simp
        from Predicate[THEN sym] \<open>n\<^sub>1 \<in> (backward_slice S)\<close>
        with \<open>transfer (slice_kind S a) s\<^sub>2 = s\<^sub>2'\<close> have "s\<^sub>2' = s\<^sub>2" by simp
        with \<open>valid_edge a\<close> \<open>\<forall>V \<in> Use n\<^sub>1. state_val s\<^sub>1 V = state_val s\<^sub>2 V\<close> 
          True Predicate \<open>s\<^sub>1' = s\<^sub>1\<close> \<open>pred (kind a) s\<^sub>1\<close> \<open>pred (kind a) s\<^sub>2\<close>
      with \<open>valid_edge a\<close> \<open>transfer (kind a) s\<^sub>1 = s\<^sub>1'\<close>[THEN sym] 
        \<open>pred (kind a) s\<^sub>1\<close> \<open>pred (kind a) s\<^sub>2\<close>
        with  \<open>n\<^sub>1 \<in> (backward_slice S)\<close> have "slice_kind S a = kind a"
        with \<open>valid_edge a\<close> \<open>transfer (slice_kind S a) s\<^sub>2 = s\<^sub>2'\<close>[THEN sym] 
          False \<open>pred (kind a) s\<^sub>2\<close>
        with \<open>transfer (slice_kind S a) s\<^sub>2 = s\<^sub>2'\<close> have "s\<^sub>2 = s\<^sub>2'"
      from \<open>\<forall>nx \<in> set(sourcenodes as'). V \<notin> Def nx\<close> False
      from  \<open>valid_edge a\<close> \<open>n\<^sub>1' -as'\<rightarrow>* nx\<close> have "n\<^sub>1 -a#as'\<rightarrow>* nx"
      with \<open>nx \<in> (backward_slice S)\<close> \<open>V \<in> Use nx\<close> 
        \<open>\<forall>nx \<in> set(sourcenodes (a#as')). V \<notin> Def nx\<close>
      with \<open>\<forall>V \<in> rv S n\<^sub>1. state_val s\<^sub>1 V = state_val s\<^sub>2 V\<close> 
        \<open>state_val s\<^sub>1' V = state_val s\<^sub>1 V\<close> \<open>state_val s\<^sub>2' V = state_val s\<^sub>2 V\<close>
  with \<open>valid_node n\<^sub>1'\<close> have "((n\<^sub>1',s\<^sub>1'),(n\<^sub>1',s\<^sub>2')) \<in> WS S" by(fastforce intro:WSI)
  with \<open>S,slice_kind S \<turnstile> (n\<^sub>2,s\<^sub>2) =as@[a]\<Rightarrow> (n\<^sub>1',s\<^sub>2')\<close>
    \<open>transfer (slice_kind S a) s\<^sub>2 = s\<^sub>2'\<close> 
  from \<open>S,kind \<turnstile> (n\<^sub>1,s\<^sub>1) =as\<Rightarrow> (n\<^sub>1',s\<^sub>1')\<close> obtain a' as' n' s'
  from \<open>S,kind \<turnstile> (n',s') -a'\<rightarrow> (n\<^sub>1',s\<^sub>1')\<close> have "obs n' (backward_slice S) = {n'}"
  with \<open>S,kind \<turnstile> (n\<^sub>1,s\<^sub>1) =as'\<Rightarrow>\<^sub>\<tau> (n',s')\<close> \<open>((n\<^sub>1,s\<^sub>1),(n\<^sub>2,s\<^sub>2)) \<in> WS S\<close> 
  with \<open>S,kind \<turnstile> (n',s') -a'\<rightarrow> (n\<^sub>1',s\<^sub>1')\<close> obtain asx 
  with \<open>as = as'@[a']\<close> show
text \<open>The following lemma states the correctness of static intraprocedural slicing:\\

theorem WS_is_weak_sim:"is_weak_sim (WS S) S"
by(fastforce dest:WS_weak_sim simp:is_weak_sim_def)



inductive trans_observable_moves :: 
  "'node set \<Rightarrow> ('edge \<Rightarrow> 'state edge_kind) \<Rightarrow> 'node \<Rightarrow> 'state \<Rightarrow> 'edge list \<Rightarrow> 
  'node \<Rightarrow> 'state \<Rightarrow> bool" ("_,_ \<turnstile> '(_,_') =_\<Rightarrow>* '(_,_')" [51,50,0,0,50,0,0] 51) 

where tom_Nil:
  "S,f \<turnstile> (n,s) =[]\<Rightarrow>* (n,s)"

| tom_Cons:
  "\<lbrakk>S,f \<turnstile> (n,s) =as\<Rightarrow> (n',s'); S,f \<turnstile> (n',s') =as'\<Rightarrow>* (n'',s'')\<rbrakk>
  \<Longrightarrow> S,f \<turnstile> (n,s) =(last as)#as'\<Rightarrow>* (n'',s'')"


definition slice_edges :: "'node set \<Rightarrow> 'edge list \<Rightarrow> 'edge list"
  where "slice_edges S as \<equiv> [a \<leftarrow> as. sourcenode a \<in> backward_slice S]"


lemma silent_moves_no_slice_edges:
  "S,f \<turnstile> (n,s) =as\<Rightarrow>\<^sub>\<tau> (n',s') \<Longrightarrow> slice_edges S as = []"
by(induct rule:silent_moves.induct,auto elim:silent_move.cases simp:slice_edges_def)


lemma observable_moves_last_slice_edges:
  "S,f \<turnstile> (n,s) =as\<Rightarrow> (n',s') \<Longrightarrow> slice_edges S as = [last as]"
by(induct rule:observable_moves.induct,
   fastforce dest:silent_moves_no_slice_edges elim:observable_move.cases 
            simp:slice_edges_def)


lemma slice_edges_no_nodes_in_slice:
  "slice_edges S as = [] 
  \<Longrightarrow> \<forall>nx \<in> set(sourcenodes as). nx \<notin> (backward_slice S)"
proof(induct as)
  case Nil thus ?case by(simp add:slice_edges_def sourcenodes_def)
next
  case (Cons a' as')
    and "sourcenode a' \<notin> backward_slice S"
    by(auto simp:slice_edges_def split:if_split_asm)
  show ?case by(simp add:sourcenodes_def)
qed



lemma sliced_path_determ:
  "\<lbrakk>n -as\<rightarrow>* n'; n -as'\<rightarrow>* n'; slice_edges S as = slice_edges S as';
    preds (slice_kinds S as) s; preds (slice_kinds S as') s'; n' \<in> S;
    \<forall>V \<in> rv S n. state_val s V = state_val s' V\<rbrakk> \<Longrightarrow> as = as'"
proof(induct arbitrary:as' s s' rule:path.induct)
  case (empty_path n)
  have "\<forall>nx \<in> set(sourcenodes as'). nx \<notin> (backward_slice S)"
    by(fastforce intro!:slice_edges_no_nodes_in_slice simp:slice_edges_def)
  proof(induct nx\<equiv>"n" as' nx'\<equiv>"n" rule:path.induct)
    case (Cons_path n'' as a)
    have False by(simp add:sourcenodes_def)
    thus ?case by simp
  qed simp
next
  case (Cons_path n'' as n' a n)
  show ?case
  proof(cases as')
    case Nil
    have "n \<notin> backward_slice S" by(fastforce simp:slice_edges_def)
    have "n \<in> backward_slice S" by(fastforce intro:refl)
    thus ?thesis by simp
  next
    case (Cons ax asx)
      and "targetnode ax -asx\<rightarrow>* n'" by(auto elim:path_split_Cons)
    show ?thesis
    proof(cases "targetnode ax = n''")
      case True
      have "slice_edges S as = slice_edges S asx"
        by(cases "n \<in> backward_slice S")(auto simp:slice_edges_def)
      have preds1:"preds (slice_kinds S as) (transfer (slice_kind S a) s)"
        by(simp add:slice_kinds_def)
      have preds2:"preds (slice_kinds S asx) (transfer (slice_kind S a) s')"
        by(simp add:slice_kinds_def)
      have "\<forall>V\<in>rv S n''. state_val (transfer (slice_kind S a) s) V =
                          state_val (transfer (slice_kind S a) s') V"
        by -(rule rv_edge_slice_kinds,auto)
    next
      case False
      have False by -(erule rv_branching_edges_slice_kinds_False,auto)
      thus ?thesis by simp
    qed
  qed
qed



lemma path_trans_observable_moves:
  assumes "n -as\<rightarrow>* n'" and "preds (kinds as) s" and "transfers (kinds as) s = s'"
  obtains n'' s'' as' as'' where "S,kind \<turnstile> (n,s) =slice_edges S as\<Rightarrow>* (n'',s'')"
  and "S,kind \<turnstile> (n'',s'') =as'\<Rightarrow>\<^sub>\<tau> (n',s')" 
  and "slice_edges S as = slice_edges S as''" and "n -as''@as'\<rightarrow>* n'"
proof(atomize_elim)
  show "\<exists>n'' s'' as' as''. 
    S,kind \<turnstile> (n,s) =slice_edges S as\<Rightarrow>* (n'',s'') \<and>
    S,kind \<turnstile> (n'',s'') =as'\<Rightarrow>\<^sub>\<tau> (n',s') \<and> slice_edges S as = slice_edges S as'' \<and>
    n -as''@as'\<rightarrow>* n'"
  proof(induct arbitrary:s rule:path.induct)
    case (empty_path n)
    have "S,kind \<turnstile> (n,s) =[]\<Rightarrow>* (n,s)" by(rule tom_Nil)
    have "S,kind \<turnstile> (n,s) =[]\<Rightarrow>\<^sub>\<tau> (n,s)" by(rule silent_moves_Nil)
    show ?case
      apply(rule_tac x="n" in exI)
      apply(rule_tac x="s" in exI)
      apply(rule_tac x="[]" in exI)
      apply(rule_tac x="[]" in exI)
      by(fastforce intro:path.empty_path simp:slice_edges_def)
  next
    case (Cons_path n'' as n' a n)
    have "preds (kinds as) (transfer (kind a) s)" 
      "transfers (kinds as) (transfer (kind a) s) = s'" by(simp_all add:kinds_def)
    from IH[OF this] obtain nx sx asx asx'
      where "S,kind \<turnstile> (n'',transfer (kind a) s) =slice_edges S as\<Rightarrow>* (nx,sx)"
      and "S,kind \<turnstile> (nx,sx) =asx\<Rightarrow>\<^sub>\<tau> (n',s')"
      and "slice_edges S as = slice_edges S asx'"
      and "n'' -asx'@asx\<rightarrow>* n'"
      by clarsimp
    show ?case
    proof(cases "n \<in> backward_slice S")
      case True
      have "S,kind \<turnstile> (n,s) -a\<rightarrow> (n'',transfer (kind a) s)"
        by(fastforce intro:observable_moveI)
      hence "S,kind \<turnstile> (n,s) =[]@[a]\<Rightarrow> (n'',transfer (kind a) s)"
        by(fastforce intro:observable_moves_snoc silent_moves_Nil)
      have "S,kind \<turnstile> (n,s) =a#slice_edges S as\<Rightarrow>* (nx,sx)"
        by(fastforce dest:tom_Cons)
      show ?thesis
        apply(rule_tac x="nx" in exI)
        apply(rule_tac x="sx" in exI)
        apply(rule_tac x="asx" in exI)
        apply(rule_tac x="a#asx'" in exI)
        by(auto intro:path.Cons_path simp:slice_edges_def)
    next
      case False
      have "S,kind \<turnstile> (n,s) -a\<rightarrow>\<^sub>\<tau> (n'',transfer (kind a) s)"
        by(fastforce intro:silent_moveI)
      obtain f s'' asx'' where "S,f \<turnstile> (n'',s'') =asx''\<Rightarrow>* (nx,sx)"
        and "f = kind" and "s'' = transfer (kind a) s" 
        and "asx'' = slice_edges S as" by simp
      show ?thesis
      proof(induct rule:trans_observable_moves.induct)
        case (tom_Nil S f ni si)
        have "S,kind \<turnstile> (n,s) =[]\<Rightarrow>* (n,s)" by(rule trans_observable_moves.tom_Nil)
        have "S,kind \<turnstile> (n,s) =a#asx\<Rightarrow>\<^sub>\<tau> (n',s')"
          by(fastforce intro:silent_moves_Cons)
        have "n -a#asx\<rightarrow>* n'" by(fastforce dest:silent_moves_preds_transfers_path)
        show ?case
          apply(rule_tac x="n" in exI)
          apply(rule_tac x="s" in exI)
          apply(rule_tac x="a#asx" in exI)
          apply(rule_tac x="[]" in exI)
          by(fastforce simp:slice_edges_def intro:trans_observable_moves.tom_Nil)
      next
        case (tom_Cons S f ni si asi ni' si' asi' n'' s'')
          by(fastforce dest:observable_move_notempty)
        have "valid_edge a" and "sourcenode a = n" and "targetnode a = ni"
          by(auto elim:silent_move.cases)
        have "S,f \<turnstile> (n,s) =a#asi\<Rightarrow> (ni',si')"
          by(fastforce intro:silent_move_observable_moves)
        have "S,f \<turnstile> (n,s) =(last (a#asi))#asi'\<Rightarrow>* (n'',s'')"
          by -(rule trans_observable_moves.tom_Cons)
        show ?case
          apply(rule_tac x="n''" in exI)
          apply(rule_tac x="s''" in exI)
          apply(rule_tac x="asx" in exI)
          apply(rule_tac x="a#asx'" in exI)
          by(auto intro:path.Cons_path simp:slice_edges_def)
      qed
    qed
  qed
qed


lemma WS_weak_sim_trans:
  assumes "((n\<^sub>1,s\<^sub>1),(n\<^sub>2,s\<^sub>2)) \<in> WS S"
  and "S,kind \<turnstile> (n\<^sub>1,s\<^sub>1) =as\<Rightarrow>* (n\<^sub>1',s\<^sub>1')" and "as \<noteq> []"
  shows "((n\<^sub>1',s\<^sub>1'),(n\<^sub>1',transfers (slice_kinds S as) s\<^sub>2)) \<in> WS S \<and> 
         S,slice_kind S \<turnstile> (n\<^sub>2,s\<^sub>2) =as\<Rightarrow>* (n\<^sub>1',transfers (slice_kinds S as) s\<^sub>2)"
proof -
  obtain f where "f = kind" by simp
  have "S,f \<turnstile> (n\<^sub>1,s\<^sub>1) =as\<Rightarrow>* (n\<^sub>1',s\<^sub>1')" by simp
  show "((n\<^sub>1',s\<^sub>1'),(n\<^sub>1',transfers (slice_kinds S as) s\<^sub>2)) \<in> WS S \<and>
    S,slice_kind S \<turnstile> (n\<^sub>2,s\<^sub>2) =as\<Rightarrow>* (n\<^sub>1',transfers (slice_kinds S as) s\<^sub>2)"
  proof(induct arbitrary:n\<^sub>2 s\<^sub>2 rule:trans_observable_moves.induct)
    case tom_Nil thus ?case by simp
  next
    case (tom_Cons S f n s as n' s' as' n'' s'')
    obtain asx ax nx sx where "S,f \<turnstile> (n,s) =asx\<Rightarrow>\<^sub>\<tau> (nx,sx)"
      and "S,f \<turnstile> (nx,sx) -ax\<rightarrow> (n',s')" and "as = asx@[ax]"
      by(fastforce elim:observable_moves.cases)
      by(fastforce intro!:n_in_obs elim:observable_move.cases)
    have "((nx,sx),(n\<^sub>2,s\<^sub>2)) \<in> WS S" by(fastforce intro:WS_silent_moves)
    obtain asx' where "((n',s'),(n',transfer (slice_kind S ax) s\<^sub>2)) \<in> WS S"
      and "S,slice_kind S \<turnstile> (n\<^sub>2,s\<^sub>2) =asx'@[ax]\<Rightarrow> 
      (n',transfer (slice_kind S ax) s\<^sub>2)"
      by(fastforce elim:WS_observable_move)
    show ?case
    proof(cases "as' = []")
      case True
        by(fastforce elim:trans_observable_moves.cases dest:observable_move_notempty)
      have "S,slice_kind S \<turnstile> (n\<^sub>2,s\<^sub>2) =(last (asx'@[ax]))#[]\<Rightarrow>* 
                               (n',transfer (slice_kind S ax) s\<^sub>2)"
        by(fastforce intro:trans_observable_moves.intros)
      show ?thesis by(fastforce simp:slice_kinds_def)
    next
      case False
      have "((n'',s''),(n'',transfers (slice_kinds S as') 
        (transfer (slice_kind S ax) s\<^sub>2))) \<in> WS S"
        and "S,slice_kind S \<turnstile> (n',transfer (slice_kind S ax) s\<^sub>2) 
        =as'\<Rightarrow>* (n'',transfers (slice_kinds S as')
                     (transfer (slice_kind S ax) s\<^sub>2))" by simp_all
      have "S,slice_kind S \<turnstile> (n\<^sub>2,s\<^sub>2) =(last (asx'@[ax]))#as'\<Rightarrow>* 
        (n'',transfers (slice_kinds S as') (transfer (slice_kind S ax) s\<^sub>2))"
        by(fastforce intro:trans_observable_moves.tom_Cons)
