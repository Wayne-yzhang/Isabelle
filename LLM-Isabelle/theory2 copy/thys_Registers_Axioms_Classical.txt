theory Axioms_Classical
  imports Main
begin


lemma id_update_left: "Some \<circ>\<^sub>m a = a"
  by (auto intro!: ext simp add: map_comp_def option.case_eq_if)
lemma id_update_right: "a \<circ>\<^sub>m Some = a"
  by auto

lemma comp_update_assoc: "(a \<circ>\<^sub>m b) \<circ>\<^sub>m c = a \<circ>\<^sub>m (b \<circ>\<^sub>m c)"
  by (auto intro!: ext simp add: map_comp_def option.case_eq_if)


  unfolding preregister_def
  by (simp add: option.case_eq_if)

  unfolding preregister_def 
  by (auto simp add: option.case_eq_if)

  unfolding preregister_def 
  by (auto simp add: option.case_eq_if)

proof -
    using preregister_def by blast
    using preregister_def by blast
    unfolding F G s_def g_def
    by (auto simp add: option.case_eq_if)
  then show "preregister (G \<circ> F)"
    using preregister_def by blast
qed


  by (auto intro!: ext simp add: map_comp_def option.case_eq_if tensor_update_def)


lemma update1_extensionality:
  shows "F = G"
proof (rule ccontr)
    apply atomize_elim by auto
    apply atomize_elim by (metis option.exhaust_sel)
  then show False
  proof cases
    case (abeq x)
      by (simp_all add: gsF gsG)
      by (simp add: gsF update1_def)
      by (simp add: abeq gsG update1_def)
    ultimately show False
      using FGeq neq' by force
  next
    case abnone
    then show False
      using gsF gsG neq' by force
  next
    case neqF
    moreover
      by (metis gsF neqF(2) option.case_eq_if option.simps(3) option.simps(5) update1_def)
      by (metis gsG neqF(1) option.case_eq_if update1_def)
    ultimately show False
      using FGeq by force
  next
    case neqG
    moreover
      by (metis gsG neqG(2) option.case_eq_if option.distinct(1) option.simps(5) update1_def)
      by (simp add: gsF neqG(1) update1_def)
    ultimately show False
      using FGeq by force
  next
    case neqNone
    with neq' show False
      by fastforce
  qed
qed

lemma tensor_extensionality:
  shows "F = G"
proof -
    apply (auto intro!:ext simp: tensor_update_def[abs_def] update1_def[abs_def])
    by (smt (z3) assms(1) assms(2) option.case(2) option.case_eq_if preregister_def prod.collapse)
  with assms(1,2) show "F = G"
    by (rule update1_extensionality)
qed

definition "valid_getter_setter g s \<longleftrightarrow> 
  (\<forall>b. b = s (g b) b) \<and> (\<forall>a b. g (s a b) = a) \<and> (\<forall>a a' b. s a (s a' b) = s a b)"


lemma
proof -
    by (auto intro!:ext simp: s'_def setter_def register_apply_def register_from_getter_setter_def)
  proof (rule ext, rename_tac m)
    fix m
      by (metis assms valid_getter_setter_def)
      by (metis assms that(1) that(2) valid_getter_setter_def)
      by (simp add: Uniq_def the1_equality')
  qed
qed


  by (auto simp add: register_def valid_getter_setter_def register_from_getter_setter_def)

  unfolding register_def
  by (auto intro!: ext simp: option.case_eq_if register_from_getter_setter_def valid_getter_setter_def)

  apply (auto simp: register_def)
  apply (rule exI[of _ fst])
  by (auto intro!: ext simp add: tensor_update_def valid_getter_setter_def register_from_getter_setter_def option.case_eq_if)

  apply (auto simp: register_def)
  apply (rule exI[of _ snd])
  by (auto intro!: ext simp add: tensor_update_def valid_getter_setter_def register_from_getter_setter_def option.case_eq_if)

proof -
    unfolding register_from_getter_setter_def register_def by blast
  show ?thesis
    unfolding preregister_def
    apply (rule exI[of _ g])
    using F by simp
qed

  for F :: "('a,'b) preregister" and G :: "('b,'c) preregister"
proof -
    unfolding register_def register_from_getter_setter_def by blast
    unfolding register_def register_from_getter_setter_def by blast
    by (auto simp add: option.case_eq_if F G s_def g_def)
    using validF validG by (auto simp: valid_getter_setter_def s_def g_def)
  ultimately show "register (G \<circ> F)"
    unfolding register_def register_from_getter_setter_def by blast
qed

lemma register_mult: "register F \<Longrightarrow> F a \<circ>\<^sub>m F b = F (a \<circ>\<^sub>m b)"
  by (auto intro!: ext simp: register_def register_from_getter_setter_def[abs_def] valid_getter_setter_def map_comp_def option.case_eq_if)

definition register_pair ::

lemma compatible_setter:
  using compat apply (auto intro!: ext simp: setter_def register_apply_def o_def map_comp_def)
  by (smt (verit, best) assms(1) assms(2) option.case_eq_if option.distinct(1) register_def register_from_getter_setter_def)

lemma register_pair_apply:
proof -
    by (metis assms getter_of_register_from_getter_setter register_def setter_of_register_from_getter_setter)+
    by (metis assms getter_of_register_from_getter_setter register_def setter_of_register_from_getter_setter)+
  proof -
      using validF by (metis valid_getter_setter_def)
      by (metis (mono_tags, lifting) assms(1) assms(2) assms(3) comp_eq_dest_lhs compatible_setter)
      by (metis validF valid_getter_setter_def)
    finally show ?thesis by -
  qed

  show ?thesis
    apply (subst (2) F, subst (2) G)
    by (auto intro!:ext simp: register_pair_def tensor_update_def map_comp_def option.case_eq_if
              register_from_getter_setter_def gFsG)
qed

lemma register_pair_is_register:
proof -
    by (metis assms getter_of_register_from_getter_setter register_def setter_of_register_from_getter_setter)+
    apply (simp add: valid_getter_setter_def)
    by (metis (mono_tags, lifting) assms comp_eq_dest_lhs compat compatible_setter)
  then show ?thesis
    by (auto simp: register_pair_def register_def)
qed

end
