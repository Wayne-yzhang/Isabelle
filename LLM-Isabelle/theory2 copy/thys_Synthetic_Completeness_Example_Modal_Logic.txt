theory Example_Modal_Logic imports Derivations begin


datatype ('i, 'p) fm



datatype ('i, 'p, 'w) model =










  by (induct p) simp_all

lemma tautology:
proof -
    by simp
    using eval_semantics by fast
    by (metis model.exhaust)
qed

theorem soundness:
  by (induct p arbitrary: w rule: Calculus.induct) (auto simp: assms tautology)


proof -
    by (induct A) simp_all
  then show ?thesis
    using A1 by blast
qed

lemma K_imply_Cons:
proof -
    by (simp add: A1)
  with R1 assms show ?thesis .
qed

lemma K_right_mp:
proof -
    by (induct A) simp_all
  then show ?thesis
    using assms R1 by blast
qed

  by (meson K_right_mp K_imply_Cons K_imply_head)

  by (induct A) simp_all

proof (induct B arbitrary: A)
  case Cons
  then show ?case
    by (metis deduct1 imply.simps(2) imply_append)
qed simp

  by (metis imply.simps imply_append imply_swap_append)

  using K_imply_head K_imply_Cons by (induct A) fastforce+

  using K_imply_head R1 by auto

  by (induct A arbitrary: q) (simp, metis K_right_mp K_ImpI imply_mem insert_subset list.set(2))

lemma K_Boole:
proof -
    using assms K_ImpI by blast
    by (induct A) simp_all
    using A1 by blast
  ultimately show ?thesis
    using R1 by blast
qed

lemma K_distrib_K_imp:
proof -
  proof (induct A)
    case Nil
    then show ?case
      by (simp add: A1)
  next
    case (Cons a A)
      by (simp add: A2)
    moreover have
      by (simp add: A1)
      using Cons R1 by blast
    then show ?case
      by simp
  qed
  then show ?thesis
    using assms R1 by blast
qed

interpretation Derivations Calculus_assms
proof
    using K_imply_weaken by blast
qed



interpretation MCS_No_Saturation consistent
proof
    unfolding consistent_def by fast
next
    unfolding consistent_def by blast
next
qed

proof
    unfolding consistent_def ..
next
    by (metis K_imply_head K_imply_weaken Un_upper2 set_append split_list_first)
next
    by (metis K_imply_head K_right_mp R1 imply.simps(2) imply_append)
qed

lemma exists_finite_inconsistent:
proof -
    using assms unfolding consistent_def by blast
    unfolding consistent_def using W'(2) by auto
    by blast
    using W'(1) by auto
    by simp
  ultimately show ?thesis
    by (meson that)
qed

lemma MCS_consequent:
  using assms MCS_derive
  by (metis (mono_tags, lifting) K_imply_Cons K_imply_head K_right_mp insert_subset list.simps(15))

theorem deriv_in_maximal:
  using assms R1 derive_split1 unfolding consistent_def maximal_def by (metis imply.simps(2))

theorem exactly_one_in_maximal:
  using assms MCS_derive MCS_derive_fls by (metis K_Boole K_imply_Cons K_imply_head K_right_mp)







fun semics ::


lemma Hintikka_model':
  case 1
  then show ?case ..
next
  case (2 x)
  then show ?case
    using assms[of V x] by (cases x) auto
qed

lemma maximal_extension:
  using assms MCS_Extend' Extend_subset by meson

lemma Hintikka_canonical:
proof (cases p)
  case Fls
    using assms MCS_derive unfolding consistent_def by blast
  then show ?thesis
    using Fls by simp
next
  case (Imp p q)
    using assms MCS_derive MCS_derive_fls MCS_consequent
    by (metis (no_types, lifting) CollectD K_Boole K_ImpI K_imply_Cons)
  then show ?thesis
    using Imp by simp
next
  case (Box i p)
  proof
      by auto
  next


    proof
        using "*" exactly_one_in_maximal by auto
        using W by simp_all
        by auto
      then show False
    qed

    then obtain W where W:
      using exists_finite_inconsistent by metis

      using W(4) derive_split1 unfolding consistent_def by (meson K_Boole K_imply_weaken)
      using R2 by fast
      using K_distrib_K_imp by fast
      using L W(1-2)
    proof (induct L arbitrary: W)
      case (Cons a L)
        by auto
      then show ?case
        using Cons by auto
    qed simp
  qed
  then show ?thesis
    using Box by simp
qed simp

interpretation Truth_No_Saturation consistent semics semantics
proof
    by (cases M, induct p) simp_all
next
    using Hintikka_model'[of H _ p] by auto
next
    using Hintikka_canonical by blast
qed

lemma Truth_lemma:
  using assms truth_lemma_no_saturation by fastforce

lemma canonical_model:
proof -
    unfolding V_def using maximal_Extend by blast
  { fix x
      unfolding V_def using Extend_subset by blast
    by fact+
qed


theorem strong_completeness:
proof (rule ccontr)
    using K_Boole by blast


    using * derive_split1 unfolding consistent_def by meson
    using canonical_model by fastforce+
    using assms by simp
  then show False
qed



  using soundness completeness by meson

end
