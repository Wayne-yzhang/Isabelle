theory Refine_Automation
imports Refine_Basic Refine_Transfer
keywords "concrete_definition" :: thy_decl
  and "prepare_code_thms" :: thy_decl
  and "uses"
begin



setup Refine_Automation.setup








declare [[ cd_patterns "(?f,_)\<in>_"]]
declare [[ cd_patterns "RETURN ?f \<le> _" "nres_of ?f \<le> _"]]
declare [[ cd_patterns "(RETURN ?f,_)\<in>_" "(nres_of ?f,_)\<in>_"]]
declare [[ cd_patterns "_ = ?f" "_ == ?f" ]]



lemma gen_code_thm_RECT:
  fixes x
  assumes D: "f \<equiv> RECT B"
  assumes M: "trimono B"
  shows "f x \<equiv> B f x"
  unfolding D
  apply (subst RECT_unfold)
  by (rule M)

lemma gen_code_thm_REC:
  fixes x
  assumes D: "f \<equiv> REC B"
  assumes M: "trimono B"
  shows "f x \<equiv> B f x"
  unfolding D
  apply (subst REC_unfold)
  by (rule M)



method_setup vc_solve = 


end
