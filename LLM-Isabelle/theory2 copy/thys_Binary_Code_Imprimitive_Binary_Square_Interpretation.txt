theory Binary_Square_Interpretation

imports
  Combinatorics_Words.Submonoids
  Combinatorics_Words.Equations_Basic
begin





lemma  pref_suf_pers_short: assumes "x \<le>p v \<cdot> x" and "\<^bold>|v \<cdot> u\<^bold>| < \<^bold>|x\<^bold>|" and "x \<le>s r \<cdot> u \<cdot> v \<cdot> u" and "r \<in> \<langle>{u,v}\<rangle>"
  shows "u\<cdot>v = v\<cdot>u"
proof (rule nemp_comm)
  have "v \<cdot> u <s x"
  assume "u \<noteq> \<epsilon>" and "v \<noteq> \<epsilon>"
  obtain q where "x = q \<cdot> v \<cdot> u" and "q \<noteq> \<epsilon>"
  hence "q \<le>s r \<cdot> u"
  from suf_trans[OF primroot_suf this]
  have "\<rho> q \<le>s r \<cdot> u".
  have "q \<cdot> v = v \<cdot> q"
  have "u <p v \<cdot> u"
  from per_root_primroot[OF this]
  have "u \<le>p \<rho> q \<cdot> u"
    by force

  have "r \<in> \<langle>{u, \<rho> q}\<rangle>"
  show "u \<cdot> v = v \<cdot> u"
qed

lemma pref_suf_pers_large_overlap:
  assumes
    "p \<le>p x" and "s \<le>s x" and "p \<le>p r \<cdot> p" and "s \<le>s s \<cdot> r" and "\<^bold>|x\<^bold>| + \<^bold>|r\<^bold>| \<le> \<^bold>|p\<^bold>| + \<^bold>|s\<^bold>|"
  shows "x \<cdot> r = r \<cdot> x"
  using assms
proof (cases "r = \<epsilon>")
  assume "r \<noteq> \<epsilon>" hence "r \<noteq> \<epsilon>" by blast
  have "\<^bold>|s\<^bold>| \<le> \<^bold>|x\<^bold>|"
  have "\<^bold>|p\<^bold>| \<le> \<^bold>|x\<^bold>|"
  have "\<^bold>|r\<^bold>| \<le> \<^bold>|p\<^bold>|"
  have "\<^bold>|r\<^bold>| \<le> \<^bold>|s\<^bold>|"
  obtain p1 ov s1 where "p1 \<cdot> ov \<cdot> s1 = x"  and "p1 \<cdot> ov = p" and "ov \<cdot> s1 = s"
  have "\<^bold>|r\<^bold>| \<le> \<^bold>|ov\<^bold>|"
    unfolding lenmorph by force
  have "r \<le>p p"
  hence "r \<le>p x"
  have "r \<le>s s"
  hence "r \<le>s x"
  obtain k where "p \<le>p r\<^sup>@k" "0 < k"
  hence "p1 \<cdot> ov \<le>f r\<^sup>@k"
  hence "ov \<cdot> s1 \<le>f r\<^sup>@ l"
  obtain m where "x \<le>f r \<^sup>@ m".
  show "x \<cdot> r = r \<cdot> x"
    using root_suf_comm[OF
qed simp


locale pref_suf_pers =
  fixes x u v k m
  assumes
    and
    and k_pos: "0 < k" and m_pos: "0 < m"
begin

lemma pref_suf_commute_all_commutes:
  assumes  "\<^bold>|u \<cdot> v\<^bold>| \<le> \<^bold>|x\<^bold>|" and "u \<cdot> v = v \<cdot> u"
  shows "commutes {u,v,x}"
  using assms
proof (cases "u \<cdot> v = \<epsilon>")
  let ?p = "(v \<cdot> (u \<cdot> v)\<^sup>@k)"
  let ?s = "(u \<cdot> v)\<^sup>@m \<cdot> u"
  note x_pref x_suf

  assume "u \<cdot> v \<noteq> \<epsilon>"
  have "?p \<noteq> \<epsilon>" and "?s \<noteq> \<epsilon>" and "v \<cdot> u \<noteq> \<epsilon>"
  obtain r where "u \<in> r*" and "v \<in> r*" and "primitive r"
  hence "r \<noteq> \<epsilon>"
    by force

  have "?p \<in> r*" and "?s \<in> r*" and "v \<cdot> u \<in> r*" and "u \<cdot> v \<in> r*"
    by (simp_all add: add_roots root_pow_root)

  have "x \<le>p r \<cdot> x"
  have "v \<cdot> u \<le>s x"
  have "r \<le>s  v \<cdot> u"
  have "r \<le>s r \<cdot> x"
  have "x \<cdot> r  = r \<cdot> x"
  hence "x \<in> r*"
  thus "commutes {u,v,x}"
qed simp

lemma no_overlap:
  assumes
    len: "\<^bold>|v \<cdot> (u \<cdot> v)\<^sup>@k\<^bold>| + \<^bold>|(u \<cdot> v)\<^sup>@m \<cdot> u\<^bold>| \<le> \<^bold>|x\<^bold>|" (is "\<^bold>|?p\<^bold>| + \<^bold>|?s\<^bold>| \<le> \<^bold>|x\<^bold>|") and
    "0 < k" "0 < m"
  shows "commutes {u,v,x}"
  using assms
proof (cases "u \<cdot> v = \<epsilon>")
  note x_pref x_suf
  assume "u \<cdot> v \<noteq> \<epsilon>"
  have "?p \<noteq> \<epsilon>" and "?s \<noteq> \<epsilon>"
  obtain r s kp ks mw where "?p = (r \<cdot> s)\<^sup>@kp" and "?s = (s \<cdot> r)\<^sup>@ks" and "x = (r \<cdot> s)\<^sup>@mw \<cdot> r" and "primitive (r \<cdot> s)".
  hence "\<rho> ?p = r \<cdot> s"
  moreover have "\<rho> ?s = s \<cdot> r"
  ultimately have "\<rho> ?p \<sim> \<rho> ?s"
    by force
  from conj_pers_conj_comm[OF this k_pos m_pos]
  have "u \<cdot> v = v \<cdot> u".

  from pref_suf_commute_all_commutes[OF _ this]
  show "commutes {u,v,x}"
    using len by auto
qed simp

lemma no_overlap':
  assumes
    len: "\<^bold>|v \<cdot> (u \<cdot> v)\<^sup>@k\<^bold>| + \<^bold>|(u \<cdot> v)\<^sup>@m \<cdot> u\<^bold>| \<le> \<^bold>|x\<^bold>|" (is "\<^bold>|?p\<^bold>| + \<^bold>|?s\<^bold>| \<le> \<^bold>|x\<^bold>|")
    and "0 < k" "0 < m"
  shows "u \<cdot> v = v \<cdot> u"
  by (rule commutesE[of "{u,v,x}"], simp_all add: no_overlap[OF assms])

lemma short_overlap:
  assumes
    len1: "\<^bold>|x\<^bold>| < \<^bold>|v \<cdot> (u \<cdot> v)\<^sup>@k\<^bold>| + \<^bold>|(u \<cdot> v)\<^sup>@m \<cdot> u\<^bold>|" (is "\<^bold>|x\<^bold>| < \<^bold>|?p\<^bold>| + \<^bold>|?s\<^bold>|") and
    len2: "\<^bold>|v \<cdot> (u \<cdot> v)\<^sup>@k\<^bold>| + \<^bold>|(u \<cdot> v)\<^sup>@m \<cdot> u\<^bold>| \<le> \<^bold>|x\<^bold>| + \<^bold>|u\<^bold>|" (is "\<^bold>|?p\<^bold>| + \<^bold>|?s\<^bold>| \<le> \<^bold>|x\<^bold>| + \<^bold>|u\<^bold>|")
  shows "commutes {u,v,x}"
proof (rule pref_suf_commute_all_commutes)
  show "\<^bold>|u \<cdot> v\<^bold>| \<le> \<^bold>|x\<^bold>|"
    using len2 unfolding pow_pos[OF k_pos] lenmorph by simp
next
  note x_pref x_suf

  have "\<^bold>|?p\<^bold>| \<le> \<^bold>|x\<^bold>|"
    using  len2 unfolding lenmorph by linarith
  hence "?p \<le>p x"

  have "\<^bold>|?s\<^bold>| \<le> \<^bold>|x\<^bold>|"
    using  len2 unfolding pow_pos[OF k_pos] pow_len lenmorph by auto
  hence "?s \<le>s x"

  obtain p1 ov s1 where "p1 \<cdot> ov \<cdot> s1 = x" and "p1 \<cdot> ov = ?p" and "ov \<cdot> s1 = ?s".

  from len1[folded this]
  have "ov \<noteq> \<epsilon>"
    by fastforce

  have "\<^bold>|ov\<^bold>| \<le> \<^bold>|u\<^bold>|"

  then obtain s' where "ov \<cdot> s' = u" and "s' \<cdot> v \<cdot> (u \<cdot> v) \<^sup>@ (m -1) \<cdot> u = s1"


  from   eqdE[reversed, of p1 ov "v \<cdot> (u \<cdot> v)\<^sup>@(k-1)" "u \<cdot> v", unfolded rassoc,
  have "v \<cdot> (u \<cdot> v) \<^sup>@ (k -1)  \<le>p p1"
     unfolding lenmorph by (auto simp add: prefix_def)

  then obtain q where "v \<cdot> (u \<cdot> v)\<^sup>@(k-1) \<cdot> q = p1"
    by (force simp add: prefix_def)


  show "u \<cdot> v = v \<cdot> u"
  proof (rule sym, rule uvu_suf_uvvu)
    show "s' \<le>s u"
    proof-
      have "u \<cdot> v \<cdot> u \<le>p ?s"
        unfolding pow_pos[OF m_pos] rassoc pref_cancel_conv shift_pow by blast
      hence "p1 \<cdot> u \<cdot> v \<cdot> u \<le>p x"
      hence "v \<cdot> (u \<cdot> v)\<^sup>@(k-1) \<cdot> q \<cdot> u \<cdot> v \<cdot> ov \<le>p x"

      have "v \<cdot> u \<le>p x"
      have "\<^bold>|?p \<cdot> v \<cdot> u\<^bold>| \<le> \<^bold>|x\<^bold>|"
        using len2 unfolding pow_pos[OF m_pos] lenmorph by force
      hence "?p \<cdot> v \<cdot> u \<le>p x"
      hence "v \<cdot> (u \<cdot> v)\<^sup>@(k-1) \<cdot> u \<cdot> v \<cdot> v \<cdot> u \<le>p x"
        unfolding pow_pos'[OF k_pos] rassoc.

      have "\<^bold>|v \<cdot> (u \<cdot> v)\<^sup>@(k-1) \<cdot> u \<cdot> v \<cdot> v \<cdot> u\<^bold>| = \<^bold>|v \<cdot> (u \<cdot> v)\<^sup>@(k-1) \<cdot> q \<cdot> u \<cdot> v \<cdot> ov\<^bold>|"
        by force

      have "u \<cdot> v \<cdot> v \<cdot> u = q \<cdot> u \<cdot> v \<cdot> ov".

      thus  "u \<cdot> v \<cdot> v \<cdot> u \<cdot> s' = q \<cdot> u \<cdot> v \<cdot> u"
    qed
    show "q \<le>s v \<cdot> u"
    proof (rule ruler_le[reversed])
      show "q \<le>s x"
      proof (rule suf_trans)
        show "p1 \<le>s x"
        show "q \<le>s p1"
      qed
      show "v \<cdot> u \<le>s x"
      show "\<^bold>|q\<^bold>| \<le> \<^bold>|v \<cdot> u\<^bold>|"
    qed
  qed auto
qed

lemma medium_overlap:
  assumes
    len1: "\<^bold>|x\<^bold>| + \<^bold>|u\<^bold>| < \<^bold>|v \<cdot> (u \<cdot> v)\<^sup>@k\<^bold>| + \<^bold>|(u \<cdot> v)\<^sup>@m \<cdot> u\<^bold>|" (is "\<^bold>|x\<^bold>| + \<^bold>|u\<^bold>| < \<^bold>|?p\<^bold>| + \<^bold>|?s\<^bold>|") and
    len2: "\<^bold>|v \<cdot> (u \<cdot> v)\<^sup>@k\<^bold>| + \<^bold>|(u \<cdot> v)\<^sup>@m \<cdot> u\<^bold>| < \<^bold>|x\<^bold>| + \<^bold>|u \<cdot> v\<^bold>|" (is "\<^bold>|?p\<^bold>| + \<^bold>|?s\<^bold>| < \<^bold>|x\<^bold>| + \<^bold>|u \<cdot> v\<^bold>|")
  shows "commutes {u,v,x}"
proof (rule pref_suf_commute_all_commutes)
  show "\<^bold>|u \<cdot> v\<^bold>| \<le> \<^bold>|x\<^bold>|"
    using len2 unfolding pow_pos[OF k_pos] by force
next
  note x_pref x_suf
  have "\<^bold>|?p\<^bold>| \<le> \<^bold>|x\<^bold>|"
    using  len2 unfolding pow_pos[OF m_pos] by auto
  hence "?p \<le>p x"
  hence  "v \<cdot> (u \<cdot> v)\<^sup>@(k-1) \<cdot> u \<cdot> v \<cdot> v \<le>p ?p \<cdot> x"

  have "\<^bold>|?s\<^bold>| \<le> \<^bold>|x\<^bold>|"
    using  len2 unfolding pow_pos[OF k_pos] pow_len lenmorph by auto
  hence "?s \<le>s x"
  then obtain p' where "p' \<cdot> u \<cdot> v \<le>p x" and "p' \<cdot> ?s = x"
    unfolding pow_pos[OF m_pos] by (auto simp add: suffix_def)

  have "\<^bold>|p' \<cdot> u \<cdot> v\<^bold>| \<le> \<^bold>|?p \<cdot> v\<^bold>|"

  have "\<^bold>|v \<cdot> (u \<cdot> v)\<^sup>@(k-1)\<^bold>|  < \<^bold>|p'\<^bold>|"

  from less_imp_le[OF this]
  obtain p where "v \<cdot> (u \<cdot> v)\<^sup>@(k-1) \<cdot> p = p'"
        unfolded pow_pos'[OF k_pos] lassoc, THEN pref_cancel_right, THEN pref_cancel_right]
    unfolding lenmorph  by (auto simp add: prefix_def)

  have "\<^bold>|p\<^bold>| \<le> \<^bold>|v\<^bold>|"

  show "u \<cdot> v = v \<cdot> u"
  proof (rule uv_fac_uvv)
    show "p \<cdot> u \<cdot> v \<le>p u \<cdot> v \<cdot> v"
    proof (rule pref_cancel[of "v \<cdot> (u \<cdot> v)\<^sup>@(k-1)"], rule ruler_le)
      show "(v \<cdot> (u \<cdot> v) \<^sup>@ (k-1)) \<cdot> p \<cdot> u \<cdot> v \<le>p ?p \<cdot> x"
      show "(v \<cdot> (u \<cdot> v) \<^sup>@ (k-1)) \<cdot> u \<cdot> v \<cdot> v \<le>p (v \<cdot> (u \<cdot> v) \<^sup>@ k) \<cdot> x"
        unfolding pow_pos'[OF k_pos] rassoc
      show "\<^bold>|(v \<cdot> (u \<cdot> v) \<^sup>@ (k-1)) \<cdot> p \<cdot> u \<cdot> v\<^bold>| \<le> \<^bold>|(v \<cdot> (u \<cdot> v) \<^sup>@ (k-1)) \<cdot> u \<cdot> v \<cdot> v\<^bold>|"
    qed

    have "p \<le>s x"

    show "p \<le>s (u \<cdot> v) \<^sup>@ (m-1) \<cdot> u \<cdot> v \<cdot> u"

    show "(u \<cdot> v) \<^sup>@ (m-1) \<cdot> u \<cdot> v \<cdot> u \<in> \<langle>{u, v}\<rangle>"
      by (simp add: gen_in hull_closed power_in)

    show "p \<noteq> \<epsilon>"
  qed
qed

thm
  no_overlap
  short_overlap
  medium_overlap

end

thm
  pref_suf_pers.no_overlap
  pref_suf_pers.short_overlap
  pref_suf_pers.medium_overlap
  pref_suf_pers_large_overlap



lemma cover_not_disjoint:
  shows "primitive (\<aa>\<cdot>\<bb>\<cdot>\<aa>\<cdot>\<bb>\<cdot>\<aa>\<cdot>\<bb>\<cdot>\<aa>)" (is "primitive ?x") and
        "primitive (\<aa>\<cdot>\<bb>)" (is "primitive ?y") and
    "(\<aa>\<cdot>\<bb>\<cdot>\<aa>\<cdot>\<bb>\<cdot>\<aa>\<cdot>\<bb>\<cdot>\<aa>) \<cdot> (\<aa>\<cdot>\<bb>) \<noteq> (\<aa>\<cdot>\<bb>) \<cdot> (\<aa>\<cdot>\<bb>\<cdot>\<aa>\<cdot>\<bb>\<cdot>\<aa>\<cdot>\<bb>\<cdot>\<aa>)"
    (is "?x \<cdot> ?y \<noteq> ?y \<cdot> ?x") and
    "\<epsilon> (\<aa>\<cdot>\<bb>\<cdot>\<aa>\<cdot>\<bb>\<cdot>\<aa>\<cdot>\<bb>\<cdot>\<aa>) \<cdot> (\<aa>\<cdot>\<bb>\<cdot>\<aa>\<cdot>\<bb>\<cdot>\<aa>\<cdot>\<bb>\<cdot>\<aa>) (\<bb>\<cdot>\<aa>\<cdot>\<bb>\<cdot>\<aa>) \<sim>\<^sub>\<I> [(\<aa>\<cdot>\<bb>\<cdot>\<aa>\<cdot>\<bb>\<cdot>\<aa>\<cdot>\<bb>\<cdot>\<aa>),(\<aa>\<cdot>\<bb>),(\<aa>\<cdot>\<bb>),(\<aa>\<cdot>\<bb>\<cdot>\<aa>\<cdot>\<bb>\<cdot>\<aa>\<cdot>\<bb>\<cdot>\<aa>)]"
    (is "\<epsilon> ?x \<cdot> ?x ?s \<sim>\<^sub>\<I> [?x,?y,?y,?x]")
  unfolding factor_interpretation_def
  by primitivity_inspection+ force


locale square_interp =
  fixes x y p s ws
  assumes
    non_comm: "x \<cdot> y \<noteq> y \<cdot> x" and
    prim_x: "primitive x" and
        y_le_x: "\<^bold>|y\<^bold>| \<le> \<^bold>|x\<^bold>|" and
    ws_lists: "ws \<in> lists {x,y}" and
    nconjug: "\<not> x \<sim> y" and
    disj_interp: "p [x,x] s \<sim>\<^sub>\<D> ws"

begin

lemma interp: "p (x\<cdot>x) s \<sim>\<^sub>\<I> ws"
  using disj_interpD[OF disj_interp] by force

lemma disjoint:  "p1 \<le>p [x,x] \<Longrightarrow> p2 \<le>p ws \<Longrightarrow> p \<cdot> concat p1 \<noteq> concat p2"
  using disj_interpD1[OF disj_interp].

interpretation binary_code x y
  using non_comm by unfold_locales

lemmas interpret_concat = fac_interpD(3)[OF interp]

lemma p_nemp:  "p \<noteq> \<epsilon>"
  using disjoint[of \<epsilon> \<epsilon>] by auto

lemma s_nemp: "s \<noteq> \<epsilon>"
  using disjoint[of "[x,x]" ws] interpret_concat by force

lemma x_root: "\<rho> x = x"
  using prim_x by blast


lemma ws_nemp: "ws \<noteq> \<epsilon>"
  using bin_fst_nemp fac_interp_nemp interp by blast

lemma hd_ws_lists: "hd ws \<in> {x, y}"
  using lists_hd_in_set ws_lists ws_nemp by auto

lemma last_ws_lists: "last ws \<in> {x, y}"
  using lists_hd_in_set[reversed, OF ws_nemp ws_lists].

lemma kE: obtains k where "[hd ws] \<cdot> [y]\<^sup>@k \<cdot> [last ws] = ws"
proof-
  from  list.collapse[OF ws_nemp] hd_word
  obtain ws' where "ws = [hd ws] \<cdot> ws'"
    by metis
  hence "\<^bold>|hd ws\<^bold>| \<le> \<^bold>|x\<^bold>|"
    using  two_elem_cases[OF lists_hd_in_set[OF ws_nemp ws_lists]] y_le_x by blast
  hence "\<^bold>|x\<^bold>| \<le> \<^bold>|concat ws'\<^bold>|"
    using lenarg[OF interpret_concat, unfolded lenmorph]
    by linarith
  hence "ws' \<noteq> \<epsilon>"
    using nemp_len[OF bin_fst_nemp] by fastforce
  then obtain mid_ws where "ws' = mid_ws \<cdot> [last ws]"
    fac_interpD[OF interp]
  obtain p' where [symmetric]:"p \<cdot> p' = hd ws" and "p' \<noteq> \<epsilon>"
  obtain s' where  [symmetric]: "s'\<cdot> s  = last ws" and "s' \<noteq> \<epsilon>"
  have "p' \<cdot> concat mid_ws \<cdot> s' = x \<cdot> x"
  note over = prim_overlap_sqE[OF prim_x, folded this]
  have "mid_ws \<in> lists {x,y}"
  have "x \<notin> set mid_ws"
  proof
    assume "x \<in> set mid_ws"
    then obtain r q where "concat mid_ws = r \<cdot> x \<cdot> q"
      using concat.simps(2) concat_morph in_set_conv_decomp_first by metis
    have "(p' \<cdot> r)  \<cdot> x \<cdot> (q \<cdot> s') = x \<cdot> x"
      unfolding rassoc.
    from prim_overlap_sqE[OF prim_x this]
    show False
  qed
  hence "mid_ws \<in> lists {y}"
  from that sing_lists_exp[OF this]
  show thesis
qed

lemma l_mE: obtains m u v l where "(hd ws)\<cdot>y\<^sup>@m\<cdot>u = p\<cdot>x" and "v \<cdot> y\<^sup>@l \<cdot> (last ws) = x \<cdot> s" and
  "u\<cdot>v = y" "u \<noteq> \<epsilon>" "v \<noteq> \<epsilon>" and "x \<cdot> (v \<cdot> u) \<noteq> (v \<cdot> u) \<cdot> x"
 proof-
  note fac_interpD[OF interp]
  obtain k where "[hd ws] \<cdot> [y]\<^sup>@k \<cdot> [last ws] = ws"
    using kE.
  from arg_cong[OF this, of concat, folded interpret_concat, unfolded concat_morph rassoc concat_sing' concat_sing_pow]
  have "hd ws \<cdot> y\<^sup>@k \<cdot> last ws = p \<cdot> x \<cdot> x \<cdot> s".
  have "\<^bold>|hd ws\<^bold>| \<le> \<^bold>|p \<cdot> x\<^bold>|"
    unfolding lenmorph by (rule two_elem_cases[OF hd_ws_lists])
    (use dual_order.trans[OF le_add2 y_le_x] le_add2[of "\<^bold>|x\<^bold>|"] in fast)+
  from eqd[OF _ this]
  obtain ya where "hd ws \<cdot> ya = p \<cdot> x"
  have "\<^bold>|last ws\<^bold>| \<le> \<^bold>|x\<^bold>|"
    unfolding lenmorph using dual_order.trans last_ws_lists y_le_x by auto
  hence "\<^bold>|last ws\<^bold>| < \<^bold>|x \<cdot> s\<^bold>|"
    unfolding lenmorph using nemp_len[OF s_nemp] by linarith
  from eqd[reversed, OF _ less_imp_le[OF this]]
  obtain yb where "yb \<cdot> (last ws) = x \<cdot> s"
  hence "yb \<noteq> \<epsilon>"
  have "ya \<cdot> yb = y\<^sup>@k"
  from pref_mod_pow'[OF sprefI[OF prefI[OF this]], folded this]
  obtain m u where "m < k" and "u <p y" and "y\<^sup>@m \<cdot> u = ya"
  have "y\<^sup>@m \<cdot> u \<cdot> (u\<inverse>\<^sup>>y) \<cdot> y\<^sup>@(k - m - 1) = y\<^sup>@m \<cdot> y \<cdot> y\<^sup>@(k - m - 1)"
  also have "... = y\<^sup>@(m + 1 + (k-m-1))"
    using rassoc add_exps pow_1 by metis
  also have "... = y\<^sup>@k"
  finally obtain l v where "u\<cdot>v = y" and "y\<^sup>@m \<cdot> u \<cdot> v \<cdot> y\<^sup>@l = y\<^sup>@k"
  have "concat ([hd ws]\<cdot>[y] \<^sup>@ m) = hd ws \<cdot> y \<^sup>@ m"
    by simp
  have "v \<noteq> \<epsilon>"
  have "[hd ws] \<cdot> [y] \<^sup>@ m \<le>p ws"
  have "u \<noteq> \<epsilon>"
         have "x \<cdot> (v \<cdot> u) \<noteq> (v \<cdot> u) \<cdot> x"
  proof
    assume "x \<cdot> v \<cdot> u = (v \<cdot> u) \<cdot> x"
    have "x = \<rho> (v \<cdot> u)".
    thus False
      using conjugI' nle_le pref_same_len primroot_emp primroot_len_le primroot_pref swap_len by metis
  qed
  show thesis
qed

lemma last_ws: "last ws = x"
proof(rule ccontr)
  assume "last ws \<noteq> x"
  hence "last ws = y"
    using last_ws_lists by blast
  obtain l m u v where "(hd ws)\<cdot>y\<^sup>@m\<cdot>u = p\<cdot>x" and "v \<cdot> y\<^sup>@l \<cdot> (last ws) = x \<cdot> s" and
    "u\<cdot>v = y" and "u \<noteq> \<epsilon>" and "v \<noteq> \<epsilon>" and "x \<cdot> v \<cdot> u \<noteq> (v \<cdot> u) \<cdot> x"
    using l_mE by metis

  have "x \<le>p (v \<cdot> u)\<^sup>@Suc l \<cdot> v"
    unfolding pow_Suc' rassoc using append_eq_appendI prefix_def shift_pow by metis
  moreover have "(v \<cdot> u) \<^sup>@ Suc l \<cdot> v \<le>p (v \<cdot> u) \<cdot> (v \<cdot> u) \<^sup>@ Suc l \<cdot> v"
    unfolding lassoc pow_comm[symmetric] using rassoc by blast
  ultimately have "x \<le>p (v \<cdot> u) \<cdot> x"
    using pref_keeps_per_root by blast

  thus False
  proof (cases "m = 0")
    assume "m \<noteq> 0"
    have "v \<cdot> u \<le>s x"
    have [symmetric]: "(v \<cdot> u) \<cdot> x = x \<cdot> (v \<cdot> u)"
    thus False
  next
    assume "m = 0"
    thus False
    proof (cases "hd ws = y")
      assume "hd ws = y"
      have "p \<cdot> (x \<cdot> x) \<cdot> s = y\<^sup>@Suc (Suc (Suc (m+l)))"
        by comparison
      have "\<rho> x \<sim> \<rho> y"
      proof (rule fac_two_conjug_primroot')
        show "x \<noteq> \<epsilon>" and "y \<noteq> \<epsilon>" using bin_fst_nemp bin_snd_nemp.
        show "x \<cdot> x \<le>f  y\<^sup>@Suc (Suc (Suc (m+l)))"
        show "x \<cdot> x \<le>f x\<^sup>@2"
          unfolding pow_two by blast
        show "\<^bold>|x\<^bold>| + \<^bold>|y\<^bold>| \<le> \<^bold>|x \<cdot> x\<^bold>|"
          using y_le_x unfolding lenmorph by auto
      qed
      thus False
        unfolding x_root  using nconjug y_le_x
        by (metis conjug_len long_pref primroot_pref)
    next
      assume "hd ws \<noteq> y"
      hence "hd ws = x"
        using hd_ws_lists by auto

      have "x \<le>s x \<cdot> u"
        by (simp add: suffix_def)
      have "v \<cdot> u \<le>p x"
          pref_prod_long by blast
      hence "\<^bold>|v \<cdot> u\<^bold>| < \<^bold>|x\<^bold>|"
          le_neq_implies_less pref_same_len by blast
      have "u \<cdot> v = v \<cdot> u"
      proof (rule pref_suf_pers_short[reversed])
        show "x \<le>p ((v \<cdot> u) \<cdot> v) \<cdot> (u \<cdot> v)\<^sup>@l"
          by comparison
        show "(u \<cdot> v) \<^sup>@ l \<in> \<langle>{v, u}\<rangle>"
          by blast
      qed fact+
      have "x \<cdot> u = u \<cdot> x"
      have "x \<cdot> (v \<cdot> u) = (v \<cdot> u) \<cdot> x"
        using comm_prod by blast
      thus False
    qed
  qed
qed

lemma rev_square_interp:
  "square_interp (rev x) (rev y) (rev s) (rev p) (rev (map rev ws))"
proof (unfold_locales)
  show "rev (map rev ws) \<in> lists {rev x, rev y}"
    using ws_lists  by force
  show "\<^bold>|rev y\<^bold>| \<le> \<^bold>|rev x\<^bold>|"
    using y_le_x by simp
  show "\<not> (rev x) \<sim> (rev y)"
    by (simp add: conjug_rev_conv nconjug)
  show "primitive (rev x)"
    using prim_x
    by (simp_all add: prim_rev_iff)
  show "(rev s) [rev x, rev x] (rev p) \<sim>\<^sub>\<D> (rev (map rev ws))"
  proof
    show "(rev s) (concat [rev x, rev x]) (rev p) \<sim>\<^sub>\<I> rev (map rev ws)"
      using interp rev_fac_interp by fastforce
    show "\<And>p1 p2. p1 \<le>p [rev x, rev x] \<Longrightarrow> p2 \<le>p rev (map rev ws) \<Longrightarrow> rev s \<cdot> concat p1 \<noteq> concat p2"
    proof
      fix p1' p2' assume "p1' \<le>p [rev x, rev x]" and "p2' \<le>p rev (map rev ws)" and "rev s \<cdot> concat p1' = concat p2'"
      obtain p1 p2 where "p1' \<cdot> p1 = [rev x, rev x]" and "p2'\<cdot>p2 = rev (map rev ws)"
      hence "rev s \<cdot> (concat p1' \<cdot> concat p1) \<cdot> rev p = concat p2' \<cdot> concat p2"
          fac_interpD(3) by force
      have "concat p1 \<cdot> rev p = concat p2".
      hence "p \<cdot> (concat (rev  (map rev p1))) = concat (rev (map rev p2))"
        using rev_append rev_concat rev_map rev_rev_ident by metis
      have "rev  (map rev p1) \<le>p [x,x]"
        by fastforce
      have "rev  (map rev p2) \<le>p ws"
            rev_rev_ident map_rev_involution, folded rev_map] by blast
      show False
    qed
  qed
  show "rev x \<cdot> rev y \<noteq> rev y \<cdot> rev x"
    using  non_comm unfolding comm_rev_iff.
qed

lemma hd_ws: "hd ws = x"
  using square_interp.last_ws[reversed, OF rev_square_interp]
  unfolding hd_map[OF ws_nemp]
  by simp

lemma p_pref: "p <p x"
  using fac_interpD(1) hd_ws interp by auto

lemma s_suf: "s <s x"
  using fac_interpD(2) last_ws interp by auto

end


locale square_interp_plus = square_interp +
  fixes l m u v
  assumes fst_x: "x \<cdot> y\<^sup>@m \<cdot> u = p \<cdot> x" and
    snd_x: "v \<cdot> y\<^sup>@l \<cdot> x = x \<cdot> s" and
    uv_y:  "u \<cdot> v = y" and
    u_nemp: "u \<noteq> \<epsilon>" and v_nemp: "v \<noteq> \<epsilon>" and
    vu_x_non_comm: "x \<cdot> (v \<cdot> u) \<noteq> (v \<cdot> u) \<cdot> x"
begin

interpretation  binary_code x y
  using non_comm by unfold_locales


lemma rev_square_interp_plus:  "square_interp_plus (rev x) (rev y) (rev s) (rev p) (rev (map rev ws)) m l (rev v) (rev u)"
proof-
  note fac_interpD[OF interp, unfolded hd_ws last_ws]

  interpret i: square_interp "(rev x)" "(rev y)" "(rev s)" "(rev p)" "(rev (map rev ws))"
    using rev_square_interp.
  show ?thesis
    by standard
       (simp_all del: rev_append add: rev_pow[symmetric] rev_append[symmetric],
        simp_all add: fst_x snd_x uv_y v_nemp u_nemp vu_x_non_comm[symmetric, unfolded rassoc])
qed



lemma fst_exp_zero: assumes "m = 0" and "0 < l" shows "False"
proof (rule notE[OF vu_x_non_comm])
  note y_le_x[folded uv_y, unfolded swap_len[of u]]
  have "x \<le>p (v \<cdot> (u \<cdot> v) \<^sup>@ l) \<cdot> x"
    unfolding rassoc using snd_x[folded uv_y] by blast
  have "v \<cdot> (u \<cdot> v) \<^sup>@ l \<noteq> \<epsilon>"
    using v_nemp by force
  obtain exp where "x \<le>p (v \<cdot> (u \<cdot> v) \<^sup>@ l)\<^sup>@exp" "0 < exp"

  have "x \<le>s x \<cdot> u"
    have "((v \<cdot> u) \<cdot> v) \<cdot> ((u \<cdot> v)\<^sup>@(l-1)) \<cdot> (v \<cdot> (u \<cdot> v) \<^sup>@ l)\<^sup>@(exp-1) = (v \<cdot> (u \<cdot> v) \<^sup>@ l)\<^sup>@exp"
      (is "((v \<cdot> u) \<cdot> v) \<cdot> ?suf = (v \<cdot> (u \<cdot> v) \<^sup>@ l)\<^sup>@exp")
    have "v \<cdot> u \<le>p x"
    hence "\<^bold>|v \<cdot> u\<^bold>| < \<^bold>|x\<^bold>|"
        le_neq_implies_less pref_same_len by blast
    have "u \<cdot> v = v \<cdot> u"
  proof (rule pref_suf_pers_short[reversed])
    show "x \<le>p ((v \<cdot> u) \<cdot> v) \<cdot> ?suf"
    show "((u \<cdot> v)\<^sup>@(l-1)) \<cdot> (v \<cdot> (u \<cdot> v) \<^sup>@ l)\<^sup>@(exp-1) \<in> \<langle>{v,u}\<rangle>"
      by (simp add: gen_in hull_closed power_in)
  qed fact+
  show "x \<cdot> v \<cdot> u = (v \<cdot> u) \<cdot> x"
    by metis
qed

lemma snd_exp_zero: assumes "0 < m" and "l = 0" shows "False"
  using square_interp_plus.fst_exp_zero[OF rev_square_interp_plus, reversed,
      rotated, OF assms].


lemma both_exps_pos: assumes "0 < m" and "0 < l" shows "False"
proof-
  note fac_interpD[OF interp, unfolded hd_ws last_ws]
  have "\<^bold>|p\<^bold>| \<le> \<^bold>|x\<^bold>|" and "\<^bold>|s\<^bold>| \<le> \<^bold>|x\<^bold>|"

  have "x \<le>p (v \<cdot> (u \<cdot> v)\<^sup>@l) \<cdot> x"
    (is "x \<le>p ?pref \<cdot> x")
    using snd_x[folded uv_y] by force
  moreover have "x \<le>s x \<cdot> ((u \<cdot> v)\<^sup>@m \<cdot> u)"
    (is "x \<le>s x \<cdot> ?suf")
    using fst_x[folded uv_y] by force

  ultimately interpret pref_suf_pers x u v l m

  have "?pref \<le>p x"
  have "?suf \<le>s x"

  have in_particular: "commutes {u,v,x} \<Longrightarrow> x \<cdot> (v\<cdot>u) = (v\<cdot>u) \<cdot> x"
    unfolding commutes_def by (rule comm_prod) blast+


  note  no_overlap_comm = no_overlap[THEN in_particular] and
    short_overlap_comm = short_overlap[THEN in_particular] and
    medium_overlap_comm = medium_overlap[THEN in_particular] and

  consider
    (no_overlap)     "\<^bold>|?pref\<^bold>| + \<^bold>|?suf\<^bold>| \<le> \<^bold>|x\<^bold>|" |
    (short_overlap)  "\<^bold>|x\<^bold>| <  \<^bold>|?pref\<^bold>| + \<^bold>|?suf\<^bold>| \<and>  \<^bold>|?pref\<^bold>| + \<^bold>|?suf\<^bold>| \<le> \<^bold>|x\<^bold>| + \<^bold>|u\<^bold>|" |
    (medium_overlap) "\<^bold>|x\<^bold>| + \<^bold>|u\<^bold>| < \<^bold>|?pref\<^bold>| + \<^bold>|?suf\<^bold>| \<and>  \<^bold>|?pref\<^bold>| + \<^bold>|?suf\<^bold>| < \<^bold>|x\<^bold>| + \<^bold>|u \<cdot> v\<^bold>|" |
    (large_overlap)  "\<^bold>|x\<^bold>| + \<^bold>|v \<cdot> u\<^bold>| \<le>  \<^bold>|?pref\<^bold>| + \<^bold>|?suf\<^bold>|"
    unfolding swap_len[of v] by linarith
  thus False
  proof (cases)
    case no_overlap
    then show False
  next
    case short_overlap
    then show False
      using short_overlap_comm vu_x_non_comm by blast
  next
    case medium_overlap
    then show False
      using medium_overlap_comm vu_x_non_comm by blast
  next
    case large_overlap
    show False
      thm large_overlap_conjug nconjug
    proof (rule notE[OF vu_x_non_comm], rule large_overlap_conjug[OF _ _ large_overlap])
      have "(u \<cdot> v) \<^sup>@ (l-1) \<le>p (u \<cdot> v) \<^sup>@ Suc (l-1)"
        using pref_pow_ext by blast
      thus "v \<cdot> (u \<cdot> v) \<^sup>@ l \<le>p (v \<cdot> u) \<cdot> v \<cdot> (u \<cdot> v) \<^sup>@ l"
      show "(u \<cdot> v) \<^sup>@ m \<cdot> u \<le>s ((u \<cdot> v) \<^sup>@ m \<cdot> u) \<cdot> v \<cdot> u"
        by comparison
    qed
  qed
qed

thm suf_cancel_conv

end


context square_interp

begin

definition u where "u = x\<inverse>\<^sup>>(p \<cdot> x)"
definition v where "v = (x \<cdot> s)\<^sup><\<inverse>x"

lemma cover_xyx: "ws = [x,y,x]" and vu_x_non_comm: "x \<cdot> (v \<cdot> u) \<noteq> (v \<cdot> u) \<cdot> x" and uv_y: "u \<cdot> v = y" and
  px_xu:  "p \<cdot> x = x \<cdot> u" and  vx_xs:  "v \<cdot> x = x \<cdot> s" and u_nemp: "u \<noteq> \<epsilon>" and v_nemp: "v \<noteq> \<epsilon>"
proof-
     obtain k where ws: "[x] \<cdot> [y]\<^sup>@k \<cdot> [x] = ws"
    using kE[unfolded hd_ws last_ws].
  obtain m u' v' l where  "x \<cdot> y \<^sup>@ m \<cdot> u' = p \<cdot> x" and "v' \<cdot> y \<^sup>@ l \<cdot> x = x \<cdot> s" and "u' \<cdot> v' = y"
  and "u' \<noteq> \<epsilon>" and "v' \<noteq> \<epsilon>" and "x \<cdot> v' \<cdot> u' \<noteq> (v' \<cdot> u') \<cdot> x"
    using l_mE[unfolded hd_ws last_ws].
  then interpret square_interp_plus x y p s ws l m u' v'
    by (unfold_locales)
  have "m = 0" and "l = 0" and "y \<noteq> \<epsilon>"
  have "u' = u"
    unfolding u_def
  have "v' = v"
    unfolding v_def
  have "x \<cdot> y \<^sup>@ m \<cdot> (u' \<cdot> v') \<cdot> y\<^sup>@l \<cdot> x = concat ws"
    unfolding interpret_concat[symmetric] using fst_x snd_x by force
  have "k = 1"
    by simp
  from ws[unfolded this pow_1]
    show "ws = [x,y,x]" by simp
  show "u \<cdot> v  = y"
  show  "p \<cdot> x = x \<cdot> u"
  show  " v \<cdot> x = x \<cdot> s"
  show "x \<cdot> (v \<cdot> u) \<noteq> (v \<cdot> u) \<cdot> x"
  show "u \<noteq> \<epsilon>" and "v \<noteq> \<epsilon>"
qed

lemma cover: "x \<cdot> y \<cdot> x = p \<cdot> x \<cdot> x \<cdot> s"
  using interpret_concat cover_xyx by auto

lemma conjug_facs: "\<rho> u \<sim> \<rho> v"
proof-
  note sufI[OF px_xu]
  have "u \<noteq> \<epsilon>"
    using p_nemp px_xu by force
  obtain expu where "x <s u\<^sup>@ expu" "0 < expu"
  hence "x \<le>f u\<^sup>@ expu"
    using ssufD1 by blast

  note prefI[OF vx_xs[symmetric]]
  have "v \<noteq> \<epsilon>"
    using s_nemp vx_xs by force
  obtain expv where "x <p v\<^sup>@expv" "0 < expv"
  hence "x \<le>f v\<^sup>@expv"  by blast

  show "\<rho> u \<sim> \<rho> v"
    show "\<^bold>|u\<^bold>| + \<^bold>|v\<^bold>| \<le> \<^bold>|x\<^bold>|"
      using y_le_x[folded uv_y, unfolded lenmorph] by fastforce
  qed
qed

term square_interp.v

lemma bin_sq_interpE: obtains r t m k l
  where "(t \<cdot> r)\<^sup>@k = u" and  "(r \<cdot> t)\<^sup>@l = v" and
    "(r \<cdot> t)\<^sup>@m \<cdot> r = x" and "(t \<cdot> r)\<^sup>@k \<cdot> (r \<cdot> t)\<^sup>@ l = y"
    and "(r \<cdot> t)\<^sup>@k = p" and  "(t \<cdot> r)\<^sup>@ l = s"  and "r \<cdot> t \<noteq> t \<cdot> r" and
    "0 < k" and "0 < m" and "0 < l"
proof-

  obtain r t k m where "(r \<cdot> t)\<^sup>@ k = p" and "(t \<cdot> r)\<^sup>@ k = u" and "(r \<cdot> t)\<^sup>@m \<cdot> r = x" and
    "t \<noteq> \<epsilon>" and "0 < k"  and "primitive (r \<cdot> t)"
    using conjug_eq_primrootE[OF px_xu p_nemp].
  have "t \<cdot> r = \<rho> u"

  have "0 < m"
  proof (rule ccontr)
    assume "\<not> 0 < m"
    show False
  qed


  have "r \<cdot> t \<le>p x"
    by auto

  have "r \<cdot> t = \<rho> v"
  proof (rule ruler_eq_len[of "\<rho> v" "x" "r \<cdot> t", symmetric])
    have "\<^bold>|\<rho> v\<^bold>| \<le> \<^bold>|x\<^bold>|"
        lenmorph pow_len  by auto
    from ruler_le[OF _ _ this, of "v \<cdot> x"]
    show "\<rho> v \<le>p x"
      using vx_xs prefI prefix_prefix primroot_pref v_nemp by metis
    show "r \<cdot> t \<le>p x" by fact
    show "\<^bold>|\<rho> v\<^bold>| = \<^bold>|r \<cdot> t\<^bold>|"
  qed

  then obtain l where "(r \<cdot> t)\<^sup>@ l = v" and "0 < l"
    using primroot_expE v_nemp by metis

  have "(t \<cdot> r)\<^sup>@ l = s"
        unfolded rassoc cancel, unfolded shift_pow cancel].

  have "r \<cdot> t \<noteq> t \<cdot> r"
  proof
    assume "r \<cdot> t = t \<cdot> r"
    hence aux: "r \<cdot> (t \<cdot> r) \<^sup>@ e = (t \<cdot> r) \<^sup>@ e \<cdot> r" for e
      by comparison
    have "x \<cdot> (v \<cdot> u) = (v \<cdot> u) \<cdot> x"
      unfolding lassoc cancel_right add_exps[symmetric]
      by (simp add: add.commute)
    thus False
      using vu_x_non_comm by blast
  qed

  show thesis
qed

end


locale square_interp_ext = square_interp +
  assumes p_extend: "\<exists> pe. pe \<in> \<langle>{x,y}\<rangle> \<and> p \<le>s pe" and
    s_extend: "\<exists> se. se \<in> \<langle>{x,y}\<rangle> \<and> s \<le>p se"

begin

lemma s_pref_y: "s \<le>p y"
proof-
  obtain sy ry eu ev ex
    where "(ry \<cdot> sy)\<^sup>@eu = u" and  "(sy \<cdot> ry)\<^sup>@ ev = v" and
      "(sy \<cdot> ry)\<^sup>@ eu = p" and  "(ry \<cdot> sy)\<^sup>@ ev = s" and
      "(sy \<cdot> ry)\<^sup>@ ex \<cdot> sy = x" and "sy \<cdot> ry \<noteq> ry \<cdot> sy" and
      "0 < eu" and "0 < ev" and "0 < ex"
    using bin_sq_interpE.

  obtain se where "se \<in> \<langle>{x,y}\<rangle>" and  "s \<le>p se"
    using s_extend by blast
  hence "se \<noteq> \<epsilon>" using s_nemp by force

  have "sy \<cdot> ry \<le>p x"

  have "x \<le>p se \<or> y \<le>p se"
      prefix_append triv_pref two_elem_cases by blast
  moreover have "\<not> x \<le>p se"
  proof
    assume "x \<le>p se"
    show False
  qed
  ultimately have y_pref_se: "y \<le>p se" by blast

  show "s \<le>p y"
    using lenarg[OF vx_xs] unfolding uv_y[symmetric] lenmorph by linarith
qed

lemma rev_square_interp_ext: "square_interp_ext (rev x) (rev y) (rev s) (rev p) (rev (map rev ws))"
proof-
  interpret i: square_interp "(rev x)" "(rev y)" "(rev s)" "(rev p)" "(rev (map rev ws))"
    using rev_square_interp.
  show ?thesis
  proof
    show "\<exists>pe. pe \<in> \<langle>{rev x, rev y}\<rangle> \<and> rev s \<le>s pe"
      using  s_pref_y unfolding pref_rev_suf_iff by blast
    obtain pe where "pe \<in> \<langle>{x, y}\<rangle>" and  "p \<le>s pe"
      using p_extend by blast
    hence "rev pe \<in> \<langle>{rev x, rev y}\<rangle>"
      by (simp add: rev_hull rev_in_conv)
    thus "\<exists>se. se \<in> \<langle>{rev x, rev y}\<rangle> \<and> rev p \<le>p se"
  qed
qed

lemma p_suf_y: "p \<le>s y"
proof-
  interpret i: square_interp_ext "(rev x)" "(rev y)" "(rev s)" "(rev p)" "(rev (map rev ws))"
    using rev_square_interp_ext.

  from i.s_pref_y[reversed]
  show "p \<le>s y".
qed

theorem bin_sq_interp_extE: obtains r t k m where  "(r \<cdot> t)\<^sup>@m \<cdot> r = x" and  "(t \<cdot> r)\<^sup>@k \<cdot> (r \<cdot> t)\<^sup>@ k = y"
  "(r \<cdot> t)\<^sup>@ k = p" and "(t \<cdot> r)\<^sup>@  k = s" and "r \<cdot> t \<noteq> t \<cdot> r" and "u = s" and "v = p" and "\<^bold>|p\<^bold>| = \<^bold>|s\<^bold>|" and
  "0 < k" and "0 < m"
proof-
  obtain r t k k' m
    where u: "(t \<cdot> r)\<^sup>@ k = u" and v:  "(r \<cdot> t)\<^sup>@ k' = v" and
      p: "(r \<cdot> t)\<^sup>@ k = p" and s: "(t \<cdot> r)\<^sup>@ k' = s" and
      x: "(r \<cdot> t)\<^sup>@ m \<cdot> r = x" and code: "r \<cdot> t \<noteq> t \<cdot> r" and
      "0 < k'" "0 < m" "0 < k"
    using bin_sq_interpE.
  have "\<^bold>|u \<cdot> v\<^bold>| = \<^bold>|s \<cdot> p\<^bold>|"
    using lenarg[OF px_xu, unfolded lenmorph] lenarg[OF vx_xs, unfolded lenmorph] by simp
  hence "u \<cdot> v = s \<cdot> p"
    unfolding uv_y using s_pref_y p_suf_y by (auto simp add: prefix_def suffix_def)
  from pows_comm_comm[OF this]
  have "k = k'"
  have "\<^bold>|p\<^bold>| = \<^bold>|s\<^bold>|"
  thus thesis
qed

lemma ps_len: "\<^bold>|p\<^bold>| = \<^bold>|s\<^bold>|" and p_eq_v: "p = v" and s_eq_u: "s = u"
  using bin_sq_interp_extE by blast+

lemma v_x_x_u: "v \<cdot> x = x \<cdot> u"
  using vx_xs unfolding s_eq_u.

lemma sp_y: "s \<cdot> p = y"
  using p_eq_v s_eq_u uv_y by auto

lemma p_x_x_s: "p \<cdot> x = x \<cdot> s"
  by (simp add: px_xu s_eq_u)

lemma xxy_root: "x \<cdot> x \<cdot> y = (x \<cdot> p) \<cdot> (x \<cdot> p)"
  using p_x_x_s sp_y by force

theorem sq_ext_interp: "ws  = [x, y, x]" "s \<cdot> p = y" "p \<cdot> x = x \<cdot> s"
  using cover_xyx sp_y p_x_x_s.

end

theorem bin_sq_interpE:
  assumes "x \<cdot> y \<noteq> y \<cdot> x" and "primitive x" and "\<^bold>|y\<^bold>| \<le> \<^bold>|x\<^bold>|" and "ws \<in> lists {x, y}" and "\<not> x \<sim> y" and
    "p [x,x] s \<sim>\<^sub>\<D> ws"
  obtains r t m k l where "(r \<cdot> t)\<^sup>@ m \<cdot> r = x" and "(t \<cdot> r)\<^sup>@ k \<cdot> (r \<cdot> t)\<^sup>@l = y"
    "(r \<cdot> t)\<^sup>@ k = p" and "(t \<cdot> r)\<^sup>@ l = s" and "r \<cdot> t \<noteq> t \<cdot> r" and "0 < k" "0 < m" "0 < l"
  using  square_interp.bin_sq_interpE[OF square_interp.intro, OF assms, of thesis].

theorem bin_sq_interp:
  assumes "x \<cdot> y \<noteq> y \<cdot> x" and "primitive x" and "\<^bold>|y\<^bold>| \<le> \<^bold>|x\<^bold>|" and "ws \<in> lists {x, y}" and "\<not> x \<sim> y" and
    "p [x,x] s \<sim>\<^sub>\<D> ws"
  shows "ws = [x,y,x]"
  using square_interp.cover_xyx[OF square_interp.intro, OF assms].

theorem bin_sq_interp_extE:
  assumes "x \<cdot> y \<noteq> y \<cdot> x" and "primitive x" and "\<^bold>|y\<^bold>| \<le> \<^bold>|x\<^bold>|" and "ws \<in> lists {x, y}"  and "\<not> x \<sim> y" and
    "p [x,x] s \<sim>\<^sub>\<D> ws" and
    p_extend: "\<exists> pe. pe \<in> \<langle>{x,y}\<rangle> \<and> p \<le>s pe" and
    s_extend: "\<exists> se. se \<in> \<langle>{x,y}\<rangle> \<and> s \<le>p se"
  obtains r t m k where "(r \<cdot> t)\<^sup>@ m \<cdot> r = x" and "(t \<cdot> r)\<^sup>@ k \<cdot> (r \<cdot> t)\<^sup>@  k = y"
    "(r \<cdot> t)\<^sup>@ k = p" and "(t \<cdot> r)\<^sup>@  k = s" and "r \<cdot> t \<noteq> t \<cdot> r" and "0 < k" and "0 < m"
  using  square_interp_ext.bin_sq_interp_extE[OF square_interp_ext.intro, OF square_interp.intro square_interp_ext_axioms.intro, OF assms, of thesis].

end
