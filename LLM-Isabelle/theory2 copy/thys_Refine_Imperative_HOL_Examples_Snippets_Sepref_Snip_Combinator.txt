theory Sepref_Snip_Combinator
imports "../../IICF/IICF"
begin

  

  context 
    fixes f :: "'a \<Rightarrow> 'b nres"
    fixes l :: "'a list"

    fixes fi :: "'ai \<Rightarrow> 'bi Heap"
    fixes li :: "'ai list"

    fixes B :: "'b \<Rightarrow> 'bi \<Rightarrow> assn"



    assumes f_rl: "hn_refine (hn_ctxt A x xi * F) (fi xi) (hn_ctxt A' x xi * F) B (f$x)"

  begin  

    definition "mmap \<equiv> RECT (\<lambda>mmap. 
      \<lambda>[] \<Rightarrow> RETURN [] 
    | x#xs \<Rightarrow> do { x \<leftarrow> f x; xs \<leftarrow> mmap xs; RETURN (x#xs) }) l"


      frame into a dummy refinement assertion. This way, sepref recognizes the frame just as
      another context element, and does correct propagation.\<close>
    text \<open>We build a combinator rule to refine \<open>f\<close>. We need a combinator rule here,
      because \<open>f\<close> does not only depend on its formal arguments, but also on the frame 
