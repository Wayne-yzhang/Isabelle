theory  Printer
imports Core
        "meta_toy/Printer_META"
begin

definition "List_iterM f l =
  List.fold (\<lambda>x m. bind m (\<lambda> () \<Rightarrow> f x)) l (return ())"

context Print
begin

declare[[cartouche_type' = "String.literal"]]

definition "write_file env = (
  let (l_thy, Sys_argv) = compiler_env_config.more env
    ; (is_file, f_output) = case (D_output_header_thy env, Sys_argv)
     of (Some (file_out, _), Some dir) \<Rightarrow>
          let dir = To_string dir in
          (True, \<lambda>f. bind (Sys_is_directory2 dir) (\<lambda> Sys_is_directory2_dir.
      | _ \<Rightarrow> (False, out_stand1) in
  f_output
    (\<lambda>fprintf1.
        (let (env, l) =
           fold_thy'
             (\<lambda>f. f ())
             (\<lambda>_ _. [])
             (\<lambda>x acc1 acc2. (acc1, Cons x acc2))
             l_thy
             (compiler_env_config.truncate env, []) in
         of_all_meta_lists (compiler_env_config_more_map (\<lambda>_. is_file) env) (rev l))))"
end

definition "write_file = Print.write_file String.meta_of_logic (ToNat integer_of_natural)"

lemmas [code] =
  Print.write_file_def



no_type_notation natural ("nat")
no_type_notation abr_string ("string")

end
