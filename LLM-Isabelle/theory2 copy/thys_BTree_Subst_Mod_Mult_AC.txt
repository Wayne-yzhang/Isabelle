theory Subst_Mod_Mult_AC
imports Main
begin



method_setup subst_mod_mult_ac =



locale demo =
  fixes a::"'a::{comm_monoid_mult}"
  and b::"'a::{comm_monoid_mult}"
  and c::"'a::{comm_monoid_mult}"
  and d::"'a::{comm_monoid_mult}"
  and e::"'a::{comm_monoid_mult}"
  and gee
  assumes foo: "a*b = c"
  and geh: "gee a = true"
  and bar: "gee a \<Longrightarrow> gee b \<Longrightarrow> a * b = c"
begin


lemma "a * b = c"
      "b * a = c"
      "b * d * a = c * d"
      "d * b * a = c * d"
  by (subst_mod_mult_ac foo, rule refl)+

lemma "gee a \<Longrightarrow> a * b = c"
  by (subst_mod_mult_ac foo, rule refl)

lemma "d * b * a = c * d"
  apply (subst_mod_mult_ac bar)
  oops

lemma "f (a * b) (a * b) = rhs"
  apply (subst_mod_mult_ac foo)
  back
  oops

end
end