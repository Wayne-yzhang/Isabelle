theory Show_Real_Alg
imports 
  Real_Algebraic_Numbers
  Show.Show_Real
begin

consts show_real_alg :: "real_alg \<Rightarrow> string"

definition showsp_real_alg :: "real_alg showsp" where
  "showsp_real_alg p x y = (show_real_alg x @ y)"

lemma show_law_real_alg [show_law_intros]:
  "show_law showsp_real_alg r"
  by (rule show_lawI) (simp add: showsp_real_alg_def show_law_simps)

lemma showsp_real_alg_append [show_law_simps]:
  "showsp_real_alg p r (x @ y) = showsp_real_alg p r x @ y"
  by (intro show_lawD show_law_intros)


derive "show" real_alg

overloading show_real \<equiv> show_real
begin
  definition "show_real \<equiv> show_real_alg o real_alg_of_real"
end

end
