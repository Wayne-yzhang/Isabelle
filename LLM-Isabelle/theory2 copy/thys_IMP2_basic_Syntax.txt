theory Syntax
imports Main
begin



  type_synonym vname = string
  type_synonym pname = string

  fun is_global :: "vname \<Rightarrow> bool" where
    "is_global [] \<longleftrightarrow> True"
  | "is_global (CHR ''G''#_) \<longleftrightarrow> True"
  | "is_global _ \<longleftrightarrow> False"

  abbreviation "is_local a \<equiv> \<not>is_global a"
  
  
    
  
  type_synonym pval = "int"
  type_synonym val = "int \<Rightarrow> pval"


  
  datatype aexp = 
      N int 
    | Vidx vname aexp
    | Unop "int \<Rightarrow> int" aexp 
    | Binop "int \<Rightarrow> int \<Rightarrow> int" aexp aexp
    
    
  datatype bexp = 
      Bc bool 
    | Not bexp 
    | BBinop "bool \<Rightarrow> bool \<Rightarrow> bool" bexp bexp 
    | Cmpop "int \<Rightarrow> int \<Rightarrow> bool" aexp aexp

    
  
  
  datatype
    com = 
        
        
        

