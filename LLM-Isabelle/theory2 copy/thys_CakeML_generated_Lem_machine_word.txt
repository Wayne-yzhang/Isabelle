theory "Lem_machine_word" 

imports
  Main
  "Lem_bool"
  "Lem_num"
  "Lem_basic_classes"
  "Lem_show"
  "Lem_function"
  "HOL-Library.Word"
  "Word_Lib.Most_significant_bit"

begin 












definition size_itself  :: "('a::len)itself \<Rightarrow> nat "  where 
     " size_itself x = ( (len_of (TYPE(_) :: 'a itself)))"












definition wordToHex  :: "('a::len)Word.word \<Rightarrow> string "  where 
     " wordToHex w = ( (''wordToHex not yet implemented''))"


definition instance_Show_Show_Machine_word_mword_dict  :: "(('a::len)Word.word)Show_class "  where 
     " instance_Show_Show_Machine_word_mword_dict = ((|

  show_method = wordToHex |) )"





definition size_test_fn  :: "('a::len)Word.word \<Rightarrow> nat "  where 
     " size_test_fn _ = ( (len_of (TYPE(_) :: 'a itself)))"




































definition signedDivide  :: "('a::len)Word.word \<Rightarrow>('a::len)Word.word \<Rightarrow>('a::len)Word.word "  where 
     " signedDivide x y = (
    if msb x then
        if msb y then (- x) div (- y)
        else - ((- x) div y)
    else if msb y then - (x div (- y))
        else x div y )"


end
