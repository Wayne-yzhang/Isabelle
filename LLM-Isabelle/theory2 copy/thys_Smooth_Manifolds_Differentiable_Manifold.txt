theory Differentiable_Manifold
  imports
    Smooth
    Topological_Manifold
begin


definition smooth_compat::"enat \<Rightarrow> ('a::topological_space, 'e::euclidean_space)chart\<Rightarrow>('a, 'e)chart\<Rightarrow>bool"
  ("_-smooth'_compat" [1000])
  where
  "smooth_compat k c1 c2 \<longleftrightarrow>
    (k-smooth_on (c1 ` (domain c1 \<inter> domain c2)) (c2 \<circ> inv_chart c1) \<and>
     k-smooth_on (c2 ` (domain c1 \<inter> domain c2)) (c1 \<circ> inv_chart c2) )"

lemma smooth_compat_D1:
  "k-smooth_on (c1 ` (domain c1 \<inter> domain c2)) (c2 \<circ> inv_chart c1)"
  if "k-smooth_compat c1 c2"
proof -
  have "open (c1 ` (domain c1 \<inter> domain c2))"
    by (rule open_chart_image) auto
  moreover have "k-smooth_on (c1 ` (domain c1 \<inter> domain c2)) (c2 \<circ> inv_chart c1)"
    using that(1) by (auto simp: smooth_compat_def)
  ultimately show ?thesis by blast
qed

lemma smooth_compat_D2:
  "k-smooth_on (c2 ` (domain c1 \<inter> domain c2)) (c1 \<circ> inv_chart c2)"
  if "k-smooth_compat c1 c2"
proof -
  have "open (c2 ` (domain c1 \<inter> domain c2))"
    by (rule open_chart_image) auto
  moreover have "k-smooth_on (c2 ` (domain c1 \<inter> domain c2)) (c1 \<circ> inv_chart c2) "
    using that(1) by (auto simp: smooth_compat_def)
  ultimately show ?thesis by blast
qed

lemma smooth_compat_refl: "k-smooth_compat x x"
  unfolding smooth_compat_def
  by (auto intro: smooth_on_cong[where g="\<lambda>x. x"] simp: smooth_on_id)

lemma smooth_compat_commute: "k-smooth_compat x y \<longleftrightarrow> k-smooth_compat y x"
  by (auto simp: smooth_compat_def inf_commute)

lemma smooth_compat_restrict_chartI:
  "k-smooth_compat (restrict_chart S c) c'"
  if "k-smooth_compat c c'"
  using that
  by (auto simp: smooth_compat_def domain_restrict_chart_if intro: smooth_on_subset)

lemma smooth_compat_restrict_chartI2:
  "k-smooth_compat c' (restrict_chart S c)"
  if "k-smooth_compat c' c"
  using smooth_compat_restrict_chartI[of k c c'] that
  by (auto simp: smooth_compat_commute)

lemma smooth_compat_restrict_chartD:
  "domain c1 \<subseteq> U \<Longrightarrow> open U \<Longrightarrow> k-smooth_compat c1 (restrict_chart U c2) \<Longrightarrow> k-smooth_compat c1 c2"
  by (auto simp: smooth_compat_def domain_restrict_chart_if intro: smooth_on_subset)

lemma smooth_compat_restrict_chartD2:
  "domain c1 \<subseteq> U \<Longrightarrow> open U \<Longrightarrow> k-smooth_compat (restrict_chart U c2) c1 \<Longrightarrow> k-smooth_compat c2 c1"
  using smooth_compat_restrict_chartD[of c1 U k c2]
  by (auto simp: smooth_compat_commute)

lemma smooth_compat_le:
  "l-smooth_compat c1 c2" if "k-smooth_compat c1 c2" "l \<le> k"
  using that
  by (auto simp: smooth_compat_def smooth_on_le)



locale c_manifold = manifold +
  fixes k::enat
  assumes pairwise_compat: "c1 \<in> charts \<Longrightarrow> c2 \<in> charts \<Longrightarrow> k-smooth_compat c1 c2"
begin



definition atlas :: "('a, 'b) chart set" where
  "atlas = {c. domain c \<subseteq> carrier \<and> (\<forall>c' \<in> charts. k-smooth_compat c c')}"

lemma charts_subset_atlas: "charts \<subseteq> atlas"
  by (auto simp: atlas_def pairwise_compat)

lemma in_charts_in_atlas[intro]: "x \<in> charts \<Longrightarrow> x \<in> atlas"
  by (auto simp: atlas_def pairwise_compat)

lemma maximal_atlas:
  "c \<in> atlas"
  if "\<And>c'. c' \<in> atlas \<Longrightarrow> k-smooth_compat c c'"
    "domain c \<subseteq> carrier"
  using that charts_subset_atlas
  by (auto simp: atlas_def)

lemma chart_compose_lemma:
  fixes c1 c2
  defines [simp]: "U \<equiv> domain c1"
  defines [simp]: "V \<equiv> domain c2"
  assumes subsets: "U \<inter> V \<subseteq> carrier"
  assumes "\<And>c. c \<in> charts \<Longrightarrow> k-smooth_compat c1 c"
    "\<And>c. c \<in> charts \<Longrightarrow> k-smooth_compat c2 c"
  shows "k-smooth_on (c1 ` (U \<inter> V)) (c2 \<circ> inv_chart c1)"
proof (rule smooth_on_open_subsetsI)
  fix w' assume "w' \<in> c1 ` (U \<inter> V)"
  then obtain w where w': "w' = c1 w" and "w \<in> U" "w \<in> V" by auto
  then have "w \<in> carrier" using subsets
    by auto
  then obtain c3 where c3: "w \<in> domain c3" "c3 \<in> charts"
    by (rule carrierE)
  then have c13: "k-smooth_compat c1 c3" and c23: "k-smooth_compat c2 c3"
    using assms by auto
  define W where [simp]: "W = domain c3"
  have diff1: "k-smooth_on (c1 ` (U \<inter> W)) (c3 \<circ> inv_chart c1)"
  proof -
    have 1: "open (c1 ` (U \<inter> W))"
      by (rule open_chart_image) auto
    have 2: "w' \<in> c1 ` (U \<inter> W)"
    from c13 show ?thesis
      by (auto simp: smooth_compat_def)
  qed

  define y where "y = (c3 \<circ> inv_chart c1) w'"
  have diff2: "k-smooth_on (c3 ` (V \<inter> W)) (c2 \<circ> inv_chart c3)"
  proof -
    have 1: "open (c3 ` (V \<inter> W))"
      by (rule open_chart_image) auto
    have 2: "y \<in> c3 ` (V \<inter> W)"
    from c23 show ?thesis
      by (auto simp: smooth_compat_def)
  qed
  
  have "k-smooth_on (c1 ` (U \<inter> V \<inter> W)) ((c2 \<circ> inv_chart c3) o (c3 \<circ> inv_chart c1))"
    using diff2 diff1
    by (rule smooth_on_compose2) auto
  then have "k-smooth_on (c1 ` (U \<inter> V \<inter> W)) (c2 \<circ> inv_chart c1)"
    by (rule smooth_on_cong) auto
  moreover have "w' \<in> c1 ` (U \<inter> V \<inter> W)" "open (c1 ` (U \<inter> V \<inter> W))"
    by (auto simp: w' c3)
  ultimately show "\<exists>T. w' \<in> T \<and> open T \<and> k-smooth_on T (apply_chart c2 \<circ> inv_chart c1)"
    by (intro exI[where x="c1 ` (U \<inter> V \<inter> W)"]) simp
qed

lemma smooth_compat_trans: "k-smooth_compat c1 c2"
  if "\<And>c. c \<in> charts \<Longrightarrow> k-smooth_compat c1 c"
    "\<And>c. c \<in> charts \<Longrightarrow> k-smooth_compat c2 c"
    "domain c1 \<inter> domain c2 \<subseteq> carrier"
  unfolding smooth_compat_def
proof
  show "k-smooth_on (c1 ` (domain c1 \<inter> domain c2)) (c2 \<circ> inv_chart c1)"
    by (auto intro!: that chart_compose_lemma)
  show "k-smooth_on (c2 ` (domain c1 \<inter> domain c2)) (c1 \<circ> inv_chart c2)"
    using that
    by (subst inf_commute) (auto intro!: chart_compose_lemma)
qed

lemma maximal_atlas':
  "c \<in> atlas"
  if "\<And>c'. c' \<in> charts \<Longrightarrow> k-smooth_compat c c'"
    "domain c \<subseteq> carrier"
proof (rule maximal_atlas)
  fix c' assume "c' \<in> atlas"
  show "k-smooth_compat c c'"
    apply (rule smooth_compat_trans)
      apply (rule that(1)) apply assumption
qed fact

lemma atlas_is_atlas: "k-smooth_compat a1 a2"
  if "a1 \<in> atlas" "a2 \<in> atlas"
  using that atlas_def smooth_compat_trans by blast

lemma domain_atlas_subset_carrier: "c \<in> atlas \<Longrightarrow> domain c \<subseteq> carrier"
  and in_carrier_atlasI[intro, simp]: "c \<in> atlas \<Longrightarrow> x \<in> domain c \<Longrightarrow> x \<in> carrier"
  by (auto simp: atlas_def)

lemma atlasE:
  assumes "x \<in> carrier"
  obtains c where "c \<in> atlas" "x \<in> domain c"
  using carrierE[OF assms] charts_subset_atlas
  by blast

lemma restrict_chart_in_atlas: "restrict_chart S c \<in> atlas" if "c \<in> atlas"
proof (rule maximal_atlas)
  fix c' assume "c' \<in> atlas"
  then show "k-smooth_compat (restrict_chart S c) c'"
    by (rule smooth_compat_restrict_chartI)
next
  have "domain (restrict_chart S c) \<subseteq> domain c"
    by (simp add: domain_restrict_chart_if)
  also have "\<dots> \<subseteq> carrier"
    using that
    by (rule domain_atlas_subset_carrier)
  finally
  show "domain (restrict_chart S c) \<subseteq> carrier"
    by auto
qed

lemma atlas_restrictE:
  assumes "x \<in> carrier" "x \<in> X" "open X"
  obtains c where "c \<in> atlas" "x \<in> domain c" "domain c \<subseteq> X"
proof -
  from assms(1) obtain c where c: "c \<in> atlas" "x \<in> domain c"
    by (blast elim!: carrierE)
  define d where "d = restrict_chart X c"
  from c have "d \<in> atlas" "x \<in> domain d" "domain d \<subseteq> X"
    using assms(2,3)
    by (auto simp: d_def restrict_chart_in_atlas)
  then show ?thesis ..
qed


lemma open_ball_chartE:
  assumes "x \<in> U" "open U" "U \<subseteq> carrier"
  obtains c r where
    "c \<in> atlas"
    "x \<in> domain c" "domain c \<subseteq> U" "codomain c = ball (c x) r" "r > 0"
proof -
  from assms have "x \<in> carrier" by auto
  from carrierE[OF this] obtain c where c: "c \<in> charts" "x \<in> domain c" by auto
  then have "x \<in> domain c \<inter> U" using assms by auto
  then have "open (apply_chart c ` (domain c \<inter> U))" "c x \<in> c ` (domain c \<inter> U)"
    by (auto intro!: assms)
  from openE[OF this]
  obtain e where e: "0 < e" "ball (c x) e \<subseteq> c ` (domain c \<inter> U)"
    by auto
  define C where "C = inv_chart c ` ball (c x) e"
  have "open C"
    using e
    by (auto simp: C_def)
  define c' where "c' = restrict_chart C c"
  from c have "c \<in> atlas" by auto
  then have "c' \<in> atlas" by (auto simp: c'_def restrict_chart_in_atlas)
  moreover
  have "x \<in> C"
    unfolding C_def
    by (auto intro!: image_eqI[where x="apply_chart c x"])
  have "x \<in> domain c'"
  moreover
  have "C \<subseteq> U"
    using e by (auto simp: C_def)
  then have "domain c' \<subseteq> U"
  moreover have "codomain c' = ball (c' x) e"
    by (force simp: c'_def codomain_restrict_chart_if C_def)
  moreover
  have "e > 0"
    by fact
  ultimately show ?thesis ..
qed

lemma smooth_compat_compose_chart:
  fixes c'
  assumes "k-smooth_compat c c'"
  assumes diffeo: "diffeomorphism k UNIV UNIV p p'"
  shows "k-smooth_compat (compose_chart p p' c) c'"
proof -
  note dD[simp] = diffeomorphismD[OF diffeo]
  note homeo[simp] = diffeomorphism_imp_homeomorphism[OF diffeo]
  from assms(1) have c: "k-smooth_on (apply_chart c ` (domain c \<inter> domain c')) (apply_chart c' \<circ> inv_chart c)"
    and c': "k-smooth_on (apply_chart c' ` (domain c \<inter> domain c')) (apply_chart c \<circ> inv_chart c')"
    by (auto simp: smooth_compat_def)
  from homeo have *: "open (p ` apply_chart c ` (domain c \<inter> domain c'))"
    by (rule homeomorphism_UNIV_imp_open_map) auto
  have "k-smooth_on ((p \<circ> apply_chart c) ` (domain c \<inter> domain c')) (apply_chart c' \<circ> inv_chart c \<circ> p')"
    apply (rule smooth_on_compose2) prefer 2
         apply (rule dD)
        apply (rule c)
       apply (auto simp add: assms image_comp [symmetric] * cong del: image_cong_simp)
    done
  moreover
  have "k-smooth_on (apply_chart c' ` (domain c \<inter> domain c')) (p \<circ> (apply_chart c \<circ> inv_chart c'))"
    apply (rule smooth_on_compose2)
         apply (rule dD)
        apply fact
    by (auto simp: assms image_comp[symmetric])
  ultimately show ?thesis
    unfolding smooth_compat_def
    by (auto intro!: simp: o_assoc)
qed

lemma compose_chart_in_atlas:
  assumes "c \<in> atlas"
  assumes diffeo: "diffeomorphism k UNIV UNIV p p'"
  shows "compose_chart p p' c \<in> atlas"
proof (rule maximal_atlas)
  note [simp] = diffeomorphism_imp_homeomorphism[OF diffeo]
  show "domain (compose_chart p p' c) \<subseteq> carrier"
    using assms
    by auto
  fix c' assume "c' \<in> atlas"
    by (rule atlas_is_atlas)
  then show "k-smooth_compat (compose_chart p p' c) c'"
    using diffeo
    by (rule smooth_compat_compose_chart)
qed

lemma open_centered_ball_chartE:
  assumes "x \<in> U" "open U" "U \<subseteq> carrier" "e > 0"
  obtains c where
    "c \<in> atlas" "x \<in> domain c" "c x = x0" "domain c \<subseteq> U" "codomain c = ball x0 e"
proof -
  from open_ball_chartE[OF assms(1-3)] obtain c r where c:
    "c \<in> atlas"
    "x \<in> domain c" "domain c \<subseteq> U" "codomain c = ball (c x) r"
    and r: "r > 0"
    by auto
  have 1: "diffeomorphism k UNIV UNIV (\<lambda>y. y + (- c x)) (\<lambda>y. y - (- c x))"
    using diffeomorphism_add[of k "(- c x)"] by auto
  have 2: "diffeomorphism k UNIV UNIV (\<lambda>y. (e / r) *\<^sub>R y) (\<lambda>y. y /\<^sub>R (e / r))"
  have 3: "diffeomorphism k UNIV UNIV (\<lambda>y. y + x0) (\<lambda>y. y - x0)"
    using diffeomorphism_add[of k x0] by auto
  define t where "t = (\<lambda>y. (e / r) *\<^sub>R (y + - c x) + x0)"
  define t' where "t' = (\<lambda>y. (y - x0) /\<^sub>R (e / r) + c x)"
  from diffeomorphism_compose[OF diffeomorphism_compose[OF 1 2] 3, unfolded o_def]
  have diffeo: "diffeomorphism k UNIV UNIV t t'"
    by (auto simp: t_def t'_def o_def)
  have "compose_chart t t' c \<in> atlas" .
  moreover
  note [simp] = diffeomorphism_imp_homeomorphism[OF diffeo]
  moreover
  have "t (c x) = x0"
    by (auto simp: t_def)
  then have "compose_chart t t' c x = x0"
    by simp
  moreover have "domain (compose_chart t t' c) \<subseteq> U"
    by auto
  moreover
  have "t ` codomain c = ball x0 e"
  proof -
