theory Sepref_Combinator_Setup
imports Sepref_Rules Sepref_Monadify
keywords "sepref_register" :: thy_decl
  and "sepref_decl_intf" :: thy_decl
begin


context begin
  private definition T :: "string \<Rightarrow> unit list \<Rightarrow> unit" where "T _ _ \<equiv> ()"
  private lemma unit_eq: "(a::unit) \<equiv> b" by simp
  named_theorems "__itype_rewrite"


end


definition map_type_eq :: "'a itself \<Rightarrow> 'b itself \<Rightarrow> bool" 
  (infixr "\<rightarrow>\<^sub>n\<^sub>t" 60)
  where [simp]: "map_type_eq _ _ \<equiv> True"
lemma map_type_eqI: "map_type_eq L R" by auto

named_theorems_rev map_type_eqs


context begin

private lemma start_eval: "x \<equiv> SP x" by auto
private lemma add_eval: "f x \<equiv> (\<bind>)$(EVAL$x)$(\<lambda>\<^sub>2x. f x)" by auto

private lemma init_mk_arity: "f \<equiv> id (SP f)" by simp
private lemma add_mk_arity: "id f \<equiv> (\<lambda>\<^sub>2x. id (f$x))" by auto
private lemma finish_mk_arity: "id f \<equiv> f" by simp


end

attribute_setup sepref_register_adhoc = Sepref_Combinator_Setup.sepref_register_adhoc_attr_decl



lemma 
      mk_mcomb1: "\<And>c. c$x1 \<equiv> (\<bind>)$(EVAL$x1)$(\<lambda>\<^sub>2x1. SP (c$x1))"
  and mk_mcomb2: "\<And>c. c$x1$x2 \<equiv> (\<bind>)$(EVAL$x1)$(\<lambda>\<^sub>2x1. (\<bind>)$(EVAL$x2)$(\<lambda>\<^sub>2x2. SP (c$x1$x2)))"
  and mk_mcomb3: "\<And>c. c$x1$x2$x3 \<equiv> (\<bind>)$(EVAL$x1)$(\<lambda>\<^sub>2x1. (\<bind>)$(EVAL$x2)$(\<lambda>\<^sub>2x2. (\<bind>)$(EVAL$x3)$(\<lambda>\<^sub>2x3. SP (c$x1$x2$x3))))"
    by auto

end
