theory Hygge_Theory
imports
  Corecursive_Prop

begin

theorem solve_start:
  proof -
    by (simp add: TESL_interpretation_stepwise_zero')
    by simp
    ultimately show ?thesis by auto
  qed

lemma sound_reduction:
proof -
  from assms consider
    using operational_semantics_step.simps by blast
  thus ?thesis
  proof (cases)
    case a
      thus ?thesis by (simp add: operational_semantics_intro.simps)
  next
    case b thus ?thesis
    proof (rule operational_semantics_elim.cases)
      fix  \<Gamma> n K\<^sub>1 \<tau> K\<^sub>2 \<Psi> \<Phi>
      thus ?P using HeronConf_interp_stepwise_sporadicon_cases
                    HeronConf_interpretation.simps by blast
    next
      fix  \<Gamma> n K\<^sub>1 \<tau> K\<^sub>2 \<Psi> \<Phi>
      thus ?P using HeronConf_interp_stepwise_sporadicon_cases
                    HeronConf_interpretation.simps by blast
    next
      fix \<Gamma> n K\<^sub>1 K\<^sub>2 R \<Psi> \<Phi>
      thus ?P using HeronConf_interp_stepwise_tagrel_cases
                    HeronConf_interpretation.simps by blast
    next
      fix \<Gamma> n K\<^sub>1 K\<^sub>2 \<Psi> \<Phi>
      thus ?P using HeronConf_interp_stepwise_implies_cases
                    HeronConf_interpretation.simps by blast
    next
      fix \<Gamma> n K\<^sub>1 K\<^sub>2 \<Psi> \<Phi>
      thus ?P using HeronConf_interp_stepwise_implies_cases
                    HeronConf_interpretation.simps by blast
    next
      fix \<Gamma> n K\<^sub>1 K\<^sub>2 \<Psi> \<Phi>
      thus ?P using HeronConf_interp_stepwise_implies_not_cases
                    HeronConf_interpretation.simps by blast
    next
      fix \<Gamma> n K\<^sub>1 K\<^sub>2 \<Psi> \<Phi>
      thus ?P using HeronConf_interp_stepwise_implies_not_cases
                    HeronConf_interpretation.simps by blast
    next
      fix \<Gamma> n K\<^sub>1 \<delta>\<tau> K\<^sub>2 K\<^sub>3 \<Psi> \<Phi>
      thus ?P using HeronConf_interp_stepwise_timedelayed_cases
                    HeronConf_interpretation.simps by blast
    next
      fix \<Gamma> n K\<^sub>1 \<delta>\<tau> K\<^sub>2 K\<^sub>3 \<Psi> \<Phi>
      thus ?P using HeronConf_interp_stepwise_timedelayed_cases
                    HeronConf_interpretation.simps by blast
    next
      fix \<Gamma> n K\<^sub>1 K\<^sub>2 \<Psi> \<Phi>
      thus ?P using HeronConf_interp_stepwise_weakly_precedes_cases
                    HeronConf_interpretation.simps by blast
    next
      fix \<Gamma> n K\<^sub>1 K\<^sub>2 \<Psi> \<Phi>
      thus ?P using HeronConf_interp_stepwise_strictly_precedes_cases
                    HeronConf_interpretation.simps by blast
    next
      fix \<Gamma> n K\<^sub>1 K\<^sub>2 \<Psi> \<Phi>
      thus ?P using HeronConf_interp_stepwise_kills_cases
                    HeronConf_interpretation.simps by blast
    next
      fix \<Gamma> n K\<^sub>1 K\<^sub>2 \<Psi> \<Phi>
      thus ?P using HeronConf_interp_stepwise_kills_cases
                    HeronConf_interpretation.simps by blast
    qed
  qed
qed


lemma sound_reduction':
proof -
    using sound_reduction by fastforce
  thus ?thesis using assms by blast
qed

lemma sound_reduction_generalized:
proof -
  from assms show ?thesis
  proof (induction k arbitrary: \<S>\<^sub>2)
    case 0
      ultimately show ?case by auto
  next
    case (Suc k)
      thus ?case
      proof -
        fix k :: nat
      qed
  qed
qed

theorem soundness:
  using assms sound_reduction_generalized solve_start by blast


lemma complete_direct_successors:
  proof (induct \<Psi>)
    case Nil
    show ?case
      using HeronConf_interp_stepwise_instant_cases operational_semantics_step.simps
            operational_semantics_intro.instant_i
      by fastforce
  next
    case (Cons \<psi> \<Psi>)  thus ?case
      proof (cases \<psi>)
        case (SporadicOn K1 \<tau> K2) thus ?thesis 
          using HeronConf_interp_stepwise_sporadicon_cases
      next
        case (TagRelation K\<^sub>1 K\<^sub>2 R) thus ?thesis
          using HeronConf_interp_stepwise_tagrel_cases
      next
        case (Implies K1 K2) thus ?thesis
          using HeronConf_interp_stepwise_implies_cases
      next
        case (ImpliesNot K1 K2) thus ?thesis
          using HeronConf_interp_stepwise_implies_not_cases
      next
        case (TimeDelayedBy Kmast \<tau> Kmeas Kslave) thus ?thesis
          using HeronConf_interp_stepwise_timedelayed_cases
                Cnext_solve_timedelayed
      next
        case (WeaklyPrecedes K1 K2) thus ?thesis
          using HeronConf_interp_stepwise_weakly_precedes_cases
          by blast
      next
        case (StrictlyPrecedes K1 K2)  thus ?thesis
          using HeronConf_interp_stepwise_strictly_precedes_cases
          by blast
      next
        case (Kills K1 K2) thus ?thesis
      qed
  qed

lemma complete_direct_successors':
proof -
  from HeronConf_interpretation.cases obtain \<Gamma> n \<Psi> \<Phi>
qed

lemma branch_existence:
proof -
  thus ?thesis by blast
qed

lemma branch_existence':
proof (induct k)
  case 0
    thus ?case by (simp add: assms)
next
  case (Suc k)
    thus ?case
    by blast
qed

theorem completeness:
  using assms branch_existence' solve_start by blast


lemma instant_index_increase:
proof (insert assms, induct \<Psi> arbitrary: \<Gamma> \<Phi>)
  case (Nil \<Gamma> \<Phi>)
    then show ?case
    proof -
        using instant_i intro_part by fastforce
        by auto
        using assms Nil.prems calculation(2) by blast
      ultimately show ?thesis by blast
    qed
next
  case (Cons \<psi> \<Psi>)
    then show ?case
    proof (induct \<psi>)
      case (SporadicOn K\<^sub>1 \<tau> K\<^sub>2)
          using HeronConf_interp_stepwise_sporadicon_cases by simp
        proof -
            using h1 SporadicOn.prems by simp
          from this obtain \<Gamma>\<^sub>k \<Psi>\<^sub>k \<Phi>\<^sub>k k where
          have
            by (simp add: elims_part sporadic_on_e1)
          with fp relpowp_Suc_I2 have
          thus ?thesis using fp by blast
        qed
        proof -
            using h2 SporadicOn.prems by simp

            from this obtain \<Gamma>\<^sub>k \<Psi>\<^sub>k \<Phi>\<^sub>k k
            by (simp add: elims_part sporadic_on_e2)
                using fp relpowp_Suc_I2 by auto
            with rc show ?thesis by blast
        qed
        from branches SporadicOn.prems(2) have
          by simp
        with br1 br2 show ?case by blast
  next
    case (TagRelation K\<^sub>1 K\<^sub>2 R)
        using HeronConf_interp_stepwise_tagrel_cases by simp
      thus ?case
      proof -
          using TagRelation.prems by simp

        from this obtain \<Gamma>\<^sub>k \<Psi>\<^sub>k \<Phi>\<^sub>k k
          by (simp add: elims_part tagrel_e)
          using fp relpowp_Suc_I2 by auto
        with rc show ?thesis by blast
      qed
  next
    case (Implies K\<^sub>1 K\<^sub>2)
        using HeronConf_interp_stepwise_implies_cases by simp
      proof -
          using h1 Implies.prems by simp
        from this obtain \<Gamma>\<^sub>k \<Psi>\<^sub>k \<Phi>\<^sub>k k where
          by (simp add: elims_part implies_e1)
          using fp relpowp_Suc_I2 by auto
        with rc show ?thesis by blast
      qed
      proof -
          using h2 Implies.prems by simp
        from this obtain \<Gamma>\<^sub>k \<Psi>\<^sub>k \<Phi>\<^sub>k k where
          by (simp add: elims_part implies_e2)
          using fp relpowp_Suc_I2 by auto
        with rc show ?thesis by blast
      qed
      ultimately show ?case using Implies.prems(2) by blast
  next
    case (ImpliesNot K\<^sub>1 K\<^sub>2)
        using HeronConf_interp_stepwise_implies_not_cases by simp
      proof -
          using h1 ImpliesNot.prems by simp
        from this obtain \<Gamma>\<^sub>k \<Psi>\<^sub>k \<Phi>\<^sub>k k where
          by (simp add: elims_part implies_not_e1)
          using fp relpowp_Suc_I2 by auto
        with rc show ?thesis by blast
      qed
      proof -
          using h2 ImpliesNot.prems by simp
        from this obtain \<Gamma>\<^sub>k \<Psi>\<^sub>k \<Phi>\<^sub>k k where
          by (simp add: elims_part implies_not_e2)
          using fp relpowp_Suc_I2 by auto
        with rc show ?thesis by blast
      qed
      ultimately show ?case  using ImpliesNot.prems(2) by blast
  next
    case (TimeDelayedBy K\<^sub>1 \<delta>\<tau> K\<^sub>2 K\<^sub>3)
      have branches:
        using HeronConf_interp_stepwise_timedelayed_cases by simp
      moreover have br1:
      proof -
          using h1 TimeDelayedBy.prems by simp
        from this obtain \<Gamma>\<^sub>k \<Psi>\<^sub>k \<Phi>\<^sub>k k
          by (simp add: elims_part timedelayed_e1)
          using fp relpowp_Suc_I2 by auto
        with rc show ?thesis by blast
      qed
      moreover have br2:
      proof -
          using h2 TimeDelayedBy.prems by simp
        from this obtain \<Gamma>\<^sub>k \<Psi>\<^sub>k \<Phi>\<^sub>k k
          by (simp add: elims_part timedelayed_e2)
        with fp relpowp_Suc_I2 have
          by auto
        with rc show ?thesis by blast
      qed
      ultimately show ?case using TimeDelayedBy.prems(2) by blast
  next
    case (WeaklyPrecedes K\<^sub>1 K\<^sub>2)
        using HeronConf_interp_stepwise_weakly_precedes_cases by simp
      proof -
          using  WeaklyPrecedes.prems by simp
        from this obtain \<Gamma>\<^sub>k \<Psi>\<^sub>k \<Phi>\<^sub>k k
          by (simp add: elims_part weakly_precedes_e)
          by auto
        with rc show ?thesis by blast
      qed
      ultimately show ?case using WeaklyPrecedes.prems(2) by blast
  next
    case (StrictlyPrecedes K\<^sub>1 K\<^sub>2)
        using HeronConf_interp_stepwise_strictly_precedes_cases by simp
      proof -
          using  StrictlyPrecedes.prems by simp
        from this obtain \<Gamma>\<^sub>k \<Psi>\<^sub>k \<Phi>\<^sub>k k
          by (simp add: elims_part strictly_precedes_e)
          by auto
        with rc show ?thesis by blast
      qed
      ultimately show ?case using StrictlyPrecedes.prems(2) by blast
  next
    case (Kills K\<^sub>1 K\<^sub>2)
        using HeronConf_interp_stepwise_kills_cases by simp
      proof -
          using h1 Kills.prems by simp
        from this obtain \<Gamma>\<^sub>k \<Psi>\<^sub>k \<Phi>\<^sub>k k where
          by (simp add: elims_part kills_e1)
          using fp relpowp_Suc_I2 by auto
        with rc show ?thesis by blast
      qed
      moreover have br2:
      proof -
          using h2 Kills.prems by simp
        from this obtain \<Gamma>\<^sub>k \<Psi>\<^sub>k \<Phi>\<^sub>k k where
          by (simp add: elims_part kills_e2)
          using fp relpowp_Suc_I2 by auto
        with rc show ?thesis by blast
      qed
      ultimately show ?case using Kills.prems(2) by blast
  qed
qed

lemma instant_index_increase_generalized:
proof -
    using add.commute assms(1) less_iff_Suc_add by auto
  show ?thesis
    proof (subst diff, subst diff, insert assms(2), induct \<delta>k)
      case 0  thus ?case
        using instant_index_increase assms(2) by simp
    next
      case (Suc \<delta>k)
          using Suc.hyps by blast
        obtain \<Gamma>\<^sub>k \<Psi>\<^sub>k \<Phi>\<^sub>k k
          using f0 assms(1) Suc.prems by blast
          using f0 cont instant_index_increase by blast
        obtain \<Gamma>\<^sub>k' \<Psi>\<^sub>k' \<Phi>\<^sub>k' k'
          using Suc.prems using fcontinue cont by blast
          using operational_semantics_trans_generalized cont cont2 by blast
        ultimately show ?case
          proof (subst suc_assoc)
            using cont2 local.trans by auto
          qed
    qed
qed

theorem progress:
proof -
    using assms relpowp_0_I solve_start by fastforce
  show ?thesis
    case True
      thus ?thesis using assms relpowp_0_I solve_start by fastforce
  next
      from instant_index_increase_generalized[OF pos this] show ?thesis by blast
  qed
qed

where

where

lemma elimation_rules_strictly_decreasing:
using assms by (auto elim: operational_semantics_elim.cases)

lemma elimation_rules_strictly_decreasing_meas:
using assms by (auto elim: operational_semantics_elim.cases)

lemma elimation_rules_strictly_decreasing_meas':
proof -
    using measure_interpretation_config.cases by blast
    using measure_interpretation_config.cases by blast
  from elimation_rules_strictly_decreasing_meas assms p1 p2
  with p1 p2 show ?thesis by simp
qed

theorem instant_computation_termination:
proof (simp add: wfP_def)
  proof (rule wf_subset)
      by (simp add: inv_image_def less_eq measure_def)
      using elimation_rules_strictly_decreasing_meas'
            operational_semantics_elim_inv_def by blast
  next
  qed
qed


end
