theory Boolean_functions
  imports
    Main
    "Jordan_Normal_Form.Matrix"
begin




locale boolean_functions
  = fixes n::"nat"
begin

definition bool_fun_dim_n :: "(bool vec => bool) set"
  where "bool_fun_dim_n = {f. f \<in> carrier_vec n \<rightarrow> (UNIV::bool set)}"

definition monotone_bool_fun :: "(bool vec => bool) => bool"
  where "monotone_bool_fun \<equiv> (mono_on (carrier_vec n))"

definition monotone_bool_fun_set :: "(bool vec => bool) set"
  where "monotone_bool_fun_set = (Collect monotone_bool_fun)"


definition bool_fun_top :: "bool vec => bool"
  where "bool_fun_top f = True"

definition bool_fun_bot :: "bool vec => bool"
  where "bool_fun_bot f = False"

end


definition count_true :: "bool vec => nat"
  where "count_true v = sum (\<lambda>i. if vec_index v i then 1 else 0::nat) {0..<dim_vec v}"

lemma "vec_index (vec (5::nat) (\<lambda>i. False)) 2 = False"
  by simp

lemma "vec_index (vec (5::nat) (\<lambda>i. True)) 3 = True"
  by simp

lemma "count_true (vec (1::nat) (\<lambda>i. True)) = 1"
  unfolding count_true_def by simp

lemma "count_true (vec (2::nat) (\<lambda>i. True)) = 2"
  unfolding count_true_def by simp

lemma "count_true (vec (5::nat) (\<lambda>i. True)) = 5"
  unfolding count_true_def by simp

