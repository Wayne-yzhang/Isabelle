theory Busemann_Function
  imports Boundary_Extension Ergodic_Theory.Fekete
begin


definition Busemann_function_at::"('a::Gromov_hyperbolic_space) Gromov_completion \<Rightarrow> 'a \<Rightarrow> 'a \<Rightarrow> real"
  where "Busemann_function_at xi x y = real_of_ereal (
    Sup {limsup (\<lambda>n. ereal(dist x (u n) - dist y (u n))) |u. (\<lambda>n. to_Gromov_completion (u n)) \<longlonglongrightarrow> xi})"


lemma Busemann_function_ereal:
  "ereal(Busemann_function_at xi x y) = Sup {limsup (\<lambda>n. ereal(dist x (u n) - dist y (u n))) |u. (\<lambda>n. to_Gromov_completion (u n)) \<longlonglongrightarrow> xi}"
proof -
  have A: "Sup {limsup (\<lambda>n. ereal(dist x (u n) - dist y (u n))) |u. (\<lambda>n. to_Gromov_completion (u n)) \<longlonglongrightarrow> xi} \<le> dist x y"
    by (rule Sup_least, auto intro!: Limsup_bounded always_eventually mono_intros simp add: algebra_simps)
  have B: "Sup {limsup (\<lambda>n. ereal(dist x (u n) - dist y (u n))) |u. (\<lambda>n. to_Gromov_completion (u n)) \<longlonglongrightarrow> xi} \<ge> -dist x y"
  proof -
    obtain u where *: "(\<lambda>n. to_Gromov_completion (u n)) \<longlonglongrightarrow> xi"
      using rep_Gromov_completion_limit[of xi] by blast
    have "ereal(-dist x y) \<le> limsup (\<lambda>n. ereal(dist x (u n) - dist y (u n)))"
      by (rule le_Limsup, auto intro!: always_eventually mono_intros simp add: algebra_simps)
    also have "... \<le> Sup {limsup (\<lambda>n. ereal(dist x (u n) - dist y (u n))) |u. (\<lambda>n. to_Gromov_completion (u n)) \<longlonglongrightarrow> xi}"
      apply (rule Sup_upper) using * by auto
    finally show ?thesis by simp
  qed
  show ?thesis
    unfolding Busemann_function_at_def apply (rule ereal_real') using A B by auto
qed


lemma Busemann_function_inner:
  "Busemann_function_at (to_Gromov_completion z) x y = dist x z - dist y z"
proof -
  have L: "limsup (\<lambda>n. ereal(dist x (u n) - dist y (u n))) = dist x z - dist y z" if "u \<longlonglongrightarrow> z" for u
    by (rule lim_imp_Limsup, simp, intro tendsto_intros that)
  have "Sup {limsup (\<lambda>n. ereal(dist x (u n) - dist y (u n))) |u. u \<longlonglongrightarrow> z}
      = dist x z - dist y z"
  proof -
    obtain u where u: "u \<longlonglongrightarrow> z"
      by auto
    show ?thesis
      apply (rule order.antisym)
      apply (subst Sup_le_iff) using L apply auto[1]
      apply (subst L[OF u, symmetric]) apply (rule Sup_upper) using u by auto
  qed
  then have "ereal (Busemann_function_at (to_Gromov_completion z) x y) = dist x z - dist y z"
    unfolding Busemann_function_ereal by auto
  then show ?thesis by auto
qed


lemma Busemann_function_xx [simp]:
  "Busemann_function_at xi x x = 0"
proof -
  have *: "{limsup (\<lambda>n. ereal(dist x (u n) - dist x (u n))) |u. (\<lambda>n. to_Gromov_completion (u n)) \<longlonglongrightarrow> xi} = {0}"
    by (auto simp add: zero_ereal_def[symmetric] intro!: lim_imp_Limsup rep_Gromov_completion_limit[of xi])
  have "ereal (Busemann_function_at xi x x) = ereal 0"
    unfolding Busemann_function_ereal * by auto
  then show ?thesis
    by auto
qed


lemma Busemann_function_mono [mono_intros]:
  "Busemann_function_at xi x y \<le> Busemann_function_at xi x' y' + dist x x' + dist y y'"
proof -
  have A: "limsup (\<lambda>n. ereal (dist x (u n) - dist y (u n)))
          \<le> ereal(Busemann_function_at xi x' y') + ereal (dist x x' + dist y y')"
    if "(\<lambda>n. to_Gromov_completion (u n)) \<longlonglongrightarrow> xi" for u
  proof -
    have *: "dist x z + dist y' z \<le> dist x x' + (dist y y' + (dist x' z + dist y z))" for z
      using add_mono[OF dist_triangle[of x z x'] dist_triangle[of y' z y]] dist_commute[of y y'] by auto
    have "limsup (\<lambda>n. ereal (dist x (u n) - dist y (u n))) + (- ereal (dist x x' + dist y y'))
      = limsup (\<lambda>n. ereal (dist x (u n) - dist y (u n)) + (- ereal (dist x x' + dist y y')))"
      by (rule Limsup_add_ereal_right[symmetric], auto)
    also have "... \<le> limsup (\<lambda>n. ereal (dist x' (u n) - dist y' (u n)))"
      by (auto intro!: Limsup_mono always_eventually simp: algebra_simps *)
