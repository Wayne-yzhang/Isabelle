theory  NewLaws
  imports Interrupt Sliding Throw
begin


hide_const R


      In the first subsection we will give slight generalizations of previous results,
      but in the other we prove some very powerful theorems.\<close>
subsection \<open>Some Generalizations\<close>
text \<open>For \<^const>\<open>Renaming\<close>, we can obtain generalizations of the following results:
   \<box>y \<in> f ` A \<rightarrow> \<sqinter>a \<in> {x \<in> A. y = f x}. Renaming (P a) f\<close> (is \<open>?lhs = ?rhs\<close>)
  show \<open>s \<in> \<D> ?lhs \<Longrightarrow> s \<in> \<D> ?rhs\<close> for s
  assume \<open>s \<in> \<D> ?rhs\<close>
  then obtain a s' where * : \<open>a \<in> A\<close> \<open>s = EvExt f (ev a) # s'\<close>
                             \<open>s' \<in> \<D> (Renaming (P a) f)\<close>
    where ** : \<open>tickFree s1\<close> \<open>front_tickFree s2\<close> 
               \<open>s' = map (EvExt f) s1 @ s2\<close> \<open>s1 \<in> \<D> (P a)\<close>
  have *** : \<open>tickFree (ev a # s1) \<and> 
              s = EvExt f (ev a) # map (EvExt f) s1 @ s2 \<and> ev a # s1 \<in> \<D> (Mprefix A P)\<close>
  show \<open>s \<in> \<D> ?lhs\<close>
  assume same_div: \<open>\<D> ?lhs = \<D> ?rhs\<close>
  assume \<open>(s, X) \<in> \<F> ?lhs\<close>
  then consider \<open>s \<in> \<D> ?lhs\<close>
    | \<open>\<exists>t. (t, EvExt f -` X) \<in> \<F> (Mprefix A P) \<and> s = map (EvExt f) t\<close>
  thus \<open>(s, X) \<in> \<F> ?rhs\<close>
    from D_F same_div show \<open>s \<in> \<D> ?lhs \<Longrightarrow> (s, X) \<in> \<F> ?rhs\<close> by blast
    assume \<open>\<exists>t. (t, EvExt f -` X) \<in> \<F> (Mprefix A P) \<and> s = map (EvExt f) t\<close>
    then obtain t where * : \<open>(t, EvExt f -` X) \<in> \<F> (Mprefix A P)\<close> 
                            \<open>s = map (EvExt f) t\<close> by blast
    show \<open>(s, X) \<in> \<F> ?rhs\<close>
    proof (cases \<open>t = []\<close>)
      from "*" show \<open>t = [] \<Longrightarrow> (s, X) \<in> \<F> ?rhs\<close>
      assume \<open>t \<noteq> []\<close>
        where ** : \<open>a \<in> A\<close> \<open>t = ev a # t'\<close> \<open>(t', EvExt f -` X) \<in> \<F> (P a)\<close>
      have *** : \<open>s \<noteq> [] \<and> hd s \<in> ev ` f ` A\<close>
      with "**" have \<open>ev (f a) = hd s \<and> 
                     (tl s, X) \<in> \<F> (\<sqinter>a \<in> {x \<in> A. f a = f x}. Renaming (P a) f)\<close>
           (metis (no_types, opaque_lifting) \<open>t \<noteq> []\<close> hd_map hd_map_EvExt list.sel(1))
      with "***" show \<open>(s, X) \<in> \<F> ?rhs\<close> by (simp add: F_Mprefix) blast
  show \<open>(s, X) \<in> \<F> ?rhs \<Longrightarrow> (s, X) \<in> \<F> ?lhs\<close> for s X
    show \<open>s = [] \<Longrightarrow> (s, X) \<in> \<F> ?rhs \<Longrightarrow> (s, X) \<in> \<F> ?lhs\<close>
    assume \<open>s = b # s'\<close> \<open>(s, X) \<in> \<F> ?rhs\<close>
                \<open>(s', X) \<in> \<F> (\<sqinter>a \<in> {x \<in> A. f a = f x}. Renaming (P a) f)\<close>
      where ** : \<open>a' \<in> A\<close> \<open>f a' = f a\<close> \<open>(s', X) \<in> \<F> (Renaming (P a') f)\<close>
      \<open>\<exists>t. (t, EvExt f -` X) \<in> \<F> (P a') \<and> s' = map (EvExt f) t\<close>
      | \<open>\<exists>s1 s2. tickFree s1 \<and> front_tickFree s2 \<and> 
                 s' = map (EvExt f) s1 @ s2 \<and> s1 \<in> \<D> (P a')\<close>
    thus \<open>(s, X) \<in> \<F> ?lhs\<close>
      assume \<open>\<exists>t. (t, EvExt f -` X) \<in> \<F> (P a') \<and> s' = map (EvExt f) t\<close>
      then obtain t where *** : \<open>(t, EvExt f -` X) \<in> \<F> (P a')\<close>
                                \<open>s' = map (EvExt f) t\<close> by blast
      have **** : \<open>(ev a' # t, EvExt f -` X) \<in> \<F> (Mprefix A P) \<and> 
                   s = map (EvExt f) (ev a' # t)\<close>
      show \<open>(s, X) \<in> \<F> ?lhs\<close>
      assume \<open>\<exists>s1 s2. tickFree s1 \<and> front_tickFree s2 \<and> 
                      s' = map (EvExt f) s1 @ s2 \<and> s1 \<in> \<D> (P a')\<close>
        where *** : \<open>tickFree s1\<close> \<open>front_tickFree s2\<close> 
                    \<open>s' = map (EvExt f) s1 @ s2\<close> \<open>s1 \<in> \<D> (P a')\<close> by blast
      have \<open>tickFree (ev a' # s1) \<and> 
            s = EvExt f (ev a') # map (EvExt f) s1 @ s2 \<and> 
            ev a' # s1 \<in> \<D> (Mprefix A P)\<close>
      thus \<open>(s, X) \<in> \<F> ?lhs\<close> by (auto simp add: "***"(2) F_Renaming)   
  \<open>Renaming ((\<box>a \<in> A \<rightarrow> P a) \<rhd> Q) f = 
   (\<box>y \<in> f ` A \<rightarrow> \<sqinter>a \<in> {x \<in> A. y = f x}. Renaming (P a) f) \<rhd> Renaming Q f\<close>
  \<open>Renaming (\<sqinter>a \<in> A. P a) f = \<sqinter>b \<in> f ` A. \<sqinter>a \<in> {a \<in> A. b = f a}. Renaming (P a) f\<close>
  \<open>Renaming (\<sqinter>a \<in> A \<rightarrow> P a) f = 
  apply (subst (1 2) Mndetprefix_GlobalNdet)
  apply (simp add: Renaming_GlobalNdet Renaming_prefix)
  apply (intro mono_GlobalNdet_eq ballI)
  apply (subst write0_GlobalNdet[symmetric], blast)
  by (simp add: mono_GlobalNdet_eq) 





  unfolding strict_mono_def less_list_def le_list_def
  by (metis list.map_disc_iff map_append self_append_conv)


lemma trace_hide_map_EvExt :
proof (induct s)
  case Nil
  show ?case by simp
next
  case (Cons a s)
  from Cons.prems[unfolded inj_on_def, rule_format, of a, simplified] show ?case
    apply (simp add: "*")
    apply (simp add: image_iff split: event.split)
    by (metis ev_elem_anteced1 singletonI vimage_singleton_eq)
qed
  

  unfolding inj_on_def EvExt_def by (auto split: event.split)

lemma inj_on_EvExt_set_T:
  unfolding inj_on_def EvExt_def events_of_def by (auto split: event.split)


proof (subst Process_eq_spec_optimized, safe)
  fix s
    by (simp add: D_Renaming) blast
  from "*"(4) obtain t u
    by (simp add: D_Hiding) blast
  proof (elim disjE)
      apply (simp add: "*"(3) "**"(2, 3) EvExt_tF, intro conjI)
      subgoal using "*"(1, 2) "**"(3) EvExt_tF front_tickFree_append tickFree_append by blast
      subgoal by (rule trace_hide_map_EvExt[symmetric];
      using "**"(2) D_Renaming front_tickFree_Nil by blast
  next
      apply (simp add: "*"(3) "**"(2, 3) EvExt_tF, intro conjI)
      subgoal using "*"(1, 2) "**"(3) EvExt_tF front_tickFree_append tickFree_append by blast
      subgoal by (rule trace_hide_map_EvExt[symmetric];
      subgoal using strict_mono_map by blast
      subgoal apply (subst (1 2) trace_hide_map_EvExt)
      subgoal by blast
      done
  qed
next
  fix s
  then obtain t u
    by (simp add: D_Hiding) blast
  proof (elim disjE)
      by (simp add: D_Renaming) blast
      apply (simp, intro conjI)
      subgoal using "**"(1) Hiding_tickFree by blast
      subgoal using "*"(1, 2) "**"(3) Hiding_tickFree front_tickFree_append tickFree_append by blast
      subgoal by (rule trace_hide_map_EvExt;
      subgoal using "**"(4) elemDIselemHD by blast
      done
  next
      by (simp add: bij_imp_bij_inv bij_is_inj bij_f)
        by (induct v, unfold EvExt_def, auto split: event.split)
           (metis bij_inv_eq_iff bij_f)
    then obtain g
      by (simp add: T_Renaming) blast
    proof cases
        apply (simp add: "***"(1) strict_mono_map, intro conjI)
        subgoal apply (subst Renaming_inv[where f = f, symmetric])
          using "***"(1) by (subst T_Renaming, blast)
        subgoal apply (subst (1 2) inv_S, subst (1 2) trace_hide_map_EvExt)
              (metis "***"(1))
        subgoal using "***"(2) "*****" by blast
        done
        apply (simp, intro conjI)
        subgoal using "*"(2) "****"(2) EvExt_tF Hiding_tickFree by blast

        subgoal using "****"(1) is_processT2_TR by blast
        apply (rule trace_hide_map_EvExt,
        apply (simp add: D_Renaming D_Hiding)
        using "*"(2) "*****" "******" EvExt_tF front_tickFree_Nil by blast
    next
      then obtain t1 t2
        apply (simp, intro conjI)
        subgoal using "****"(1) Hiding_tickFree by blast
        subgoal using "*"(1, 2) "****"(3) Hiding_tickFree front_tickFree_append tickFree_append by blast
        subgoal by (rule trace_hide_map_EvExt;
        subgoal using "****"(4) elemDIselemHD by blast
        done
    qed
  qed
next
  fix s X
    by (simp add: F_Renaming D_Renaming) blast
  proof cases
  next
      by (simp add: F_Hiding D_Hiding) blast
    proof cases
      then obtain t u
        by (simp add: D_Hiding) blast
        by (simp add: EvExt_ftF EvExt_tF "**"(1, 2))
           (rule trace_hide_map_EvExt[symmetric];
      proof (elim disjE)
          apply (simp add: D_Renaming)
          using "**"(2) front_tickFree_Nil by blast
          by (simp add: F_Hiding) (metis "$" "*"(2) "**"(3) "***" map_append)
      next
          apply (subst (1 2) trace_hide_map_EvExt,
          by (simp add: strict_mono_map T_Renaming image_iff) (metis (mono_tags, lifting))
          by (simp add: F_Hiding) 
             (metis (mono_tags, lifting) "$" "*"(2) "**"(3) "***" map_append)
      qed
    next
           (metis (no_types, opaque_lifting) event.distinct(1) event.exhaust event.simps(4, 5) o_apply)
        apply (intro conjI)
         apply (rule trace_hide_map_EvExt[symmetric];
        apply (simp add: F_Renaming)
        using "**"(2) "***" by auto
        apply (simp add: F_Hiding "*"(2) "**"(1))
    qed
  qed
next
  fix s X
    by (simp add: F_Hiding D_Hiding) blast
  proof cases
  next
    then obtain t
           (metis (no_types, opaque_lifting) event.distinct(1) event.exhaust event.simps(4, 5) o_apply)
      using "*"(2) by (simp add: F_Renaming)
    proof (elim disjE exE conjE)
      fix s1
        apply (simp add: "*"(1) F_Hiding "**", intro conjI)
         apply blast
        by (rule trace_hide_map_EvExt;
        apply (simp add: F_Renaming)
    next
      fix s1 s2
        apply (simp add: F_Renaming "*"(1), intro conjI)
        subgoal using Hiding_tickFree by blast
        subgoal using Hiding_fronttickFree by blast
         apply (rule trace_hide_map_EvExt;
        using elemDIselemHD by blast
        apply (simp add: F_Renaming)
    qed
  qed
qed





lemma exists_map_antecedent_if_subset_range:
proof (induct u)
next
  fix a u
    by (meson set_subset_Cons subset_trans)
  proof (intro exI)
  qed
qed


lemma bij_map_setinterleaving_iff_setinterleaving :
