theory AOT_misc
  imports AOT_NaturalNumbers
begin


AOT_theorem PossiblyNumbersEmptyPropertyImpliesZero:
proof(rule "\<rightarrow>I")
  proof (safe intro!: "df-rigid-rel:1"[THEN "\<equiv>\<^sub>d\<^sub>fI"] "&I" "cqt:2";
         rule RN; safe intro!: GEN "\<rightarrow>I")
    AOT_modally_strict {
      fix x
        by (metis "ord=Eequiv:1" "vdash-properties:10")
        by (metis "con-dis-i-e:1" "con-dis-i-e:2:b" "intro-elim:3:a" "thm-neg=E")
    }
  qed
    by (safe intro!: "num-cont:2"[unvarify G, THEN "\<rightarrow>E"] "cqt:2")
    using "BFs:2"[THEN "\<rightarrow>E"] by blast
    using "\<forall>E"(2) by auto
    using "sc-eq-box-box:1"[THEN "\<equiv>E"(1), THEN "\<rightarrow>E", THEN "nec-imp-act"[THEN "\<rightarrow>E"]]
    by blast
    by (safe intro!: "eq-num:1"[unvarify G, THEN "\<equiv>E"(1)] "cqt:2")
    by (safe intro!: "eq-num:2"[unvarify G, THEN "\<equiv>E"(1)] "cqt:2")
    using "cqt:2"(1) "rule-id-df:2:b[zero]" "rule=E" "zero:1" by blast
qed

  by (AOT_subst_def Numbers')
     (auto intro!: "\<equiv>I" "\<rightarrow>I" "&I" "cqt:2" dest: "&E")

AOT_theorem Numbers'DistinctZeroes:
proof -
    using "two-worlds-exist:4" "PossibleWorld.\<exists>E"[rotated] by fast
    using "PossibleWorld.\<exists>E"[rotated] by blast
  AOT_obtain x where x_prop:
    using "A-objects"[axiom_inst] "\<exists>E"[rotated] by fast
  moreover AOT_obtain y where y_prop:
    using "A-objects"[axiom_inst] "\<exists>E"[rotated] by fast
  moreover {
    fix x w
    proof(safe intro!: GEN "conj-dist-w:4"[unvarify p q, OF "log-prop-prop:2",
                              OF "log-prop-prop:2",THEN "\<equiv>E"(2)] "\<equiv>I" "\<rightarrow>I")
      fix F
        using "fund:1"[unvarify p, OF "log-prop-prop:2", THEN "\<equiv>E"(2),
                       OF "PossibleWorld.\<exists>I"] by blast
        by (metis "en-eq:3[1]" "intro-elim:3:a")
        using x_prop[THEN "&E"(2), THEN "\<forall>E"(2), THEN "\<equiv>E"(1)] by blast
    next
      fix F
        using x_prop[THEN "&E"(2), THEN "\<forall>E"(2), THEN "\<equiv>E"(2)] by blast
        using "pre-en-eq:1[1]"[THEN "\<rightarrow>E"] by blast
        using "fund:2"[unvarify p, OF "log-prop-prop:2", THEN "\<equiv>E"(1)]
              "PossibleWorld.\<forall>E" by fast
    qed
      using "conj-dist-w:5"[THEN "\<equiv>E"(2)] by fast
    moreover {
        by (safe intro!: RN "cqt:2")
        using "fund:2"[unvarify p, OF "log-prop-prop:2", THEN "\<equiv>E"(1),
                       THEN "PossibleWorld.\<forall>E"] by blast
    }
    moreover {
        using x_prop[THEN "&E"(1)] by (metis "oa-facts:2" "\<rightarrow>E")
        using "fund:2"[unvarify p, OF "log-prop-prop:2",
                       THEN "\<equiv>E"(1), THEN "PossibleWorld.\<forall>E"] by blast
    }
      using "conj-dist-w:1"[unvarify p q, OF "log-prop-prop:2",
              OF "log-prop-prop:2", THEN "\<equiv>E"(2), OF "&I"] by auto
      using "PossibleWorld.\<exists>I" by auto
      using "fund:1"[unvarify p, OF "log-prop-prop:2", THEN "\<equiv>E"(2)] by blast
      by (AOT_subst_def Numbers')
  }
    by auto
  proof (rule "ab-obey:2"[THEN "\<rightarrow>E"])
    proof (safe intro!: RN "raa-cor:2")
      AOT_modally_strict {
          using "Ordinary.\<exists>E"[rotated] by blast
          by (rule "\<beta>\<rightarrow>C")
          by (metis "con-dis-taut:2" "intro-elim:3:d" "modus-tollens:1"
                    "raa-cor:3" "thm-neg=E")
          by (metis "modus-tollens:1" "ord=Eequiv:1" "raa-cor:3" Ordinary.\<psi>)
          by (metis "raa-cor:1")
      }
    qed
      using "fund:2"[unvarify p, OF "log-prop-prop:2", THEN "\<equiv>E"(1)] by blast
      by (safe intro!: RN "beta-C-meta"[THEN "\<rightarrow>E"] "cqt:2")
      using "fund:2"[unvarify p, OF "log-prop-prop:2", THEN "\<equiv>E"(1)] by blast
      using "conj-dist-w:4"[unvarify p, OF "log-prop-prop:2", THEN "\<equiv>E"(1)]
            "PossibleWorld.\<forall>E" "PossibleWorld.\<forall>I" by meson

    proof(rule "raa-cor:1")
      proof(safe intro!: GEN "\<rightarrow>I")
          using 0 "con-dis-i-e:1" "\<exists>I"(2) "raa-cor:4" by fast
      qed
      proof(safe intro!: GEN "\<rightarrow>I")
          using "coherent:2" "intro-elim:3:a" by blast
          using 1["\<forall>I" p, THEN "\<forall>E"(1), OF "log-prop-prop:2"]
          by (metis "modus-tollens:1")
          using "coherent:1" "intro-elim:3:b" "reductio-aa:1" by blast
      qed
        by (metis "intro-elim:2")
        using "sit-identity"[unconstrain s, THEN "\<rightarrow>E",
            OF PossibleWorld.\<psi>[THEN "world:1"[THEN "\<equiv>\<^sub>d\<^sub>fE"], THEN "&E"(1)],
            unconstrain s', THEN "\<rightarrow>E",
            OF PossibleWorld.\<psi>[THEN "world:1"[THEN "\<equiv>\<^sub>d\<^sub>fE"], THEN "&E"(1)],
            THEN "\<equiv>E"(2)] GEN by fast
        using  "=-infix" "\<equiv>\<^sub>d\<^sub>fE" "con-dis-i-e:1" distinct_worlds by blast
    qed
      using "\<exists>E"[rotated] by blast
    proof (safe intro!: y_prop[THEN "&E"(2), THEN "\<forall>E"(1), THEN "\<equiv>E"(2)] "cqt:2")
      proof (safe intro!:  "cqt:2" "empty-approx:1"[unvarify F H, THEN RN,
                  THEN "fund:2"[unvarify p, OF "log-prop-prop:2", THEN "\<equiv>E"(1)],
                  THEN "PossibleWorld.\<forall>E",
                  THEN "conj-dist-w:2"[unvarify p q, OF "log-prop-prop:2",
                                       OF "log-prop-prop:2", THEN "\<equiv>E"(1)],
                                       THEN "\<rightarrow>E"]
                  "conj-dist-w:1"[unvarify p q, OF "log-prop-prop:2",
                                  OF "log-prop-prop:2", THEN "\<equiv>E"(2)] "&I")
        proof (rule "raa-cor:2")
            by (metis "conj-dist-w:6" "intro-elim:3:a")
            using "\<exists>E"[rotated] by blast
            using "conj-dist-w:1"[unvarify p q, OF "log-prop-prop:2",
                    OF "log-prop-prop:2", THEN "\<equiv>E"(1), THEN "&E"(2)] by blast
            using world_prop_beta[THEN "PossibleWorld.\<forall>E", THEN "\<equiv>E"(1)] by blast
            using 0[THEN "&E"(2)] "&I" by blast
        qed
          by (safe intro!: "coherent:1"[unvarify p, OF "log-prop-prop:2",
                                        THEN "\<equiv>E"(2)])
      next
          using nec_not_ex[THEN "PossibleWorld.\<forall>E"] by blast
      qed
    qed
    proof(rule "raa-cor:2")
      AOT_hence "w\<^sub>1 \<Turnstile> [\<lambda>y p] \<approx>\<^sub>E [\<lambda>z O!z & z \<noteq>\<^sub>E z]"
        using x_prop[THEN "&E"(2), THEN "\<forall>E"(1), THEN "\<equiv>E"(1)]
              "prop-prop2:2" by blast
      AOT_hence "\<not>w\<^sub>1 \<Turnstile> \<not>[\<lambda>y p] \<approx>\<^sub>E [\<lambda>z O!z & z \<noteq>\<^sub>E z]"
        using "coherent:2"[unvarify p, OF "log-prop-prop:2", THEN "\<equiv>E"(1)] by blast
      moreover AOT_have "w\<^sub>1 \<Turnstile> \<not>([\<lambda>y p] \<approx>\<^sub>E [\<lambda>z O!z & z \<noteq>\<^sub>E z])"
      proof (safe intro!: "cqt:2" "empty-approx:2"[unvarify F H, THEN RN,
                    THEN "fund:2"[unvarify p, OF "log-prop-prop:2", THEN "\<equiv>E"(1)],
                    THEN "PossibleWorld.\<forall>E",
                    THEN "conj-dist-w:2"[unvarify p q, OF "log-prop-prop:2",
                        OF "log-prop-prop:2", THEN "\<equiv>E"(1)], THEN "\<rightarrow>E"]
                    "conj-dist-w:1"[unvarify p q, OF "log-prop-prop:2",
                                    OF "log-prop-prop:2", THEN "\<equiv>E"(2)] "&I")
        fix u
          using Ordinary.\<psi>[THEN RN,
                  THEN "fund:2"[unvarify p, OF "log-prop-prop:2", THEN "\<equiv>E"(1)],
                  THEN "PossibleWorld.\<forall>E"] by simp
          by (safe intro!: world_prop_beta[THEN "PossibleWorld.\<forall>E", THEN "\<equiv>E"(2)]
                           0[THEN "&E"(1)])
          using "conj-dist-w:1"[unvarify p q, OF "log-prop-prop:2",
                                OF "log-prop-prop:2", THEN "\<equiv>E"(2),
                                OF "&I"] by blast
          by (rule "\<exists>I")
          by (metis "conj-dist-w:6" "intro-elim:3:b")
      next
          using "PossibleWorld.\<forall>E" nec_not_ex by fastforce
      qed
        using "raa-cor:3" by blast
    qed
      using "&I" by blast
      by (metis "existential:1" "prop-prop2:2")
      by (rule "\<or>I")
  qed
    using "&I" by blast
    using "\<exists>I"(2)[where \<beta>=x] "\<exists>I"(2)[where \<beta>=y] by auto
qed

AOT_theorem restricted_identity:
  by (auto intro!: "\<equiv>I" "\<rightarrow>I" "&I"
             dest: "id-R-thm:2"[THEN "\<rightarrow>E"] "&E"
                   "id-R-thm:3"[THEN "\<rightarrow>E"]
                   "id-R-thm:4"[THEN "\<rightarrow>E", OF "\<or>I"(1), THEN "\<equiv>E"(2)])

proof(rule GEN; rule "\<rightarrow>I")
  fix F n
  proof(safe intro!: "Number.GEN" "\<rightarrow>I")
    fix n m
      using "suc-thm".
      using "pred-func:1"[unvarify z, OF "def-suc[den2]", THEN "\<rightarrow>E", OF "&I"]
      by blast
      using A[THEN "&E"(2), THEN "Number.\<forall>E", THEN "\<rightarrow>E"] by blast
      using m_eq_suc_n[symmetric] "rule=E" by fast
  qed
    using induction[THEN "\<forall>E"(2), THEN "\<rightarrow>E", OF "&I", OF A[THEN "&E"(1)]]
    by simp
qed



AOT_theorem BeingOrdinaryExtensionOfDenotes:
proof(rule "safe-ext"[axiom_inst, THEN "\<rightarrow>E", OF "&I"])
    by "cqt:2"
next
  proof(safe intro!: RN GEN)
    AOT_modally_strict {
      fix x
      AOT_modally_strict {
        proof (safe intro!: "Comprehension_3"[THEN "\<rightarrow>E"] RN GEN
                            "\<rightarrow>I" "\<equiv>I" Ordinary.GEN)
          AOT_modally_strict {
            fix F H u
              using eqE[THEN "\<equiv>\<^sub>d\<^sub>fE", THEN "&E"(2)] "qml:2"[axiom_inst, THEN "\<rightarrow>E"]
              by blast
            {
            }
            {
            }
          }
        qed
      }
        apply (AOT_subst_def OrdinaryExtensionOf)
        by (auto intro!: "beta-C-meta"[THEN "\<rightarrow>E"] simp: "oth-class-taut:3:a")
    }
  qed
qed




AOT_register_rigid_restricted_type
proof
  AOT_modally_strict {
      using "o-objects-exist:2" "qml:2"[axiom_inst] "\<rightarrow>E" by blast
      using "rule-id-df:1[zero]"[OF concepts, OF "oa-exist:2"] "rule=E" id_sym
      by fast
  }
next
  AOT_modally_strict {
      using "cqt:5:a"[axiom_inst, THEN "\<rightarrow>E", THEN "&E"(2)] "\<rightarrow>I"
      by blast
  }
next
  AOT_modally_strict {
      by (simp add: "oa-facts:2" GEN)
      using "rule-id-df:1[zero]"[OF concepts, OF "oa-exist:2"] "rule=E" id_sym
      by fast
  }
qed

AOT_register_variable_names
  Concept: c d e

    using concepts[THEN "rule-id-df:1[zero]", OF "oa-exist:2", symmetric]
          "A-objects"[axiom_inst]
          "rule=E" by fast

    using concepts[THEN "rule-id-df:1[zero]", OF "oa-exist:2", symmetric]
          "A-objects!"
          "rule=E" by fast

  using "concept-comp:2" "A-Exists:2"[THEN "\<equiv>E"(2)] "RA[2]" by blast

AOT_theorem "concept-comp:4":
    using "=I"(1)[OF "concept-comp:3"]
          "rule=E"[rotated]
          concepts[THEN "rule-id-df:1[zero]", OF "oa-exist:2"]
          by fast




proof(rule "\<rightarrow>I")
    using "F-imp-G"[THEN "\<equiv>\<^sub>d\<^sub>fE"] "&E" by blast
    using "S5Basic:6"[THEN "\<equiv>E"(1)] by blast
  proof(rule RM; safe intro!: "\<rightarrow>I" GEN "\<equiv>I")
    AOT_modally_strict {
      fix F G
        by (AOT_subst_thm eqE[THEN "\<equiv>Df", THEN "\<equiv>S"(1), OF "&I",
              OF "cqt:2[const_var]"[axiom_inst],
              OF "cqt:2[const_var]"[axiom_inst], symmetric])
      {
          using "F-imp-G"[THEN "\<equiv>\<^sub>d\<^sub>fE"] "&E" by blast
        moreover AOT_modally_strict {
            by (auto intro!: "\<rightarrow>I" dest!: "\<forall>E"(2) dest: "\<rightarrow>E" "\<equiv>E")
            by (rule GEN)
        }
          using "RN[prem]"[where
              \<Gamma>="{\<guillemotleft>\<forall>x([H]x \<rightarrow> O!x)\<guillemotright>, \<guillemotleft>\<forall>u([G]u \<equiv> [F]u)\<guillemotright>, \<guillemotleft>\<forall>x([H]x \<rightarrow> [F]x)\<guillemotright>}"]
          using 0 1 by fast
          by (AOT_subst_def "F-imp-G")
             (safe intro!: "cqt:2" "&I")
      }
      {
          using "F-imp-G"[THEN "\<equiv>\<^sub>d\<^sub>fE"] "&E" by blast
        moreover AOT_modally_strict {
            by (auto intro!: "\<rightarrow>I" dest!: "\<forall>E"(2) dest: "\<rightarrow>E" "\<equiv>E")
            by (rule GEN)
        }
          using "RN[prem]"[where
              \<Gamma>="{\<guillemotleft>\<forall>x([H]x \<rightarrow> O!x)\<guillemotright>, \<guillemotleft>\<forall>u([G]u \<equiv> [F]u)\<guillemotright>, \<guillemotleft>\<forall>x([H]x \<rightarrow> [G]x)\<guillemotright>}"]
          using 0 1 by fast
          by (AOT_subst_def "F-imp-G")
             (safe intro!: "cqt:2" "&I")
      }
    }
  qed
    using "\<rightarrow>E" by blast
    using Comprehension_3[THEN "\<rightarrow>E"] by blast
  proof (rule "safe-ext"[axiom_inst, THEN "\<rightarrow>E", OF "&I"])
  next
      AOT_modally_strict {
        proof(safe intro!: GEN "\<equiv>I" "\<rightarrow>I" "&I")
          fix x
            by (AOT_subst_def "concept-of-G")
               (auto intro!: "&I" "cqt:2" dest: "&E" "\<beta>\<rightarrow>C")
        next
          fix x
            by (AOT_subst_def (reverse) "concept-of-G")
            by (auto intro!: "\<beta>\<leftarrow>C" 0 "cqt:2" dest: "&E")
        qed
      }
    next
        using "exist-nec"[THEN "\<rightarrow>E"] 0 by blast
    qed
  qed
qed

proof -
    using "concept-comp:1" "Concept.\<exists>E"[rotated] by meson
    by (auto intro!: "concept-of-G"[THEN "\<equiv>\<^sub>d\<^sub>fI"] "&I" "cqt:2" Concept.\<psi>)
  thus ?thesis by (rule "Concept.\<exists>I")
qed

proof -
    using "concept-comp:2" by simp
  moreover {
    AOT_modally_strict {
      fix x
        by (safe intro!: "F-imp-G"[THEN "\<equiv>\<^sub>d\<^sub>fI"] "&I" "cqt:2" RN GEN "\<rightarrow>I")
        using "\<forall>E"(2) "\<equiv>E" by blast
        using "encoders-are-abstract"[THEN "\<rightarrow>E", OF "\<exists>I"(2)] by simp
        using concepts[THEN "rule-id-df:1[zero]", OF "oa-exist:2", symmetric]
              "rule=E"[rotated]
        by fast
    }
  }
  ultimately show ?thesis
           AOT_subst_def "concept-of-G")
       (auto intro!: "\<equiv>I" "\<rightarrow>I" "&I" "cqt:2" Concept.\<psi> dest: "&E")
qed

  by (safe intro!: "A-Exists:2"[THEN "\<equiv>E"(2)] "con-exists:2"[THEN "RA[2]"])



  by (auto intro!: "rule-id-df:1"[OF "concept-G"]
                   "t=t-proper:1"[THEN "\<rightarrow>E"]
                   "con-exists:3")


proof -
    by (auto intro!: "actual-desc:2"[unvarify x, THEN "\<rightarrow>E"]
                     "rule-id-df:1"[OF "concept-G"]
                     "concept-G[den]"
                     "con-exists:3")
    by (metis "Act-Basic:2" "con-dis-i-e:2:a" "intro-elim:3:a")
    using "rule-id-df:1[zero]"[OF concepts, OF "oa-exist:2"]
          "rule=E" by fast
    using "oa-facts:8"[unvarify x, THEN "\<equiv>E"(2)] "concept-G[den]" by blast
  thus ?thesis
    using "rule-id-df:1[zero]"[OF concepts, OF "oa-exist:2", symmetric]
          "rule=E" by fast
qed

proof (rule "id-eq:3"[unvarify \<alpha> \<beta> \<gamma>, THEN "\<rightarrow>E"])
    by (auto intro!: "concept-of-G"[THEN "\<equiv>\<^sub>d\<^sub>fI"] RN GEN "\<equiv>I" "\<rightarrow>I" "&I" "cqt:2"
               dest: "&E";
        auto dest: "\<forall>E"(2) "\<equiv>E"(1,2) dest!: "&E"(2) "concept-of-G"[THEN "\<equiv>\<^sub>d\<^sub>fE"])
    by (auto intro!: "&I" "rule-id-df:1"[OF "concept-G"] "con-exists:3"
                      "equiv-desc-eq:3"[THEN "\<rightarrow>E"])
qed(auto simp: "concept-G[den]" "con-exists:3" "concept-comp:3")


proof(safe intro!: GEN "\<equiv>I" "\<rightarrow>I")
  fix F
    using "actual-desc:4"[THEN "\<rightarrow>E", OF "concept-comp:3",
                          THEN "Act-Basic:2"[THEN "\<equiv>E"(1)],
                          THEN "&E"(2)]
          "conG-strict"[symmetric] "rule=E" by fast
    using "logic-actual-nec:3"[axiom_inst, THEN "\<equiv>E"(1)] "\<forall>E"(2)
    by blast
    using "Act-Basic:5"[THEN "\<equiv>E"(1)] by blast
  {
      by(safe intro!: "en-eq:10[1]"[unvarify x\<^sub>1, THEN "\<equiv>E"(2)]
                      "concept-G[den]")
      using 0[THEN "\<equiv>E"(1)] by blast
      by (AOT_subst_def (reverse) "F-imp-G")
      using "Act-Basic:2"[THEN "\<equiv>E"(1)] "&E" by blast
      using "qml-act:2"[axiom_inst, THEN "\<equiv>E"(2)] by simp
      by (AOT_subst_def "F-imp-G"; auto intro!: "&I" "cqt:2")
  }
  {
      by (safe dest!: "F-imp-G"[THEN "\<equiv>\<^sub>d\<^sub>fE"] "&E"(2))
      using "qml-act:2"[axiom_inst, THEN "\<equiv>E"(1)] by simp
      by (auto intro!: "Act-Basic:2"[THEN "\<equiv>E"(2)] "&I" "cqt:2"
               intro: "RA[2]")
      by (AOT_subst_def "F-imp-G")
      using 0[THEN "\<equiv>E"(2)] by blast
      by(safe intro!: "en-eq:10[1]"[unvarify x\<^sub>1, THEN "\<equiv>E"(1)]
                      "concept-G[den]")
  }
qed

AOT_theorem conH_enc_ord:
proof(rule "\<rightarrow>I")
    apply (AOT_subst_def "F-imp-G")
    using 0[THEN "\<equiv>\<^sub>d\<^sub>fE"[OF "F-imp-G"]]
    by (auto intro!: "KBasic:3"[THEN "\<equiv>E"(2)] "&I" "exist-nec"[THEN "\<rightarrow>E"]
               dest: "&E" 4[THEN "\<rightarrow>E"])
  proof(rule RM; safe intro!: "\<rightarrow>I" GEN)
    AOT_modally_strict {
      fix F G
        by (safe dest!: "F-imp-G"[THEN "\<equiv>\<^sub>d\<^sub>fE"] "&E"(2))
        using "conG-lemma:1"[THEN "\<forall>E"(2), THEN "\<equiv>E"(1)] by simp
        by (safe dest!: "F-imp-G"[THEN "\<equiv>\<^sub>d\<^sub>fE"] "&E"(2))
      AOT_modally_strict {
        proof(safe intro!: GEN "\<rightarrow>I")
          fix x
            using 0 1 "\<forall>E"(2) "\<rightarrow>E" by blast+
            using 2[THEN eqE[THEN "\<equiv>\<^sub>d\<^sub>fE"], THEN "&E"(2)]
                  "\<forall>E"(2) "\<rightarrow>E" "\<equiv>E"(2) calculation by blast
        qed
      }
        by (safe intro!: "F-imp-G"[THEN "\<equiv>\<^sub>d\<^sub>fI"] "&I" "cqt:2")
        using "conG-lemma:1"[THEN "\<forall>E"(2), THEN "\<equiv>E"(2)] by simp
    } note 0 = this
    AOT_modally_strict {
      fix F G
            (auto intro!: calculation(2)
                          eqE[THEN "\<equiv>\<^sub>d\<^sub>fI"]
                          "\<equiv>I" "\<rightarrow>I" "&I" "cqt:2" Ordinary.GEN
                  dest!: eqE[THEN "\<equiv>\<^sub>d\<^sub>fE"] "&E"(2)
                  dest: "\<equiv>E"(1,2) "Ordinary.\<forall>E")
        using 0 "\<equiv>I" "\<rightarrow>I" by auto
    }
  qed
    using "\<rightarrow>E" by blast
qed

AOT_theorem concept_inclusion_denotes_1:
proof(rule "\<rightarrow>I")
  proof(rule "safe-ext"[axiom_inst, THEN "\<rightarrow>E", OF "&I"])
      by (safe intro!: conjunction_denotes[THEN "\<rightarrow>E", OF "&I"]
                       Comprehension_2'[THEN "\<rightarrow>E"]
                       conH_enc_ord[THEN "\<rightarrow>E", OF 0]) "cqt:2"
  next
      by (safe intro!: RN GEN; AOT_subst_def "con:1")
         (auto intro!: "\<equiv>I" "\<rightarrow>I" "&I" "concept-G[concept]" dest: "&E")
  qed
qed

AOT_theorem concept_inclusion_denotes_2:
proof(rule "\<rightarrow>I")
  proof(rule "safe-ext"[axiom_inst, THEN "\<rightarrow>E", OF "&I"])
      by (safe intro!: conjunction_denotes[THEN "\<rightarrow>E", OF "&I"]
                       Comprehension_1'[THEN "\<rightarrow>E"]
                       conH_enc_ord[THEN "\<rightarrow>E", OF 0]) "cqt:2"
  next
      by (safe intro!: RN GEN; AOT_subst_def "con:1")
         (auto intro!: "\<equiv>I" "\<rightarrow>I" "&I" "concept-G[concept]" dest: "&E")
  qed
qed


proof(rule "\<rightarrow>I")
  proof (rule "safe-ext"[axiom_inst, THEN "\<rightarrow>E", OF "&I"])
      using 0 ConceptOfOrdinaryProperty[THEN "\<rightarrow>E"] by blast
    proof(safe intro!: RN GEN)
      AOT_modally_strict {
        fix x
        AOT_modally_strict {
            by (simp add: "oth-class-taut:3:a")
            using "rule-id-df:1[zero]"[OF concepts, OF "oa-exist:2"]
                  "rule=E" id_sym by fast
        }
          by (AOT_subst_def "tform-of";
              AOT_subst_def "concept-of-G";
             (auto intro!: "\<equiv>I" "\<rightarrow>I" "&I" dest: "&E")
      }
    qed
  qed
qed

proof (safe intro!: "df-1-1:2"[THEN "\<equiv>\<^sub>d\<^sub>fI"] "&I" "df-1-1:1"[THEN "\<equiv>\<^sub>d\<^sub>fI"]
                    GEN "\<rightarrow>I" "df-rigid-rel:1"[THEN "\<equiv>\<^sub>d\<^sub>fI"] "=E[denotes]")
  fix x y z
    by (metis "rule=E" "&E"(1) "Conjunction Simplification"(2)
              "=E-simple:2" id_sym "\<rightarrow>E")
next
  proof(rule GEN; rule GEN)
      by (meson RN "deduction-theorem" "id-nec3:1" "\<equiv>E"(1))
  qed
    by (rule tuple_forall[THEN "\<equiv>\<^sub>d\<^sub>fI"])
    using BF[THEN "\<rightarrow>E"] by fast
qed

proof(safe intro!: "\<equiv>I" "\<rightarrow>I")
    by (metis "\<equiv>\<^sub>d\<^sub>fE" "df-1-1:5")
    using "\<exists>E"[rotated] by blast
    using "=E-simple:1"[THEN "\<equiv>E"(1)] "&E" by blast
next
    by (metis "ord=Eequiv:1"[THEN "\<rightarrow>E"])
    using "\<exists>I"(2) by fast
    by (metis "\<equiv>\<^sub>d\<^sub>fI" "df-1-1:5")
qed

AOT_theorem shared_urelement_projection_identity:
proof(rule "\<rightarrow>I")
  {
    fix z
      using assms[THEN "\<forall>E"(2)].
      using "kirchner-thm-cor:1"[THEN "\<rightarrow>E"]
      by blast
      using 1[THEN "\<forall>E"(2), THEN "\<forall>E"(2), THEN "\<rightarrow>E", OF 0] by blast
  }
    by (rule GEN)
    by (rule BF[THEN "\<rightarrow>E"])
    by (AOT_subst_def "identity:2")
       (auto intro!: "&I" "cqt:2")
qed

AOT_theorem shared_urelement_exemplification_identity:
proof(rule "\<rightarrow>I")
  {
    fix z
      using assms[THEN "\<forall>E"(2)].
      using "kirchner-thm-cor:1"[THEN "\<rightarrow>E"]
      by blast
      using 1[THEN "\<forall>E"(2), THEN "\<forall>E"(2), THEN "\<rightarrow>E", OF 0] by blast
  }
    by (rule GEN)
    by (rule BF[THEN "\<rightarrow>E"])
    by (AOT_subst_def "identity:2")
       (auto intro!: "&I" "cqt:2")
    by (safe intro!: "identity:4"[THEN "\<equiv>\<^sub>d\<^sub>fI"] "&I" "log-prop-prop:2")
qed

notepad
begin
  AOT_modally_strict {
      by (safe intro!: GEN "cqt:2" AOT_instance_of_cqt_2_intro_next)
      by (safe intro!: GEN "cqt:2" AOT_instance_of_cqt_2_intro_next)
  }
end

end
