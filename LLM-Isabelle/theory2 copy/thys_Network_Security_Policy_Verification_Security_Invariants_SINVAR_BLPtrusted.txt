theory SINVAR_BLPtrusted
imports "../TopoS_Helper"
begin


type_synonym security_level = nat

record node_config = 
    security_level::security_level
    trusted::bool

definition default_node_properties :: "node_config"
  where  "default_node_properties \<equiv> \<lparr> security_level = 0, trusted = False \<rparr>"

fun sinvar :: "'v graph \<Rightarrow> ('v \<Rightarrow> node_config) \<Rightarrow>  bool" where
  "sinvar G nP = (\<forall> (e1,e2) \<in> edges G. (if trusted (nP e2) then True else security_level (nP e1) \<le> security_level (nP e2) ))"


In this theory, we extend this template with a notion of trust by adding a Boolean flag @{const trusted} to the host attributes. 
This is a refinement to represent real-world scenarios more accurately and analogously happened to the 
original Bell LaPadula model (see publication ``Looking Back at the Bell-La Padula Model''
A trusted host can receive information of any security level and may declassify it, 
i.e. distribute the information with its own security level. 
For example, a @{term "trusted (sc::node_config) = True"} host is allowed to receive any information 
and with the @{term "0::security_level"} level, it is allowed to reveal it to anyone. 
\<close>
subsubsection \<open>ENF\<close>
