theory Kohlberg_Neyman_Karlsson
  imports Fekete
begin



lemma fekete:
  fixes u::"nat \<Rightarrow> real"
  assumes "\<And>n m. u (m+n) \<le> u m + u n"
          "bdd_below {u n/n | n. n>0}"
  shows "(\<lambda>n. u n/n) \<longlonglongrightarrow> Inf {u n/n | n. n>0}"
apply (rule subadditive_converges_bounded) unfolding subadditive_def using assms by auto


lemma high_scores:
  fixes u::"nat \<Rightarrow> real" and i::nat
  assumes "u \<longlonglongrightarrow> \<infinity>"
  shows "\<exists>n \<ge> i. \<forall>l \<le> n. u l \<le> u n"
proof -
  define M where "M = Max {u l|l. l < i}"
  define n where "n = Inf {m. u m > M}"
  have "eventually (\<lambda>m. u m > M) sequentially"
    using assms by (simp add: filterlim_at_top_dense tendsto_PInfty_eq_at_top)
  then have "{m. u m > M} \<noteq> {}" by fastforce
  then have "n \<in> {m. u m > M}" unfolding n_def using Inf_nat_def1 by metis
  then have "u n > M" by simp
  have "n \<ge> i"
  proof (rule ccontr)
    assume " \<not> i \<le> n"
    then have *: "n < i" by simp
    have "u n \<le> M" unfolding M_def apply (rule Max_ge) using * by auto
  qed
  moreover have "u l \<le> u n" if "l \<le> n" for l
  proof (cases "l = n")
    case True
    then show ?thesis by simp
  next
    case False
    then have "l \<notin> {m. u m > M}"
      unfolding n_def by (meson bdd_below_def cInf_lower not_le zero_le)
  qed
  ultimately show ?thesis by auto
qed


lemma select_unit_norm:
  fixes u::"'a::euclidean_space"
  shows "\<exists>v. norm v = 1 \<and> v \<bullet> u = - norm u"
proof (cases "u = 0")
  case True
  then show ?thesis using norm_Basis nonempty_Basis by fastforce
next
  case False
  show ?thesis
    apply (rule exI[of _ "-u/\<^sub>R norm u"])
    using False by (auto simp add: dot_square_norm power2_eq_square)
qed


locale Kohlberg_Neyman_Karlsson =
  fixes T::"'a::euclidean_space \<Rightarrow> 'a"
  assumes semicontract: "dist (T x) (T y) \<le> dist x y"
begin


lemma semicontract_Tn:
  "dist ((T^^n) x) ((T^^n) y) \<le> dist x y"
apply (induction n, auto) using semicontract order_trans by blast


definition u::"nat \<Rightarrow> real"
  where "u n = dist 0 ((T^^n) 0)"

definition A::real
  where "A = Inf {u n/n | n. n>0}"

lemma Apos: "A \<ge> 0"
unfolding A_def u_def by (rule cInf_greatest, auto)

lemma Alim:"(\<lambda>n. u n/n) \<longlonglongrightarrow> A"
unfolding A_def proof (rule fekete)
  show "bdd_below {u n / real n |n. 0 < n}"
    unfolding u_def bdd_below_def by (rule exI[of _ 0], auto)

  fix m n
  have "u (m+n) = dist 0 ((T^^(m+n)) 0)"
    unfolding u_def by simp
  also have "... \<le> dist 0 ((T^^m) 0) + dist ((T^^m) 0) ((T^^(m+n)) 0)"
    by (rule dist_triangle)
  also have "... = dist 0 ((T^^m) 0) + dist ((T^^m) 0) ((T^^m) ((T^^n) 0))"
    by (auto simp add: funpow_add)
  also have "... \<le> dist 0 ((T^^m) 0) + dist 0 ((T^^n) 0)"
    using semicontract_Tn[of m] add_mono_thms_linordered_semiring(2) by blast
  also have "... = u m + u n"
    unfolding u_def by auto
  finally show "u (m+n) \<le> u m + u n" by auto
qed


proposition half_space:
  "\<exists>v. norm v = 1 \<and> (\<forall>l. v \<bullet> (T ^^ l) 0 \<le> - A * l)"
proof -
  define eps::"nat \<Rightarrow> real" where "eps = (\<lambda>i. 1/of_nat (i+1))"
  have "eps i > 0" for i unfolding eps_def by auto
  have "eps \<longlonglongrightarrow> 0"
    unfolding eps_def using LIMSEQ_ignore_initial_segment[OF lim_1_over_n, of 1] by simp
  have vi: "\<exists>vi. norm vi = 1 \<and> (\<forall>l \<le> i. vi \<bullet> (T ^^ l) 0 \<le> (- A + eps i) * l)" for i
  proof -
    have L: "(\<lambda>n. ereal(u n - (A - eps i) * n)) \<longlonglongrightarrow> \<infinity>"
    proof (rule Lim_transform_eventually)
      have "ereal ((u n/n - A) + eps i) * ereal n = ereal(u n - (A - eps i) * n)" if "n \<ge> 1" for n
        using that by (auto simp add: divide_simps algebra_simps)
      then show "eventually (\<lambda>n. ereal ((u n/n - A) + eps i) * ereal n = ereal(u n - (A - eps i) * n)) sequentially"
        unfolding eventually_sequentially by auto

      have "(\<lambda>n. (ereal ((u n/n - A) + eps i)) * ereal n) \<longlonglongrightarrow> (0 + eps i) * \<infinity>"
        apply (intro tendsto_intros)
      then show "(\<lambda>n. ereal (u n / real n - A + eps i) * ereal (real n)) \<longlonglongrightarrow> \<infinity>" 
    qed
    obtain n where n: "n \<ge> i" "\<And>l. l \<le> n \<Longrightarrow> u l - (A - eps i) * l \<le> u n - (A - eps i) * n"
      using high_scores[OF L, of i] by auto
    obtain vi where vi: "norm vi = 1" "vi \<bullet> ((T^^n) 0) = - norm ((T^^n) 0)"
      using select_unit_norm by auto
    have "vi \<bullet> (T ^^ l) 0 \<le> (- A + eps i) * l" if "l \<le> i" for l
    proof -
      have "vi \<bullet> (T ^^ l) 0 = vi \<bullet> ((T ^^ l) 0 - (T^^n) 0) + vi \<bullet> ((T^^n) 0)"
        by (simp add: inner_diff_right)
      also have "... \<le> norm vi * norm (((T ^^ l) 0 - (T^^n) 0)) + vi \<bullet> ((T^^n) 0)"
        by (simp add: norm_cauchy_schwarz)
      also have "... = dist ((T^^l)(0)) ((T^^n) 0) - norm ((T^^n) 0)"
        using vi by (auto simp add: dist_norm)
      also have "... = dist ((T^^l)(0)) ((T^^l) ((T^^(n-l)) 0)) - norm ((T^^n) 0)"
        by (metis * funpow_add o_apply)
      also have "... \<le> dist 0 ((T^^(n-l)) 0) - norm ((T^^n) 0)"
        using semicontract_Tn[of l 0 "(T^^(n-l)) 0"] by auto
      also have "... = u (n-l) - u n"
        unfolding u_def by auto
      also have "... \<le> - (A - eps i) * l"
        using n(2)[of "n-l"] unfolding ** by (auto simp add: algebra_simps)
      finally show ?thesis by auto
    qed
    then show ?thesis using vi(1) by auto
  qed
  have "\<exists>V::(nat \<Rightarrow> 'a). \<forall>i. norm (V i) = 1 \<and> (\<forall>l\<le>i. V i \<bullet> (T ^^ l) 0 \<le> (- A + eps i) * l)"
    apply (rule choice) using vi by auto
  then obtain V::"nat \<Rightarrow> 'a" where V: "\<And>i. norm (V i) = 1" "\<And>l i. l \<le> i \<Longrightarrow> V i \<bullet> (T ^^ l) 0 \<le> (- A + eps i) * l"
    by auto

  have "compact (sphere (0::'a) 1)" by simp
  moreover have "V i \<in> sphere 0 1" for i using V(1) by auto
  ultimately have "\<exists>v \<in> sphere 0 1. \<exists>r. strict_mono r \<and> (V o r) \<longlonglongrightarrow> v"
    using compact_eq_seq_compact_metric seq_compact_def by metis
  then obtain v r where v: "v \<in> sphere 0 1" "strict_mono r" "(V o r) \<longlonglongrightarrow> v"
    by auto
  have "v \<bullet> (T ^^ l) 0 \<le> - A * l" for l
  proof -
    have *: "(\<lambda>i. (-A + eps (r i)) * l - V (r i) \<bullet> (T ^^ l) 0) \<longlonglongrightarrow> (-A + 0) * l - v \<bullet> (T ^^ l) 0"
      apply (intro tendsto_intros)
    have "eventually (\<lambda>i. (-A + eps (r i)) * l - V (r i) \<bullet> (T ^^ l) 0 \<ge> 0) sequentially"
      unfolding eventually_sequentially apply (rule exI[of _ l])
    then have " (-A + 0) * l - v \<bullet> (T ^^ l) 0 \<ge> 0"
      using LIMSEQ_le_const[OF *, of 0] unfolding eventually_sequentially by auto
    then show ?thesis by auto
  qed
qed


theorem KNK_thm:
  "convergent (\<lambda>n. ((T^^n) 0) /\<^sub>R n)"
proof -
  obtain v where v: "norm v = 1" "\<And>l. v \<bullet> (T ^^ l) 0 \<le> - A * l"
    using half_space by auto
  have "(\<lambda>n. norm(((T^^n) 0) /\<^sub>R n + A *\<^sub>R v)^2) \<longlonglongrightarrow> 0"
  proof (rule tendsto_sandwich[of "\<lambda>_. 0" _ _ "\<lambda>n. (norm((T^^n) 0) /\<^sub>R n)^2 - A^2"])
    have "norm(((T^^n) 0) /\<^sub>R n + A *\<^sub>R v)^2 \<le> (norm((T^^n) 0) /\<^sub>R n)^2 - A^2" if "n \<ge> 1" for n
    proof -
      have "norm(((T^^n) 0) /\<^sub>R n + A *\<^sub>R v)^2 = norm(((T^^n) 0) /\<^sub>R n)^2 + A * A * (norm v)^2 + 2 * A * inverse n * (v \<bullet> (T^^n) 0)"
        unfolding power2_norm_eq_inner by (auto simp add: inner_commute algebra_simps)
      also have "... \<le> norm(((T^^n) 0) /\<^sub>R n)^2 + A * A * (norm v)^2 + 2 * A * inverse n * (-A * n)"
      also have "... = norm(((T^^n) 0) /\<^sub>R n)^2 - A * A"
      finally show ?thesis by (simp add: power2_eq_square)
    qed
    then show "eventually (\<lambda>n. norm ((T ^^ n) 0 /\<^sub>R real n + A *\<^sub>R v)^2 \<le> (norm ((T ^^ n) 0) /\<^sub>R real n)\<^sup>2 - A^2) sequentially"
      unfolding eventually_sequentially by auto
    have "(\<lambda>n. (norm ((T ^^ n) 0) /\<^sub>R real n)^2) \<longlonglongrightarrow> A\<^sup>2"
      apply (intro tendsto_intros)
      using Alim unfolding u_def by (auto simp add: divide_simps)
    then show "(\<lambda>n. (norm ((T ^^ n) 0) /\<^sub>R real n)\<^sup>2 - A\<^sup>2) \<longlonglongrightarrow> 0"
      by (simp add: LIM_zero)
  qed (auto)
  then have "(\<lambda>n. sqrt((norm(((T^^n) 0) /\<^sub>R n + A *\<^sub>R v))^2)) \<longlonglongrightarrow> sqrt 0"
    by (intro tendsto_intros)
  then have "(\<lambda>n. norm((((T^^n) 0) /\<^sub>R n) - (- A *\<^sub>R v))) \<longlonglongrightarrow> 0"
    by auto
  then have "(\<lambda>n. ((T^^n) 0) /\<^sub>R n) \<longlonglongrightarrow> - A *\<^sub>R v"
    using Lim_null tendsto_norm_zero_iff by blast
  then show "convergent (\<lambda>n. ((T^^n) 0) /\<^sub>R n)"
    unfolding convergent_def by auto
qed

end




