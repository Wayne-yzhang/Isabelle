theory Examples
imports "../IMP2" "../lib/IMP2_Aux_Lemmas"
begin

lemmas nat_distribs = nat_add_distrib nat_diff_distrib Suc_diff_le nat_mult_distrib nat_div_distrib


  loop iterations that we still have to do\<close>  
  defines \<open>
    a = 1;
    c = 0;
    while (c<n) 
    {
      G_par = a;   scope { a = G_par; a=2*a; G_ret = a }; a = G_ret;
      c=c+1
    }
  \<close>
  defines \<open>
    s = 0;
    i = 0;
    while (i < n)
    {
      i = i + 1;
      s = s + i
    }
  \<close>
  defines \<open>
    a = 0;
    z = 1;
    i = 0;
    while (i < n)
    {
      a = a + z;
      z = z + 2;
      i = i + 1
    }
  \<close>
  defines \<open>
    a = 1;
    i = 1;
    while (i \<le> n)
    {
      a = a * i;
      i = i + 1
    }
  \<close>
text \<open>With precondition\<close>
  defines \<open>
    a = 0; b = 1;
    i = 0;
    while (i < n) 
    {
      c = b;
      b = a + b;
      a = c;
      i = i + 1
    }
  \<close>
text \<open>Without precondition, returning \<open>0\<close> for negative numbers\<close>
  defines \<open>
    a = 0; b = 1;
    i = 0;
    while (i < n) 
    {
      c = b;
      b = a + b;
      a = c;
      i = i + 1
    }
  \<close>
subsubsection \<open>Count down\<close>  
text \<open>Essentially the same as count up, but we (ab)use the input variable as a counter.\<close>
text \<open>The invariant is the same as for count-up. 
  Only that we have to compute the actual number
\<close>  
  defines \<open>
    a = 1;
    while (n>0) 
    {
      a=2*a;
      n=n-1
    }
  \<close>
subsubsection \<open>Approximate from Below\<close>
text \<open>Used to invert a monotonic function. 
  We count up, until we overshoot the desired result, 
  then we subtract one. 
\<close>  
text \<open>The invariant states that the \<open>r-1\<close> is not too big.
  When the loop terminates, \<open>r-1\<close> is not too big, but \<open>r\<close> is already too big,
  so \<open>r-1\<close> is the desired value (rounding down).
      @variant \<open>n + 1 - r*r\<close> 
      @invariant \<open>0\<le>r \<and> (r-1)\<^sup>2 \<le> n\<^sub>0\<close>    
  is in the interval \<open>l..<h\<close>. \<close>  
  defines \<open>
    l=0; h=n+1;
    while (l+1 < h) 
    {
      m = (l + h) / 2;
      if (m*m \<le> n) l=m else h=m
    };
    r=l
  \<close>
  text \<open>We use quick-and-dirty apply style proof to discharge the VCs\<close>
subsection \<open>Debugging\<close>
subsubsection \<open>Testing Programs\<close>
text \<open>Stepwise\<close>
text \<open>Or all steps at once\<close>
subsection \<open>More Numeric Algorithms\<close>  
subsubsection \<open>Euclid's Algorithm (with subtraction)\<close>
  defines \<open>
    while (a\<noteq>b) 
    {
      if (a<b) b = b-a
      else a = a-b
    }
  \<close>
subsubsection \<open>Euclid's Algorithm (with mod)\<close>
  defines \<open>
    while (b\<noteq>0) 
    {
      t = a;
      a = b;
      b = t mod b
    }
  \<close>
subsubsection \<open>Extended Euclid's Algorithm\<close>
    unfolding \<open>b = _\<close> by (simp add: algebra_simps)
    unfolding \<open>q = _\<close> by (simp add: algebra_simps)
    unfolding \<open>gcd a b = _\<close>[symmetric] by (simp add: gcd_red_int[symmetric])
    unfolding \<open>b = _\<close> by (simp add: algebra_simps)
    using \<open>b > 0\<close>
    by (simp add: algebra_simps \<open>q = a div b\<close>)
text \<open>The following is a direct translation of the pseudocode for the Extended Euclidean algorithm
as described by the English version of Wikipedia
\<close>
defines \<open>
    s = 0;    old_s = 1;
    t = 1;    old_t = 0;
    r = b;    old_r = a;
    while (r\<noteq>0) 
    {
      quotient = old_r / r;
      temp = old_r;
      old_r = r;
      r = temp - quotient * r;
      temp = old_s;
      old_s = s;
      s = temp - quotient * s;
      temp = old_t;
      old_t = t;
      t = temp - quotient * t
    }
  \<close>
text \<open>Non-Wikipedia version\<close>
      unfolding \<open>b = _\<close> by (simp add: algebra_simps)
      unfolding * unfolding \<open>q = _\<close> by simp
defines \<open>
    x = 0;
    y = 1;
    old_x = 1;
    old_y = 0;
    while (b\<noteq>0) 
    {
      q = a / b;
      t = a;
      a = b;
      b = t mod b;
      t = x;
      x = old_x - q * x;
      old_x = t;
      t = y;
      y = old_y - q * y;
      old_y = t
    };
    x = old_x;
    y = old_y
  \<close>
subsubsection \<open>Exponentiation by Squaring\<close>
  with \<open>0 < n\<close> show ?thesis
text \<open>A classic algorithm for computing \<open>x\<^sup>n\<close> works by repeated squaring,
  \<^item> \<open>x\<^sup>n = x * x\<^bsup>(n-1)/2\<^esup>\<^sup>2\<close> if \<open>n\<close> is odd
  \<^item> \<open>x\<^sup>n = x\<^bsup>n/2\<^esup>\<^sup>2\<close> if \<open>n\<close> is even
      @invariant \<open>
        n \<ge> 0 \<and> r * x ^ nat n = x\<^sub>0 ^ nat n\<^sub>0
      \<close>
      @variant \<open>n\<close>
      @variant \<open>m\<close>
      @invariant \<open>0\<le>m \<and> m\<le>m\<^sub>0 \<and> a = tower2' (m\<^sub>0-m)\<close>
        @variant \<open>n\<close> 
        @invariant \<open>True\<close> \<comment> \<open>This will get ugly, there is no \<open>n\<^sub>0\<close> that we could use!\<close>   
  (It happens to be exactly our \<^const>\<open>exp_count_down\<close> program.)
      @variant \<open>m\<close>
      @invariant \<open>0\<le>m \<and> m\<le>m\<^sub>0 \<and> a = tower2' (m\<^sub>0-m)\<close>
      @invariant \<open>l\<^sub>0\<le>l \<and> l\<le>h \<and> r = (\<Sum>i=l\<^sub>0..<l. a\<^sub>0 i)\<close>
      @variant \<open>h-l\<close>
      @variant \<open>h-l\<close>
      @invariant \<open>l\<^sub>0\<le>l \<and> l\<le>h \<and> x\<notin>a`{l\<^sub>0..<l}\<close>
        @variant \<open>h-l\<close>
        @invariant \<open>l\<^sub>0<l \<and> l\<le>h \<and> ran_sorted a l\<^sub>0 l\<close>
      @variant \<open>h-i\<close>
      @invariant \<open>l\<le>i \<and> i\<le>h \<and> usum = (\<Sum>j=l..<i. a j)\<close>
      @variant \<open>h-i\<close>
      @invariant \<open>l\<le>i \<and> i\<le>h 
        \<and> lsum=(\<Sum>j=l..<i. a j) 
        \<and> usum=(\<Sum>j=i..<h. a j) 
        \<and> (\<forall>j<i. \<not>is_equil a l h j)
      \<close>
      @invariant \<open>
        0 \<le> i \<and> i \<le> n 
        \<and> (\<forall>j\<in>{0..<i}. a j = a\<^sub>0 ((j-1) mod n))
        \<and> (\<forall>j\<in>{i..<n}. a j = a\<^sub>0 j)
        \<and> prev = a\<^sub>0 ((i-1) mod n)
      \<close>
      @variant \<open>n - i\<close>
      @variant \<open>h-l\<close>
      @invariant \<open>l\<^sub>0\<le>l \<and> l\<le>h \<and> h\<le>h\<^sub>0 \<and> (\<forall>i\<in>{l\<^sub>0..<l}. a i < x) \<and> (\<forall>i\<in>{h..<h\<^sub>0}. x \<le> a i)\<close>
    @invariant \<open>(\<forall>j \<in> {0..<i}. a (l + j) = b (l1 + j)) \<and> 0 \<le> i \<and> i \<le> h1 - l1\<close>
    @variant \<open>(h1 - (l1 + i))\<close>
    @invariant\<open>l\<^sub>0 \<le> l \<and> l \<le> h \<and> match \<in> {0,1} \<and>
    (if match = 1
     then lran a l (l + (h1 - l1)) = lran b l1 h1 \<and> l < h
     else (\<forall>j \<in> {l\<^sub>0..<l}. lran a j (j + (h1 - l1)) \<noteq> lran b l1 h1))\<close>
    @variant\<open>(h - l) * (1 - match)\<close>
      @invariant\<open>l\<^sub>0 \<le> l \<and> l \<le> h - (h1 - l1) \<and> match \<in> {0,1} \<and>
      (if match = 1
       then lran a l (l + (h1 - l1)) = lran b l1 h1 \<and> l < h - (h1 - l1)
       else (\<forall>j \<in> {l\<^sub>0..<l}. lran a j (j + (h1 - l1)) \<noteq> lran b l1 h1))\<close>
      @variant\<open>(h - l) * (1 - match)\<close>
      @variant \<open>i-l+1\<close>
      @invariant \<open>l-1\<le>i \<and> i<j 
        \<and> (\<forall>k\<in>{l..i}. a k = a\<^sub>0 k) 
        \<and> (\<forall>k\<in>{i+2..j}. a k > key \<and> a k = a\<^sub>0 (k-1))
        \<and> a = a\<^sub>0 on -{l..j}
        \<close>
      @variant \<open>h-j\<close>
      @invariant \<open>
        \<and> a=a\<^sub>0 on -{l..<h}
      \<close>
    @invariant \<open> 
        l\<le>i \<and> i\<le>j \<and> j\<le>h     
      \<and> mset_ran a\<^sub>0 {l\<^sub>0..<h\<^sub>0} = mset_ran a {l\<^sub>0..<h\<^sub>0}
      \<and> (\<forall>k\<in>{l..<i}. a k < p)  
      \<and> (\<forall>k\<in>{i..<j}. a k \<ge> p)  
      \<and> (\<forall>k\<in>{j..<h}. a\<^sub>0 k = a k)  
      \<and> a\<^sub>0 = a on -{l\<^sub>0..<h\<^sub>0}
    \<close>
    @variant \<open>(h-j)\<close>
      @invariant \<open> 
          l\<le>i \<and> i\<le>j \<and> j\<le>h     
        \<and> lran a l i = filter (\<lambda>x. x\<ge>0) (lran a\<^sub>0 l j)
        \<and> lran a j h = lran a\<^sub>0 j h
      \<close>
      @variant \<open>h-j\<close>
  to the list level. Moreover, the invariant of the implementation, \<open>l\<le>h\<close>, is carried 
      @variant \<open>h1 + h2 - l1 - l2\<close>
      @invariant \<open>let 
          xs=lran a1 l1 h1; ys = lran a2 l2 h2; ms = lran m 0 j;
          xs\<^sub>0 = lran a1\<^sub>0 l1\<^sub>0 h1\<^sub>0; ys\<^sub>0 = lran a2\<^sub>0 l2\<^sub>0 h2\<^sub>0
        in 
          l1\<le>h1 \<and> l2\<le>h2 \<and> 0\<le>j \<and>
          merge xs\<^sub>0 ys\<^sub>0 = ms@merge xs ys
      \<close>
  If we only insert elements in range \<open>{0..<n}\<close>, this representation
      @variant \<open>h-j\<close>
      @invariant \<open>l\<le>i \<and> i\<le>j \<and> j\<le>h 
        \<and> set (lran a l i) = set (lran a\<^sub>0 l j)
        \<and> distinct (lran a l i)
        \<and> lran a j h = lran a\<^sub>0 j h
        \<and> set_of b = set (lran a l i)
       \<close>
      @variant \<open>h-j\<close>
      @invariant \<open>l\<le>i \<and> i\<le>j \<and> j\<le>h 
        \<and> set (lran a l i) = set (lran a\<^sub>0 l j)
        \<and> distinct (lran a l i)
        \<and> lran a j h = lran a\<^sub>0 j h
        \<and> set_of b = set (lran a l i)
       \<close>
  modification to also terminate for negative \<open>y\<close>.
  Example for node \<open>i\<close>, which has successors \<open>s1... sn\<close>:
  \<^verbatim>\<open>
   Indexes: ... |  i  | i+1 | ... | i+n | ...
   Data:    ... |  n  | s1  | ... | sn  | ...
  \<close>
  @invariant \<open>stack ` {0..<i} = {x. x \<in> a ` {j\<^sub>0..<j} \<and> x \<notin> set_of visited} \<union> stack\<^sub>0 ` {0..<i\<^sub>0}
    \<and> j \<le> stop \<and> i\<^sub>0 \<le> i \<and> j\<^sub>0 \<le> j
  \<close>
  @variant \<open>(stop - j)\<close>
    @invariant \<open>0 \<le> i \<and> (s \<in> stack ` {0..<i} \<or> s \<in> set_of visited) \<and> (b = 0 \<or> b = 1) \<and> (
    if b = 0 then
      stack ` {0..<i} \<subseteq> (Edges a)\<^sup>* `` {s}
      \<and> (\<forall>v \<in> set_of visited. (Edges a) `` {v} \<subseteq> set_of visited \<union> stack ` {0..<i})
      \<and> (x \<notin> set_of visited)
    else x \<in> (Edges a)\<^sup>* `` {s})
  \<close>
    (next, i) = pop(stack, i); \<comment>\<open>Take the top most element from the stack.\<close>
    visited = bv_insert(next, visited); \<comment>\<open>Mark it as visited,\<close>
      b = 1 \<comment>\<open>If it is the target, we are done.\<close>
      \<comment>\<open>Else, put its successors on the stack if they are not yet visited.\<close>
We will thus use an \<open>Isabelle context\<close> to fix a certain finite graph and a start state:
  \<comment>\<open>\<open>i\<close> will point to the next free space in the stack (i.e. it is the size of the stack)\<close>
  \<comment>\<open>Initially, we put \<open>s\<close> on the stack.\<close>
    @invariant \<open>
    0 \<le> i \<and> (s \<in> stack ` {0..<i} \<or> s \<in> set_of visited) \<and> (b = 0 \<or> b = 1) \<and>
    set_of visited \<subseteq> (Edges edges)\<^sup>* `` {start} \<and> (
    if b = 0 then
      stack ` {0..<i} \<subseteq> (Edges a)\<^sup>* `` {s}
      \<and> (\<forall>v \<in> set_of visited. (Edges a) `` {v} \<subseteq> set_of visited \<union> stack ` {0..<i})
      \<and> (x \<notin> set_of visited)
    else x \<in> (Edges a)\<^sup>* `` {s})
    \<close>
    @relation \<open>finite_psupset ((Edges edges)\<^sup>* `` {start}) <*lex*> less_than\<close>
    @variant \<open> (set_of visited, nat i)\<close>
    \<comment>\<open>Take the top most element from the stack.\<close>
      \<comment>\<open>If it is the target, we are done.\<close>
        \<comment>\<open>Else, put its successors on the stack if they are not yet visited.\<close>
