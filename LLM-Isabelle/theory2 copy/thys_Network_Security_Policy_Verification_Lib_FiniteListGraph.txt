theory FiniteListGraph
imports 
  FiniteGraph
  "Transitive-Closure.Transitive_Closure_List_Impl"
begin


       and a list of edges @{term E}. The edges are tuples of vertices.
       Using lists instead of sets, code can be easily created.\<close>
text\<open>Correspondence the FiniteGraph\<close>
  text\<open>We say a @{typ "'v list_graph"} is valid if it fulfills the graph axioms and its lists are distinct\<close>
section\<open>FiniteListGraph operations\<close>
  text \<open>Adds a node to a graph.\<close>
  text \<open>Adds an edge to a graph.\<close>
  text \<open>Deletes a node from a graph. Also deletes all adjacent edges.\<close>
  text \<open>Deletes an edge from a graph.\<close>
text \<open>extended graph operations\<close>
   text \<open>Reflexive transitive successors of a node. Or: All reachable nodes for v including v.\<close>
   text \<open>Transitive successors of a node. Or: All reachable nodes for v.\<close>
   text \<open>The number of reachable nodes from v\<close>
subsection\<open>undirected graph simulation\<close>
  text \<open>Create undirected graph from directed graph by adding backward links\<close>
section\<open>Correctness lemmata\<close>
  \<comment> \<open>add node\<close>
  \<comment> \<open>add edge\<close>
  \<comment> \<open>delete node\<close>
  \<comment> \<open>delete edge\<close>
  \<comment> \<open>delete edges\<close>
  \<comment> \<open>helper about reflexive transitive closure impl\<close>
  \<comment> \<open>succ rtran\<close>
  \<comment> \<open>succ tran\<close>
  \<comment> \<open>num_reachable\<close>
  \<comment> \<open>num_reachable_norefl\<close>
  \<comment> \<open>backlinks, i.e. backflows in formal def\<close>
  \<comment> \<open>undirected\<close>
