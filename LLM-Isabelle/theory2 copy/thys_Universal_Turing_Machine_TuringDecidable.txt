theory TuringDecidable
  imports
    OneStrokeTM
    Turing_HaltingConditions
begin







definition turing_decidable :: "(nat list) set \<Rightarrow> bool"
  where
    "turing_decidable nls \<equiv> (\<exists>D. (\<forall>nl. 
         (nl \<in> nls \<longrightarrow> \<lbrace>(\<lambda>tap. tap = ([], <nl>))\<rbrace> D \<lbrace>(\<lambda>tap. \<exists>k l. tap = (Bk \<up> k, <1::nat> @ Bk\<up> l))\<rbrace>)
       \<and> (nl \<notin> nls \<longrightarrow> \<lbrace>(\<lambda>tap. tap = ([], <nl>))\<rbrace> D \<lbrace>(\<lambda>tap. \<exists>k l. tap = (Bk \<up> k, <0::nat> @ Bk\<up> l))\<rbrace>)
     ))"


lemma turing_decidable_unfolded_into_TMC_yields_conditions:
"turing_decidable nls \<equiv> (\<exists>D. (\<forall>nl. 
         (nl \<in> nls \<longrightarrow> TMC_yields_num_res D nl (1::nat) )
       \<and> (nl \<notin> nls \<longrightarrow> TMC_yields_num_res D nl (0::nat) )
     ))"
  unfolding TMC_yields_num_res_unfolded_into_Hoare_halt
  by (simp add: turing_decidable_def)




lemma turing_decidable_empty_set_iff:
  "turing_decidable {} = (\<exists>D. \<forall>(nl:: nat list).
        \<lbrace>(\<lambda>tap. tap = ([], <nl>))\<rbrace> D \<lbrace>(\<lambda>tap. \<exists>k l. tap = (Bk \<up> k, [Oc] @ Bk \<up>l))\<rbrace>)"
  unfolding turing_decidable_def
  by (simp add: tape_of_nat_def)

theorem turing_decidable_empty_set: "turing_decidable {}"
  by (rule turing_decidable_empty_set_iff[THEN iffD2])
     (blast intro: tm_onestroke_total_correctness)





end
