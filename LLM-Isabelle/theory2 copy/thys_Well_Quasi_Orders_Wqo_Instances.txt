theory Wqo_Instances
imports Kruskal
begin



instantiation option :: (wqo) wqo
begin
definition "x \<le> y \<longleftrightarrow> option_le (\<le>) x y"
definition "(x :: 'a option) < y \<longleftrightarrow> x \<le> y \<and> \<not> (y \<le> x)"

instance
  by (rule wqo.intro_of_class)
     (auto simp: less_eq_option_def [abs_def] less_option_def [abs_def])
end



instantiation sum :: (wqo, wqo) wqo
begin
definition "x \<le> y \<longleftrightarrow> sum_le (\<le>) (\<le>) x y"
definition "(x :: 'a + 'b) < y \<longleftrightarrow> x \<le> y \<and> \<not> (y \<le> x)"

instance
  by (rule wqo.intro_of_class)
     (auto simp: less_eq_sum_def [abs_def] less_sum_def [abs_def])
end




instantiation prod :: (wqo, wqo) wqo
begin
definition "p \<le> q \<longleftrightarrow> prod_le (\<le>) (\<le>) p q"
definition "(p :: 'a \<times> 'b) < q \<longleftrightarrow> p \<le> q \<and> \<not> (q \<le> p)"

instance
  by (rule wqo.intro_of_class)
     (auto simp: less_eq_prod_def [abs_def] less_prod_def [abs_def])
end



lists of type @{typ "'a list"} are well-quasi-ordered by the homeomorphic
embedding relation.\<close>
