theory IsPrime
  imports Clean.Clean
          Clean.Hoare_Clean
          Clean.Clean_Symbex
          "HOL-Computational_Algebra.Primes"
begin


definition "SQRT_UINT_MAX = (65536::nat)"
definition "UINT_MAX = (2^32::nat) - 1"


function_spec isPrime(n :: nat) returns bool
local_vars   i :: nat
            else skip\<^sub>S\<^sub>E 
          fi ;-
                  else skip\<^sub>S\<^sub>E 
                fi ;-
            od ;-

find_theorems name:isPrime name:core
 
lemma XXX : 
"isPrime_core n \<equiv>
     if\<^sub>C (\<lambda>\<sigma>. n < 2) then (return\<^bsub>result_value_update\<^esub> (\<lambda>\<sigma>. False)) 
                     else skip\<^sub>S\<^sub>E fi;-
     i_update :==\<^sub>L (\<lambda>\<sigma>. 2) ;-
     while\<^sub>C (\<lambda>\<sigma>. (hd\<circ>i)\<sigma> < SQRT_UINT_MAX \<and> (hd\<circ>i)\<sigma> * (hd\<circ>i)\<sigma> \<le> n) 
     do
        (if\<^sub>C (\<lambda>\<sigma>. n mod (hd \<circ> i) \<sigma> = 0) 
         then (return\<^bsub>result_value_update\<^esub> (\<lambda>\<sigma>. False)) 
         else skip\<^sub>S\<^sub>E fi ;-
        i_update :==\<^sub>L (\<lambda>\<sigma>. (hd \<circ> i) \<sigma> + 1)) 
     od ;-
     return\<^bsub>result_value_update\<^esub> (\<lambda>\<sigma>. True)"

  by(simp add: isPrime_core_def)

lemma YYY:
"isPrime n \<equiv> block\<^sub>C push_local_isPrime_state 
                    (isPrime_core n) 
                    pop_local_isPrime_state"
  by(simp add: isPrime_def)

lemma isPrime_correct : 
  "\<lbrace>\<lambda>\<sigma>.   \<triangleright> \<sigma> \<and> isPrime_pre (n)(\<sigma>) \<and> \<sigma> = \<sigma>\<^sub>p\<^sub>r\<^sub>e \<rbrace> 
     isPrime n 
   \<lbrace>\<lambda>r \<sigma>. \<triangleright> \<sigma> \<and> isPrime_post(n) (\<sigma>\<^sub>p\<^sub>r\<^sub>e)(\<sigma>)(r) \<rbrace>"
   oops



end
