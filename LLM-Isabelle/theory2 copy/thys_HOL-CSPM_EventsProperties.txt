theory EventsProperties
  imports CSPM
begin




lemma events_of_def_tickFree: 
proof -
    by (cases s rule: rev_cases) (simp_all add: append_single_T_imp_tickFree)
  thus ?thesis
    by (auto simp add: events_of_def)
       (metis butlast_snoc front_tickFree_butlast is_processT2_TR
              is_processT3_ST nonTickFree_n_frontTickFree)
qed


  by (auto simp add: events_of_def T_UU T_SKIP T_STOP)
     (meson front_tickFree_single list.set_intros(1))


  unfolding trace_refine_def events_of_def by fast

  by (intro anti_mono_events_T leF_imp_leT)

  by (intro anti_mono_events_F leFD_imp_leF)



lemmas events_fix_prefix = 

lemma events_Mndetprefix:
  unfolding events_of_def 
  apply (simp add: T_Mndetprefix T_Mprefix write0_def, safe; simp)
    apply (metis event.inject list.exhaust_sel set_ConsD)
  by (metis Nil_elem_T list.sel(1, 3) list.set_intros(1)) 
     (metis list.sel(1, 3) list.set_intros(2))


lemma events_Mprefix:
  apply (rule subset_antisym)
   apply (rule subset_trans[OF anti_mono_events_FD[OF Mprefix_refines_Mndetprefix_FD]],
          simp add: events_Mndetprefix)
  unfolding events_of_def 
  apply (simp add: T_Mprefix, safe; simp)
  by (metis Nil_elem_T list.sel(1, 3) list.set_intros(1))
     (metis list.sel(1, 3) list.set_intros(2))


  unfolding write0_def by (simp add: events_Mprefix)


  unfolding events_of_def by (simp add: T_Ndet)


  unfolding events_of_def by (simp add: T_Det)


lemma events_Renaming:
proof (split if_split, intro conjI impI)
    by (rule events_div, simp add: D_Renaming)
       (metis D_imp_front_tickFree ex_in_conv front_tickFree_charn
        front_tickFree_implies_tickFree is_processT9_S_swap nonTickFree_n_frontTickFree)
next
  proof (intro subset_antisym subsetI)
    fix e
      by (auto simp add: events_of_def T_Renaming div_free)
      by (auto simp add: EvExt_def split: event.split_asm)
      unfolding events_of_def by blast
  next
    fix e
      unfolding events_of_def by blast
      apply (simp add: events_of_def T_Renaming)
      apply (rule disjI1)
      using "*"(1) by (auto simp add: EvExt_def image_iff split: event.split)
  qed
qed
     
     


lemma events_Seq:
proof (split if_split, intro conjI impI)
    by (simp add: non_terminating_Seq)
next
  proof (intro subset_antisym subsetI)
      by (auto simp add: events_of_def T_Seq F_T D_T intro: is_processT3_ST)
  next
    fix s
    proof cases
        by (simp add: events_of_def_tickFree T_Seq)
           (metis Nil_elem_T append.right_neutral is_processT5_S7 singletonD)
    next
      from non_terminating_refine_DF that 
        by (metis subsetI trace_refine_def)
        using DF_all_tickfree_traces2 T_nonTickFree_imp_decomp is_processT3_ST by blast
        using "*"(1) T_Seq by blast
        by (simp add: events_of_def, elim bexE)
           (metis UnCI set_append)
    qed
  qed
qed



  apply (subst events_of_def, subst T_Sync, simp add: subset_iff)
proof (intro allI impI conjI, goal_cases)
  case (1 a)
  thus ?case by (metis (no_types, lifting) UN_I events_of_def ftf_Sync1 mem_Collect_eq) 
next
  case (2 a)
  thus ?case using events_div by blast
qed


lemma events_Inter:
proof (rule subset_antisym[OF events_Sync])
    apply (simp add: T_Sync)
    apply (rule disjI1)
    apply (rule_tac x = s in exI, simp)
    by (metis Sync.sym emptyLeftSelf singletonD tickFree_def)
    unfolding events_of_def_tickFree by fast
    by (metis Inter_commute Un_least)
qed



  unfolding events_of_def T_Hiding
  apply (subst that, simp)
  using F_T by auto blast

lemma not_empty_div_hide_events_Hiding:
  using D_Hiding events_div by blast




  unfolding deadlock_free_def events_of_def failure_divergence_refine_def le_ref_def 
  apply (simp add: div_free_DF, subst (asm) DF_unfold)
  apply (simp add: F_Mndetprefix write0_def F_Mprefix subset_iff)
  by (metis Nil_elem_T T_F_spec UNIV_I hd_in_set is_processT5_S7
            list.distinct(1) self_append_conv2)

  by (metis anti_mono_events_FD events_DF)


lemma nonempty_events_if_deadlock_free\<^sub>S\<^sub>K\<^sub>I\<^sub>P:
  unfolding deadlock_free\<^sub>S\<^sub>K\<^sub>I\<^sub>P_def events_of_def failure_refine_def le_ref_def 
  apply (subst (asm) DF\<^sub>S\<^sub>K\<^sub>I\<^sub>P_unfold)
  apply (simp add: F_Mndetprefix write0_def F_Mprefix subset_iff F_Ndet F_SKIP)
  by (metis Nil_elem_T T_F_spec UNIV_I hd_in_set is_processT5_S7
            list.distinct(1) self_append_conv2)

  by (metis anti_mono_events_FD events_DF\<^sub>S\<^sub>K\<^sub>I\<^sub>P)

  by (metis anti_mono_events_FD events_DF)
     (metis anti_mono_events_FD events_DF\<^sub>S\<^sub>K\<^sub>I\<^sub>P)
  
 


lemma events_MultiNdet:
     (rotate_tac, induct A rule: finite_set_induct_nonempty; simp add: events_Ndet)
  

lemma events_MultiDet:
  by (induct A rule: finite_induct) (simp_all add: events_STOP events_Det)


lemma events_MultiSeq:
  by (subst non_terminating_MultiSeq, induct L; simp add: events_SKIP events_Seq)

lemma events_MultiSeq_subset:
  using in_set_takeD by (subst events_MultiSeq) fastforce



lemma events_MultiSync:
  by (induct M rule: induct_subset_mset_empty_single; simp add: events_STOP)
     (meson Diff_subset_conv dual_order.trans events_Sync)


lemma events_MultiInter:
  by (induct M rule: induct_subset_mset_empty_single)
     (simp_all add: events_STOP events_Inter)
 



end