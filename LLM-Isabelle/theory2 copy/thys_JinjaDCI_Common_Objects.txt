    Based on the Jinja theory Common/Objects.thy by David von Oheimb
*)
(*<*)by (simp add: obj_ty_def)(*>*)
(* replaced all vname, cname in below with `char list' and \<rightharpoonup> with returned option
  so that pretty printing works  -SM *)
(* replaced addr with nat and \<rightharpoonup> with returned option so that pretty printing works  -SM *)
 (*<*)by(fastforce simp: new_Addr_def split:if_splits intro:LeastI)(*>*)
 (*<*)by(induct v) auto(*>*)
(*<*)by(cases v) auto(*>*)
 (*<*)by(cases v) auto(*>*)
 (*<*)by(cases v) auto(*>*)
 (*<*)by(induct v) (auto simp:fun_upd_apply)(*>*)
 (*<*)by(cases v) auto(*>*)
 (*<*)by (induct v) (auto simp:is_type_def)(*>*)
(*<*)by(auto simp: hext_def)(*>*)
(*<*)by(auto simp: hext_def)(*>*)
(*<*)by (rule hextI) fast(*>*)
(*<*)by (rule hextI) (auto simp:fun_upd_apply)(*>*)
(*<*)by (rule hextI) (fast dest: hext_objD)(*>*)
(*<*)by (rule hextI) (auto simp:fun_upd_apply)(*>*)
(*<*)
(*>*)
(*<*)by(case_tac i; case_tac i') simp_all(*>*)
(*<*)by(auto simp: shext_def)(*>*)
(*<*)by(auto simp: shext_def)(*>*)
(*<*)by (rule shextI) auto(*>*)
(*<*)by (rule shextI) (auto simp:fun_upd_apply)(*>*)
(*<*)by (rule shextI) (fast dest: iprog_trans shext_objD)(*>*)
(*<*)by (rule shextI) (auto simp:fun_upd_apply)(*>*)
