theory Classical_Extra
  imports Laws_Classical Misc
begin

  by (metis getter_of_register_from_getter_setter register_def setter_of_register_from_getter_setter that)

  by (metis getter_of_register_from_getter_setter register_def setter_of_register_from_getter_setter that)

  using register_def that by blast


lemma register_total:
  using assms 
  by (auto simp: register_def total_fun_def register_from_getter_setter_def option.case_eq_if)

lemma register_apply:
proof -
    using assms apply (rule register_total)
    by (auto simp: total_fun_def)
  then show ?thesis
    by (auto simp: register_apply_def dom_def total_fun_def)
qed

lemma register_empty:
  using assms unfolding preregister_def by auto

lemma compatible_setter:
proof (intro allI iffI)
  fix a b
    apply (rule_tac compatible_setter)
    unfolding compatible_def by auto
next
    by auto
    apply (subst (2) register_from_getter_setter_of_getter_setter[symmetric, of F], simp)
    apply (subst (1) register_from_getter_setter_of_getter_setter[symmetric, of F], simp)
    apply (subst (2) register_from_getter_setter_of_getter_setter[symmetric, of G], simp)
    apply (subst (1) register_from_getter_setter_of_getter_setter[symmetric, of G], simp)
    unfolding register_from_getter_setter_def valid_getter_setter_def
          apply ((metis commute option.distinct option.simps)+)[4]
      apply (smt (verit, ccfv_threshold) assms(2) commute valid_getter_setter_def valid_getter_setter_getter_setter)
     apply (smt (verit, ccfv_threshold) assms(2) commute valid_getter_setter_def valid_getter_setter_getter_setter)
    by (smt (verit, del_insts) assms(2) commute option.inject valid_getter_setter_def valid_getter_setter_getter_setter)
    unfolding compatible_def by auto
qed

lemma register_from_getter_setter_compatibleI[intro]:
  apply (subst compatible_setter)
  using assms by auto

lemma separating_update1:
  by (smt (verit) mem_Collect_eq separating_def update1_extensionality)

definition "permutation_register (p::'b\<Rightarrow>'a) = register_from_getter_setter p (\<lambda>a _. inv p a)"

lemma permutation_register_register[simp]: 
  fixes p :: "'b \<Rightarrow> 'a"
  assumes [simp]: "bij p"
  shows "register (permutation_register p)"
  apply (auto intro!: register_register_from_getter_setter simp: permutation_register_def valid_getter_setter_def bij_inv_eq_iff)
  by (meson assms bij_inv_eq_iff)

  by (smt (verit, ccfv_threshold) bij_inv_eq_iff getter_of_register_from_getter_setter permutation_register_def valid_getter_setter_def)

  by (metis bij_inv_eq_iff getter_permutation_register permutation_register_register valid_getter_setter_def valid_getter_setter_getter_setter)

  "empty_var = register_from_getter_setter (\<lambda>_. undefined) (\<lambda>_ m. m)"

  by (simp add: valid_getter_setter_def)

  using empty_var_def register_def valid_empty_var by blast

  by (rule everything_the_same)

  by (simp add: empty_var_def setter_of_register_from_getter_setter)

  apply (subst compatible_setter) by auto

  using compatible_sym empty_var_compatible by blast


record memory = 
  x :: "int*int"
  y :: nat

definition "X = register_from_getter_setter x (\<lambda>a b. b\<lparr>x:=a\<rparr>)"
definition "Y = register_from_getter_setter y (\<lambda>a b. b\<lparr>y:=a\<rparr>)"

  unfolding valid_getter_setter_def by auto

  using X_def register_def validX by blast

  unfolding valid_getter_setter_def by auto

  using Y_def register_def validY by blast

  unfolding X_def Y_def by auto

hide_const (open) x y x_update y_update X Y

end
