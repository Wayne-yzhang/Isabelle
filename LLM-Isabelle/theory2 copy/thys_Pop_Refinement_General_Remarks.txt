theory %invisible General_Remarks
imports Main
begin



















potential implementations are eliminated.
Since the final predicate of a pop-refinement derivation
must characterize a unique program,
some refinement steps must be strict---%
unless the initial predicate @{term spec\<^sub>0}
is satisfiable by a unique program,
which is unlikely.\<close>
text \<open>A strict refinement step may lead to a blind alley
which cannot lead to a final predicate that characterizes a unique program.
An example is discussed in \secref{sec:refI:stepIV}.\<close>
section \<open>Final Predicate\<close>
text \<open>\label{sec:lastpred}\<close>
text \<open>The predicate that concludes a pop-refinement derivation
must have the form @{term "spec\<^sub>n p \<equiv> p = p\<^sub>0"},
where @{term p\<^sub>0} is the representation of a program's abstract syntax
in the theorem prover,
as in \secref{sec:refI:stepVII} and \secref{sec:refII:stepVI}.
This form guarantees that
the predicate characterizes exactly one program
and that the program is explicitly determined.
@{term p\<^sub>0} witnesses the consistency of the requirements,
i.e.\ the fact that @{term spec\<^sub>0} is not always false;
inconsistent requirements cannot lead to a predicate of this form.\<close>
text \<open>A predicate of the form @{term "spec\<^sub>i \<equiv> p = p\<^sub>0 \<and> \<Phi> p"}
may not characterize a unique program:
if @{term "\<Phi> p\<^sub>0"} is false, @{term spec\<^sub>i} is always false.
To conclude the derivation, @{term "\<Phi> p\<^sub>0"} must be proved.
But it may be easier to prove the constraints expressed by @{term \<Phi>}
as @{term p\<^sub>0} is constructed in the derivation.
For example,
deriving a program from @{term spec\<^sub>0} in \secref{sec:specificationI}
based on the functional constraint and ignoring the cost constraint
would lead to a predicate @{term "spec\<^sub>i \<equiv> p = p\<^sub>0 \<and> costp p \<le> (3::nat)"},
where @{term "costp p\<^sub>0 \<le> (3::nat)"} must be proved to conclude the derivation;
instead, the derivation in \secref{sec:refinementI}
proves the cost constraint as @{term p\<^sub>0} is constructed.
Taking all constraints into account at each stage of the derivation can help
choose the next refinement step
and reduce the chance of blind alleys
(cf.\ \secref{sec:refI:stepIV}).\<close>
text \<open>The final predicate @{term spec\<^sub>n} expresses
a purely syntactic requirement,
while the initial predicate @{term spec\<^sub>0} usually includes
semantic requirements.
A pop-refinement derivation progressively turns
semantic requirements into syntactic requirements.
This may involve
rephrasing functional requirements
to use only operations supported by the target language
obtaining shallowly embedded program fragments,
and turning them into their deeply embedded counterparts
(e.g.\ \secref{sec:refI:stepV} and \secref{sec:refI:stepVI}).%
\footnote{In \secref{sec:refinementII},
program fragments are introduced directly,
without going through shallow embeddings.}\<close>
section \<open>Proof Coverage\<close>
text \<open>\label {sec:allproved}\<close>
text \<open>In a chain of predicate inclusions
as in \secref{sec:refinementI} and \secref{sec:refinementII},
the proofs checked by the theorem prover encompass the range
from the specified requirements to the implementation code.
No separate code generator is needed
to turn low-level specifications into code:
pop-refinement folds code generation into the refinement sequence,
providing fine-grained control on the implementation code.\<close>
text \<open>A purely syntactic pretty-printer is needed
to turn program abstract syntax,
as in \secref{sec:refI:stepVII} and \secref{sec:refII:stepVI},
to concrete syntax.
This pretty-printer can be eliminated
by formalizing in the theorem prover
the concrete syntax of the target language
and its relation to the abstract syntax,
and by defining the @{term spec\<^sub>i} predicates over program concrete syntax---%
thus, folding pretty-printing into the refinement sequence.\<close>
section \<open>Generality and Flexibility\<close>
text \<open>\label{sec:genflex}\<close>
text \<open>Inclusion of predicates over programs
is a general and flexible notion of refinement.
More specialized notions of refinement
can be used for any auxiliary types, functions, etc.\
out of which the @{term spec\<^sub>i} predicates may be constructed,
as long as the top-level implication


end %invisible
