theory Weak_Transition_Systems
  imports Transition_Systems
begin                

locale lts_tau = lts trans for
  


     ("_ \<Rightarrow>_  _" [70, 70, 70] 80)
where

lemma step_weak_step:
   using assms steps.refl by auto
    
     ("_ \<Rightarrow>^_  _" [70, 70, 70] 80)
where

     ("_ =\<rhd> _  _" [70, 70, 70] 80)
where

lemma weak_step_delay_implies_weak_tau:
  using assms steps.refl[of p' tau] by blast

lemma weak_step_delay_left:
  assumes
  shows
  using assms steps_left by metis

     ("_ \<Rightarrow>$ _  _" [70, 70, 70] 80)
  where

lemma step_weak_step_tau:
  using step_weak_step[OF assms] steps_one_step[OF assms]
  by blast
    
lemma step_tau_refl:
  using steps.refl[of p tau]
  by simp
    
lemma weak_step_tau_weak_step[simp]:
  using assms by auto
  
lemma weak_steps:
  assumes
  shows
proof -
  obtain pp pp' where pp:
     using assms(1) by blast
  then have cascade:
     using steps_one_step steps_spec assms(2,3) by auto
  show ?thesis using steps_concat[OF cascade(3) `p \<longmapsto>* A  pp'`] .
qed
  
lemma weak_step_impl_weak_tau:
  assumes
  shows
  using assms weak_steps[OF assms, of tau] by auto
  
lemma weak_impl_strong_step:
  assumes
  shows
proof  -
  from assms obtain pq1 pq2 where pq12:
  show ?thesis
    case True
    then show ?thesis using pq12 by blast
  next
    case False
    then show ?thesis using pq12 steps_left[of p pq1 tau] by blast
  qed
qed
  
lemma weak_step_extend:
  assumes 
  shows
  using assms steps_concat by blast
    
lemma weak_step_tau_tau:
  assumes 
  shows
  using assms by blast

lemma weak_single_step[iff]: 
   using steps.refl[of p' tau]
  by (meson steps_concat weak_step_seq.simps(1) weak_step_seq.simps(2))


lemma weak_enabled_step:
  using step_weak_step steps_concat by blast

lemma step_tau_concat: 
  assumes 
proof - 
  show ?thesis using assms steps_concat tau_tau by blast 
qed

lemma tau_step_concat: 
  assumes 
proof - 
  show ?thesis using assms steps_concat tau_tau by blast 
qed


lemma tau_word_concat: 
  assumes
  using assms
proof (cases A)
  case Nil
  thus ?thesis using Nil assms steps_concat tau_tau weak_step_seq.simps by blast
next
  case (Cons a A)
qed

lemma strong_weak_transition_system:
  assumes
  shows
proof
next
qed

lemma rev_seq_split : 
  using assms
proof (induct xs arbitrary: q)
  case Nil
  then show ?case using x_succ by auto
next
  case (Cons a xs)
  then show ?case using q'_def by auto
qed

lemma rev_seq_concat: 
  assumes 
  using assms
proof (induct as arbitrary: A q' rule: rev_induct)
  case Nil
  then show ?case by simp
next
  case (snoc x xs)
qed

lemma rev_seq_step_concat : 
  assumes 
proof - 
  thus ?thesis using rev_seq_concat assms(1) by auto
qed

lemma rev_seq_dstep_concat : 
  assumes 
proof - 
  thus ?thesis using assms rev_seq_step_concat by auto
qed

lemma word_tau_concat: 
  assumes 
proof - 
    using tau_tau weak_step_seq.simps(1) by blast 
  thus ?thesis using assms(1) rev_seq_concat
    by (metis append.right_neutral) 
qed

lemma list_rev_split : 
proof - 
  show ?thesis using assms rev_exhaust by blast 
qed

  where

lemma weak_step_over_tau : 
  assumes 
proof (induct A arbitrary: p)
  case Nil
  thus ?case by auto
next
  case (Cons a as)
  then show ?case
    case True
  next
    case False
    then show ?thesis using rec by auto
  qed
qed

lemma app_tau_taufree_list : 
  assumes 
proof (induct A)
  case Nil
  then show ?case using assms by simp
next
  case (Cons x xs)
  then show ?case using Cons.prems last by auto
qed

lemma word_steps_ignore_tau_addition:
  assumes
  shows
  using assms
proof (induct A' arbitrary: p A)
  case Nil': Nil
  then show ?case by simp
next
  case Cons': (Cons a' A' p)
    case True
    with True show ?thesis using steps.refl by fastforce
  next
    case False
    with Cons'.prems obtain A'' where
    with Cons'.prems obtain p0 where
    with p0_spec show ?thesis by auto
  qed
qed

lemma word_steps_ignore_tau_removal:
  assumes
  shows
  using assms
proof (induct A arbitrary: p)
  case Nil
  then show ?case by simp
next
  case (Cons a A)
    case True
    with Cons show ?thesis using tau_word_concat by auto
  next
    case False
  qed
qed

definition weak_tau_succs :: "'s set \<Rightarrow> 's set" where

definition dsuccs :: "'a \<Rightarrow> 's set \<Rightarrow> 's set" where

definition word_reachable_via_delay :: "'a list \<Rightarrow> 's \<Rightarrow> 's \<Rightarrow> 's \<Rightarrow> bool" where

primrec dsuccs_seq_rec :: "'a list \<Rightarrow> 's set \<Rightarrow> 's set" where

lemma in_dsuccs_implies_word_reachable:
  assumes 
  shows
  using assms
proof (induct arbitrary: q' rule: rev_induct) 
  case Nil
next
  case (snoc a as)
qed

lemma word_reachable_implies_in_dsuccs : 
  assumes 
proof (induct A arbitrary: q' rule: rev_induct)
  case Nil
  thus ?case using dsuccs_seq_rec.simps(1) by auto
next
  case (snoc a as)
qed

lemma simp_dsuccs_seq_rev: 
  assumes 
  shows 
proof - 
  show ?thesis by (simp add: assms) 
qed


lemma tau_max_deadlock:
  fixes q
  assumes
  shows
  using step_max_deadlock assms by blast

   
lemma stable_tauclosure_only_loop:
  assumes
  shows
  using assms  steps_left by blast

    
lemma ex_divergent:
  using assms 
proof (coinduct)
  case (divergent_state p)
  then show ?case using assms by auto
qed
  
lemma ex_not_divergent:
proof (cases rule:divergent_state.cases)
  case (omega p' t)
  thus ?thesis using assms(1) by auto
qed

lemma perpetual_instability_divergence:
  assumes
  shows
  using assms
proof (coinduct rule: divergent_state.coinduct)
  case (divergent_state p)
     using divergent_state step_weak_step_tau steps_concat by blast
  ultimately show ?case by blast 
qed

corollary non_divergence_implies_eventual_stability:
  assumes
  shows
  using assms perpetual_instability_divergence by blast



locale lts_tau_finite = lts_tau trans \<tau> for
assumes 
begin

  using finite_state_set
  by (simp add: finite_prod)

end

end