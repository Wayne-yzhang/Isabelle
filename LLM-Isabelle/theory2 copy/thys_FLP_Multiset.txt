theory Multiset
imports Main
begin




type_synonym 'a multiset = "'a \<Rightarrow> nat"

abbreviation mElem ::
  "'a \<Rightarrow> 'a multiset \<Rightarrow> bool" ("_ \<in># _" 60)
where 
  "mElem a ms \<equiv> 0 < ms a"


abbreviation mUnion ::
  "'a multiset \<Rightarrow> 'a multiset \<Rightarrow> 'a multiset" ("_ \<union># _" 70)
where
  "mUnion msA msB v \<equiv> msA v + msB v"

abbreviation mRm ::
  "'a multiset \<Rightarrow> 'a \<Rightarrow> 'a multiset" ("_ -# _" 65)
where
  "mRm ms rm v \<equiv> if v = rm then ms v - 1 else ms v"

abbreviation mSingleton ::
  "'a \<Rightarrow> 'a multiset"          ("{# _ }")
where
  "mSingleton a v \<equiv> if a = v then 1 else 0"

lemma AXc:
assumes 
  "c1 \<noteq> c2" and 
  "c1 \<in># X" and
  "c2 \<in># X"
shows "(A1 \<union># ((A2 \<union># (X -# c2)) -# c1)) 
      = (A2 \<union># ((A1 \<union># (X -# c1)) -# c2))"
proof- 
  have 
    "(A2 \<union># ((A1 \<union># (X -# c1)) -# c2)) 
         = (A2 \<union># (A1 \<union># ((X -# c1) -# c2)))" 
    using assms by auto
  also have
    "... = (A1 \<union># ((A2 \<union># (X -# c2)) -# c1)) "
    using assms by auto
  finally show ?thesis by auto
qed

end
