theory Generative_Probabilistic_Value imports
  Resumption
  Generat
  "HOL-Types_To_Sets.Types_To_Sets"
begin

hide_const (open) Done


context notes [[bnf_internals]] begin

codatatype (results'_gpv: 'a, outs'_gpv: 'out, 'in) gpv
  = GPV (the_gpv: "('a, 'out, 'in \<Rightarrow> ('a, 'out, 'in) gpv) generat spmf")

end

declare gpv.rel_eq [relator_eq]


type_synonym ('a, 'out, 'in) rpv = "'in \<Rightarrow> ('a, 'out, 'in) gpv"
  let
    fun tr' [in1, Const (@{type_syntax gpv}, _) $ a $ out $ in2] =
      if in1 = in2 then Syntax.const @{type_syntax rpv} $ a $ out $ in1
      else raise Match;
  in [(@{type_syntax "fun"}, K tr')]
  end
\<close>
text \<open>
  Effectively, @{typ "('a, 'out, 'in) gpv"} and @{typ "('a, 'out, 'in) rpv"} are mutually recursive.
\<close>
subsection \<open>Generalised mapper and relator\<close>
subsection \<open>Simple, derived operations\<close>
text \<open>Add @{typ unit} closure to circumvent SML value restriction\<close>
subsection \<open>Monad structure\<close>
setup \<open>Code_Simp.map_ss (Simplifier.add_cong @{thm bind_gpv_code_cong})\<close>
        from \<open>y \<in> _\<close> * ** False have "y \<in> results'_gpv x" 
        with \<open>out \<in> outs'_gpv (f y)\<close> show ?thesis by blast
    from \<open>y \<in> _\<close> show ?thesis
      thus ?case using \<open>out \<in> outs'_gpv _\<close>
setup \<open>Code_Simp.map_ss (Simplifier.add_cong @{thm bind_rpv_code_cong})\<close>
subsection \<open> Embedding @{typ "'a spmf"} as a monad \<close>
text \<open>
  The lifting package cannot handle free term variables in the merging of transfer rules,
  which acts only on the returned values.
\<close>
text \<open>
  type variables which do not appear in @{typ "'a spmf"}.
\<close>
subsection \<open> Embedding @{typ "'a option"} as a monad \<close>
text \<open>These transfer rules should follow from merging the transfer rules, but this has not yet been implemented.\<close>
subsection \<open>Embedding resumptions\<close>
subsection \<open>Assertions\<close>
subsection \<open>Order for @{typ "('a, 'out, 'in) gpv"}\<close>
using \<open>X f g\<close>
  from \<open>ord_gpv f g\<close> have "ord_spmf ?R (the_gpv f) (the_gpv g)" by cases simp
  from \<open>ord_gpv g f\<close> have "ord_spmf ?R (the_gpv g) (the_gpv f)" by cases simp
subsection \<open>Bounds on interaction\<close>
declaration \<open>Partial_Function.init "lfp_strong" @{term lfp.fixp_fun} @{term lfp.mono_body}
  @{thm lfp.fixp_rule_uc} @{thm lfp.fixp_induct_strong2_uc} NONE\<close>
        using step.prems IO \<open>n = eSuc n'\<close> by(auto 4 3 dest: *)
