theory GCD_Impl
  imports SepAuto
begin


declare [[print_trace]]


fun gcd_fun :: "nat \<Rightarrow> nat \<Rightarrow> nat" where
  "gcd_fun a b = (if b = 0 then a else gcd_fun b (a mod b))"


lemma gcd_fun_correct:
  "gcd_fun a b = gcd a b"
@proof
  @fun_induct "gcd_fun a b"
  @unfold "gcd_fun a b"
@qed

partial_function (heap) gcd_impl :: "nat \<Rightarrow> nat \<Rightarrow> nat Heap" where
  "gcd_impl a b = (
    if b = 0 then return a
    else do {
      c \<leftarrow> return (a mod b);
      r \<leftarrow> gcd_impl b c;
      return r
    })"

theorem gcd_impl_correct:
  "<emp> gcd_impl a b <\<lambda>r. \<up>(r = gcd a b)>"
@proof
  @fun_induct "gcd_fun a b"
@qed

declare [[print_trace = false]]

end
