theory Autoref_Tagging
imports "../Lib/Refine_Lib" 
begin


setup Autoref_Tag_Defs.setup


definition PROTECT where [simp, autoref_tag_defs]: "PROTECT x \<equiv> x"

typedecl annot
definition ANNOT :: "'a \<Rightarrow> annot \<Rightarrow> 'a" 
  where [simp, autoref_tag_defs]: "ANNOT x a \<equiv> x"

definition OP where [simp, autoref_tag_defs]: "OP x \<equiv> x"

definition APP (infixl "$" 900) where [simp, autoref_tag_defs]: "f$a \<equiv> f a"

abbreviation ABS :: "('a\<Rightarrow>'b)\<Rightarrow>'a\<Rightarrow>'b" (binder "\<lambda>''" 10)
  where "ABS f \<equiv> PROTECT (\<lambda>x. PROTECT (f x))"


lemma ABS_beta: "(\<lambda>'x. f x)$x \<equiv> f x" by simp
lemma ABS_eta: "\<lambda>'x. (f$x) \<equiv> f" by simp

definition "ID_FAIL x \<equiv> x"
notation (output) ID_FAIL ("FAIL *** _ ***")


consts rel_annot :: "('c\<times>'a) set \<Rightarrow> annot"
abbreviation rel_ANNOT :: "'a \<Rightarrow> ('c \<times> 'a) set \<Rightarrow> 'a" (infix ":::" 10)
  where "t:::R \<equiv> ANNOT t (rel_annot R)"

lemma rel_ANNOT_eq: "t \<equiv> t:::R" by simp

typedecl rel_name
consts ind_annot :: "rel_name \<Rightarrow> annot"
abbreviation ind_ANNOT :: "'a \<Rightarrow> rel_name \<Rightarrow> 'a" (infix "::#" 10)
  where "t::#s \<equiv> ANNOT t (ind_annot s)"








end
