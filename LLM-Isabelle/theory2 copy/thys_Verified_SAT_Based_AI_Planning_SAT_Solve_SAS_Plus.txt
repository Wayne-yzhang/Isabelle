theory SAT_Solve_SAS_Plus
  imports "SAS_Plus_STRIPS" 
    "SAT_Plan_Extensions"
begin
section "SAT-Solving of SAS+ Problems"


lemma sas_plus_problem_has_serial_solution_iff_i:
  assumes "is_valid_problem_sas_plus \<Psi>"
    and "\<A> \<Turnstile> \<Phi>\<^sub>\<forall> (\<phi> \<Psi>) t"
  shows "is_serial_solution_for_problem \<Psi> [\<phi>\<^sub>O\<inverse> \<Psi> op. op \<leftarrow> concat (\<Phi>\<inverse> (\<phi> \<Psi>) \<A> t)]"
proof -
  let ?\<Pi> = "\<phi> \<Psi>"
    and ?\<pi>' = "concat (\<Phi>\<inverse> (\<phi> \<Psi>) \<A> t)"
  let ?\<psi> = "[\<phi>\<^sub>O\<inverse> \<Psi> op. op \<leftarrow> ?\<pi>']"
  {
    have "is_valid_problem_strips ?\<Pi>" 
      using is_valid_problem_sas_plus_then_strips_transformation_too[OF assms(1)]. 
    moreover have "STRIPS_Semantics.is_serial_solution_for_problem ?\<Pi> ?\<pi>'"
      using calculation serializable_encoding_decoded_plan_is_serializable[OF 
          _ assms(2)] 
      unfolding decode_plan_def 
      by simp
    ultimately have "SAS_Plus_Semantics.is_serial_solution_for_problem \<Psi> ?\<psi>" 
      using assms(1) serial_strips_equivalent_to_serial_sas_plus 
      by blast
  }
  thus ?thesis
    using serial_strips_equivalent_to_serial_sas_plus[OF assms(1)]
    by blast
qed

lemma sas_plus_problem_has_serial_solution_iff_ii:
  assumes "is_valid_problem_sas_plus \<Psi>"
    and "is_serial_solution_for_problem \<Psi> \<psi>"
    and "h = length \<psi>"
  shows "\<exists>\<A>. (\<A> \<Turnstile> \<Phi>\<^sub>\<forall> (\<phi> \<Psi>) h)" 
proof -
  let ?\<Pi> = "\<phi> \<Psi>" 
    and ?\<pi> = "\<phi>\<^sub>P \<Psi> (embed \<psi>)"
  let ?\<A> = "valuation_for_plan ?\<Pi> ?\<pi>" 
  let ?t = "length \<psi>" 
  have nb: "length \<psi> = length ?\<pi>"
    unfolding SAS_Plus_STRIPS.sas_plus_parallel_plan_to_strips_parallel_plan_def 
      sasp_op_to_strips_def 
      sas_plus_parallel_plan_to_strips_parallel_plan_def
    by (induction \<psi>; auto)
  have "is_valid_problem_strips ?\<Pi>" 
    using assms(1) is_valid_problem_sas_plus_then_strips_transformation_too 
    by blast 
  moreover have "STRIPS_Semantics.is_parallel_solution_for_problem ?\<Pi> ?\<pi>" 
    using execute_serial_plan_sas_plus_is_execute_parallel_plan_sas_plus[OF assms(1,2)] 
      strips_equivalent_to_sas_plus[OF assms(1)] 
    by blast
  moreover {
    fix k
    assume "k < length ?\<pi>" 
    moreover obtain ops' where "ops' = ?\<pi> ! k" 
      by simp
    moreover have "ops' \<in> set ?\<pi>" 
      using calculation nth_mem 
      by blast 
    moreover have "?\<pi> = [[\<phi>\<^sub>O \<Psi> op. op \<leftarrow> ops]. ops \<leftarrow> embed \<psi>]" 
      unfolding SAS_Plus_STRIPS.sas_plus_parallel_plan_to_strips_parallel_plan_def 
        sasp_op_to_strips_def 
        sas_plus_parallel_plan_to_strips_parallel_plan_def
      ..
    moreover obtain ops 
      where "ops' = [\<phi>\<^sub>O \<Psi> op. op \<leftarrow> ops]"
        and "ops \<in> set (embed \<psi>)" 
      using calculation(3, 4) 
      by auto
    moreover have "ops \<in> { [op] | op. op \<in> set \<psi> }" 
      using calculation(6) set_of_embed_is
      by blast 
    moreover obtain op 
      where "ops = [op]" and "op \<in> set \<psi>" 
      using calculation(7)
      by blast
    ultimately have "are_all_operators_non_interfering (?\<pi> ! k)" 
      by fastforce
  }
  ultimately show ?thesis 
    using encode_problem_serializable_complete nb
    by (auto simp: assms(3))
qed

