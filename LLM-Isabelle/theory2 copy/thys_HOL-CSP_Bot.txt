theory     Bot
imports    Process
begin 

definition BOT :: "'\<alpha> process"  
where     "BOT \<equiv> Abs_process ({(s,X). front_tickFree s}, {d. front_tickFree d})"

lemma is_process_REP_Bot : 
  "is_process  ({(s,X). front_tickFree s}, {d. front_tickFree d})"
by(auto simp: tickFree_implies_front_tickFree is_process_def 
              FAILURES_def DIVERGENCES_def
        elim: Process.front_tickFree_dw_closed 
        elim: Process.front_tickFree_append)


lemma Rep_Abs_Bot :"Rep_process (Abs_process ({(s,X). front_tickFree s},{d. front_tickFree d})) = 
                    ({(s,X). front_tickFree s},{d. front_tickFree d})"
by(subst Abs_process_inverse, simp_all only: CollectI Rep_process is_process_REP_Bot)

lemma F_Bot: "\<F> BOT = {(s,X). front_tickFree s}"
by(simp add: BOT_def FAILURES_def Failures_def Rep_Abs_Bot)

lemma D_Bot: "\<D> BOT = {d. front_tickFree d}"
by(simp add: BOT_def DIVERGENCES_def D_def Rep_Abs_Bot)

lemma T_Bot: "\<T> BOT = {s. front_tickFree s}"
by(simp add: BOT_def TRACES_def Traces_def FAILURES_def Rep_Abs_Bot)


lemma BOT_is_UU[simp]: "BOT = \<bottom>"
apply(auto simp: Pcpo.eq_bottom_iff Process.le_approx_def Ra_def 
                 min_elems_Collect_ftF_is_Nil Process.Nil_elem_T 
                 F_Bot D_Bot T_Bot
           elim: D_imp_front_tickFree)
apply(metis Process.is_processT2)
done

lemma F_UU: "\<F> \<bottom> = {(s,X). front_tickFree s}"
  using F_Bot by auto

lemma D_UU: "\<D> \<bottom> = {d. front_tickFree d}"
  using D_Bot by auto

lemma T_UU: "\<T> \<bottom> = {s. front_tickFree s}"
  using T_Bot by auto


end

