theory Atoms imports Keys
begin


datatype atom =
  aAgt "agent" 
| aNon "nonce"
| aKey "key"
| aNum "nat" 




consts


definition
  keySetup :: "(key \<times> agent) set" where
  "keySetup \<equiv> {(ltK K, A) | K A. (K, A) \<in> ltkeySetup}"



definition
  corrKey :: "key set" where 
  "corrKey \<equiv> keySetup\<inverse> `` bad" 

lemma corrKey_Dom_keySetup [simp, intro]: "K \<in> corrKey \<Longrightarrow> K \<in> Domain keySetup"
by (auto simp add: corrKey_def)

lemma keySetup_noSessionKeys [simp]: "(sesK K, A) \<notin> keySetup"
by (simp add: keySetup_def)

lemma corrKey_noSessionKeys [simp]: "sesK K \<notin> corrKey"
by (auto simp add: keySetup_def corrKey_def)


end
