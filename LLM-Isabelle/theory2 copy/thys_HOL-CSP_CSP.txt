theory CSP
begin






  by (metis D_Det Un_mono divergence_refine_def)

  by (metis T_Det Un_mono trace_refine_def)

  by (simp_all add: trace_divergence_refine_def)

lemmas mono_Det_FD[simp]= mono_Det_FD[folded failure_divergence_refine_def]




  by (simp add: F_Ndet failure_refine_def order_trans) 

  by (simp add: D_Ndet divergence_refine_def order_trans) 

  by (simp add: T_Ndet trace_refine_def order_trans) 


  by (metis F_Ndet Un_mono failure_refine_def) 

  by (metis D_Ndet Un_mono divergence_refine_def)

  by (metis T_Ndet Un_mono trace_refine_def) 


  by (auto simp add: trace_divergence_refine_def)

lemmas mono_Ndet_FD[simp]= mono_Ndet_FD[folded failure_divergence_refine_def]


  by (simp_all add: trace_divergence_refine_def Ndet_commute) 
  

lemmas mono_Ndet_FD_left[simp] = mono_Ndet_FD_left[folded failure_divergence_refine_def]
   and mono_Ndet_FD_right[simp] = mono_Ndet_FD_right[folded failure_divergence_refine_def]

  by (metis Det_id failure_divergence_refine_def mono_Det_FD mono_Ndet_FD_left 
            mono_Ndet_FD_right order_refl) 


  by (simp_all add: leFD_imp_leF leFD_imp_leD leF_imp_leT leD_leT_imp_leDT) 


  apply (auto simp: failure_refine_def F_Seq append_single_T_imp_tickFree)
  using NF_ND by fastforce+

  by (auto simp: divergence_refine_def D_Seq)

  apply (auto simp: trace_refine_def T_Seq append_single_T_imp_tickFree)
  using D_T by fastforce+

  by (simp add: trace_divergence_refine_def)

  apply (auto simp: trace_divergence_refine_def divergence_refine_def trace_refine_def D_Seq T_Seq)
  by (metis (no_types, lifting) Nil_elem_T Process.F_T T_F append.right_neutral 
            is_processT5_S3 subset_eq) 


  using mono_Seq_DT_left mono_Seq_DT_right trans_DT by blast
  
lemmas mono_Seq_FD[simp]= mono_Seq_FD[folded failure_divergence_refine_def]


  by (auto simp: failure_refine_def F_Mprefix) blast+

  by (auto simp: divergence_refine_def D_Mprefix) blast+

  by (auto simp: trace_refine_def T_Mprefix)

  by (simp add: trace_divergence_refine_def)

lemmas mono_Mprefix_FD[simp] = mono_Mprefix_FD[folded failure_divergence_refine_def]

  by (auto simp add:T_Mprefix D_Mprefix trace_divergence_refine_def 
                    trace_refine_def divergence_refine_def)

  by (simp_all add: leDT_imp_leD leDT_imp_leT)



proof(subst (2) Un_commute, rule subsetI, rule UnCI, auto, goal_cases)
  case (1 b t u)
  { fix i
    proof(induct i)
      case 0
      then show ?case by (simp add: 1(4) 1(7) A)
    next
      case (Suc i)
      then show ?case 
        apply (simp add:AA a) 
    qed
  } 
    by (metis 1(1) D_T F_subset_imp_T_subset subsetD)
  with 1 show ?case by metis
next
  case (2 b u f x)
  then show ?case using F_subset_imp_T_subset by blast 
qed 

                      simp add:trace_refine_def T_Hiding, intro conjI)
proof(goal_cases)
  case 1
  then show ?case
  proof(subst Un_commute, rule_tac subsetI, rule_tac UnCI, auto, goal_cases)
    case 11:(1 t a)
      by (metis 11(1) tt append_Nil2 front_tickFree_Nil is_processT2_TR 
                nonTickFree_n_frontTickFree tick_T_F)
  qed
next
  case 2
  then show ?case
  proof(subst Un_commute, auto, goal_cases)
    case 21:(1 t u a)
      by (metis (mono_tags, lifting) old.nat.simps(6) range_eqI)
    { fix i
      proof(induct i)
        case 0
        then show ?case by (simp add: 21(4) 21(7) A)
      next
        case (Suc i)
        then show ?case 
          apply (simp add:AA 21(6)) 
      qed
    } 
    with 21 show ?case by metis
  next
    case 22:(2 b u f x)
    then show ?case by blast
  qed
qed

proof -
    apply(auto simp:trace_divergence_refine_def divergence_refine_def 
                    trace_refine_def D_Hiding T_Hiding)
    by blast+
  with leDT_imp_leT[THEN mono_Hiding_T, OF as] show ?thesis by (simp add: trace_divergence_refine_def) 
qed

lemmas mono_Hiding_FD[simp] = mono_Hiding_FD[folded failure_divergence_refine_def]



  by (simp add:trace_divergence_refine_def divergence_refine_def trace_refine_def T_Sync D_Sync) 
     blast

lemmas mono_Sync_FD[simp] = mono_Sync_FD[folded failure_divergence_refine_def]






  by (simp add: trace_divergence_refine_def)
  
lemmas mono_Mndetprefix_FD[simp] = mono_Mndetprefix_FD[folded failure_divergence_refine_def]

lemmas mono_Mndetprefix_FD_set[simp] = Mndetprefix_FD_subset[folded failure_divergence_refine_def]


lemmas Mprefix_refines_Mndetprefix_FD[simp] = 
       Mprefix_refines_Mndetprefix[folded failure_divergence_refine_def]

  by (simp_all add: leFD_imp_leF leFD_imp_leD leF_imp_leT leD_leT_imp_leDT) 





lemma mono_read_FD[simp, elim]: "(\<And>x. P x \<sqsubseteq>\<^sub>F\<^sub>D Q x) \<Longrightarrow> (c\<^bold>?x \<rightarrow> (P x)) \<sqsubseteq>\<^sub>F\<^sub>D (c\<^bold>?x \<rightarrow> (Q x))"
  by (simp add: read_def)

lemma mono_write_FD[simp, elim]: "(P \<sqsubseteq>\<^sub>F\<^sub>D Q) \<Longrightarrow>  (c\<^bold>!x \<rightarrow> P) \<sqsubseteq>\<^sub>F\<^sub>D (c\<^bold>!x \<rightarrow> Q)"
  by (simp add: write_def)

lemma mono_write0_FD[simp, elim]: "P \<sqsubseteq>\<^sub>F\<^sub>D Q \<Longrightarrow> (a \<rightarrow> P) \<sqsubseteq>\<^sub>F\<^sub>D (a \<rightarrow> Q)"
  by (simp add: write0_def)

lemma mono_read_DT[simp, elim]: "(\<And>x. P x \<sqsubseteq>\<^sub>D\<^sub>T Q x) \<Longrightarrow> (c\<^bold>?x \<rightarrow> (P x)) \<sqsubseteq>\<^sub>D\<^sub>T (c\<^bold>?x \<rightarrow> (Q x))"
  by (simp add: read_def)

lemma mono_write_DT[simp, elim]: "(P \<sqsubseteq>\<^sub>D\<^sub>T Q) \<Longrightarrow>  (c\<^bold>!x \<rightarrow> P) \<sqsubseteq>\<^sub>D\<^sub>T (c\<^bold>!x \<rightarrow> Q)"
  by (simp add: write_def)

lemma mono_write0_DT[simp, elim]: "P \<sqsubseteq>\<^sub>D\<^sub>T Q \<Longrightarrow> (a \<rightarrow> P) \<sqsubseteq>\<^sub>D\<^sub>T (a \<rightarrow> Q)"
  by (simp add: write0_def)







end