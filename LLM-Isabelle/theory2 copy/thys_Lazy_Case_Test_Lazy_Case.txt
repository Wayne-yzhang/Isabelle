theory Test_Lazy_Case
imports Lazy_Case
begin


datatype (plugins del: lazy_case) 'a tree = Node | Fork 'a "'a tree list"

context begin


lazify tree

end


datatype
  'a mlist1 = MNil1 | MCons1 'a "'a mlist2" and
  'a mlist2 = MNil2 | MCons2 'a "'a mlist1"


record meep =
  x1 :: nat
  x2 :: int


definition test where
"test x \<longleftrightarrow> (if x then True else False)"

definition test' where
"test' = case_bool True False"

definition test'' where
"test'' xs = (case xs of [] \<Rightarrow> False | _ \<Rightarrow> True)"

fun fac :: "nat \<Rightarrow> nat" where
"fac n = (if n \<le> 1 then 1 else n * fac (n - 1))"

lemma map_tree[code]:
  "map_tree f t = (case t of Node \<Rightarrow> Node | Fork x ts \<Rightarrow> Fork (f x) (map (map_tree f) ts))"
by (induction t) auto


export_code test test' test'' fac map_tree in SML





end