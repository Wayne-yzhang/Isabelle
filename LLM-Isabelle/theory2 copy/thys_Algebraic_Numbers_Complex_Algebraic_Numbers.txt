  The major algorithm in this theory is a factorization algorithm which factors a rational
  polynomial over the complex numbers. 

  For factorization of polynomials with complex algebraic coefficients, there
  is a separate AFP entry "Factor-Algebraic-Polynomial".\<close>
subsection \<open>Complex Roots\<close>
text \<open>Determine complex roots of a polynomial, 
   intended for polynomials of degree 3 or higher,
   for lower degree polynomials use @{const roots1} or @{const croots2}\<close>
  from \<open>Im x > 0\<close> have "sgn (Im x) = 1" by simp
          thus "poly ?p s = 0" by (simp add: \<open>s \<noteq> r\<close>)
        with \<open>degree p \<noteq> 1\<close> \<open>degree p \<noteq> 2\<close> \<open>\<not> (degree p \<ge> 3)\<close> have True: "degree p = 0" by auto
text \<open>It now comes the preferred function to compute complex roots of an integer polynomial.\<close>
          from \<open>degree p \<ge> 3\<close> have p: "p \<noteq> 0" by auto
text \<open>TODO: the implemention might be tuned, since the search process should be faster when
  using interval arithmetic to figure out the correct factor.
  (One might also implement the search via checking @{term "ipoly f x = 0"}, but because of complex-algebraic-number
   arithmetic, I think that search would be slower than the current one via "@{term "x \<in> set (complex_roots_of_int_poly f)"}\<close>
