theory
  Extended_Interval_Division
imports
  Interval_Division_Non_Zero
begin


instantiation "interval" :: ("{infinity, linordered_field, real_normed_algebra,linear_continuum_topology}") inverse
begin
  definition inverse_interval :: "'a interval \<Rightarrow> 'a interval"
    where "inverse_interval a = (
                                  if (\<not> 0 \<in>\<^sub>i a) then mk_interval ( 1 / (upper a), 1 / (lower a))
                                  else if lower a = 0 \<and> 0 < upper a then mk_interval (1/ upper a, \<infinity>)
                                  else if lower a < 0 \<and> 0 < upper a then mk_interval (-\<infinity>, \<infinity>)
                                  else if lower a < upper a \<and> upper a = 0 then mk_interval(-\<infinity>, 1 / lower a)
                                  else undefined 
                                )"

  definition divide_interval :: "'a interval \<Rightarrow> 'a interval \<Rightarrow> 'a interval"
    where "divide_interval a b = inverse b * a"
  instance ..
end

interpretation interval_division_inverse divide inverse
  apply(unfold_locales)
  subgoal
    by (simp add: inverse_interval_def)
  subgoal
    by(simp add: divide_interval_def)
  done

end
