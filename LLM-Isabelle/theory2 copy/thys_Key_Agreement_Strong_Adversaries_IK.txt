theory IK
imports Message_derivation 
begin


record ik_state =
  ik :: "msg set"



definition
  ik_dy :: "msg \<Rightarrow> ('a ik_state_scheme * 'a ik_state_scheme) set"
where
  "ik_dy m \<equiv> {(s, s').
    m \<in> synth (analz (ik s)) \<and>

    s' = s \<lparr>ik := ik s \<union> {m}\<rparr>
  }"

definition
  ik_trans :: "('a ik_state_scheme * 'a ik_state_scheme) set"
where
  "ik_trans \<equiv> (\<Union> m.  ik_dy m)"

lemmas ik_trans_defs = ik_trans_def ik_dy_def


lemma ik_trans_ik_increasing: "(s, s') \<in> ik_trans \<Longrightarrow> ik s \<subseteq> ik s'"
by (auto simp add: ik_trans_defs)

lemma ik_trans_synth_analz_ik_increasing: 
  "(s, s') \<in> ik_trans \<Longrightarrow> synth (analz (ik s)) \<subseteq> synth (analz (ik s'))"
by (simp only: synth_analz_mono ik_trans_ik_increasing)


end
