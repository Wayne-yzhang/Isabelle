theory StrictCombinatorialAuction
imports Complex_Main
  Partitions
  MiscTools

begin


type_synonym index = "integer"
type_synonym participant = index
type_synonym good = "integer"
type_synonym goods = "good set"
type_synonym price = real
type_synonym bids3 = "((participant \<times> goods) \<times> price) set"
type_synonym bids = "participant \<Rightarrow> goods \<Rightarrow> price"
type_synonym allocation_rel = "(goods \<times> participant) set"
type_synonym allocation = "(participant \<times> goods) set" 
type_synonym payments = "participant \<Rightarrow> price"
type_synonym bidvector = "(participant \<times> goods) \<Rightarrow> price"
abbreviation "bidvector (b::bids) == case_prod b"
abbreviation "proceeds (b::bidvector) (allo::allocation) == sum b allo"
abbreviation "winnersOfAllo (a::allocation) == Domain a"
abbreviation "allocatedGoods (allo::allocation) == \<Union> (Range allo)"

fun possible_allocations_rel 
  where "possible_allocations_rel G N = Union { injections Y N | Y . Y \<in> all_partitions G }" 


abbreviation "is_partition_of' P A == (\<Union> P = A \<and> is_non_overlapping P)"
abbreviation "all_partitions' A == {P . is_partition_of' P A}"

abbreviation "possible_allocations_rel' G N == Union{injections Y N | Y . Y \<in> all_partitions' G}"
abbreviation allAllocations where 
  "allAllocations N G == converse ` (possible_allocations_rel G N)"

fun possible_allocations_alg :: "goods \<Rightarrow> participant set \<Rightarrow> allocation_rel list"
  where "possible_allocations_alg G N = 
         concat [ injections_alg Y N . Y \<leftarrow> all_partitions_alg G ]"

abbreviation "allAllocationsAlg N G == 
              map converse (concat [(injections_alg l N) . l \<leftarrow> all_partitions_list G])"




abbreviation "winningAllocationsRel N G b == 
              argmax (sum b) (allAllocations N G)"

abbreviation "winningAllocationRel N G t b == t (winningAllocationsRel N G b)"

abbreviation "winningAllocationsAlg N G b == argmaxList (proceeds b) (allAllocationsAlg N G)"

definition "winningAllocationAlg N G t b == t (winningAllocationsAlg N G b)"


  i.e. the value reportedly generated by value maximization when solved without n's bids\<close>
