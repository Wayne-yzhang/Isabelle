theory  Floor1_infra
imports Core_init
begin

definition "print_infra_datatype_class = start_map'' O.datatype o (\<lambda>expr _ base_attr' _. map_class_gen_h''''
  (\<lambda>isub_name name _ l_attr l_inherited l_cons.
    let (l_attr, l_inherited) = base_attr' (l_attr, of_inh l_inherited)
    [ Datatype
        (isub_name datatype_ext_name)
        (  (L.rev_map (\<lambda>x. ( datatype_ext_constr_name @@ mk_constr_name name x
                         , [Raw (datatype_name @@ String.isub x)])) (of_sub l_cons))
        @@@@ [(isub_name datatype_ext_constr_name, Raw const_oid # L.maps map_ty l_inherited)])
    , Datatype
        (isub_name datatype_name)
        [ (isub_name datatype_constr_name, Raw (isub_name datatype_ext_name) # map_ty l_attr ) ] ]) expr)"

definition "print_infra_datatype_universe expr = start_map O.datatype
      (map_class (\<lambda>isub_name _ _ _ _ _. (isub_name datatype_in, [Raw (isub_name datatype_name)])) expr) ]"

definition "print_infra_type_synonym_class_higher expr = start_map O.type_synonym
  L.flatten
    (map_class
      (\<lambda>isub_name name _ _ _ _.
        [ Type_synonym' name
                       (option (option (Typ_base (isub_name datatype_name))))
      expr))"

end
