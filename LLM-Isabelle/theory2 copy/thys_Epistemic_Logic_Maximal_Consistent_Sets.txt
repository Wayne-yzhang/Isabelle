theory Maximal_Consistent_Sets imports "HOL-Cardinals.Cardinal_Order_Relation" begin

context wo_rel begin

  by (meson BNF_Least_Fixpoint.underS_Field REFL Refl_under_in in_mono under_ofilter ofilter_linord)

lemma finite_underS_bound:
  using assms
proof (induct X rule: finite_induct)
  case (insert x F)
  then show ?case
    case True
    then show ?thesis
      using insert underS_bound by fast
  next
    case False
    then show ?thesis
    using insert underS_bound by (metis TRANS insert_absorb insert_iff insert_subset under_trans)
  qed
qed simp

lemma finite_bound_under:
    using assms
proof (induct rule: finite_induct)
  case (insert x p)
    by fast
    using insert(4) by blast
    using REFL Refl_under_in by fast
    by fast
  then show ?case
    by (metis SUP_union Un_commute insert_is_Un sup.absorb_iff2 ofilter_linord under_ofilter)
qed simp

end

locale MCS_Lim_Ord =
begin




  by (simp add: WELL wo_rel.intro)

  unfolding extendL_def wo_rel.adm_woL_def[OF wo_rel_r] by blast



proof (induct n rule: wo_rel.well_order_inductZSL[OF wo_rel_r])
  case 1
  then show ?case
    unfolding extend_def wo_rel.worecZSL_zero[OF wo_rel_r adm_woL_extendL]
    by simp
next
  case (2 i)
    by (meson FieldI1 wo_rel.succ_in wo_rel_r)
  ultimately show ?case
    unfolding extend_def extendS_def
      wo_rel.worecZSL_succ[OF wo_rel_r adm_woL_extendL 2(1)] by auto
next
  case (3 i)
  then show ?case
    unfolding extend_def extendL_def
      wo_rel.worecZSL_isLim[OF wo_rel_r adm_woL_extendL 3(1-2)]
    using wo_rel_r by (metis SUP_upper2 emptyE underS_I wo_rel.zero_in_Field wo_rel.zero_smallest)
qed

  unfolding Extend_def using extend_subset by fast

proof (induct n rule: wo_rel.well_order_inductZSL[OF wo_rel_r])
  case 1
  then show ?case
    unfolding extend_def using wo_rel_r by (simp add: wo_rel.underS_zero)
next
  case (2 i)
    by (metis wo_rel.less_succ underS_E underS_I wo_rel_r)
  ultimately show ?case
    unfolding extend_def extendS_def
      wo_rel.worecZSL_succ[OF wo_rel_r adm_woL_extendL 2(1)]
    by auto
next
  case (3 i)
  then show ?case
    unfolding extend_def extendL_def
      wo_rel.worecZSL_isLim[OF wo_rel_r adm_woL_extendL 3(1-2)]
    by blast
qed

  using extend_underS wo_rel_r
  by (metis empty_iff in_Above_under set_eq_subset wo_rel.supr_greater wo_rel.supr_under underS_I
      under_Field under_empty)

lemma consistent_extend:
  using assms
proof (induct n rule: wo_rel.well_order_inductZSL[OF wo_rel_r])
  case 1
  then show ?case
    unfolding extend_def wo_rel.worecZSL_zero[OF wo_rel_r adm_woL_extendL] .
next
  case (2 i)
  then show ?case
    unfolding extend_def extendS_def
      wo_rel.worecZSL_succ[OF wo_rel_r adm_woL_extendL 2(1)]
    by auto
next
  case (3 i)
  show ?case
  proof (rule ccontr)
      unfolding extend_def extendL_def
        wo_rel.worecZSL_isLim[OF wo_rel_r adm_woL_extendL 3(1-2)]
      using inconsistent_finite by auto
      by (metis finite_subset_Union finite_subset_image)
      using S'(3) assms calculation(1) consistent_hereditary by auto
      using wo_rel.finite_underS_bound wo_rel_r ns by (meson subset_iff)
      using extend_under by fast
      using S' ns(1) by blast
    then show False
  qed
qed

lemma consistent_Extend:
  unfolding Extend_def
proof (rule ccontr)
    using inconsistent_finite by metis
    using wo_rel.finite_bound_under wo_rel_r
    by (metis SUP_le_iff assms consistent_hereditary emptyE under_empty)
    using extend_under by fast
    using assms consistent_extend by blast
  ultimately show False
qed


  unfolding Extend_def by blast

  unfolding maximal'_def
proof safe
  fix p
    unfolding Extend_def by blast
    using * consistent_hereditary by blast
    using * isLimOrd_r wo_rel.isLimOrd_aboveS wo_rel_r by fast
    using wo_rel_r by (simp add: wo_rel.succ_in_Field)
    using ** unfolding extend_def extendS_def
      wo_rel.worecZSL_succ[OF wo_rel_r adm_woL_extendL succ]
    by simp
    using Extend_bound by fast
qed

end

locale MCS =

proof
    by simp
next
    using infinite_UNIV by simp
  with card_order_infinite_isLimOrd card_of_Card_order
next
  fix S S'
    using MCS_axioms unfolding MCS_def by blast
next
  fix S S'
    using MCS_axioms unfolding MCS_def by blast
qed

context MCS begin

  by (simp add: Extend_subset')


  unfolding maximal_def maximal'_def by simp

  using maximal'_Extend maximal_maximal' by fast

end

end
