theory Injectivity_Solver
imports
  "HOL-Library.Disjoint_Sets"
  "HOL-Library.Monad_Syntax"
  "HOL-Eisbach.Eisbach"
begin




lemma inj_on_impl_disjoint_family_on_singleton:
  assumes "inj_on f A"
  shows "disjoint_family_on (\<lambda>x. {f x}) A"
using assms disjoint_family_on_def inj_on_contraD by fastforce


lemma card_bind:
  assumes "finite S"
  assumes "\<forall>X \<in> S. finite (f X)"
  assumes "disjoint_family_on f S"
  shows "card (S \<bind> f) = (\<Sum>x\<in>S. card (f x))"
proof -
  have "card (S \<bind> f) = card (\<Union>(f ` S))"
    by (simp add: bind_UNION)
  also have "card (\<Union>(f ` S)) = (\<Sum>x\<in>S. card (f x))"
    using assms unfolding disjoint_family_on_def by (simp add: card_UN_disjoint)
  finally show ?thesis .
qed

lemma card_bind_constant:
  assumes "finite S"
  assumes "\<forall>X \<in> S. finite (f X)"
  assumes "disjoint_family_on f S"
  assumes "\<And>x. x \<in> S \<Longrightarrow> card (f x) = k"
  shows "card (S \<bind> f) = card S * k"
using assms by (simp add: card_bind)

lemma card_bind_singleton:
  assumes "finite S"
  assumes "inj_on f S"
  shows "card (S \<bind> (\<lambda>x. {f x})) = card S"
using assms by (auto simp add: card_bind_constant inj_on_impl_disjoint_family_on_singleton)



lemma disjoint_family_onI:
  assumes "\<And>i j. i \<in> I \<and> j \<in> I \<Longrightarrow> i \<noteq> j \<Longrightarrow> (A i) \<inter> (A j) = {}"
  shows "disjoint_family_on A I"
using assms unfolding disjoint_family_on_def by auto

lemma disjoint_bind: "\<And>S T f g. (\<And>s t. S s \<and> T t \<Longrightarrow> f s \<inter> g t = {}) \<Longrightarrow> ({s. S s} \<bind> f) \<inter> ({t. T t} \<bind> g) = {}"
by fastforce

lemma disjoint_bind': "\<And>S T f g. (\<And>s t. s \<in> S \<and> t \<in> T \<Longrightarrow> f s \<inter> g t = {}) \<Longrightarrow> (S \<bind> f) \<inter> (T \<bind> g) = {}"
by fastforce

lemma injectivity_solver_CollectE:
  assumes "a \<in> {x. P x} \<and> a' \<in> {x. P' x}"
  assumes "(P a \<and> P' a') \<Longrightarrow> W"
  shows "W"
using assms by auto

lemma injectivity_solver_prep_assms_Collect:
  assumes "x \<in> {x. P x}"
  shows "P x \<and> P x"
using assms by simp

lemma injectivity_solver_prep_assms: "x \<in> A \<Longrightarrow> x \<in> A \<and> x \<in> A"
  by simp

lemma disjoint_terminal_singleton: "\<And>s t X Y. s \<noteq> t \<Longrightarrow> (X = Y \<Longrightarrow> s = t) \<Longrightarrow> {X} \<inter> {Y} = {}"
by auto

lemma disjoint_terminal_Collect:
  assumes "s \<noteq> t"
  assumes "\<And>x x'. S x \<and> T x' \<Longrightarrow> x = x' \<Longrightarrow> s = t"
  shows "{x. S x} \<inter> {x. T x} = {}"
using assms by auto

lemma disjoint_terminal:
  "s \<noteq> t \<Longrightarrow> (\<And>x x'. x \<in> S \<and> x' \<in> T \<Longrightarrow> x = x' \<Longrightarrow> s = t) \<Longrightarrow> S \<inter> T = {}"
by blast

lemma elim_singleton:
  assumes "x \<in> {s} \<and> x' \<in> {t}"
  obtains "x = s \<and> x' = t"
using assms by blast

method injectivity_solver uses rule =
  insert method_facts,

end
