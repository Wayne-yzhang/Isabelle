theory MeasrDroid
imports "../../TopoS_Impl"
begin




definition policy :: "string list_graph" where
                         ''Sensors_A'',
                         ''Encryption_A'',
                         ''Client_A_out'',

                         ''Sensors_B'',
                         ''Encryption_B'',
                         ''Client_B_out'',

                         ''Sensors_C'',
                         ''Encryption_C'',
                         ''Client_C_out'',

                         ''UploadDroid'',

                         ''C3PO_in'',
                         ''C3PO_Dec_A'',
                         ''C3PO_Dec_B'',
                         ''C3PO_Dec_C'',
                         ''C3PO_Storage'',

                         ''Adversary''],
              edgesL = [
              (''Sensors_A'',    ''Encryption_A''),
              (''Encryption_A'', ''Client_A_out''),
              (''Client_A_out'', ''UploadDroid''),

              (''Sensors_B'',    ''Encryption_B''),
              (''Encryption_B'', ''Client_B_out''),
              (''Client_B_out'', ''UploadDroid''),

              (''Sensors_C'',    ''Encryption_C''),
              (''Encryption_C'', ''Client_C_out''),
              (''Client_C_out'', ''UploadDroid''),

              (''C3PO_in'', ''UploadDroid''),

              (''C3PO_in'', ''C3PO_Dec_A''),
              (''C3PO_in'', ''C3PO_Dec_B''),
              (''C3PO_in'', ''C3PO_Dec_C''),

              (''C3PO_Dec_A'', ''C3PO_Storage''),
              (''C3PO_Dec_B'', ''C3PO_Storage''),
              (''C3PO_Dec_C'', ''C3PO_Storage'')

              ] \<rparr>"



context begin
  definition "taint_labels \<equiv> [
                           ''Sensors_A'' \<mapsto> TaintsUntaints {''A''} {},
                           ''Sensors_B'' \<mapsto> TaintsUntaints {''B''} {},
                           ''Sensors_C'' \<mapsto> TaintsUntaints {''C''} {},

                           ''Encryption_A'' \<mapsto> TaintsUntaints {} {''A''} ,
                           ''Encryption_B'' \<mapsto> TaintsUntaints {} {''B''} ,
                           ''Encryption_C'' \<mapsto> TaintsUntaints {} {''C''} ,

                           ''C3PO_Dec_A'' \<mapsto> TaintsUntaints {''A''} {},
                           ''C3PO_Dec_B'' \<mapsto> TaintsUntaints {''B''} {},
                           ''C3PO_Dec_C'' \<mapsto> TaintsUntaints {''C''} {} ,

                           ''C3PO_Storage'' \<mapsto> TaintsUntaints {''A'',''B'',''C''} {}

                           ]"
  private lemma "dom (taint_labels) \<subseteq> set (nodesL policy)" by(simp add: taint_labels_def policy_def)
  definition "Tainting_m \<equiv> new_configured_list_SecurityInvariant SINVAR_LIB_TaintingTrusted \<lparr>
        node_properties = taint_labels \<rparr> ''taint labels''"


  private definition mk_Enc_Dec_pair
    :: "string set \<Rightarrow> (SINVAR_TaintingTrusted.taints \<times> SINVAR_TaintingTrusted.taints)"
  where
  "mk_Enc_Dec_pair taints_to_be_encrypted \<equiv> (TaintsUntaints {} taints_to_be_encrypted,
                                             TaintsUntaints taints_to_be_encrypted {})"

  lemma "taint_labels = (let (Enc_A, Dec_A) = mk_Enc_Dec_pair {''A''};
                             (Enc_B, Dec_B) = mk_Enc_Dec_pair {''B''};
                             (Enc_C, Dec_C) = mk_Enc_Dec_pair {''C''}
                       in [
                           ''Sensors_A'' \<mapsto> TaintsUntaints {''A''} {},
                           ''Sensors_B'' \<mapsto> TaintsUntaints {''B''} {},
                           ''Sensors_C'' \<mapsto> TaintsUntaints {''C''} {},

                           ''Encryption_A'' \<mapsto> Enc_A,
                           ''Encryption_B'' \<mapsto> Enc_B,
                           ''Encryption_C'' \<mapsto> Enc_C,

                           ''C3PO_Dec_A'' \<mapsto> Dec_A,
                           ''C3PO_Dec_B'' \<mapsto> Dec_B,
                           ''C3PO_Dec_C'' \<mapsto> Dec_C,

                           ''C3PO_Storage'' \<mapsto> TaintsUntaints {''A'',''B'',''C''} {}
                           ])"
    by(simp add: taint_labels_def mk_Enc_Dec_pair_def)
end
lemma "wf_list_graph policy" by eval



context begin
  private definition "smartphone_system_A \<equiv>
                [(''Client_A_out'' ,  SystemBoundaryOutput),
                 (''Sensors_A'' ,  SystemComponent),
                 (''Encryption_A'' ,  SystemComponent)
                 ]"
  private lemma "dom (map_of smartphone_system_A) \<subseteq> set (nodesL policy)"
    by(simp add: smartphone_system_A_def policy_def)
  definition "SystemA_m \<equiv> new_meta_system_boundary smartphone_system_A ''smartphone A''"
end

context begin
  private definition "smartphone_system_B \<equiv>
                [(''Client_B_out'' ,  SystemBoundaryOutput),
                 (''Sensors_B'' ,  SystemComponent),
                 (''Encryption_B'' ,  SystemComponent)
                 ]"
  private lemma "dom(map_of smartphone_system_B) \<subseteq> set (nodesL policy)"
    by(simp add: smartphone_system_B_def policy_def)
  definition "SystemB_m \<equiv> new_meta_system_boundary smartphone_system_B ''smartphone B''"
end

context begin
  private definition "smartphone_system_C \<equiv>
                [(''Client_C_out'' ,  SystemBoundaryOutput),
                 (''Sensors_C'' ,  SystemComponent),
                 (''Encryption_C'' ,  SystemComponent)
                 ]"
  private lemma "dom(map_of smartphone_system_C) \<subseteq> set (nodesL policy)"
    by(simp add: smartphone_system_C_def policy_def)
  definition "SystemC_m \<equiv> new_meta_system_boundary smartphone_system_C ''smartphone C''"
end

context begin
  private definition "system_C3PO \<equiv>
                [(''C3PO_in'' ,  SystemBoundaryOutput),
                 (''C3PO_Dec_A'' ,  SystemComponent),
                 (''C3PO_Dec_C'' ,  SystemComponent),
                 (''C3PO_Dec_B'' ,  SystemComponent),
                 (''C3PO_Storage'' ,  SystemComponent)
                 ]"
  private lemma "dom(map_of system_C3PO) \<subseteq> set (nodesL policy)"
    by(simp add: system_C3PO_def policy_def)
  definition "SystemC3PO_m \<equiv> new_meta_system_boundary system_C3PO ''C3PO''"
end

context begin
  private definition "system_UploadDroid \<equiv>
                [(''UploadDroid'',  SystemBoundaryInputOutput)
                 ]"
  private lemma "dom(map_of system_UploadDroid) \<subseteq> set (nodesL policy)"
    by(simp add: system_UploadDroid_def policy_def)
  definition "SystemUploadDroid_m \<equiv> new_meta_system_boundary system_UploadDroid ''UploadDroid''"
end

definition "invariants \<equiv> [Tainting_m] @ SystemA_m @ SystemB_m @ SystemC_m @ SystemC3PO_m @ SystemUploadDroid_m"

lemma "all_security_requirements_fulfilled invariants policy" by eval


value[code] "implc_get_offending_flows invariants (policy\<lparr> edgesL := edgesL policy\<rparr>)"


definition make_policy :: "('a SecurityInvariant) list \<Rightarrow> 'a list \<Rightarrow> 'a list_graph" where
  "make_policy sinvars Vs \<equiv> generate_valid_topology sinvars \<lparr>nodesL = Vs, edgesL = List.product Vs Vs \<rparr>"


value[code] "make_policy invariants (nodesL policy)"

lemma "set (edgesL policy) \<subseteq> set (edgesL (make_policy invariants (nodesL policy)))" by eval

lemma "set [e \<leftarrow> edgesL (make_policy invariants (nodesL policy)). e \<notin> set (edgesL policy)] =
 set [(v,v). v \<leftarrow> (nodesL policy)] \<union>
 {(''Encryption_A'', ''Sensors_A''), (''Client_A_out'', ''Sensors_A''), (''Client_A_out'', ''Encryption_A'')} \<union>

 {(''Encryption_B'', ''Sensors_B''), (''Client_B_out'', ''Sensors_B''), (''Client_B_out'', ''Encryption_B'')} \<union>

 {(''Encryption_C'', ''Sensors_C''), (''Client_C_out'', ''Sensors_C''),  (''Client_C_out'', ''Encryption_C'')} \<union>
 
 {(''Client_C_out'', ''Adversary''),
  (''Client_B_out'', ''Adversary''),
  (''Client_A_out'', ''Adversary'')} \<union>

 {(''C3PO_in'', ''Adversary'')} \<union>

 {(''Adversary'', ''UploadDroid'')} \<union>

 {(''UploadDroid'', ''Adversary'')} \<union>

 {(''C3PO_in'', ''C3PO_Storage'')}" by eval











definition "stateful_policy = generate_valid_stateful_policy_IFSACS policy invariants"


lemma "stateful_policy =
\<lparr>hostsL =
    [''Sensors_A'', ''Encryption_A'', ''Client_A_out'', ''Sensors_B'', ''Encryption_B'', ''Client_B_out'', ''Sensors_C'',
     ''Encryption_C'', ''Client_C_out'', ''UploadDroid'', ''C3PO_in'', ''C3PO_Dec_A'', ''C3PO_Dec_B'', ''C3PO_Dec_C'',
     ''C3PO_Storage'', ''Adversary''],
    flows_fixL =
      [(''Sensors_A'', ''Encryption_A''), (''Encryption_A'', ''Client_A_out''), (''Client_A_out'', ''UploadDroid''),
       (''Sensors_B'', ''Encryption_B''), (''Encryption_B'', ''Client_B_out''), (''Client_B_out'', ''UploadDroid''),
       (''Sensors_C'', ''Encryption_C''), (''Encryption_C'', ''Client_C_out''), (''Client_C_out'', ''UploadDroid''),
       (''C3PO_in'', ''UploadDroid''), (''C3PO_in'', ''C3PO_Dec_A''), (''C3PO_in'', ''C3PO_Dec_B''),
       (''C3PO_in'', ''C3PO_Dec_C''), (''C3PO_Dec_A'', ''C3PO_Storage''), (''C3PO_Dec_B'', ''C3PO_Storage''),
       (''C3PO_Dec_C'', ''C3PO_Storage'')],
    flows_stateL =
      [(''Sensors_A'', ''Encryption_A''), (''Encryption_A'', ''Client_A_out''), (''Client_A_out'', ''UploadDroid''),
       (''Sensors_B'', ''Encryption_B''), (''Encryption_B'', ''Client_B_out''), (''Client_B_out'', ''UploadDroid''),
       (''Sensors_C'', ''Encryption_C''), (''Encryption_C'', ''Client_C_out''), (''Client_C_out'', ''UploadDroid''),
       (''C3PO_in'', ''UploadDroid'')]\<rparr>"
by eval




end
