theory ReadShow
  imports 
    Solidity_Symbex 
begin 



definition 
definition
definition 

declare Read\<^sub>b\<^sub>o\<^sub>o\<^sub>l_def [solidity_symbex]
        Show\<^sub>b\<^sub>o\<^sub>o\<^sub>l_def [solidity_symbex]

  using STR_is_bool_def by fastforce

  by(auto simp: STR_is_bool_def Read\<^sub>b\<^sub>o\<^sub>o\<^sub>l_def Show\<^sub>b\<^sub>o\<^sub>o\<^sub>l_def)

  by(auto simp: Read\<^sub>b\<^sub>o\<^sub>o\<^sub>l_def Show\<^sub>b\<^sub>o\<^sub>o\<^sub>l_def)

definition 

declare ReadL\<^sub>b\<^sub>o\<^sub>o\<^sub>l_def [solidity_symbex]
        ShowL\<^sub>b\<^sub>o\<^sub>o\<^sub>l_def [solidity_symbex]


  using strL_is_bool'_def by fastforce

  by(auto simp: strL_is_bool'_def ReadL\<^sub>b\<^sub>o\<^sub>o\<^sub>l_def ShowL\<^sub>b\<^sub>o\<^sub>o\<^sub>l_def)

  by(auto simp: ReadL\<^sub>b\<^sub>o\<^sub>o\<^sub>l_def ShowL\<^sub>b\<^sub>o\<^sub>o\<^sub>l_def)

lemma true_neq_false[simp]: "ShowL\<^sub>b\<^sub>o\<^sub>o\<^sub>l True \<noteq> ShowL\<^sub>b\<^sub>o\<^sub>o\<^sub>l False"
  by (metis Read_Show_bool'_id)



declare nat_of_digit_def [solidity_symbex]





declare digit_of_nat_def [solidity_symbex]

lemma nat_of_digit_digit_of_nat_id: 
  by(simp add:nat_of_digit_def digit_of_nat_def)

lemma img_digit_of_nat: 
  by(simp add:nat_of_digit_def digit_of_nat_def)

lemma digit_of_nat_nat_of_digit_id: 
  by(code_simp, auto) 

definition 

declare nat_implode_def [solidity_symbex]


definition 

declare nat_explode_def [solidity_symbex]

  by (smt (z3) list.simps(3) nat_explode'.simps) 

  using nat_explode'_not_empty nat_explode_def by auto 


  case 0
  then show ?case by simp
next
  case (Suc n)
    case True
    then show ?thesis by simp 
  next
    case False
    then show ?thesis 
      by simp
  qed
qed

  by simp

lemma unroll_nat_explode': 
  by simp

  case True
  then show ?thesis by simp
next
  case False
  then show ?thesis 
  case (1 n) note * = this
  then show ?case 
    using div_ten_less apply(simp (no_asm))  
    using unroll_nat_explode'[of n] * 
    by (smt (z3) list.simps(8) list.simps(9) mod_div_trivial mod_eq_self_iff_div_eq_0 
                 nat_explode'.simps zero_less_numeral)
  qed
qed

lemma nat_explode'_digits:
proof
  fix d
    by (simp only: nat_explode_mod_10_ident)
    by auto
qed

lemma nat_explode_digits:
  using nat_explode'_digits [of n] by (simp only: nat_explode_def set_rev)



lemma nat_implode_append: 
  by(simp add:nat_implode_def)

  case Nil
  then show ?case by simp
next
  case (Cons a x) note * = this
  then show ?case apply(simp only:enumerate_simps)
    
    apply(simp)
    using *
    by (metis apfst_conv cond_case_prod_eta enumerate_Suc_eq)
qed

lemma mult_assoc_aux1: 
  by(auto simp:o_def)

lemma fold_map_transfer: 
  case Nil
  then show ?case by(simp)
next
  case (Cons a l)
  then show ?case  by(simp)
qed 

  by(auto)

  case True note * = this
  then show ?thesis 
    by (simp add: nat_explode_def nat_implode_def) 
next
  case False
  then show ?thesis 
    case (1 n) note * = this
    then  have 
      case True 
      then show ?thesis by(simp add: nat_explode_def nat_implode_def)
    next
      case False
      then show ?thesis 
      by(simp)      
  qed
    then show ?case  
      case True
      then show ?thesis  by(simp add: nat_explode_def nat_implode_def)
    next 
      case False note *** = this
      then show ?thesis 
        apply(simp (no_asm)  add:nat_explode_def del:rev_rev_ident)
        apply(simp only: bool.case(2))
        apply(simp del:nat_explode'.simps rev_rev_ident)
        apply(fold nat_explode_def)
        apply(simp only:nat_implode_append)
        apply(simp add:enumerate_suc)
        apply(simp only:mult_assoc_aux1) 
        using mult_assoc_aux2 apply(simp)
        apply(simp) apply(fold nat_implode_def) using ** 
        by simp
      qed
  qed
qed

definition 

definition 
  Show\<^sub>n\<^sub>a\<^sub>t::"nat \<Rightarrow> string" where

declare Read\<^sub>n\<^sub>a\<^sub>t_def [solidity_symbex]
        Show\<^sub>n\<^sub>a\<^sub>t_def [solidity_symbex]

definition 


lemma Show_nat_not_neg: 
  unfolding Show\<^sub>n\<^sub>a\<^sub>t_def
  using  nat_explode_digits[of n]  img_digit_of_nat imageE image_set subsetI
  by (smt (verit) imageE image_set subsetI)

  by (simp add: Show\<^sub>n\<^sub>a\<^sub>t_def nat_explode_not_empty)

  by auto

  by auto

  by(simp add:STR_is_nat_def)

  using  nat_of_digit_digit_of_nat_id 
  by (simp add: map_idI)

  apply(unfold Read\<^sub>n\<^sub>a\<^sub>t_def Show\<^sub>n\<^sub>a\<^sub>t_def)
  using bar' nat_of_digit_digit_of_nat_id nat_explode_digits
  using nat_implode_explode_id 
  by presburger

definition 

definition 

declare ReadL\<^sub>n\<^sub>a\<^sub>t_def [solidity_symbex]
        ShowL\<^sub>n\<^sub>a\<^sub>t_def [solidity_symbex]


definition 


  by(simp add:strL_is_nat'_def)

lemma digits_are_ascii: 
  by auto

  using Show_nat_not_neg digits_are_ascii
  by (meson map_idI subsetD)


  apply(unfold ReadL\<^sub>n\<^sub>a\<^sub>t_def ShowL\<^sub>n\<^sub>a\<^sub>t_def, simp)
  by (simp add: Show\<^sub>n\<^sub>a\<^sub>t_ascii  Read_Show_nat_id)


definition 

definition 

definition 


declare Read\<^sub>i\<^sub>n\<^sub>t_def [solidity_symbex]
        Show\<^sub>i\<^sub>n\<^sub>t_def [solidity_symbex]



  by(simp add:STR_is_int_def)
                          
  apply(code_simp)
  apply(auto simp:Show_nat_not_neg Read_Show_nat_id)[1]
  using Show_nat_not_neg''
  by blast 

  by(simp add:STR_is_int_def Read_Show_id)

definition 

definition 

definition 

declare ReadL\<^sub>i\<^sub>n\<^sub>t_def [solidity_symbex]
        ShowL\<^sub>i\<^sub>n\<^sub>t_def [solidity_symbex]



  by(simp add:strL_is_int'_def)

  case True
  then show ?thesis using ShowL\<^sub>i\<^sub>n\<^sub>t_def ReadL\<^sub>i\<^sub>n\<^sub>t_def Show\<^sub>i\<^sub>n\<^sub>t_def Show\<^sub>n\<^sub>a\<^sub>t_ascii 
    by (metis (no_types, lifting) Read_Show_id String.ascii_of_Char comp_def implode.rep_eq list.simps(9)) 
next
  case False
  then show ?thesis using ShowL\<^sub>i\<^sub>n\<^sub>t_def ReadL\<^sub>i\<^sub>n\<^sub>t_def Show\<^sub>i\<^sub>n\<^sub>t_def Show\<^sub>n\<^sub>a\<^sub>t_ascii 
    by (metis Read_Show_id String.explode_implode_eq comp_apply)
qed 

  by(simp add:strL_is_int'_def Read_ShowL_id)

lemma String_Cancel: "a + (c::String.literal) = b + c \<Longrightarrow> a = b"
using String.plus_literal.rep_eq
by (metis append_same_eq literal.explode_inject)

end
                                            
