theory Implem_symmetric
imports Implem
begin


fun implem_sym :: "chan \<Rightarrow> msg" where
  "implem_sym (Insec A B M) = \<langle>InsecTag, Agent A, Agent B, M\<rangle>"
 |"implem_sym (Confid A B M) = Enc \<langle>ConfidTag, M\<rangle> (shrK A B)"
 |"implem_sym (Auth A B M) = \<langle>M, hmac \<langle>AuthTag, M\<rangle> (shrK A B)\<rangle>"
 |"implem_sym (Secure A B M) = Enc \<langle>SecureTag, M\<rangle> (shrK A B)"


interpretation sym: basic_implem implem_sym
done



\<close>
text \<open>These auxiliary definitions are overapproximations.\<close>
subsection \<open>Lemmas to pull implementation sets out of @{term analz}\<close>
text \<open>
All these proofs are similar:
\begin{enumerate}
\item prove the lemma for the @{term "implSet_aux"} and with the set added outside of  
  @{term analz} given explicitly,
\item prove the lemma for the @{term "implSet_aux"} but with payload, and
\item prove the lemma for the @{term "implSet"}.
\end{enumerate}
There  are two cases for the confidential and secure messages:
the general case (the payloads stay in @{term  analz}) and the case where the key is unknown
(the messages cannot be opened and are completely removed from the @{term analz}).
\<close>
subsubsection \<open>Pull @{term implInsecSet} out of @{term analz}\<close>
subsection \<open>Pull @{term implConfidSet} out of @{term analz}\<close>
text \<open>Pull @{term implConfidSet} out of @{term analz}, 2nd case where the agents are honest.\<close>
subsection \<open>Pull @{term implSecureSet} out of @{term analz}\<close>
text \<open>
Pull @{term implSecureSet} out of @{term analz}, 2nd case, where the agents are honest. 
\<close>
subsection \<open>Pull @{term implAuthSet} out of @{term analz}\<close>
subsection \<open>Locale interpretations\<close>
      using parts_singleton [OF \<open>Enc X Y \<in> parts I\<close>] \<open>I \<subseteq> sym.valid\<close>
text \<open>
Third step: @{locale "valid_implem"}.
The lemmas giving conditions on $M$, $A$ and $B$ for 
@{prop "implXXX A B M \<in> synth (analz Z)"}.
\<close>
\<comment> \<open>1 subgoal\<close>
        using parts_singleton [OF \<open>hmac \<langle>AuthTag, M\<rangle> (shrK A B) \<in> parts H\<close>] by blast
