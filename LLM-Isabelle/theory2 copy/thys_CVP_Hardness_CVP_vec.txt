theory CVP_vec

imports 
  Main 
  Lattice_int
  Subset_Sum
  infnorm
begin





definition is_closest_vec :: "int_lattice \<Rightarrow> int vec \<Rightarrow> int vec \<Rightarrow> bool" where
  "is_closest_vec L b v \<equiv> (is_lattice L) \<and> 
    (\<forall>x\<in>L. linf_norm_vec  (x - b) \<ge>  linf_norm_vec (v - b) \<and> v\<in>L)"

definition gap_cvp :: "(int_lattice \<times> int vec \<times> int) set" where
  "gap_cvp \<equiv> {(L, b, r). (is_lattice L) \<and> (\<exists>v\<in>L. linf_norm_vec (v - b) \<le> r)}"




definition gen_basis :: "int vec \<Rightarrow> int mat" where
  "gen_basis as = mat (dim_vec as + 2) (dim_vec as) (\<lambda> (i, j). if i \<in> {0,1} then as$j 
    else (if i = j + 2 then 2 else 0))"


definition gen_t :: "int vec \<Rightarrow> int \<Rightarrow> int vec" where
  "gen_t as s = vec (dim_vec as + 2) ((\<lambda> i. 1)(0:= s+1, 1:= s-1))"


definition reduce_cvp_subset_sum :: 
  "((int vec) * int) \<Rightarrow> (int_lattice * (int vec) * int)" where
  "reduce_cvp_subset_sum \<equiv> (\<lambda> (as,s).
    (gen_lattice (gen_basis as), gen_t as s, (1::int)))"



lemma vec_lambda_eq[intro]: "(\<forall>i<n. a i = b i) \<longrightarrow> vec n a = vec n b"
by auto

lemma eq_fun_applic: assumes "x = y" shows "f x = f y"
using assms by auto


lemma sum_if_zero:
  assumes "finite A" "i\<in>A"
  shows "(\<Sum>j\<in>A. (if i = j then a j else 0)) = a i"
proof -
  have "(\<Sum>x\<in>A. if x = i then a x else 0) =
  (if i = i then a i else 0) + (\<Sum>x\<in>A - {i}. if x = i then a x else 0)"
  using sum.remove[OF assms, of "(\<lambda>x. if x = i then a x else 0)"] by auto
  then show ?thesis by (simp add: assms(1))
qed

lemma set_compr_elem: 
  assumes "finite A" "a\<in>A"
  shows "{f i | i. i\<in>A} = {f a} \<union> {f i | i. i\<in>A-{a}}"

lemma Bx_rewrite: 
  assumes x_dim: "dim_vec as = dim_vec x"
  shows "(gen_basis as) *\<^sub>v x = 
    vec (dim_vec as + 2) (\<lambda> i. if i \<in> {0,1} then (x \<bullet> as) 
    else (2 * x$(i-2)))"
    (is "?init_vec = ?goal_vec")
proof -
  define n::nat where n_def: "n = dim_vec as"
  have "vec n (\<lambda>j.  (as $ j)) \<bullet>  x = (x \<bullet> as)"
    unfolding n_def scalar_prod_def using x_dim by (simp add: mult.commute)
  moreover have "vec (dim_vec as) (\<lambda>j. if i = Suc (Suc j) then 2 else 0) \<bullet> x = 2 * x $ (i - 2)"
    if "i < Suc (Suc (dim_vec as))" "0 < i" "i \<noteq> Suc 0" for i
  proof -
    have "(\<Sum>ia = 0..<dim_vec x.
      vec (dim_vec as) (\<lambda>j.  (if i = Suc (Suc j) then 2 else 0)) $ ia * x $ ia) =
      (\<Sum>ia<n.  (if i = ia+2 then 2 * (x $ ia) else 0))"
      by (intro sum.cong, auto simp add: n_def x_dim)
    also have "\<dots> = (\<Sum>ib\<in>{2..<n+2}. 
         (if i = ib then 2 * (x $ (ib-2)) else 0))" 
    proof - 
      have eq: "(\<lambda>ib.  (if i = ib then 2 * x $ (ib - 2) else 0)) \<circ> (+) 2
          = (\<lambda>ia.  (if i = ia + 2 then 2 * x $ ia else 0))"
      by auto
      then show ?thesis
        by (subst sum.atLeastLessThan_shift_0[
            of "(\<lambda>ib.  (if i = ib then 2 * x $ (ib - 2) else 0))" 2 "n+2"])
    qed
    also have "\<dots> = 2 *  (x $ (i-2))" 
    proof - 
      have finite: "finite {2..<n+2}" by auto
      have is_in: "i \<in> {2..<n+2}" using that by (auto simp add: n_def)
      show ?thesis 
      by (subst sum_if_zero[OF finite is_in, of "(\<lambda>k.2 * (x $ (k-2)))"], auto)
    qed
    finally show ?thesis unfolding scalar_prod_def by auto
  qed
  ultimately show ?thesis 
    unfolding gen_basis_def reduce_cvp_subset_sum_def gen_t_def
    by (intro eq_vecI, auto simp add: n_def)
qed


lemma Bx_s_rewrite: 
  assumes x_dim: "dim_vec as = dim_vec x"
  shows "(gen_basis as) *\<^sub>v x - (gen_t as s) = 
    vec (dim_vec as + 2) (\<lambda> i. if i = 0 then  (x \<bullet> as - s - 1) else (
      if i = 1 then  (x \<bullet> as - s + 1) else  (2 * x$(i-2) - 1)))"
    (is "?init_vec = ?goal_vec")
unfolding gen_t_def by (subst  Bx_rewrite[OF assms], auto)


lemma linf_norm_vec_Bx_s:
  assumes x_dim: "dim_vec as = dim_vec x"
  shows "linf_norm_vec ((gen_basis as) *\<^sub>v x - (gen_t as s)) = 
    Max (insert 0 ({ \<bar>x \<bullet> as - s - 1\<bar>} \<union> { \<bar>x \<bullet> as - s + 1\<bar>} \<union> 
      { \<bar>2*x$(i-2)-1\<bar> | i. 1<i \<and> i<dim_vec as+2 }))"
proof -
  let ?init_vec = "(gen_basis as) *\<^sub>v x - (gen_t as s)"
  let ?goal_vec = "vec (dim_vec as + 2) (\<lambda> i. if i = 0 then  (x \<bullet> as - s - 1) else (
      if i = 1 then  (x \<bullet> as - s + 1) else  (2 * x$(i-2) - 1)))"
  define n where n_def: "n = dim_vec as"
  have "linf_norm_vec ?init_vec = linf_norm_vec ?goal_vec" using Bx_s_rewrite[OF x_dim] by auto
  also have "\<dots> = Max (insert 0 {\<bar>?goal_vec $i\<bar> | i. i<n+2})" 
    unfolding linf_norm_vec_Max n_def by auto
  also have "\<dots> = Max (insert 0 ({ \<bar>x \<bullet> as - s - 1\<bar>} \<union> 
                       { \<bar>x \<bullet> as - s + 1\<bar>} \<union> 
                       { \<bar>2*x$(i-2)-1\<bar> | i. 1<i \<and> i<n+2}))"
  proof -
    have "{\<bar>?goal_vec $i\<bar> | i. i<n+2} = 
      {\<bar>?goal_vec $0\<bar>} \<union> {\<bar>?goal_vec $1\<bar>} \<union> {\<bar>?goal_vec $i\<bar> | i. 1<i \<and> i<n+2}" 
    proof -
      have "{\<bar>?goal_vec $i\<bar> | i. i\<in>{0..<n+2}} = 
       {\<bar>?goal_vec $0\<bar>} \<union> {\<bar>?goal_vec $i\<bar> | i. i\<in>{1..<n+2}}"   
      by (subst set_compr_elem[of "{0..<n+2}" 0 "(\<lambda>i. \<bar>?goal_vec $i\<bar>)"], auto)
      also have "\<dots> = {\<bar>?goal_vec $0\<bar>} \<union> {\<bar>?goal_vec $1\<bar>} \<union> 
        {\<bar>?goal_vec $i\<bar> | i. i\<in>{2..<n+2}}"
      by (subst set_compr_elem[of _ 1], auto)
      finally show ?thesis by auto
    qed
    also have "\<dots> = { \<bar>x \<bullet> as - s - 1\<bar>} \<union> { \<bar>x \<bullet> as - s + 1\<bar>} \<union> 
      {\<bar>?goal_vec $i\<bar> | i. 1<i \<and> i<n+2}" by auto
    also have "{\<bar>?goal_vec $i\<bar> | i. 1<i \<and> i<n+2} = 
      { \<bar>2*x$(i-2)-1\<bar> | i. 1<i \<and> i<n+2}"
    proof -
      have "\<bar>?goal_vec $i\<bar> =  \<bar>2*x$(i-2)-1\<bar>" if "1<i \<and> i<n+2" for i 
      using that n_def by force
      then show ?thesis using n_def by force
    qed
    finally have eq: "{\<bar>?goal_vec $i\<bar> | i. i<n+2} = 
      { \<bar>x \<bullet> as - s - 1\<bar>} \<union> { \<bar>x \<bullet> as - s + 1\<bar>} \<union> 
      { \<bar>2*x$(i-2)-1\<bar> | i. 1<i \<and> i<n+2}" by blast
    then show ?thesis by auto
  qed
  finally show ?thesis using n_def by blast
qed



  is linearly independent.\<close>
text \<open>The CVP is NP-hard in $\ell_\infty$.\<close>
    then show ?thesis using x_lin_combo \<open>r=1\<close> by auto
text \<open>NP-hardness part of reduction.\<close>
text \<open>The CVP is NP-hard in $\ell_\infty$.\<close>
