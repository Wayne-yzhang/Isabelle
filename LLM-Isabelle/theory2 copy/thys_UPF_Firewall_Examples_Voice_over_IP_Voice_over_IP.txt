theory 
  Voice_over_IP
  imports 
    "../../UPF-Firewall"
begin
  


definition 
  intranet :: "adr\<^sub>i\<^sub>p net" where
  "intranet = {{(a,e) . a = 3}}"

definition 
  internet :: "adr\<^sub>i\<^sub>p net" where
  "internet = {{(a,c). a > 4}}"

definition 
  gatekeeper :: "adr\<^sub>i\<^sub>p net" where
  "gatekeeper = {{(a,c). a =4}}"

definition 
  voip_policy :: "(adr\<^sub>i\<^sub>p,address voip_msg) FWPolicy" where
  "voip_policy = A\<^sub>U"


definition 
  is_in_intranet :: "address  \<Rightarrow> bool" where
  "is_in_intranet a = (a = 3)"

definition 
  is_gatekeeper :: "address \<Rightarrow> bool" where
  "is_gatekeeper a =  (a = 4)"

definition 
  is_in_internet :: "address \<Rightarrow> bool" where
  "is_in_internet a =  (a > 4)"


definition 
  "\<sigma>_0_voip" ::  "(adr\<^sub>i\<^sub>p, address voip_msg) history \<times>
                 (adr\<^sub>i\<^sub>p, address voip_msg) FWPolicy" 
where                                     
  "\<sigma>_0_voip = ([],voip_policy)"


definition "accept_voip" ::  "(adr\<^sub>i\<^sub>p, address voip_msg) history \<Rightarrow> bool" where
          "accept_voip t =   (\<exists> c s g i p1 p2. t \<in> NB_voip c s g i p1 p2 \<and> is_in_intranet c 
                                              \<and> is_in_internet s
                                              \<and> is_gatekeeper g)"

fun packet_with_id where
 "packet_with_id [] i = []"
|"packet_with_id (x#xs) i = 
  (if id x = i then (x#(packet_with_id xs i)) else (packet_with_id xs i))"


fun ids1 where
 "ids1 i (x#xs) = (id x = i \<and> ids1 i xs)"
|"ids1 i [] = True"

lemmas ST_simps = Let_def valid_SE_def unit_SE_def bind_SE_def
 subnet_of_int_def  p_accept_def content_def
 is_in_intranet_def is_in_internet_def intranet_def internet_def exI
 subnetOf_lemma subnetOf_lemma2 subnetOf_lemma3 subnetOf_lemma4 voip_policy_def
 NetworkCore.id_def  is_arq_def is_fin_def
 is_connect_def is_setup_def ports_open_def subnet_of_adr_def
 VOIP.NB_voip_def \<sigma>_0_voip_def PLemmas VOIP_TRPolicy_def
 policy2MON_def applyPolicy_def 

end
