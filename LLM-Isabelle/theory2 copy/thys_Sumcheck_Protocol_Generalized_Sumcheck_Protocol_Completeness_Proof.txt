theory Completeness_Proof
  imports
    Sumcheck_Protocol
begin

context multi_variate_polynomial begin


theorem completeness_inductive:  
  assumes 
  shows 
    "sumcheck honest_prover u (H, p, v) r_prev rm"
  using assms
proof(induction honest_prover u "(H, p, v)" r_prev rm arbitrary: H p v rule: sumcheck.induct)
  case (1 s H p v r_prev)
  then show ?case by(simp)
next
  case (2 s H p v r_prev x r rm)


  let ?V = "set (map fst rm)"
  let ?q = "(\<Sum>\<sigma> \<in> substs ?V H. inst p \<sigma>)"

    using 2(3-4) by(auto)

  proof - 
    have "(\<Sum>\<sigma>\<in>substs (insert x ?V) H. eval p \<sigma>) = 
          (\<Sum>h\<in>H. (\<Sum>\<sigma> \<in> substs ?V H. eval p ([x \<mapsto> h] ++ \<sigma>)))" 
      by(auto simp add: sum_merge)
    also have "\<dots> = (\<Sum>h\<in>H. eval ?q [x \<mapsto> h])"
      by(auto simp add: eval_sum_inst)
    finally show ?thesis .
  qed
  moreover 
  proof -
    moreover
    have "eval ?q [x \<mapsto> r] = (\<Sum>\<sigma> \<in> substs ?V H. eval (inst p [x \<mapsto> r]) \<sigma>)" 
      by (auto simp add: eval_sum_inst_commute)
    ultimately
      by (simp add: honest_prover_def)
  qed
  ultimately show ?case using 2(2-3,5)
    by (simp add: honest_prover_def honest_prover_vars honest_prover_deg)
qed


corollary completeness:  
  assumes 
  shows 
    "sumcheck honest_prover u (H, p, v) r rm"
  using assms
  by (auto simp add: Sumcheck_def intro: completeness_inductive)

end

end