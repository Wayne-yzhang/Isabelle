theory Prime_Implicates

imports Propositional_Resolution

begin

context propositional_atoms

begin



definition implicates :: "'at Formula \<Rightarrow> 'at Formula"
  where "implicates S = { C. entails S C }"

definition prime_implicates :: "'at Formula \<Rightarrow> 'at Formula"
  where "prime_implicates S = simplify (implicates S)"




fun partial_evaluation :: "'a Formula \<Rightarrow> 'a Literal set \<Rightarrow> 'a Formula"
where
  "(partial_evaluation S C) = { E. \<exists>D. D \<in> S \<and> E = D-C \<and> \<not>(\<exists>L. (L \<in> C) \<and> (complement L) \<in> D)}"

lemma partial_evaluation_is_saturated : 
  assumes "saturated_binary_rule resolvent S"
  shows "saturated_binary_rule ordered_resolvent (partial_evaluation S C)"
proof (rule ccontr)
    let ?peval = "partial_evaluation S C"
    assume "\<not>saturated_binary_rule ordered_resolvent ?peval"
    from this obtain P1 and P2 and R where "P1 \<in> ?peval" and "P2 \<in> ?peval"
      and "ordered_resolvent P1 P2 R"  and "\<not>(tautology R)" 
      and not_subsumed: "\<not>(\<exists>D. ((D \<in> (partial_evaluation S C)) \<and> (subsumes D R)))" 
    unfolding saturated_binary_rule_def and redundant_def  by auto
      and i: "\<not>(\<exists>L. (L \<in> C) \<and> (complement L) \<in> PP1)" by auto
      and  ii: "\<not>(\<exists>L. (L \<in> C) \<and> (complement L) \<in> PP2)" by auto
      r_def: "R = (P1 - { Pos A }) \<union> (P2 - { Neg A })" and "(Pos A) \<in> P1" and "(Neg A) \<in> P2"
    unfolding ordered_resolvent_def strictly_maximal_literal_def by auto
    let ?RR = "(PP1 - { Pos A }) \<union> (PP2 - { Neg A })"
      have "resolvent PP1 PP2 ?RR" unfolding resolvent_def by auto
      have "tautology ?RR \<or> (\<exists>D. (D \<in> S \<and> (subsumes D ?RR)))"
    unfolding saturated_binary_rule_def redundant_def by auto
    thus "False"
    proof 
      assume "tautology ?RR"
        obtain X where "X \<in> C" and "complement X \<in> PP1 \<union> PP2"
        unfolding tautology_def by auto
        show "False" by auto
    next
      assume "\<exists>D. ((D \<in> S) \<and> (subsumes D ?RR))"
      from this obtain D where "D \<in> S" and "subsumes D ?RR"
      by auto
        have "subsumes (D - C) R" unfolding subsumes_def by auto
        unfolding subsumes_def by auto
    qed
qed

lemma evaluation_wrt_implicate_is_unsat : 
  assumes "entails S C"
  assumes "\<not>tautology C"
  shows "\<not>satisfiable (partial_evaluation S C)"
proof
    let ?peval = "partial_evaluation S C"
    assume "satisfiable ?peval"
    then obtain I where "validate_formula I ?peval" unfolding satisfiable_def by auto
    let ?J = "(I - { X. (Pos X) \<in> C }) \<union> { Y. (Neg Y) \<in> C }" 
    have "\<not>validate_clause ?J C"  
    proof 
      assume "validate_clause ?J C"
      then obtain L where "L \<in> C" and "validate_literal ?J L" by auto
      obtain X where "L = (Pos X) \<or> L = (Neg X)" using Literal.exhaust [of L] by auto
      show "False" unfolding tautology_def by auto
    qed
    have "validate_formula ?J S" 
    proof (rule ccontr)
      assume "\<not> (validate_formula ?J S)"
      then obtain D where "D \<in> S" and "\<not>(validate_clause ?J D)" by auto
      by auto
      thus "False" 
      proof
        assume "\<exists>L. (L \<in> C) \<and> (complement L) \<in> D"
        then obtain L where "L \<in> C" and "complement L \<in> D" by auto
        obtain X where "L = (Pos X) \<or> L = (Neg X)" using Literal.exhaust [of L] by auto
        unfolding tautology_def by auto
        show "False" by auto
      next  
        assume "D-C \<in> ?peval"
        have "validate_clause I (D-C)" using validate_formula.simps by blast
        from this obtain L where "L \<in> D" and "L \<notin> C" and "validate_literal I L" by auto
        obtain X where "L = (Pos X) \<or> L = (Neg X)" using Literal.exhaust [of L] by auto
        have "validate_literal ?J L" unfolding tautology_def by auto
        show "False" by auto
      qed
    qed
    unfolding entails_def by auto
qed

lemma entailment_and_implicates:
  assumes "entails_formula S1 S2"
  shows "implicates S2 \<subseteq> implicates S1"
using assms entailed_formula_entails_implicates implicates_def by auto

lemma equivalence_and_implicates:
  assumes "equivalent S1 S2"
  shows "implicates S1 = implicates S2"
using assms entailment_and_implicates equivalent_def by blast

lemma equivalence_and_prime_implicates:
  assumes "equivalent S1 S2"
  shows "prime_implicates S1 = prime_implicates S2"
using assms equivalence_and_implicates prime_implicates_def by auto

lemma unrestricted_resolution_is_deductive_complete : 
  assumes "saturated_binary_rule resolvent S"
  assumes "all_fulfill finite S"
  assumes "C \<in> implicates S"
  shows "redundant C S"
proof ((cases "tautology C"),(simp add: redundant_def))
next 
  assume "\<not> tautology C"
  have "\<exists>D. (D \<in> S) \<and> (subsumes D C)"
  proof -
    let ?peval = "partial_evaluation S C"
      have "saturated_binary_rule ordered_resolvent ?peval" 
      using partial_evaluation_is_saturated by auto
    using evaluation_wrt_implicate_is_unsat by auto
    have "{} \<in> ?peval" using Complete_def ordered_resolution_is_complete by blast 
    then show ?thesis unfolding subsumes_def by auto
  qed
  then show ?thesis unfolding redundant_def by auto
qed

lemma prime_implicates_generation_correct :
  assumes "saturated_binary_rule resolvent S"
  assumes "non_redundant S"
  assumes "all_fulfill finite S"
  shows "S \<subseteq> prime_implicates S"
proof 
  fix x assume "x \<in> S"
  show "x \<in> prime_implicates S"
  proof (rule ccontr)
    assume "\<not> x \<in> prime_implicates S"
    then have "x \<in> implicates S" unfolding implicates_def by auto
      unfolding prime_implicates_def simplify_def by auto
    from this have "tautology x \<or> (\<exists>y. (y \<in> (implicates S)) \<and> (y \<subset> x))" 
      unfolding strictly_redundant_def by auto
    then have "strictly_redundant x S"
    proof ((cases "tautology x"),(simp add: strictly_redundant_def))
    next 
      assume "\<not>tautology x"
        obtain y where "y \<in> implicates S" and "y \<subset> x" by auto
        have "redundant y S" using unrestricted_resolution_is_deductive_complete by auto
        unfolding redundant_def subsumes_def by auto
    qed
 qed
qed

theorem prime_implicates_of_saturated_sets: 
  assumes "saturated_binary_rule resolvent S"
  assumes "all_fulfill finite S"
  assumes "non_redundant S"
  shows "S = prime_implicates S"
proof
  from assms show "S \<subseteq> prime_implicates S" using prime_implicates_generation_correct by auto
  show "prime_implicates S \<subseteq> S"
  proof
    fix x assume "x \<in> prime_implicates S"
    from this have "x \<in> implicates S" unfolding prime_implicates_def simplify_def by auto
    with assms have "redundant x S" 
      using unrestricted_resolution_is_deductive_complete by auto
    show "x \<in> S"
    proof (rule ccontr)
      assume "x \<notin> S"
        unfolding redundant_def strictly_redundant_def subsumes_def by auto
        unfolding strictly_redundant_def by auto
      then have "strictly_redundant x (implicates S)"
        unfolding strictly_redundant_def prime_implicates_def simplify_def by auto
        unfolding prime_implicates_def simplify_def  by auto
   qed
  qed
qed




definition all_resolvents_upon :: "'at Formula \<Rightarrow> 'at \<Rightarrow> 'at Formula"
 where  "(all_resolvents_upon S A) = { C. \<exists>P1 P2. P1 \<in> S \<and> P2 \<in> S \<and> C = (resolvent_upon P1 P2 A) }" 

lemma resolvent_upon_correct:
  assumes "P1 \<in> S"
  assumes "P2 \<in> S"
  assumes "C = resolvent_upon P1 P2 A"
  shows "entails S C"
proof cases
  assume "Pos A \<in> P1 \<and> Neg A \<in> P2" 
    unfolding resolvent_def by auto
    using soundness_and_entailment resolution_is_correct by auto
next 
  assume "\<not> (Pos A \<in> P1 \<and> Neg A \<in> P2)"
    unfolding redundant_def subsumes_def by auto 
  then show ?thesis using redundancy_implies_entailment by auto
qed

lemma all_resolvents_upon_is_finite:
  assumes "all_fulfill finite S"
  shows "all_fulfill finite (S \<union> (all_resolvents_upon S A))"
using assms unfolding all_fulfill_def all_resolvents_upon_def by auto

lemma atoms_formula_resolvents:
  shows "atoms_formula (all_resolvents_upon S A) \<subseteq>  atoms_formula S"
unfolding all_resolvents_upon_def by auto


definition partial_saturation :: "'at Formula \<Rightarrow> 'at \<Rightarrow> 'at Formula \<Rightarrow> bool"
where
  "(partial_saturation S A R) = (\<forall>P1 P2. (P1 \<in> S \<longrightarrow> P2 \<in> S  
    \<longrightarrow>(redundant (resolvent_upon P1 P2 A) R)))"


lemma resolvent_upon_and_partial_saturation :
  assumes "redundant P1 S"
  assumes "redundant P2 S"
  assumes "partial_saturation S A (S \<union> R)"
  assumes "C = resolvent_upon P1 P2 A"
  shows "redundant C (S \<union> R)"
proof (rule ccontr)
  assume "\<not>redundant C  (S \<union> R)"
  have "\<not> (tautology P1)"
  proof   
    assume "tautology P1"
    then obtain B where "Pos B \<in> P1" and "Neg B \<in> P1" unfolding tautology_def by auto
    show "False"
    proof cases
      assume "A = B"
        unfolding subsumes_def using Literal.distinct by blast
        using subsumption_preserves_redundancy by auto
    next 
      assume "A \<noteq> B"
      have "Pos B \<in> C" and "Neg B \<in> C" by auto
        unfolding tautology_def redundant_def by auto
    qed
  qed
    unfolding redundant_def by auto
  have "\<not> (tautology P2)"
  proof   
    assume "tautology P2"
    then obtain B where "Pos B \<in> P2" and "Neg B \<in> P2" unfolding tautology_def by auto
    show "False"
    proof cases
      assume "A = B"
        unfolding subsumes_def using Literal.distinct by blast
        using subsumption_preserves_redundancy by auto
    next 
      assume "A \<noteq> B"
      have "Pos B \<in> C" and "Neg B \<in> C" by auto
      unfolding tautology_def redundant_def  by auto
    qed
  qed
    unfolding redundant_def by auto
  let ?res = "(Q1 - { Pos A }) \<union> (Q2 - { Neg A })"
  have "?res = resolvent_upon Q1 Q2 A" by auto
    have "redundant ?res  (S \<union> R)" 
    unfolding partial_saturation_def by auto  
  have "subsumes ?res C" unfolding subsumes_def by auto
    using subsumption_preserves_redundancy by auto
qed


definition in_all_resolvents_upon:: "'at Formula \<Rightarrow> 'at \<Rightarrow> 'at Clause \<Rightarrow> bool"
where 
  "in_all_resolvents_upon S A C = (\<exists> P1 P2. (P1 \<in> S \<and> P2 \<in> S \<and> C = resolvent_upon P1 P2 A))"
 
lemma every_clause_is_a_resolvent:
  assumes "all_fulfill (in_all_resolvents_upon S A) R"
  assumes "all_fulfill (\<lambda>x. \<not>(tautology x)) S"
  assumes "P1 \<in> S \<union> R"
  shows "in_all_resolvents_upon S A P1"
proof ((cases "P1 \<in> R"),(metis all_fulfill_def assms(1)))
next 
    assume "P1 \<notin> R"
      unfolding all_fulfill_def by auto
    from this have "P1 = (P1 - { Pos A }) \<union> (P1 - { Neg A })" by auto
      unfolding in_all_resolvents_upon_def by auto
qed


lemma partial_saturation_is_preserved :
  assumes "partial_saturation S E1 S"
  assumes "partial_saturation S E2 (S \<union> R)"
  assumes "all_fulfill (\<lambda>x. \<not>(tautology x)) S"
  assumes "all_fulfill (in_all_resolvents_upon S E2) R"
  shows "partial_saturation (S \<union> R) E1 (S \<union> R)"
proof (rule ccontr)
  assume "\<not> partial_saturation (S \<union> R) E1 (S \<union> R)"
  from this obtain P1 P2 C where "P1 \<in> S \<union> R" and "P2 \<in> S \<union> R" and "C = resolvent_upon P1 P2 E1" 
    and "\<not> redundant C (S \<union> R)"
    unfolding partial_saturation_def by auto
  have "in_all_resolvents_upon S E2 P1" using every_clause_is_a_resolvent by auto
  then obtain P1_1 P1_2 where "P1_1 \<in> S" and "P1_2 \<in> S" and "P1 = resolvent_upon P1_1 P1_2 E2"
    using every_clause_is_a_resolvent unfolding in_all_resolvents_upon_def by blast
    have "in_all_resolvents_upon S E2 P2"  using every_clause_is_a_resolvent by auto
  then obtain P2_1 P2_2 where "P2_1 \<in> S" and "P2_2 \<in> S" and  "P2 = resolvent_upon P2_1 P2_2 E2"
    using every_clause_is_a_resolvent unfolding in_all_resolvents_upon_def by blast
  let ?R1 = "resolvent_upon P1_1 P2_1 E1"
    unfolding partial_saturation_def by auto
  let ?R2 = "resolvent_upon P1_2 P2_2 E1"
    unfolding partial_saturation_def by auto
  let ?C = "resolvent_upon ?R1 ?R2 E2"
    have "?C = C" by auto
    show "False" using resolvent_upon_and_partial_saturation by auto 
qed


lemma resolvents_do_not_contain_atom :
  assumes "\<not> tautology P1"
  assumes "\<not> tautology P2"
  assumes "C = resolvent_upon P1 P2 E2"
  assumes "\<not> subsumes P1 C"
  assumes "\<not> subsumes P2 C"
  shows "(Neg E2) \<notin> C \<and> (Pos E2) \<notin> C"
proof
    by auto
  show "(Neg E2) \<notin> C"
  proof 
    assume "Neg E2 \<in> C"
      by auto
      unfolding subsumes_def by auto
      unfolding tautology_def by auto
  qed
  next show "(Pos E2) \<notin> C"
  proof
    assume "Pos E2 \<in> C"
      by auto
      unfolding subsumes_def by auto
      unfolding tautology_def by auto
  qed
qed


lemma ensures_partial_saturation :
  assumes "partial_saturation S E2 (S \<union> R)"
  assumes "all_fulfill (\<lambda>x. \<not>(tautology x)) S"
  assumes "all_fulfill (in_all_resolvents_upon S E2) R"
  assumes "all_fulfill (\<lambda>x. (\<not>redundant x S)) R"
  shows "partial_saturation (S \<union> R) E2 (S \<union> R)"
proof (rule ccontr)
  assume "\<not> partial_saturation (S \<union> R) E2 (S \<union> R)"
  from this obtain P1 P2 C where "P1 \<in> S \<union> R" and "P2 \<in> S \<union> R" and "C = resolvent_upon P1 P2 E2" 
    and "\<not> redundant C (S \<union> R)"
    unfolding partial_saturation_def by auto
  have "P1 \<in> S"
  proof (rule ccontr)
    assume "P1 \<notin> S"
    with assms(3) obtain P1_1 and P1_2 where "P1_1 \<in> S" and "P1_2 \<in> S" 
     and "P1 = resolvent_upon P1_1 P1_2 E2"
     unfolding all_fulfill_def in_all_resolvents_upon_def by auto
      have "\<not> tautology P1_1" and "\<not> tautology P1_2"
      unfolding all_fulfill_def by auto
      have "\<not> subsumes P1_1 P1" and "\<not> subsumes P1_2 P1" 
      unfolding redundant_def all_fulfill_def by auto
      have "(Neg E2) \<notin> P1 \<and> (Pos E2) \<notin> P1" 
      using resolvents_do_not_contain_atom [of P1_1 P1_2 P1 E2] by auto
      by auto
    qed    
  have "P2 \<in> S"
  proof (rule ccontr)
    assume "P2 \<notin> S"
    with assms(3) obtain P2_1 and P2_2 where "P2_1 \<in> S" and "P2_2 \<in> S" 
      and "P2 = resolvent_upon P2_1 P2_2 E2" 
      unfolding all_fulfill_def in_all_resolvents_upon_def by auto
      have "\<not> tautology P2_1" and "\<not> tautology P2_2"
      unfolding all_fulfill_def by auto
      have "\<not> subsumes P2_1 P2" and "\<not> subsumes P2_2 P2" 
      unfolding redundant_def all_fulfill_def by auto
      have "(Neg E2) \<notin> P2 \<and> (Pos E2) \<notin> P2" 
      using resolvents_do_not_contain_atom [of P2_1 P2_2 P2 E2] by auto
      show "False" unfolding redundant_def by auto
    qed    
    show "False" unfolding redundant_def partial_saturation_def by auto
qed

lemma resolvents_preserve_equivalence:
  shows "equivalent S (S \<union> (all_resolvents_upon S A))"
proof -
  have "S \<subseteq> (S \<union> (all_resolvents_upon S A))" by auto
  then have "entails_formula (S \<union> (all_resolvents_upon S A)) S" using entailment_subset by auto
  have "entails_formula S (S \<union> (all_resolvents_upon S A))"
  proof (rule ccontr)
    assume "\<not>entails_formula S (S \<union> (all_resolvents_upon S A))"
    from this obtain C where "C \<in> (all_resolvents_upon S A)" and "\<not>entails S C" 
      unfolding entails_formula_def using entails_member by auto
      where "C = resolvent_upon P1 P2 A" and "P1 \<in> S" and "P2 \<in> S" 
      unfolding all_resolvents_upon_def by auto
      using resolvent_upon_correct by auto
  qed
    show ?thesis unfolding equivalent_def by auto
qed


fun resolvents_sequence :: "(nat \<Rightarrow> 'at) \<Rightarrow> 'at Formula \<Rightarrow> nat \<Rightarrow> 'at Formula"
 where 
  "(resolvents_sequence A S 0) = (simplify S)" |
  "(resolvents_sequence A S (Suc N)) = 
    (simplify ((resolvents_sequence A S N)
      \<union> (all_resolvents_upon (resolvents_sequence A S N) (A N))))"

 
lemma redundancy_implies_partial_saturation:
  assumes "partial_saturation S1 A S1"
  assumes "S2 \<subseteq> S1"
  assumes "all_fulfill (\<lambda>x. redundant x S2) S1"
  shows "partial_saturation S2 A S2"
proof (rule ccontr)
  assume "\<not>partial_saturation S2 A S2"
  then obtain P1 P2 C where "P1 \<in> S2" "P2 \<in> S2" and "C = (resolvent_upon P1 P2 A)" 
    and "\<not> redundant C S2"
    unfolding partial_saturation_def by auto
    have "redundant C S1" unfolding partial_saturation_def by auto
    unfolding redundant_def subsumes_def by auto
    unfolding all_fulfill_def by auto
    unfolding redundant_def subsumes_def by auto
    unfolding redundant_def subsumes_def by auto
qed


theorem incremental_prime_implication_generation:
  assumes "atoms_formula S = { X. \<exists>I::nat. I < N \<and> X = (A I) }"
  assumes "all_fulfill finite S"
  shows "(prime_implicates S) = (resolvents_sequence A S N)"
proof -


  let ?Final = "resolvents_sequence A S N"


  let ?equiv_init = "\<lambda>I.(equivalent S (resolvents_sequence A S I))" 
  let ?partial_saturation = "\<lambda>I. (\<forall>J::nat. (J < I 
    \<longrightarrow> (partial_saturation (resolvents_sequence A S I) (A J) (resolvents_sequence A S I))))" 
  let ?no_tautologies = "\<lambda>I.(all_fulfill (\<lambda>x. \<not>(tautology x)) (resolvents_sequence A S I) )"
  let ?atoms_init = "\<lambda>I.(atoms_formula (resolvents_sequence A S I)  
                      \<subseteq>  { X. \<exists>I::nat. I < N \<and> X = (A I)})"
  let ?non_redundant = "\<lambda>I.(non_redundant (resolvents_sequence A S I))" 
  let ?finite ="\<lambda>I. (all_fulfill finite (resolvents_sequence A S I))"

  have "\<forall>I. (I \<le> N   \<longrightarrow> (?equiv_init I)  \<and> (?partial_saturation I) \<and>  (?no_tautologies I) 
          \<and> (?atoms_init I) \<and> (?non_redundant I) \<and> (?finite I) )"

  proof (rule allI)
    fix I
    show " (I \<le> N  
      \<longrightarrow> (?equiv_init I) \<and> (?partial_saturation I) \<and>  (?no_tautologies I) \<and> (?atoms_init I)    
            \<and> (?non_redundant I) \<and> (?finite I) )" (is "I \<le> N \<longrightarrow> ?P I")
    proof (induction I)


      show "0 \<le> N \<longrightarrow> ?P 0" 
      proof (rule impI)+
          assume "0 \<le> N" 
          let ?R = "resolvents_sequence A S 0"
          have "?equiv_init 0" using simplify_preserves_equivalence  by auto
          moreover have "?no_tautologies 0" 
            using simplify_def strictly_redundant_def all_fulfill_def by auto
          moreover have "?partial_saturation 0" by auto
          moreover have "atoms_formula ?R \<subseteq> atoms_formula S" using atoms_formula_simplify by auto
            have v: "?atoms_init 0"  unfolding simplify_def by auto
          moreover have "?non_redundant 0" using simplify_non_redundant by auto
          ultimately show "?P 0" by auto
      qed


      next
      fix I assume "I \<le> N \<longrightarrow> ?P I" 
      show "(Suc I) \<le> N \<longrightarrow> (?P (Suc I))" 
      proof (rule impI)+
        assume  "(Suc I) \<le> N"
        let ?Prec = "resolvents_sequence A S I"
        let ?R = "resolvents_sequence A S (Suc I)"
          have "?equiv_init I" and "?partial_saturation I" and "?no_tautologies I" and "?finite I"
            and "?atoms_init I" and "?non_redundant I" by auto
        have "equivalent ?Prec (?Prec \<union> (all_resolvents_upon ?Prec (A I)))" 
          using resolvents_preserve_equivalence by auto
          using all_resolvents_upon_is_finite by auto
        then have "all_fulfill finite (simplify (?Prec \<union> (all_resolvents_upon ?Prec (A I))))" 
          using simplify_finite by auto
        then have "?finite (Suc I)" by auto
          have "equivalent (?Prec \<union> (all_resolvents_upon ?Prec (A I))) ?R" 
        using simplify_preserves_equivalence by auto
          have "equivalent ?Prec ?R" by (rule equivalent_transitive)
        have "?no_tautologies (Suc I)" using simplify_def strictly_redundant_def all_fulfill_def 
          by auto
        let ?Delta = "?R - ?Prec"
        have "?R \<subseteq> ?Prec \<union> ?Delta" by auto
        have "all_fulfill (\<lambda>x. (redundant x ?R)) (?Prec \<union> ?Delta)"
        proof (rule ccontr)
          assume "\<not>all_fulfill (\<lambda>x. (redundant x ?R)) (?Prec \<union> ?Delta)"
          then obtain x where "\<not>redundant x ?R" and "x \<in> ?Prec \<union> ?Delta" unfolding all_fulfill_def 
            by auto
            by auto
            have "redundant x (simplify (?Prec \<union> (all_resolvents_upon ?Prec (A I))))"
              using simplify_and_membership by blast 
        qed
        have "all_fulfill (in_all_resolvents_upon ?Prec (A I)) ?Delta"
        proof (rule ccontr)
          assume "\<not> (all_fulfill (in_all_resolvents_upon ?Prec (A I)) ?Delta)"
          then obtain C where "C \<in> ?Delta" 
            and "\<not>in_all_resolvents_upon ?Prec (A I) C" 
            unfolding all_fulfill_def by auto
          then obtain C where "C \<in> ?Delta" 
            and not_res: "\<forall> P1 P2. \<not>(P1 \<in> ?Prec \<and> P2 \<in> ?Prec \<and> C = resolvent_upon P1 P2 (A I))" 
            unfolding all_fulfill_def in_all_resolvents_upon_def by blast
          then have "C \<in> simplify (?Prec \<union> (all_resolvents_upon ?Prec (A I)))" by auto 
          then have "C \<in> ?Prec \<union> (all_resolvents_upon ?Prec (A I))" unfolding simplify_def by auto
          with not_res show "False" unfolding all_resolvents_upon_def by auto
        qed
        have "all_fulfill (\<lambda>x. (\<not>redundant x ?Prec)) ?Delta"
        proof (rule ccontr)
          assume "\<not>all_fulfill (\<lambda>x. (\<not>redundant x ?Prec)) ?Delta"
          then obtain C where "C \<in> ?Delta" and redundant: "redundant C ?Prec" 
            unfolding all_fulfill_def by auto
            show "False"
          proof cases
            assume "strictly_redundant C ?Prec"
            then have "strictly_redundant C (?Prec \<union> (all_resolvents_upon ?Prec (A I)))" 
              unfolding strictly_redundant_def by auto
            then have "C \<notin> simplify (?Prec \<union> (all_resolvents_upon ?Prec (A I)))" 
              unfolding simplify_def by auto
            then have "C \<notin> ?R" by auto
            next assume "\<not>strictly_redundant C ?Prec"
            with redundant have "C \<in> ?Prec" 
              unfolding strictly_redundant_def redundant_def subsumes_def by auto
          qed
        qed
        have "\<forall>J::nat. (J < (Suc I)) \<longrightarrow> (partial_saturation ?R (A J) ?R)"
        proof (rule ccontr)
          assume "\<not>(\<forall>J::nat. (J < (Suc I)) \<longrightarrow> (partial_saturation ?R (A J) ?R))"
          then obtain J where "J < (Suc I)" and "\<not>(partial_saturation ?R (A J) ?R)" by auto          
          where "P1 \<in> ?R" and "P2 \<in> ?R" and "C = resolvent_upon P1 P2 (A J)" and "\<not> redundant C ?R" 
          unfolding partial_saturation_def by auto
          have "partial_saturation ?Prec (A I) (?Prec \<union> ?Delta)"
          proof (rule ccontr)
            assume "\<not>partial_saturation ?Prec (A I) (?Prec \<union> ?Delta)"
            then obtain P1 P2 C where "P1 \<in> ?Prec" and "P2 \<in> ?Prec" 
              and "C = resolvent_upon P1 P2 (A I)" and 
              "\<not>redundant C (?Prec \<union> ?Delta)" unfolding partial_saturation_def by auto
              have "C \<in> ?Prec \<union> (all_resolvents_upon ?Prec (A I))" 
              unfolding all_resolvents_upon_def by auto
              and this have "redundant C ?R"  
              using simplify_and_membership [of "?Prec \<union> (all_resolvents_upon ?Prec (A I))" ?R C] 
              by auto
            using superset_preserves_redundancy [of C ?R "(?Prec \<union> ?Delta)"] by auto
          qed
          show "False"
          proof cases
            assume "J = I"
              have "partial_saturation (?Prec \<union> ?Delta) (A I) (?Prec \<union> ?Delta)" 
              using ensures_partial_saturation [of ?Prec "(A I)" ?Delta] by auto
            have "partial_saturation ?R (A I) ?R" using redundancy_implies_partial_saturation 
              by auto
          next 
            assume "J \<noteq> I"
              have "partial_saturation ?Prec (A J) ?Prec" by auto
              have "partial_saturation (?Prec \<union> ?Delta) (A J) (?Prec \<union> ?Delta)"
              using partial_saturation_is_preserved [of ?Prec "A J" "A I" ?Delta] by auto
              have "partial_saturation ?R (A J) ?R" 
              using redundancy_implies_partial_saturation by auto
         qed
       qed
       have  "non_redundant ?R" using simplify_non_redundant by auto
                                    \<subseteq>  { X. \<exists>I::nat. I < N \<and> X = (A I)}"
       using atoms_formula_resolvents [of ?Prec "A I"] by auto
        have "atoms_formula (?Prec \<union> (all_resolvents_upon ?Prec (A I))) 
                \<subseteq>  { X. \<exists>I::nat. I < N \<and> X = (A I)}"
        using atoms_formula_union [of ?Prec "all_resolvents_upon ?Prec (A I)"]  by auto
       from this have "atoms_formula ?R \<subseteq>  { X. \<exists>I::nat. I < N \<and> X = (A I)}"
       using atoms_formula_simplify [of "?Prec \<union> (all_resolvents_upon ?Prec (A I))"]  by auto
       show "?P (Suc I)" by auto
     qed
   qed
  qed


  from this have "\<forall>J. (J < N \<longrightarrow> partial_saturation ?Final (A J) ?Final)" 
    and "atoms_formula (resolvents_sequence A S N)  \<subseteq>  { X. \<exists>I::nat. I < N \<and> X = (A I)}" 
    and "equivalent S ?Final"
    and "non_redundant ?Final"
    and "all_fulfill finite ?Final"
  by auto
  have "saturated_binary_rule resolvent ?Final"
  proof (rule ccontr)
    assume "\<not> saturated_binary_rule resolvent ?Final"
    then obtain P1 P2 C where "P1 \<in> ?Final" and "P2 \<in> ?Final" and "resolvent P1 P2 C" 
      and "\<not>redundant C ?Final" 
      unfolding saturated_binary_rule_def by auto
      unfolding resolvent_def by auto
      show "False"
    proof cases
      assume "B \<in> (atoms_formula ?Final)"
        obtain I where "B = (A I)" and "I < N" 
        by auto
        by auto
        have "partial_saturation ?Final (A I) ?Final" by auto 
        have "redundant C ?Final" unfolding partial_saturation_def by auto
    next 
      assume "B \<notin> atoms_formula ?Final"
      then have "Pos B \<notin> P1" by auto 
        unfolding redundant_def subsumes_def by auto
    qed
   qed
    have "prime_implicates ?Final = ?Final" 
    using prime_implicates_of_saturated_sets [of ?Final] by auto
qed

end
end
