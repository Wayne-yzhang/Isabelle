theory Imperative
imports UpDown_Scheme Separation_Logic_Imperative_HOL.Sep_Main
begin

type_synonym pointmap = "grid_point \<Rightarrow> nat"
type_synonym impgrid = "rat array"

instance rat :: heap ..

primrec rat_pair where "rat_pair (a, b) = (of_rat a, of_rat b)"

declare rat_pair.simps [simp del]

definition
   zipWithA :: "('a::heap \<Rightarrow> 'b::heap \<Rightarrow> 'a::heap) \<Rightarrow> 'a array \<Rightarrow> 'b array \<Rightarrow> 'a array Heap"
where
  "zipWithA f a b = do {
     n \<leftarrow> Array.len a;
     Heap_Monad.fold_map (\<lambda>n. do {
       x \<leftarrow> Array.nth a n ;
       y \<leftarrow> Array.nth b n ;
       Array.upd n (f x y) a
     }) [0..<n];
     return a
   }"

theorem zipWithA [sep_heap_rules]:
  fixes xs ys :: "'a::heap list"
  assumes "length xs = length ys"
  shows "< a \<mapsto>\<^sub>a xs * b \<mapsto>\<^sub>a ys > zipWithA f a b < \<lambda>r. (a \<mapsto>\<^sub>a map (case_prod f) (zip xs ys)) * b \<mapsto>\<^sub>a ys * \<up>(a = r) >"
proof -
  { fix n and xs :: "'a list"
    let ?part_res = "\<lambda>n xs. (map (case_prod f) (zip (take n xs) (take n ys)) @ drop n xs)"
    assume "n \<le> length xs" "length xs = length ys"
    then have "< a \<mapsto>\<^sub>a xs * b \<mapsto>\<^sub>a ys > Heap_Monad.fold_map (\<lambda>n. do {
         x \<leftarrow> Array.nth a n ;
         y \<leftarrow> Array.nth b n ;
         Array.upd n (f x y) a
       }) [0..<n] < \<lambda>r. a \<mapsto>\<^sub>a ?part_res n xs * b \<mapsto>\<^sub>a ys >"
    proof (induct n arbitrary: xs)
      case 0 then show ?case by sep_auto
    next
      case (Suc n)
      note Suc.hyps [sep_heap_rules]
      have *: "(?part_res n xs)[n := f (?part_res n xs ! n) (ys ! n)] =  ?part_res (Suc n) xs"
        using Suc.prems by (simp add: nth_append take_Suc_conv_app_nth upd_conv_take_nth_drop)
      from Suc.prems show ?case
        by (sep_auto simp add: fold_map_append *)
