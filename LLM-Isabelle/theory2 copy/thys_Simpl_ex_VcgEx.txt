theory VcgEx imports "../HeapList" "../Vcg" begin




record 'g vars = "'g state" +
  A_' :: nat
  I_' :: nat
  M_' :: nat
  N_' :: nat
  R_' :: nat
  S_' :: nat
  B_' :: bool
  Arr_' :: "nat list"
  Abr_':: string



to avoid cluttering the namespace with the simple names that could no longer
be used for logical variables otherwise.
\<close>
text \<open>We will first consider programs without procedures, later on
we will regard procedures without global variables and finally we
will get the full pictures: mutually recursive procedures with global
variables (including heap).
\<close>
subsection \<open>Basic Examples\<close>
text \<open>
 We look at few trivialities involving assignment and sequential
 composition, in order to get an idea of how to work with our
 formulation of Hoare Logic.
\<close>
text \<open>
 Using the basic rule directly is a bit cumbersome.
\<close>
text \<open>
 If we refer to components (variables) of the state-space of the program
 most keyboards. So all program variables are marked with the acute and all
 logical variables are not.
 The assertions of the Hoare tuple are
 ordinary Isabelle sets. As we usually want to refer to the state space
 in the assertions, we provide special brackets for them. They can be written
 marking variables has two effects. First of all we refer to the implicit
 So the assertion @{term "{|\<acute>N = 5|}"} internally gets expanded to
\<close>
text \<open>
 Certainly we want the state modification already done, e.g.\ by
 update for us; we may apply the Simplifier afterwards to achieve
 ``obvious'' consequences as well.
\<close>
text \<open>
We can also perform verification conditions generation step by step by using
\<close>
text \<open>
 It is important to note that statements like the following one can
 only be proven for each individual program variable.  Due to the
 extra-logical nature of record fields, we cannot formulate a theorem
 relating record selectors and updates schematically.
\<close>
text \<open>
 In the following assignments we make use of the consequence rule in
 order to achieve the intended precondition.  Certainly, the
\<close>
      \<comment> \<open>inclusion of assertions expressed in ``pure'' logic,\<close>
      \<comment> \<open>without mentioning the state space\<close>
subsection \<open>Multiplication by Addition\<close>
text \<open>
 We now do some basic examples of actual \texttt{WHILE} programs.
 This one is a loop for calculating the product of two natural
 numbers, by iterated addition.  We first give detailed structured
 proof based on single-step Hoare rules.
\<close>
text \<open>
 to reduce the Hoare statement to a purely logical problem that can be
 solved fully automatically.  Note that we have to specify the
 \texttt{WHILE} loop invariant in the original statement.
\<close>
text \<open>Here some examples of ``breaking'' out of a loop\<close>
text \<open>Some more syntactic sugar, the label statement \<open>\<dots> \<bullet> \<dots>\<close> as shorthand
for the \<open>TRY-CATCH\<close> above, and the \<open>RAISE\<close> for an state-update followed
by a \<open>THROW\<close>.
 with the \<open>vcg\<close> method only applied locally to take care of
 The next version uses the \<open>vcg\<close> method, while still explaining
parameters. The parameters in front of the pipe \<open>|\<close> are value parameters
Behind the scenes the \<open>procedures\<close> command provides us convenient syntax
A locale is named \<open>Fac_impl\<close> and extends the \<open>hoare\<close> locale
printing translation via the configuration option \<open>hoare_use_call_tr'\<close>
call for the specification; \<open>\<acute>R :== PROC Fac(\<acute>N)\<close> is syntactic sugar
for \<open>Call ''Fac''\<close>. This emphasises that the specification
use the rule \<open>ProcSpec\<close>. To be successful there must be a specification
