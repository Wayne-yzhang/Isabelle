theory Enumerator
imports Graph IArray_Syntax
begin



definition enumBase :: "nat \<Rightarrow> nat list list" where
 "enumBase nmax \<equiv> [[i]. i \<leftarrow> [0 ..< Suc nmax]]"

definition enumAppend :: "nat \<Rightarrow> nat list list \<Rightarrow> nat list list" where
 "enumAppend nmax iss \<equiv> \<Squnion>\<^bsub>is\<in>iss\<^esub> [is @ [n]. n \<leftarrow> [last is ..< Suc nmax]]"

 "enumerator inner outer \<equiv>
     let nmax = outer - 2; k = inner - 3 in 
     [[0] @ is @ [outer - 1]. is \<leftarrow> (enumAppend nmax ^^ k) (enumBase nmax)]"    

definition enumTab :: "nat list list iarray iarray" where
"enumTab \<equiv> \<lbrakk> enumerator inner outer. inner < 9, outer < 9 \<rbrakk>"

definition enum :: "nat \<Rightarrow> nat \<Rightarrow> nat list list" where
"enum inner outer \<equiv> if inner < 9 \<and> outer < 9 then enumTab\<lbrakk>inner,outer\<rbrakk>
                    else enumerator inner outer"


primrec hideDupsRec :: "'a \<Rightarrow> 'a list \<Rightarrow> 'a option list" where
  "hideDupsRec a [] = []"
| "hideDupsRec a (b#bs) = 
     (if a = b then None # hideDupsRec b bs 
     else Some b # hideDupsRec b bs)"    

primrec hideDups :: "'a list \<Rightarrow> 'a option list" where
  "hideDups [] = []"
| "hideDups (b#bs) = Some b # hideDupsRec b bs"

 "indexToVertexList f v is \<equiv> hideDups [f\<^bsup>k\<^esup>\<bullet>v. k \<leftarrow> is]" 

end
