theory Breadth_First_Search
imports "../Refine_Monadic"
begin
  

locale Graph =
  fixes succ :: "'vertex \<Rightarrow> 'vertex set"
  assumes [simp, intro!]: "finite (succ v)"
begin




    as the least solution of the following constraints:
\<close>
  text \<open>
    Next, we define a predicate that expresses that the shortest path between
    is no shorter path.
\<close>
  subsubsection \<open>Properties\<close>
  text \<open>
    In this subsection, we prove some properties of paths.
\<close>
  text \<open>Two nodes are connected by a path of length \<open>0\<close>, 
        \<open>N\<close> or are successors of \<open>C\<close>. As \<open>N\<close> 
        and \<open>C\<close> are both empty, we again get a contradiction.\<close>
  text \<open>
    Finally, we prove our algorithm correct:
    The following theorem solves both verification tasks.


    The actual specification that we prove here
    precisely reflects the two verification tasks: {\em If the algorithm fails,
    it returns the length of the shortest path.}

    The proof of this theorem first applies the verification condition 
    lemmas proved beforehand to discharge the verification conditions.
    e.g., those concerning the invariant of the inner loop, are discharged
    automatically.
    During the proof, we gradually unfold the definition of the loop
    invariant.
\<close>
