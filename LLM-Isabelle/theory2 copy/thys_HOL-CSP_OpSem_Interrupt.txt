theory  Interrupt
  imports "HOL-CSPM.CSPM"
begin


hide_const R





proof -
    unfolding is_process_def FAILURES_def DIVERGENCES_def fst_conv snd_conv
  proof (intro conjI allI impI)
  next
      by (simp add: is_processT2 D_imp_front_tickFree front_tickFree_append)
         (meson front_tickFree_append front_tickFree_dw_closed is_processT2_TR process_charn)
  next
    fix s t
    proof (induct t rule: rev_induct)
    next
      fix a t
      proof (elim disjE)
          by simp (meson NF_NT append_T_imp_tickFree is_processT snoc_eq_iff_butlast) 
      next
          by simp (metis NF_NT Nil_is_append_conv append_T_imp_tickFree is_processT list.discI)
      next
      next
          by simp (metis butlast_append last_appendR snoc_eq_iff_butlast)
            by simp (metis T_F process_charn tickFree_append)
        next
        qed
      next
      next
          by simp (meson front_tickFree_mono is_processT snoc_eq_iff_butlast)
      next
          apply (cases t2 rule: rev_cases; simp)
          by (metis T_F append_assoc process_charn tickFree_append)
             (metis D_T T_F is_processT3_ST)
          by (intro hyp) (meson UnI1 UnI2)
      qed
    qed
  next
    fix s X Y
    proof (elim disjE)
    next
    next
    next
    next
    next
    next
    qed
  next
    fix s X Y
    proof (elim disjE)
    next
    next
        by simp (metis F_T T_F append_Nil is_processT5_S7' list.distinct(1))
    next
        by simp (metis append.assoc append_is_Nil_conv is_processT5_S1)
    next
        by simp (metis Diff_empty Diff_insert0 T_F Un_Diff not_Cons_self)
    next
    next
    qed
  next
    fix s X
      by simp (metis Cons_eq_appendI append_self_conv2 front_tickFree_mono 
                     is_processT2_TR list.distinct(1) non_tickFree_tick)
    proof (elim disjE)
    next
      then obtain t1 t2
        by simp (metis butlast_append last_appendR snoc_eq_iff_butlast)
        by simp (metis F_T process_charn self_append_conv2)
    next
    next
        by (cases t2 rule: rev_cases) auto
    qed
  next
      apply (simp, elim conjE disjE exE)
         (meson append.assoc is_processT7 tickFree_append)
  next
      by blast
  next
    fix s
    proof cases
    next
        by (cases t2 rule: rev_cases) auto
    qed
  qed
qed




lemma F_Interrupt :
  by (simp add: Failures_def FAILURES_def Interrupt.rep_eq)

lemma D_Interrupt : 
  by (simp add: Divergences_def DIVERGENCES_def Interrupt.rep_eq)

lemma T_Interrupt : 
  apply (simp add: Traces_def TRACES_def Failures_def[symmetric] F_Interrupt)
  apply (safe, simp_all add: is_processT8)
  subgoal by (metis is_processT3_SR)
  subgoal by auto
  subgoal by auto
  subgoal by (metis is_processT8_S)
  subgoal by (metis is_processT4_empty nonTickFree_n_frontTickFree process_charn)
  by (metis append.right_neutral is_processT4_empty tickFree_Nil)
  




proof (unfold le_approx_def, intro conjI allI impI subsetI)
    using that[THEN le_approx1] D_T that(1)[THEN le_approx2T]
    by (simp add: D_Interrupt) blast
next
    apply (simp add: D_Interrupt Ra_def F_Interrupt,
           intro subset_antisym subsetI; simp, elim disjE)
    subgoal by (metis le_approx2T that(1))
    subgoal by (metis is_processT9 le_approx2T that(1))
    subgoal by (metis F_T append.right_neutral le_approx2 that)
    subgoal by (metis is_processT2 is_processT7 le_approx2T proc_ord2a that)
    subgoal by (metis (no_types, lifting) append_Nil2 le_approx2T min_elems6
          no_Trace_implies_no_Failure self_append_conv2 that)
    subgoal by metis
    subgoal by (metis le_approx2T that(1))
    subgoal by (metis le_approx_lemma_T subset_eq that(1))
    subgoal by (metis is_processT8_S le_approx2 that)
    subgoal by (metis is_processT2 is_processT7_S le_approx2 le_approx2T that) 
    subgoal by (metis D_T le_approx2T that)
    subgoal by (metis in_mono le_approx1 that(1))
    by (metis le_approx1 le_approx2T process_charn subsetD that)
next
  from that[THEN le_approx3]
    by (auto simp add: min_elems_def D_Interrupt T_Interrupt subset_iff)
       (metis le_approx2T le_list_def less_append order_le_imp_less_or_eq that(1))
qed


  unfolding trace_refine_def by (auto simp add: T_Interrupt)

  unfolding divergence_refine_def by (auto simp add: D_Interrupt) 


lemma mono_Interrupt_FD:
  unfolding failure_divergence_refine_def le_ref_def
  by (simp add: D_Interrupt F_Interrupt, safe;
      metis [[metis_verbose = false]] F_subset_imp_T_subset subsetD)

lemma mono_Interrupt_DT:
  unfolding trace_divergence_refine_def trace_refine_def divergence_refine_def
  by (auto simp add: T_Interrupt D_Interrupt subset_iff)





         apply (simp_all add: Process_eq_spec F_Interrupt D_Interrupt F_STOP T_STOP
      D_STOP T_F is_processT6 is_processT8_S tick_T_F)
  subgoal by (meson process_charn tick_T_F)
  subgoal by (metis F_T T_nonTickFree_imp_decomp)
  subgoal by (meson DiffE insertI1 is_processT6_S2 is_processT8_S)
  by blast

  by (simp_all add: BOT_iff_D D_Interrupt D_UU Nil_elem_T)

  by (simp add: BOT_iff_D D_Interrupt Nil_elem_T)


  apply (intro subset_antisym subsetI; simp add: events_of_def T_Interrupt)
  by (metis UnE set_append) (metis Nil_elem_T append_Nil tickFree_Nil)


proof (subst Process_eq_spec_optimized, safe)
    by (auto simp add: D_Interrupt D_Ndet)
next
    by (auto simp add: D_Interrupt D_Ndet)
next
  fix s X
    by (simp add: F_Interrupt D_Interrupt) blast
  proof cases
  next
      by (simp add: F_Ndet F_Interrupt)
  next
      by (simp add: F_Ndet F_Interrupt) (metis Diff_insert_absorb)
  next
      by (simp add: F_Ndet F_Interrupt) blast
  next
      by (simp add: F_Ndet F_Interrupt) metis
  next
      by (simp add: F_Interrupt F_Ndet T_Ndet) (metis Diff_insert_absorb)
  qed
next
    by (simp add: F_Interrupt F_Ndet D_Ndet T_Ndet) blast
    by (simp add: F_Ndet) (metis Ndet_commute)
qed


proof (subst Process_eq_spec_optimized, safe)
    by (auto simp add: D_Ndet T_Ndet D_Interrupt)
next
    by (auto simp add: D_Ndet T_Ndet D_Interrupt)
next
  fix s X
    by (simp add: F_Interrupt D_Interrupt) blast
  proof cases
  next
      by (simp add: T_Ndet F_Ndet F_Interrupt) metis
  next
      by (simp add: T_Ndet F_Ndet F_Interrupt) (metis Diff_insert_absorb)
  next
      by (simp add: F_Ndet F_Interrupt) blast
  next
      by (simp add: T_Ndet F_Ndet F_Interrupt) metis
  next
      by (simp add: T_Ndet F_Ndet F_Interrupt) (metis Diff_insert_absorb)
  qed
next
    by (simp add: F_Interrupt F_Ndet D_Ndet T_Ndet) blast
    by (simp add: F_Ndet) (metis Ndet_commute)
qed


proof -
  proof (subst Process_eq_spec_optimized, safe)
    fix s
      by (simp add: D_Interrupt) blast
    proof cases
    next
        by (simp add: D_Interrupt) blast
      proof cases
      next
          by (simp add: "*"(1) D_Interrupt T_Interrupt)
             (metis "*"(2, 3) append_assoc tickFree_append)
      qed
    qed
  next
    fix s
      by (simp add: D_Interrupt) blast
    proof cases
    next
        by (simp add: T_Interrupt) blast
      proof cases
          by (simp add: D_Interrupt "*"(1))
             (metis "*"(3, 4) Nil_elem_T append_Nil tickFree_Nil)
      next
          by (simp add: D_Interrupt "*"(1)) 
             (metis "*"(3, 4) append.assoc tickFree_append)
      qed
    qed
  next
    fix s X
      by (subst (asm) F_Interrupt, simp add:  D_Interrupt) blast
    proof cases
    next
        by (auto simp add: F_Interrupt T_Interrupt)
    next
        by (simp add: F_Interrupt T_Interrupt) (metis Diff_insert_absorb)
    next
        by (simp add: F_Interrupt Nil_elem_T BOT_iff_D) blast
      proof cases
          by (simp add: F_Interrupt T_Interrupt) (metis Diff_insert_absorb F_T assm)
      next
          by (simp add: F_Interrupt assm)
      next
          by (simp add: F_Interrupt T_Interrupt) (metis Diff_insert_absorb F_T assm)
      qed
    next
        by (simp add: F_Interrupt D_Interrupt) blast
      proof cases
      next
          by (simp add: F_Interrupt T_Interrupt) (metis append_assoc)
      next
          by (simp add: F_Interrupt T_Interrupt) (metis Diff_insert_absorb)
      next
          by (simp add: F_Interrupt T_Interrupt) (metis "*"(2, 3, 5))
      next
          by (simp add: F_Interrupt T_Interrupt)
             (metis (mono_tags, lifting) append_assoc tickFree_append)
      next
          by (simp add: F_Interrupt T_Interrupt) (metis Diff_insert_absorb)
      qed
    next
        by (simp add: F_Interrupt T_Interrupt)
           (metis Diff_insert_absorb append_Nil hd_append2 hd_in_set list.sel(1) tickFree_def)
    qed
  next
    fix s X
      by (subst (asm) F_Interrupt, simp add: D_Interrupt) blast 
    proof cases
    next
        by (simp add: F_Interrupt T_Interrupt)
           (metis last_append self_append_conv snoc_eq_iff_butlast)
    next
        by (simp add: T_Interrupt) blast
      proof cases
          by (simp add: F_Interrupt) (metis Diff_insert_absorb assm[THEN conjunct2])
      next
          by (simp add: F_Interrupt T_Interrupt)
             (metis Diff_insert_absorb T_nonTickFree_imp_decomp
                    append.right_neutral append_Nil assm[THEN conjunct2]
                    butlast.simps(2) butlast_append non_tickFree_tick tickFree_append)
      qed
    next
        by (simp add: F_Interrupt D_Interrupt) blast
      proof cases
      next
          by (simp add: F_Interrupt)
      next
          by (simp add: F_Interrupt) (metis Diff_insert_absorb)
      next
          by (simp add: F_Interrupt assm[THEN conjunct2])
      next
          by (simp add: F_Interrupt) (metis assm[THEN conjunct2] tickFree_append)
      next
          by (simp add: F_Interrupt T_Interrupt) (metis Diff_insert_absorb)
      qed
    next
        by (simp add: T_Interrupt) blast
      proof cases
          by (simp add: F_Interrupt T_Interrupt)
             (metis Nil_elem_T append_Nil tickFree_Nil)
      next
          by (elim exE, simp add: F_Interrupt) (metis append_is_Nil_conv)
      qed
    next
        by (simp add: F_Interrupt T_Interrupt)
           (metis Diff_insert_absorb Nil_elem_T append.right_neutral append_Nil tickFree_append)
    qed
  qed

    by blast
qed





lemma Interrupt_Mprefix:
proof (subst Process_eq_spec_optimized, safe)
  fix s
    by (simp add: D_Interrupt) blast
  proof cases
      by (simp add: D_Det D_Mprefix D_Interrupt) blast
  next
      by (simp add: D_Det D_Mprefix T_Mprefix D_Interrupt)
         (metis (no_types, opaque_lifting) hd_append2 imageI
                self_append_conv2 tickFree_tl tl_append2)
  qed
next
  fix s
    by (simp add: D_Det D_Mprefix image_iff) (metis event.inject list.exhaust_sel)
  proof cases
      apply (simp add: D_Interrupt)
      using Nil_elem_T tickFree_Nil by blast
  next
    then obtain a s'
      by (simp add: D_Interrupt) blast
      apply (elim disjE exE)
      by (simp add: "*"(1) D_Interrupt T_Mprefix)
         (metis "*"(2) Cons_eq_appendI event.distinct(1) list.sel(1, 3) tickFree_Cons)
  qed
next
  fix s X
    by (simp add: F_Interrupt D_Interrupt) blast
  proof cases
  next
      by (elim exE, simp add: F_Det T_Mprefix F_Mprefix F_Interrupt image_iff)
         (metis event.distinct(1) hd_append list.sel(1) tl_append2)
  next
      by (simp add: F_Det T_Mprefix F_Mprefix F_Interrupt image_iff)
         (metis Diff_insert_absorb event.simps(3) hd_append list.sel(1) tl_append_if)
  next
      by (simp add: F_Det F_Mprefix F_Interrupt image_iff) (metis tickFree_tl)
  next
      by (elim exE, simp add: F_Det T_Mprefix F_Mprefix F_Interrupt image_iff)
         (metis hd_append2 self_append_conv2 tickFree_tl tl_append2)
  next
      by (simp add: F_Det T_Mprefix F_Mprefix F_Interrupt image_iff)
         (metis Diff_insert_absorb tickFree_tl)
  qed
next
  fix s X
      by (simp add: F_Det F_Mprefix F_Interrupt Nil_elem_T) blast
  next 
      by (simp add: F_Det F_Mprefix image_iff) (metis event.inject list.exhaust_sel)
    proof cases
        by (simp add: F_Interrupt)
    next
      then obtain a s'
        by (simp add: F_Interrupt D_Interrupt) blast
      proof cases
          by (simp add: D_Interrupt D_Mprefix T_Mprefix "*"(1, 2) image_iff)
             (metis "*"(2) append_Cons event.distinct(1) list.sel(1, 3) tickFree_Cons)
      next
          by (elim exE, simp add: "*"(1, 2) F_Interrupt T_Mprefix)
      next
          by (simp add: "*"(1, 2) F_Interrupt T_Mprefix) blast
      next
          by (simp add: "*"(1, 2) F_Interrupt F_Mprefix)
      next
          by (elim exE, simp add: F_Interrupt T_Mprefix "*"(1))
             (metis "*"(2) Cons_eq_appendI event.distinct(1) list.sel(1, 3) tickFree_Cons)
      next
          by (simp add: F_Interrupt T_Mprefix "*"(1, 2) image_iff) blast
      qed
    qed
  qed
qed


  apply (subst Interrupt_Mprefix, subst Mprefix_Det_distr)
  by (metis Det_commute Mprefix_Det_distr)



  by (simp add: chain_def)

  by(simp add: chain_def)  


proof (subst Process_eq_spec, safe)
   by (simp add: limproc_is_thelub chain chain_left_Interrupt
                 D_Interrupt T_LUB D_LUB) blast
next
  fix s
  define S
    by (simp add: limproc_is_thelub D_LUB chain_left_Interrupt chain)
    unfolding S_def
    by (metis prefixes_fin)
    unfolding S_def apply (intro allI Un_mono subsetI; simp)
    by (metis in_mono le_approx1 po_class.chainE chain)
       (metis le_approx_lemma_T po_class.chain_def subset_eq chain)
    by (rule Inter_nonempty_finite_chained_sets)
    by (meson INT_iff ex_in_conv iso_tuple_UNIV_I)
    case True
  next
    case False
      by (simp add: S_def) blast
      by (simp add: D_Interrupt limproc_is_thelub T_LUB chain) blast
  qed
next
    by (simp add: limproc_is_thelub chain chain_left_Interrupt
                  F_Interrupt F_LUB T_LUB D_LUB) blast
next
  fix s X
  define S
    by (simp add: limproc_is_thelub F_LUB chain_left_Interrupt chain)
    unfolding S_def
    apply (intro finite_UnI)
    by (metis prefixes_fin)+
    unfolding S_def apply (intro allI Un_mono subsetI; simp)
    subgoal using D_T le_approx2T po_class.chain_def chain by blast
    subgoal using D_T le_approx2T po_class.chain_def chain by blast
    subgoal using is_processT8_S le_approx2 po_class.chainE chain by blast
    subgoal by (metis NT_ND le_approx2T po_class.chainE chain) 
    subgoal using D_T le_approx2T po_class.chain_def chain by blast 
    subgoal by (meson in_mono le_approx1 po_class.chainE chain)
    by (metis NT_ND le_approx2T po_class.chainE chain)
    by (rule Inter_nonempty_finite_chained_sets)
    by (meson INT_iff ex_in_conv iso_tuple_UNIV_I)
    case True1 : True
      by (simp add: S_def) blast
      by (simp add: F_Interrupt limproc_is_thelub chain T_LUB) blast
  next
    case False1 : False
      case True2 : True
        by (simp add: S_def) blast
        by (simp add: F_Interrupt limproc_is_thelub chain T_LUB) blast
    next
      case False2: False
        case True3 : True
          by (simp add: S_def) blast
          by (simp add: F_Interrupt limproc_is_thelub chain T_LUB) blast
      next
        case False3: False
          case True4 : True
            using "*"[rule_format, of i] apply (simp add: S_def "**"(1), elim disjE)
            subgoal using "**"(1) False3 by blast
            using "**"(1) False1 by blast
            by (simp add: F_Interrupt limproc_is_thelub chain F_LUB)
        next
          case False4: False
            case True5 : True
              by (auto simp add: S_def "**"(1))
              by (simp add: F_Interrupt limproc_is_thelub chain T_LUB)
          next
            case False5 : False
              case True6 : True
                using "*"[rule_format, of i] apply (simp add: S_def "**"(1), elim disjE)
                subgoal by (solves simp)
                subgoal using "**"(1) False4 by blast
                subgoal using "**"(1) False3 by blast
                subgoal using "**"(2) D_T front_tickFree_mono is_processT2_TR is_processT7 by blast
                subgoal using "**"(1) False1 by blast
                done
                by (simp add: F_Interrupt limproc_is_thelub chain T_LUB)
                   (metis Diff_insert_absorb)
            next
              case False6: False
                using "*"[rule_format, of i] apply (simp add: S_def, elim disjE)
                subgoal using False5 by blast
                subgoal using False6 by blast
                subgoal using False4 by blast
                subgoal using False2 by blast
                subgoal using False3 by blast
                subgoal by (solves simp)
                subgoal using False1 by blast
                done
                by (simp add: F_Interrupt limproc_is_thelub chain D_LUB)
            qed
          qed
        qed
      qed
    qed
  qed
qed


proof (subst Process_eq_spec, safe)
    by (simp add: limproc_is_thelub chain chain_right_Interrupt
                  D_Interrupt D_LUB) blast
next
  fix s
  next
      by (simp add: limproc_is_thelub chain chain_right_Interrupt
                    S_def D_Interrupt D_LUB) blast
      unfolding S_def
      by (metis prefixes_fin)
      unfolding S_def apply (intro allI Un_mono subsetI; simp)
      by (metis in_mono le_approx1 po_class.chainE chain)
      by (rule Inter_nonempty_finite_chained_sets)
      by (meson INT_iff ex_in_conv iso_tuple_UNIV_I)
      by (simp add: D_Interrupt limproc_is_thelub chain D_LUB S_def) blast
  qed
next
    by (simp add: limproc_is_thelub chain chain_right_Interrupt
                  F_Interrupt F_LUB T_LUB D_LUB) blast
next
  fix s X
  define S
    case True
      by (simp add: F_Interrupt) (metis Diff_insert_absorb)
  next
    case False
      by (simp add: limproc_is_thelub chain chain_right_Interrupt
                    S_def F_Interrupt F_LUB) blast
      unfolding S_def
      by (metis prefixes_fin)
      unfolding S_def apply (intro allI Un_mono subsetI; simp)
      subgoal by (meson le_approx2 po_class.chainE process_charn chain)
      subgoal by (metis le_approx2 po_class.chainE process_charn chain)
      subgoal by (metis insert_absorb insert_subset le_approx_lemma_T po_class.chainE chain)
      by (metis in_mono le_approx1 po_class.chainE chain)
      by (rule Inter_nonempty_finite_chained_sets)
      by (meson INT_iff ex_in_conv iso_tuple_UNIV_I)
    
      case True1 : True
      then obtain j t2
        by (simp add: F_Interrupt limproc_is_thelub chain F_LUB) blast
    next
      case False1: False
        case True2 : True
          by (simp add: S_def) blast
          by (simp add: F_Interrupt limproc_is_thelub chain F_LUB)
      next
        case False2: False
          case True3 : True
            by (simp add: S_def)
               (metis BOT_iff_D CollectI D_Bot NT_ND 
                      front_tickFree_Nil front_tickFree_single)
            by (simp add: F_Interrupt limproc_is_thelub chain T_LUB) blast
        next
          case False3 : False
            using "*"[rule_format, of i] apply (simp add: S_def, elim disjE)
            using False1 False2 False3 by blast+
           
            by (simp add: F_Interrupt limproc_is_thelub chain D_LUB)
               (metis same_append_eq)
        qed
      qed
    qed
  qed
qed
  

lemma Interrupt_cont[simp] : 
proof -
    by (rule contI2, rule monofunI, solves simp, simp add: cont_left_prem_Interrupt)
    by (simp add: contI2 cont_right_prem_Interrupt fun_belowD lub_fun monofunI)
    by (rule cont_compose) (simp add: cont_g)
  show ?thesis by (fact cont_apply[OF cont_f "*" "**"])
qed


end