theory Graph_Lemma
  imports Combinatorics_Words.Submonoids Glued_Codes

begin




theorem graph_lemma_last: "\<BB>\<^sub>F G = {last (Dec (\<BB>\<^sub>F G) g) | g. g \<in> G \<and> g \<noteq> \<epsilon>}"
proof
  interpret code "\<BB>\<^sub>F G"
    using free_basis_code.
  show "\<BB>\<^sub>F G \<subseteq> {last (Dec \<BB>\<^sub>F G g) |g. g \<in> G \<and> g \<noteq> \<epsilon>}"
  proof (rule ccontr)
    assume "\<not> \<BB>\<^sub>F G \<subseteq> {last (Dec \<BB>\<^sub>F G g) |g. g \<in> G \<and> g \<noteq> \<epsilon>}"
    then obtain w
      where "w \<in> \<BB>\<^sub>F G"
        and hd_dec_neq: "\<And>g. g \<in> G \<Longrightarrow> g \<noteq> \<epsilon> \<Longrightarrow> last (Dec (\<BB>\<^sub>F G) g) \<noteq> w"
      by blast
    have "G \<subseteq> \<langle>glued_gens w (\<BB>\<^sub>F G)\<rangle>"
      by (blast intro!: gen_in_free_hull hd_dec_neq del: notI)
    then have "\<langle>\<BB>\<^sub>F G\<rangle> \<subseteq> \<langle>glued_gens w (\<BB>\<^sub>F G)\<rangle>"
      unfolding basis_gen_hull_free
    then show False
  qed
  show "{last (Dec \<BB>\<^sub>F G g) |g. g \<in> G \<and> g \<noteq> \<epsilon>} \<subseteq> \<BB>\<^sub>F G"
    by (auto intro!: dec_in_lists lists_hd_in_set[reversed] gen_in_free_hull del: notI)
qed

theorem graph_lemma: "\<BB>\<^sub>F G = {hd (Dec (\<BB>\<^sub>F G) g) | g. g \<in> G \<and> g \<noteq> \<epsilon>}"
proof -
  have *: "rev u = last (Dec rev ` (\<BB>\<^sub>F G) (rev g)) \<and> g \<in> G \<and> g \<noteq> \<epsilon>
           \<longleftrightarrow> u = hd (Dec (\<BB>\<^sub>F G) g) \<and> g \<in> G \<and> g \<noteq> \<epsilon>" for u g
    by (cases "g \<in> G \<and> g \<noteq> \<epsilon>") (simp add: gen_in_free_hull last_rev hd_map code.dec_rev, blast)
  show ?thesis
    using graph_lemma_last[reversed, of G] unfolding *.
qed



lemma non_comm_hds_neq: assumes "u \<cdot> v \<noteq> v \<cdot> u" shows "hd (Dec \<BB>\<^sub>F {u,v} u) \<noteq> hd (Dec \<BB>\<^sub>F {u,v} v)"
using assms proof (rule contrapos_nn)
  assume hds_eq: "hd (Dec \<BB>\<^sub>F {u,v} u) = hd (Dec \<BB>\<^sub>F {u,v} v)"
  have **: "\<BB>\<^sub>F {u,v} = {hd (Dec \<BB>\<^sub>F {u,v} u)}"
  show "u \<cdot> v = v \<cdot> u"
    by (intro comm_rootI[of _ "hd (Dec \<BB>\<^sub>F {u,v} u)"] sing_gen)
       (simp_all add: **[symmetric] gen_in_free_hull)
qed

theorem assumes "u \<cdot> v \<noteq> v \<cdot> u" shows "code {u, v}"
proof
  have *: "w \<in> {u, v} \<Longrightarrow> w \<noteq> \<epsilon>" for w
  fix xs ys
  show "xs \<in> lists {u, v} \<Longrightarrow> ys \<in> lists {u, v} \<Longrightarrow> concat xs = concat ys \<Longrightarrow> xs = ys"
  proof (induction xs ys rule: list_induct2')
    case (4 x xs y ys)
      have **: "hd (Dec \<BB>\<^sub>F {u,v} (concat (z # zs))) = hd (Dec \<BB>\<^sub>F {u,v} z)"
        if "z # zs \<in> lists {u, v}" for z zs
        using that by (elim listsE) (simp del: insert_iff
          add: concat_in_hull' gen_in set_mp[OF hull_sub_free_hull]
               free_basis_dec_morph * basis_gen_hull_free)
      have "hd (Dec \<BB>\<^sub>F {u,v} x) = hd (Dec \<BB>\<^sub>F {u,v} y)"
        using "4.prems" by (simp only: **[symmetric])
      then have "x = y"
        by (elim listsE insertE emptyE) simp_all
      with 4 show "x # xs = y # ys" by simp
  qed (simp_all add: *)
