theory SymbolicPrimitive
  imports Run

begin


datatype cnt_expr =


datatype tag_val =

datatype '\<tau> constr =



type_synonym '\<tau> config =



where


fun symbolic_run_interpretation_primitive
where

fun symbolic_run_interpretation
where

lemma symbolic_run_interp_cons_morph:
by auto

where 



fun time_update
where



lemma context_consistency_preservationI:
unfolding consistent_context_def by auto

inductive context_independency
where
  NotTicks_independency:
| Ticks_independency:
| Timestamp_independency:



theorem symrun_interp_fixpoint:
by (induction \<Gamma>, simp+)


theorem symrun_interp_expansion:
by (induction \<Gamma>\<^sub>1, simp, auto)


lemma symrun_interp_assoc:
by auto

lemma symrun_interp_commute:
by (simp add: symrun_interp_expansion inf_sup_aci(1))

lemma symrun_interp_left_commute:
unfolding symrun_interp_expansion by auto

lemma symrun_interp_idem:
using symrun_interp_expansion by auto

lemma symrun_interp_left_idem:
using symrun_interp_expansion by auto

lemma symrun_interp_right_idem:
unfolding symrun_interp_expansion by auto

lemmas symrun_interp_aci =  symrun_interp_commute
                            symrun_interp_assoc
                            symrun_interp_left_commute
                            symrun_interp_left_idem

lemma symrun_interp_neutral1:
by simp

lemma symrun_interp_neutral2:
by simp


lemma TESL_sem_decreases_head:
by simp

lemma TESL_sem_decreases_tail:
by (simp add: symrun_interp_expansion)

lemma symrun_interp_formula_stuttering:
proof -
    using symrun_interp_expansion by simp
  thus ?thesis using assms symrun_interp_fixpoint by fastforce
qed


lemma symrun_interp_remdups_absorb:
proof (induction \<Gamma>)
  case Cons
    thus ?case using symrun_interp_formula_stuttering by auto
qed simp

lemma symrun_interp_set_lifting:
proof -     
    by (simp add: assms)
    by (simp add: symrun_interp_fixpoint)
    by (simp add: symrun_interp_fixpoint)
    by (simp add: assms)
  ultimately show ?thesis using symrun_interp_remdups_absorb by auto
qed

theorem symrun_interp_decreases_setinc:
proof -
    using symrun_interp_set_lifting decompose by blast
    by (simp add: symrun_interp_expansion)
  ultimately show ?thesis by simp
qed

lemma symrun_interp_decreases_add_head:
using symrun_interp_decreases_setinc assms by auto

lemma symrun_interp_decreases_add_tail:
proof -
  thus ?thesis by (simp add: symrun_interp_expansion dual_order.trans)
qed

lemma symrun_interp_absorb1:
by (simp add: Int_absorb1 symrun_interp_decreases_setinc
                          symrun_interp_expansion assms)

lemma symrun_interp_absorb2:
using symrun_interp_absorb1 symrun_interp_commute assms by blast

end
