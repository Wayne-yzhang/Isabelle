theory PDDL_STRIPS_Semantics
imports
  "Propositional_Proof_Systems.Formulas"
  "Propositional_Proof_Systems.Sema"
  "Propositional_Proof_Systems.Consistency"
  "Automatic_Refinement.Misc"
  "Automatic_Refinement.Refine_Util"
begin
no_notation insert ("_ \<triangleright> _" [56,55] 55)

definition "index_by f l \<equiv> map_of (map (\<lambda>x. (f x,x)) l)"

lemma index_by_eq_Some_eq[simp]:
  assumes "distinct (map f l)"
  shows "index_by f l n = Some x \<longleftrightarrow> (x\<in>set l \<and> f x = n)"
  unfolding index_by_def
  using assms
  by (auto simp: o_def)

lemma index_by_eq_SomeD:
  shows "index_by f l n = Some x \<Longrightarrow> (x\<in>set l \<and> f x = n)"
  unfolding index_by_def
  by (auto dest: map_of_SomeD)


lemma lookup_zip_idx_eq:
  assumes "length params = length args"
  assumes "i<length args"
  assumes "distinct params"
  assumes "k = params ! i"
  shows "map_of (zip params args) k = Some (args ! i)"
  using assms
  by (auto simp: in_set_conv_nth)

lemma rtrancl_image_idem[simp]: "R\<^sup>* `` R\<^sup>* `` s = R\<^sup>* `` s"
  by (metis relcomp_Image rtrancl_idemp_self_comp)



type_synonym name = string

datatype predicate = Pred (name: name)

  which gets either instantiated by variables (for domains)
  or objects (for problems).
\<close>
text \<open>An atom is either a predicate with arguments, or an equality statement.\<close>
text \<open>A type is a list of primitive type names.
  To model a primitive type, we use a singleton list.\<close>
text \<open>An effect contains a list of values to be added, and a list of values
  to be removed.\<close>
text \<open>Variables are identified by their names.\<close>
text \<open>Objects and constants are identified by their names\<close>
hide_const (open) VAR CONST \<comment> \<open>Refer to constructors by qualified names only\<close>
subsubsection \<open>Domains\<close>
text \<open>An action schema has a name, a typed parameter list, a precondition,
  and an effect.\<close>
text \<open>A predicate declaration contains the predicate's name and its
  argument types.\<close>
text \<open>A domain contains the declarations of primitive types, predicates,
  and action schemas.\<close>
  (types: "(name \<times> name) list") \<comment> \<open> \<open>(type, supertype)\<close> declarations. \<close>
subsubsection \<open>Problems\<close>
text \<open>A fact is a predicate applied to objects.\<close>
text \<open>A problem consists of a domain, a list of objects,
  a description of the initial state, and a description of the goal state. \<close>
subsubsection \<open>Plans\<close>
subsubsection \<open>Ground Actions\<close>
text \<open>The following datatype represents an action scheme that has been
  instantiated by replacing the arguments with concrete objects,
  also called ground action.
\<close>
subsection \<open>Closed-World Assumption, Equality, and Negation\<close>
  text \<open>Discriminator for atomic predicate formulas.\<close>
  text \<open>The world model is a set of (atomic) formulas\<close>
  text \<open>It is basic, if it only contains atoms\<close>
  text \<open>A valuation extracted from the atoms of the world model\<close>
  text \<open>Augment a world model by adding negated versions of all atoms
    not contained in it, as well as interpretations of equality.\<close>
  text \<open>Main theorem of this section:

  \<close>
subsubsection \<open>Proper Generalization\<close>
text \<open>Adding negation and equality is a proper generalization of the
  case without negation and equality\<close>
text \<open>Our extension to negation and equality is a proper generalization of the
  standard STRIPS semantics for formula without negation and equality\<close>
subsection \<open>STRIPS Semantics\<close>
text \<open>For this section, we fix a domain \<open>D\<close>, using Isabelle's
    executable, and transforms an initial world model \<open>M\<close> into a final
    model \<open>M'\<close>.
    than to explicitly define an indexed sequence \<open>M\<^sub>0\<dots>M\<^sub>N\<close> of intermediate world
      and does not contain negations, except for the encoding \<open>\<^bold>\<not>\<bottom>\<close> of true.
    precondition and effect. The substitution is applied via the \<open>map_xxx\<close>
    The parameters of the action are encoded as a list of \<open>name\<times>type\<close> pairs,
