theory Abstract_Multivariate_Polynomials
  imports
    Substitutions
    "HOL-Analysis.Finite_Cartesian_Product"
begin


locale multi_variate_polynomial = 
assumes



begin

lemmas vars_addD = vars_add[THEN subsetD]




  by (simp add: arity_def vars_zero)

proof - 
    by (intro card_mono) (auto simp add: vars_add vars_finite) 
  finally show ?thesis by (simp add: arity_def)
qed

lemma arity_inst: 
proof -
    by (auto simp add: vars_finite vars_inst card_mono)
    by (simp add: card_Diff_subset finite_subset vars_finite)
  finally show ?thesis by (simp add: arity_def)
qed


lemma eval_sum: 
proof - 
  proof (induction rule: finite.induct)
    case emptyI
    then show ?case by (simp add: eval_zero vars_zero)
  next
    case (insertI A a)
    then show ?case 
      by (auto simp add: eval_add vars_add sum.insert_if dest!: vars_addD)
  qed
  then show ?thesis ..
qed

lemma vars_sum: 
  using assms
proof (induction rule: finite.induct)
  case emptyI
  then show ?case by(auto simp add: vars_zero)
next
  case (insertI A a)
  then show ?case using insertI by(auto simp add: sum.insert_if dest: vars_addD)
qed

lemma deg_sum:
  using assms 
proof (induction rule: finite.induct)
  case emptyI
  then show ?case by(auto simp add: deg_zero)
next
  case (insertI A a)
  show ?case 
  proof(cases "A = {}")
    then show ?thesis by(simp)
  next
      by (intro Max_mono) auto
      by (auto 4 4 simp add: sum.insert_if intro: Max_ge *[THEN [2] le_trans] deg_add[THEN le_trans])
  qed
qed
     

lemma eval_sum_inst: 
proof - 

    by (simp add: eval_inst)
  finally show ?thesis .
qed

lemma  eval_sum_inst_commute:
proof -
