theory AOT_PLM
  imports AOT_Axioms
begin


unbundle AOT_no_atp


AOT_theorem "modus-ponens":
  using assms by (simp add: AOT_sem_imp)
lemmas MP = "modus-ponens"


AOT_theorem "non-con-thm-thm":
  using assms by simp

AOT_theorem "vdash-properties:1[1]":
  using assms unfolding AOT_model_act_axiom_def by blast

attribute_setup act_axiom_inst =
  "Instantiate modally fragile axiom as modally fragile theorem."

AOT_theorem "vdash-properties:1[2]":
  using assms unfolding AOT_model_axiom_def by blast

attribute_setup axiom_inst =
  "Instantiate axiom as theorem."

method cqt_2_lambda_inst_prover =
  (fast intro: AOT_instance_of_cqt_2_intro)
method "cqt:2[lambda]" =
  (rule "cqt:2[lambda]"[axiom_inst]; cqt_2_lambda_inst_prover)
lemmas "cqt:2" =
  "cqt:2[const_var]"[axiom_inst] "cqt:2[lambda]"[axiom_inst]
  AOT_instance_of_cqt_2_intro
method "cqt:2" = (safe intro!: "cqt:2")

AOT_theorem "vdash-properties:3":
  using assms by blast

AOT_theorem "vdash-properties:5":
  using MP assms by blast

AOT_theorem "vdash-properties:6":
  using MP assms by blast

AOT_theorem "vdash-properties:8":
  using assms by argo

AOT_theorem "vdash-properties:9":
  using MP "pl:1"[axiom_inst] assms by blast

AOT_theorem "vdash-properties:10":
  using MP assms by blast
lemmas "\<rightarrow>E" = "vdash-properties:10"


AOT_theorem "rule-gen":
  using assms by (metis AOT_var_of_term_inverse AOT_sem_denotes AOT_sem_forall)
lemmas GEN = "rule-gen"

AOT_theorem "RN[prem]":
AOT_theorem RN:
  using "RN[prem]" assms by blast


AOT_axiom "df-rules-formulas[1]":
  using assms
  by (auto simp: assms AOT_model_axiomI AOT_model_equiv_def AOT_sem_imp)
AOT_axiom "df-rules-formulas[2]":
  using assms
  by (auto simp: AOT_model_axiomI AOT_model_equiv_def AOT_sem_imp)
AOT_theorem "df-rules-formulas[3]":
  using "df-rules-formulas[1]"[axiom_inst, OF assms].
AOT_theorem "df-rules-formulas[4]":
  using "df-rules-formulas[2]"[axiom_inst, OF assms].


AOT_axiom "df-rules-terms[1]":
  using assms
  by (simp add: AOT_model_axiomI AOT_sem_conj AOT_sem_imp AOT_sem_eq
                AOT_sem_not AOT_sem_denotes AOT_model_id_def)
AOT_axiom "df-rules-terms[2]":
  by (metis "df-rules-terms[1]" case_unit_Unity assms)
AOT_theorem "df-rules-terms[3]":
  using "df-rules-terms[1]"[axiom_inst, OF assms].
AOT_theorem "df-rules-terms[4]":
  using "df-rules-terms[2]"[axiom_inst, OF assms].


  by (meson "pl:1"[axiom_inst] "pl:2"[axiom_inst] MP)

AOT_theorem "deduction-theorem":
  using assms by (simp add: AOT_sem_imp)
lemmas CP = "deduction-theorem"
lemmas "\<rightarrow>I" = "deduction-theorem"

AOT_theorem "ded-thm-cor:1":
  using "\<rightarrow>E" "\<rightarrow>I" assms by blast
AOT_theorem "ded-thm-cor:2":
  using "\<rightarrow>E" "\<rightarrow>I" assms by blast

AOT_theorem "ded-thm-cor:3":
  using "\<rightarrow>E" "\<rightarrow>I" assms by blast
declare "ded-thm-cor:3"[trans]
AOT_theorem "ded-thm-cor:4":
  using "\<rightarrow>E" "\<rightarrow>I" assms by blast

lemmas "Hypothetical Syllogism" = "ded-thm-cor:3"

  by (metis "pl:3"[axiom_inst] "\<rightarrow>I" "Hypothetical Syllogism")
  by (metis "pl:3"[axiom_inst] "\<rightarrow>I" "ded-thm-cor:4")
  by (meson "ded-thm-cor:4" "pl:3"[axiom_inst] "\<rightarrow>I")
  by (meson "pl:3"[axiom_inst] "Hypothetical Syllogism" "\<rightarrow>I")
  by (metis "useful-tautologies:4" "Hypothetical Syllogism" "\<rightarrow>I")

  by (metis "\<rightarrow>I" MP "useful-tautologies:4")

  by (metis "\<rightarrow>I" MP "useful-tautologies:3" "useful-tautologies:5")

  by (metis "\<rightarrow>I" MP "useful-tautologies:5")

  by (metis "\<rightarrow>I" MP "useful-tautologies:6")

  by (metis "\<rightarrow>I" MP "pl:3"[axiom_inst])

AOT_theorem "dn-i-e:1":
  using MP "useful-tautologies:2" assms by blast
lemmas "\<not>\<not>I" = "dn-i-e:1"
AOT_theorem "dn-i-e:2":
  using MP "useful-tautologies:1" assms by blast
lemmas "\<not>\<not>E" = "dn-i-e:2"

AOT_theorem "modus-tollens:1":
  using MP "useful-tautologies:5" assms by blast
AOT_theorem "modus-tollens:2":
  using "\<not>\<not>I" "modus-tollens:1" assms by blast
lemmas MT = "modus-tollens:1" "modus-tollens:2"

AOT_theorem "contraposition:1[1]":
  using "\<rightarrow>I" MT(1) assms by blast
AOT_theorem "contraposition:1[2]":
  using "\<rightarrow>I" "\<not>\<not>E" MT(2) assms by blast

AOT_theorem "contraposition:2":
  using "\<rightarrow>I" MT(2) assms by blast

AOT_theorem "reductio-aa:1":
  using "\<rightarrow>I" "\<not>\<not>E" MT(2) assms by blast
AOT_theorem "reductio-aa:2":
  using "reductio-aa:1" assms by blast
lemmas "RAA" = "reductio-aa:1" "reductio-aa:2"

  using "df-rules-formulas[4]" "if-p-then-p" MP
        "conventions:2" by blast

  using "df-rules-formulas[3]" MT(2) "useful-tautologies:2"
        "conventions:1" by blast

  by (meson "\<rightarrow>I" "df-rules-formulas[3]" MP RAA(1) "conventions:1")
  by (metis "\<rightarrow>I" "df-rules-formulas[3]" MT(2) RAA(2)
            "\<not>\<not>E" "conventions:1")
lemmas "Conjunction Simplification" = "con-dis-taut:1" "con-dis-taut:2"

  by (meson "contraposition:1[2]" "df-rules-formulas[4]"
            MP "\<rightarrow>I" "conventions:2")
  using "Hypothetical Syllogism" "df-rules-formulas[4]"
        "pl:1"[axiom_inst] "conventions:2" by blast
lemmas "Disjunction Addition" = "con-dis-taut:3" "con-dis-taut:4"

  by (metis "contraposition:2" "Hypothetical Syllogism" "\<rightarrow>I"
            "df-rules-formulas[4]" "conventions:1")
lemmas Adjunction = "con-dis-taut:5"

  by (metis Adjunction "\<rightarrow>I" "df-rules-formulas[4]" MP
            "Conjunction Simplification"(1) "conventions:3")
lemmas "Idempotence of &" = "con-dis-taut:6"

proof -
  {
      using "conventions:2"[THEN "df-rules-formulas[3]"] MP by blast
  }
  moreover {
  }
    using "conventions:3"[THEN "df-rules-formulas[4]"] MP
    by (metis Adjunction "\<rightarrow>I")
qed
lemmas "Idempotence of \<or>" = "con-dis-taut:7"


AOT_theorem "con-dis-i-e:1":
  using Adjunction MP assms by blast
lemmas "&I" = "con-dis-i-e:1"

AOT_theorem "con-dis-i-e:2:a":
  using "Conjunction Simplification"(1) MP assms by blast
AOT_theorem "con-dis-i-e:2:b":
  using "Conjunction Simplification"(2) MP assms by blast
lemmas "&E" = "con-dis-i-e:2:a" "con-dis-i-e:2:b"

AOT_theorem "con-dis-i-e:3:a":
  using "Disjunction Addition"(1) MP assms by blast
AOT_theorem "con-dis-i-e:3:b":
  using "Disjunction Addition"(2) MP assms by blast
AOT_theorem "con-dis-i-e:3:c":
  by (metis "con-dis-i-e:3:a" "Disjunction Addition"(2)
            "df-rules-formulas[3]" MT(1) RAA(1)
            "conventions:2" assms)
lemmas "\<or>I" = "con-dis-i-e:3:a" "con-dis-i-e:3:b" "con-dis-i-e:3:c"

AOT_theorem "con-dis-i-e:4:a":
  by (metis MP RAA(2) "df-rules-formulas[3]" "conventions:2" assms)
AOT_theorem "con-dis-i-e:4:b":
  using "con-dis-i-e:4:a" RAA(1) "\<rightarrow>I" assms by blast
AOT_theorem "con-dis-i-e:4:c":
  using "con-dis-i-e:4:a" RAA(1) "\<rightarrow>I" assms by blast
lemmas "\<or>E" = "con-dis-i-e:4:a" "con-dis-i-e:4:b" "con-dis-i-e:4:c"

AOT_theorem "raa-cor:1":
  using "&E" "\<or>E"(3) "\<or>I"(2) RAA(2) assms by blast
AOT_theorem "raa-cor:2":
  using "raa-cor:1" assms by blast
AOT_theorem "raa-cor:3":
  using RAA assms by blast
AOT_theorem "raa-cor:4":
  using RAA assms by blast
AOT_theorem "raa-cor:5":
  using RAA assms by blast
AOT_theorem "raa-cor:6":
  using RAA assms by blast

  by (rule "conventions:3"[THEN "df-rules-formulas[4]", THEN "\<rightarrow>E"])
     (metis "&E" "&I" "raa-cor:3" "\<rightarrow>I" MP)
  by (rule "conventions:3"[THEN "df-rules-formulas[4]", THEN "\<rightarrow>E"])
     (metis "&E" "&I" "raa-cor:3" "\<rightarrow>I" MP)
  by (rule "conventions:3"[THEN "df-rules-formulas[4]", THEN "\<rightarrow>E"])
     (metis "&I" "\<or>I"(1, 2) "\<or>E"(3) "\<rightarrow>I" MP "raa-cor:1")

  by (rule "conventions:3"[THEN "df-rules-formulas[4]", THEN "\<rightarrow>E"])
     (meson "&I" "&E" "\<rightarrow>I")
lemmas "Commutativity of &" = "oth-class-taut:2:a"
  by (rule "conventions:3"[THEN "df-rules-formulas[4]", THEN "\<rightarrow>E"])
     (metis "&I" "&E" "\<rightarrow>I")
lemmas "Associativity of &" = "oth-class-taut:2:b"
  by (rule "conventions:3"[THEN "df-rules-formulas[4]", THEN "\<rightarrow>E"])
     (metis "&I" "\<or>I"(1, 2) "\<or>E"(1) "\<rightarrow>I")
lemmas "Commutativity of \<or>" = "oth-class-taut:2:c"
  by (rule "conventions:3"[THEN "df-rules-formulas[4]", THEN "\<rightarrow>E"])
     (metis "&I" "\<or>I"(1, 2) "\<or>E"(1) "\<rightarrow>I")
lemmas "Associativity of \<or>" = "oth-class-taut:2:d"
  by (rule "conventions:3"[THEN "df-rules-formulas[4]", THEN "\<rightarrow>E"]; rule "&I";
      metis "&I" "df-rules-formulas[4]" "conventions:3" "&E"
            "Hypothetical Syllogism" "\<rightarrow>I" "df-rules-formulas[3]")
lemmas "Commutativity of \<equiv>" = "oth-class-taut:2:e"
  using "conventions:3"[THEN "df-rules-formulas[4]"]
        "conventions:3"[THEN "df-rules-formulas[3]"]
        "\<rightarrow>I" "\<rightarrow>E" "&E" "&I"
  by metis
lemmas "Associativity of \<equiv>" = "oth-class-taut:2:f"

  using "&I" "vdash-properties:6" "if-p-then-p"
        "df-rules-formulas[4]" "conventions:3" by blast
  using "&I" "useful-tautologies:1" "useful-tautologies:2" "\<rightarrow>E"
        "df-rules-formulas[4]" "conventions:3" by blast
  by (metis "&E" "\<rightarrow>E" RAA "df-rules-formulas[3]" "conventions:3")

  by (metis "\<rightarrow>E" "\<rightarrow>I")
  using "conventions:3"[THEN "df-rules-formulas[4]"]
        "conventions:3"[THEN "df-rules-formulas[3]"]
        "\<rightarrow>I" "\<rightarrow>E" "&E" "&I" RAA by metis
  using "conventions:3"[THEN "df-rules-formulas[4]"]
        "conventions:3"[THEN "df-rules-formulas[3]"]
        "\<rightarrow>I" "\<rightarrow>E" "&E" "&I" by metis
  using "conventions:3"[THEN "df-rules-formulas[4]"]
        "conventions:3"[THEN "df-rules-formulas[3]"]
        "\<rightarrow>I" "\<rightarrow>E" "&E" "&I" by metis
  using "conventions:3"[THEN "df-rules-formulas[4]"]
        "conventions:3"[THEN "df-rules-formulas[3]"]
        "\<rightarrow>I" "\<rightarrow>E" "&E" "&I" by metis
  using "conventions:3"[THEN "df-rules-formulas[4]"]
        "conventions:3"[THEN "df-rules-formulas[3]"]
        "\<rightarrow>I" "\<rightarrow>E" "&E" "&I" by metis
proof(safe intro!: "conventions:3"[THEN "df-rules-formulas[4]", THEN "\<rightarrow>E"]
                   "&I" "\<rightarrow>I"
           dest!: "conventions:3"[THEN "df-rules-formulas[3]", THEN "\<rightarrow>E"])
    using "&E" "\<or>I" "\<rightarrow>E" "&I" "raa-cor:1" "\<rightarrow>I" "\<or>E" that by metis
next
    using that "\<or>E" "&E" "raa-cor:3" by blast
next
    using that "\<or>E" "&E" "raa-cor:3" by blast
qed
proof (safe intro!: "conventions:3"[THEN "df-rules-formulas[4]", THEN "\<rightarrow>E"]
                    "&I" "\<rightarrow>I")
    by (metis that "&I" "\<or>I"(1, 2) "\<rightarrow>I" MT(1) "df-rules-formulas[4]"
              "raa-cor:3" "conventions:3")
next
    by (metis that "&E" "\<or>E"(2) "\<rightarrow>E" "df-rules-formulas[3]"
              "raa-cor:3" "conventions:3")
qed
  using "conventions:3"[THEN "df-rules-formulas[4]"]
        "\<rightarrow>I" "\<rightarrow>E" "&E" "&I" "\<or>I" "\<or>E" RAA by metis
  using "conventions:3"[THEN "df-rules-formulas[4]"]
        "\<rightarrow>I" "\<rightarrow>E" "&E" "&I" "\<or>I" "\<or>E" RAA by metis
  using "conventions:3"[THEN "df-rules-formulas[4]"]
        "\<rightarrow>I" "\<rightarrow>E" "&E" "&I" "\<or>I" "\<or>E" RAA by metis
  using "conventions:3"[THEN "df-rules-formulas[4]"]
        "\<rightarrow>I" "\<rightarrow>E" "&E" "&I" "\<or>I" "\<or>E" RAA by metis

lemmas DeMorgan = "oth-class-taut:5:c" "oth-class-taut:5:d"

AOT_theorem "oth-class-taut:6:a":
  using "conventions:3"[THEN "df-rules-formulas[4]"]
        "\<rightarrow>I" "\<rightarrow>E" "&E" "&I" "\<or>I" "\<or>E" RAA by metis
AOT_theorem "oth-class-taut:6:b":
  using "conventions:3"[THEN "df-rules-formulas[4]"]
        "\<rightarrow>I" "\<rightarrow>E" "&E" "&I" "\<or>I" "\<or>E" RAA by metis

  by (metis "&I" "\<rightarrow>E" "\<rightarrow>I")
lemmas Exportation = "oth-class-taut:7:a"
  by (metis "&E" "\<rightarrow>E" "\<rightarrow>I")
lemmas Importation = "oth-class-taut:7:b"

AOT_theorem "oth-class-taut:8:a":
  using "conventions:3"[THEN "df-rules-formulas[4]"] "\<rightarrow>I" "\<rightarrow>E" "&E" "&I"
  by metis
lemmas Permutation = "oth-class-taut:8:a"
AOT_theorem "oth-class-taut:8:b":
  by (metis "&I" "\<rightarrow>E" "\<rightarrow>I")
lemmas Composition = "oth-class-taut:8:b"
AOT_theorem "oth-class-taut:8:c":
  by (metis "\<or>E"(2) "\<rightarrow>E" "\<rightarrow>I" RAA(1))
AOT_theorem "oth-class-taut:8:d":
  by (metis "&E" "&I" "\<rightarrow>E" "\<rightarrow>I")
lemmas "Double Composition" = "oth-class-taut:8:d"
AOT_theorem "oth-class-taut:8:e":
  by (metis "conventions:3"[THEN "df-rules-formulas[4]"]
            "conventions:3"[THEN "df-rules-formulas[3]"]
            "\<rightarrow>I" "\<rightarrow>E" "&E" "&I")
AOT_theorem "oth-class-taut:8:f":
  by (metis "conventions:3"[THEN "df-rules-formulas[4]"]
            "conventions:3"[THEN "df-rules-formulas[3]"]
            "\<rightarrow>I" "\<rightarrow>E" "&E" "&I")
AOT_theorem "oth-class-taut:8:g":
  by (metis "conventions:3"[THEN "df-rules-formulas[4]"]
            "conventions:3"[THEN "df-rules-formulas[3]"]
            "\<rightarrow>I" "\<rightarrow>E" "&E" "&I" "\<or>I" "\<or>E"(1))
AOT_theorem "oth-class-taut:8:h":
  by (metis "conventions:3"[THEN "df-rules-formulas[4]"]
            "conventions:3"[THEN "df-rules-formulas[3]"]
            "\<rightarrow>I" "\<rightarrow>E" "&E" "&I" "\<or>I" "\<or>E"(1))
AOT_theorem "oth-class-taut:8:i":
  by (metis "conventions:3"[THEN "df-rules-formulas[4]"]
            "conventions:3"[THEN "df-rules-formulas[3]"]
            "\<rightarrow>I" "\<rightarrow>E" "&E" "&I")

AOT_theorem "intro-elim:1":
  by (metis assms "\<or>I"(1, 2) "\<or>E"(1) "\<rightarrow>I" "\<rightarrow>E" "&E"(1)
            "conventions:3"[THEN "df-rules-formulas[3]"])

AOT_theorem "intro-elim:2":
  by (meson "&I" "conventions:3" "df-rules-formulas[4]" MP assms)
lemmas "\<equiv>I" = "intro-elim:2"

AOT_theorem "intro-elim:3:a":
  by (metis "\<or>I"(1) "\<rightarrow>I" "\<or>E"(1) "intro-elim:1" assms)
AOT_theorem "intro-elim:3:b":
  using "intro-elim:3:a" "Commutativity of \<equiv>" assms by blast
AOT_theorem "intro-elim:3:c":
  using "intro-elim:3:b" "raa-cor:3" assms by blast
AOT_theorem "intro-elim:3:d":
  using "intro-elim:3:a" "raa-cor:3" assms by blast
AOT_theorem "intro-elim:3:e":
  by (metis "\<equiv>I" "\<rightarrow>I" "intro-elim:3:a" "intro-elim:3:b" assms)
declare "intro-elim:3:e"[trans]
AOT_theorem "intro-elim:3:f":
  by (metis "\<equiv>I" "\<rightarrow>I" "intro-elim:3:a" "intro-elim:3:b" assms)
lemmas "\<equiv>E" = "intro-elim:3:a" "intro-elim:3:b" "intro-elim:3:c"
              "intro-elim:3:d" "intro-elim:3:e" "intro-elim:3:f"

declare "Commutativity of \<equiv>"[THEN "\<equiv>E"(1), sym]

AOT_theorem "rule-eq-df:1":
  by (simp add: "\<equiv>I" "df-rules-formulas[3]" "df-rules-formulas[4]" assms)
lemmas "\<equiv>Df" = "rule-eq-df:1"
AOT_theorem "rule-eq-df:2":
  using "\<equiv>Df" "\<equiv>E"(1) assms by blast
lemmas "\<equiv>\<^sub>d\<^sub>fE" = "rule-eq-df:2"
AOT_theorem "rule-eq-df:3":
  using "\<equiv>Df" "\<equiv>E"(2) assms by blast
lemmas "\<equiv>\<^sub>d\<^sub>fI" = "rule-eq-df:3"

AOT_theorem  "df-simplify:1":
  by (metis "&E"(2) "&I" "\<equiv>E"(1, 2) "\<equiv>I" "\<rightarrow>I" assms)
AOT_theorem  "df-simplify:2":
  by (metis "&E"(1) "&I" "\<equiv>E"(1, 2) "\<equiv>I" "\<rightarrow>I" assms)
lemmas "\<equiv>S" = "df-simplify:1"  "df-simplify:2"


AOT_theorem "rule-ui:1":
  using "\<rightarrow>E" "cqt:1"[axiom_inst] assms by blast
AOT_theorem "rule-ui:2[const_var]":
  by (simp add: "rule-ui:1" "cqt:2[const_var]"[axiom_inst] assms)
AOT_theorem "rule-ui:2[lambda]":
  by (simp add: "rule-ui:1" "cqt:2[lambda]"[axiom_inst] assms)
AOT_theorem "rule-ui:3":
  by (simp add: "rule-ui:2[const_var]" assms)
lemmas "\<forall>E" = "rule-ui:1" "rule-ui:2[const_var]"
              "rule-ui:2[lambda]" "rule-ui:3"

  by (simp add: "\<forall>E"(2) "\<rightarrow>I")
AOT_theorem "cqt-orig:1[lambda]":
  by (simp add: "\<forall>E"(3) "\<rightarrow>I" assms)
  by (metis "\<rightarrow>I" GEN "vdash-properties:6" "\<forall>E"(4))
  using "cqt-orig:1[const_var]".

AOT_theorem universal:
  using GEN assms .
lemmas "\<forall>I" = universal


attribute_setup "\<forall>I" =
  "Quantify over a variable in a theorem using GEN."

attribute_setup "unvarify" =
  "Generalize a statement about variables to a statement about denoting terms."


  by (metis "\<equiv>I" "\<forall>E"(2) "\<forall>I" "\<rightarrow>I")

AOT_theorem "cqt-basic:2":
proof (rule "\<equiv>I"; rule "\<rightarrow>I")
    using "\<equiv>E"(1,2) "\<rightarrow>I" by blast+
    by (auto intro: "&I" "\<forall>I")
next
    using "\<forall>E"(2) "&E" by blast+
    using "\<equiv>I" by blast
qed

proof(rule "\<rightarrow>I")
  {
  }
  moreover {
  }
    using "\<equiv>I" "\<rightarrow>I" by auto
qed

proof(rule "\<rightarrow>I")
    by (auto intro: "\<forall>I" "&I")
qed

  using "cqt-orig:3" by blast

  by (meson "\<equiv>I" "\<rightarrow>I" GEN "cqt-orig:1[const_var]")

  by (metis "\<rightarrow>I" "vdash-properties:6" "rule-ui:3" "\<equiv>I" GEN)

  by (simp add: "\<or>I"(3) "\<rightarrow>I" GEN "cqt-orig:1[const_var]")

AOT_theorem "cqt-basic:9":
proof -
  {
      using "\<forall>E" by blast+
  }
  thus ?thesis using "&I" "\<rightarrow>I" "&E" by meson
qed

AOT_theorem "cqt-basic:10":
proof(rule "\<rightarrow>I"; rule "\<forall>I")
  fix \<beta>
qed

proof (rule "\<equiv>I"; rule "\<rightarrow>I")
  {
    fix \<alpha>
  }
next
  {
    fix \<alpha>
  }
qed

  by (simp add: "\<forall>E"(2) "\<rightarrow>I" GEN)

  using "\<equiv>I" "\<rightarrow>I" by blast

AOT_theorem "cqt-basic:14":
  using "cqt:3"[axiom_inst] by auto

AOT_theorem "cqt-basic:15":
  using "cqt-orig:2" by auto

AOT_theorem "universal-cor":
  using GEN assms .

AOT_theorem "existential:1":
proof(rule "raa-cor:1")
    using "\<equiv>\<^sub>d\<^sub>fI" "conventions:4" RAA "&I" by blast
qed

AOT_theorem "existential:2[const_var]":
  using "existential:1" "cqt:2[const_var]"[axiom_inst] assms by blast

AOT_theorem "existential:2[lambda]":
  using "existential:1" "cqt:2[lambda]"[axiom_inst] assms by blast
lemmas "\<exists>I" = "existential:1" "existential:2[const_var]"
              "existential:2[lambda]" 

AOT_theorem "instantiation":
  by (metis (no_types, lifting) "\<equiv>\<^sub>d\<^sub>fE" GEN "raa-cor:3" "conventions:4" assms)
lemmas "\<exists>E" = "instantiation"

  using "\<forall>E"(4) "\<exists>I"(2) "\<rightarrow>I" by metis

  using "\<forall>I" "\<exists>I"(2) "\<rightarrow>I" RAA by metis

  using "\<forall>E"(4) "\<exists>E" "\<rightarrow>I" RAA
  by (metis "cqt-further:2" "\<equiv>I" "modus-tollens:1")

  using "\<forall>I" "\<exists>I"(2)"\<rightarrow>I" RAA by metis

  by (metis (no_types, lifting) "&E" "&I" "\<exists>E" "\<exists>I"(2) "\<rightarrow>I")

  by (metis (mono_tags, lifting) "\<exists>E" "\<exists>I"(2) "\<or>E"(3) "\<or>I"(1, 2) "\<rightarrow>I" RAA(2))

  by (simp add: "oth-class-taut:3:a")

AOT_theorem "cqt-further:8":
  by (metis (mono_tags, lifting) "&E" "\<equiv>I" "\<forall>E"(2) "\<rightarrow>I" GEN)

AOT_theorem "cqt-further:9":
  by (metis (mono_tags, lifting) "&E" "\<equiv>I" "\<exists>I"(2) "\<rightarrow>I" GEN "raa-cor:4")

AOT_theorem "cqt-further:10":
proof(rule "\<rightarrow>I"; rule "raa-cor:2")
qed

  using "\<equiv>I" "\<rightarrow>I" "\<exists>I"(2) "\<exists>E" by metis


  using "cqt:2[lambda0]"[axiom_inst] by auto

  by (rule "\<equiv>\<^sub>d\<^sub>fI"[OF "existence:3"]) "cqt:2[lambda]"

proof -
    by (simp add: GEN RN "cqt:2[const_var]"[axiom_inst])
    using "cqt:1"[axiom_inst] "\<rightarrow>E" by blast
qed

class AOT_Term_id = AOT_Term +

instance \<kappa> :: AOT_Term_id
proof
  AOT_modally_strict {
    proof(rule "\<rightarrow>I")
        by (rule "\<or>I"(3)[OF "\<equiv>\<^sub>d\<^sub>fE"[OF "identity:1"]])
           (meson "\<rightarrow>I" "\<or>I"(1) "&E"(1))+
        by (rule "\<or>E"(1))
           (metis "cqt:5:a"[axiom_inst] "\<rightarrow>I" "\<rightarrow>E" "&E"(2))+
    qed
  }
next
  AOT_modally_strict {
    proof(rule "\<rightarrow>I")
        by (rule "\<or>I"(3)[OF "\<equiv>\<^sub>d\<^sub>fE"[OF "identity:1"]])
           (meson "\<rightarrow>I" "\<or>I" "&E")+
        by (rule "\<or>E"(1))
           (metis "cqt:5:a"[axiom_inst] "\<rightarrow>I" "\<rightarrow>E" "&E"(2))+
    qed
  }
qed

instance rel :: (AOT_\<kappa>s) AOT_Term_id
proof
  AOT_modally_strict {
    proof(rule "\<rightarrow>I")
    qed
  }
next
  AOT_modally_strict {
    proof(rule "\<rightarrow>I")
    qed
  }
qed

instance \<o> :: AOT_Term_id
proof
  AOT_modally_strict {
    fix \<phi> \<psi>
    proof(rule "\<rightarrow>I")
    qed
  }
next
  AOT_modally_strict {
    fix \<phi> \<psi>
    proof(rule "\<rightarrow>I")
    qed
  }
qed

instance prod :: (AOT_Term_id, AOT_Term_id) AOT_Term_id
proof
  AOT_modally_strict {
    proof (induct \<tau>; induct \<tau>'; rule "\<rightarrow>I")
      fix \<tau>\<^sub>1 \<tau>\<^sub>1' :: 'a and \<tau>\<^sub>2  \<tau>\<^sub>2' :: 'b
        using "t=t-proper:1" "&E" "vdash-properties:10" by blast+
    qed
  }
next
  AOT_modally_strict {
    proof (induct \<tau>; induct \<tau>'; rule "\<rightarrow>I")
      fix \<tau>\<^sub>1 \<tau>\<^sub>1' :: 'a and \<tau>\<^sub>2  \<tau>\<^sub>2' :: 'b
        using "t=t-proper:2" "&E" "vdash-properties:10" by blast+
    qed
  }
qed

AOT_register_type_constraints
AOT_register_type_constraints
AOT_register_type_constraints

AOT_theorem "id-rel-nec-equiv:1":
proof(rule "\<rightarrow>I")
    using "t=t-proper:1" "t=t-proper:2" MP by blast+
    apply (rule GEN)+ using "l-identity"[axiom_inst] by force
    using "\<forall>E"(1) by blast
    using assumption "\<rightarrow>E" by blast
    by (simp add: RN "oth-class-taut:3:a" "universal-cor")
    using "\<rightarrow>E" by blast
qed

proof(rule "\<rightarrow>I")
    using "t=t-proper:1" "t=t-proper:2" MP by blast+
    apply (rule GEN)+ using "l-identity"[axiom_inst] by force
    using "\<forall>E"(1) by blast
    using assumption "\<rightarrow>E" by blast
    by (simp add: RN "oth-class-taut:3:a" "universal-cor")
    using "\<rightarrow>E" by blast
qed

AOT_theorem "rule=E":
proof -
    using assms(2) "t=t-proper:1" "t=t-proper:2" "\<rightarrow>E" by blast+
    apply (rule GEN)+ using "l-identity"[axiom_inst] by blast
    using "\<forall>E"(1) by blast
qed

proof -
    using "lambda-predicates:3[zero]"[axiom_inst] "\<forall>I" by fast
    using "\<forall>E" by blast
qed

proof -
qed


  by (metis "\<equiv>E"(1) "\<equiv>E"(5) "Associativity of \<equiv>" "propositions-lemma:2")


proof -
    using "df-rules-terms[4]"[OF "oa:1", THEN "&E"(1)] "\<rightarrow>E" by blast
qed

proof -
    using "df-rules-terms[4]"[OF "oa:2", THEN "&E"(1)] "\<rightarrow>E" by blast
qed

proof(rule "raa-cor:1")
    using "Disjunction Addition"(1) "modus-tollens:1"
          "\<or>I"(2) "raa-cor:5" by blast+
    by (rule "df-rules-terms[4]"[OF "oa:1", THEN "&E"(1), THEN "\<rightarrow>E"]) "cqt:2"
    by (rule "df-rules-terms[4]"[OF "oa:2", THEN "&E"(1), THEN "\<rightarrow>E"]) "cqt:2"
    using A C "rule=E" by fast
    using B D "rule=E" by fast
    by (rule "lambda-predicates:2"[axiom_inst, THEN "\<rightarrow>E"]) "cqt:2"
    by (rule "lambda-predicates:2"[axiom_inst, THEN "\<rightarrow>E"]) "cqt:2"
qed

proof -
    using "identity:2" "df-rules-formulas[3]" "df-rules-formulas[4]"
          "\<rightarrow>E" "&E" "\<equiv>I" "\<rightarrow>I" by blast
    by (auto simp: "cqt:2[const_var]"[axiom_inst])
    using "\<equiv>S"(1) "&I" by blast
qed

AOT_theorem "p-identity-thm2:2[2]":
proof -
    using "identity:3[2]" "df-rules-formulas[3]" "df-rules-formulas[4]"
          "\<rightarrow>E" "&E" "\<equiv>I" "\<rightarrow>I" by blast
    by (auto simp: "cqt:2[const_var]"[axiom_inst])
  ultimately show ?thesis
    using "\<equiv>S"(1) "&I" by blast
qed
    
AOT_theorem "p-identity-thm2:2[3]":
proof -
    using "identity:3[3]" "df-rules-formulas[3]" "df-rules-formulas[4]"
          "\<rightarrow>E" "&E" "\<equiv>I" "\<rightarrow>I" by blast
    by (auto simp: "cqt:2[const_var]"[axiom_inst])
  ultimately show ?thesis
    using "\<equiv>S"(1) "&I" by blast
qed

AOT_theorem "p-identity-thm2:2[4]":
proof -
    using "identity:3[4]" "df-rules-formulas[3]" "df-rules-formulas[4]"
          "\<rightarrow>E" "&E" "\<equiv>I" "\<rightarrow>I" by blast
    by (auto simp: "cqt:2[const_var]"[axiom_inst])
  ultimately show ?thesis
    using "\<equiv>S"(1) "&I" by blast
qed

AOT_theorem "p-identity-thm2:2":
proof -
    using "identity:3" "df-rules-formulas[3]" "df-rules-formulas[4]"
          "\<rightarrow>E" "&E" "\<equiv>I" "\<rightarrow>I" by blast
    by (auto simp: "cqt:2[const_var]"[axiom_inst])
  ultimately show ?thesis
    using "\<equiv>S"(1) "&I" by blast
qed

AOT_theorem "p-identity-thm2:3":
proof -
    using "identity:4" "df-rules-formulas[3]" "df-rules-formulas[4]"
          "\<rightarrow>E" "&E" "\<equiv>I" "\<rightarrow>I" by blast
    by (auto simp: "cqt:2[const_var]"[axiom_inst])
  ultimately show ?thesis
    using "\<equiv>S"(1) "&I" by blast
qed


instance \<kappa> :: AOT_Term_id_2
proof
  AOT_modally_strict {
    fix x
    {
        using RN GEN "oth-class-taut:3:a" by fast
    }
    moreover {
        using RN GEN "oth-class-taut:3:a" by fast
    }
      using "oa-exist:3" "\<or>I"(1) "\<or>I"(2) "\<or>E"(3) "raa-cor:1" by blast
      using "identity:1"[THEN "df-rules-formulas[4]"] "\<rightarrow>E" by blast
  }
qed

instance rel :: ("{AOT_\<kappa>s,AOT_Term_id_2}") AOT_Term_id_2
proof
  AOT_modally_strict {
    fix F :: "<'a> AOT_var"
      by (simp add: "lambda-predicates:3"[axiom_inst])
      by "cqt:2[lambda]"
      using "lambda-predicates:1"[axiom_inst] "\<rightarrow>E" by blast
  }
qed

instance \<o> :: AOT_Term_id_2
proof
  AOT_modally_strict {
    fix p
      by (simp add: "lambda-predicates:3[zero]"[axiom_inst])
      by (rule "cqt:2[lambda0]"[axiom_inst])
      using "lambda-predicates:1[zero]"[axiom_inst] "\<rightarrow>E" by blast
  }
qed

instance prod :: (AOT_Term_id_2, AOT_Term_id_2) AOT_Term_id_2
proof
  AOT_modally_strict {
    proof (induct)
        using that
      proof (induct \<tau>)
        fix \<tau>\<^sub>1 :: 'a and \<tau>\<^sub>2 :: 'b
          using "\<equiv>\<^sub>d\<^sub>fE" "&E" tuple_denotes by blast+
          using "id-eq:1"[unvarify \<alpha>] by blast+
          by (metis "\<equiv>\<^sub>d\<^sub>fI" "&I" tuple_identity_1)
      qed
    qed
  }
qed

AOT_register_type_constraints
AOT_register_type_constraints
AOT_register_type_constraints

  by (meson "rule=E" "deduction-theorem")

  using "rule=E" "\<rightarrow>I" "&E" by blast

proof (rule "\<equiv>I"; rule "\<rightarrow>I")
    by (rule GEN) (metis "\<equiv>I" "\<rightarrow>I" 0 "1" "rule=E")
next
qed

AOT_theorem "rule=I:1":
proof -
    by (rule GEN) (metis "id-eq:1")
qed

AOT_theorem "rule=I:2[const_var]": "\<alpha> = \<alpha>"
  using "id-eq:1".

AOT_theorem "rule=I:2[lambda]":
  shows "[\<lambda>\<nu>\<^sub>1...\<nu>\<^sub>n \<phi>{\<nu>\<^sub>1...\<nu>\<^sub>n}] = [\<lambda>\<nu>\<^sub>1...\<nu>\<^sub>n \<phi>{\<nu>\<^sub>1...\<nu>\<^sub>n}]"
proof -
    by (rule GEN) (metis "id-eq:1")
    using assms by (rule "cqt:2[lambda]"[axiom_inst])
    using assms "\<forall>E" by blast
qed

lemmas "=I" = "rule=I:1" "rule=I:2[const_var]" "rule=I:2[lambda]"

AOT_theorem "rule-id-df:1":
proof -
    using "df-rules-terms[3]" assms(1) "&E" by blast
    using assms(2) "\<rightarrow>E" by blast
qed

AOT_theorem "rule-id-df:1[zero]":
proof -
    using "df-rules-terms[4]" assms(1) "&E" by blast
    using assms(2) "\<rightarrow>E" by blast
qed

AOT_theorem "rule-id-df:2:a":
proof -
qed

AOT_theorem "rule-id-df:2:a[2]":
proof -
    using "rule-id-df:1" assms(1,2) by auto
qed

AOT_theorem "rule-id-df:2:a[zero]":
proof -
qed

lemmas "=\<^sub>d\<^sub>fE" = "rule-id-df:2:a" "rule-id-df:2:a[zero]"

AOT_theorem "rule-id-df:2:b":
proof -
    using "rule-id-df:1" assms(1,2) by blast
    using "rule=E" "=I"(1) "t=t-proper:1" "\<rightarrow>E" by fast
qed

AOT_theorem "rule-id-df:2:b[2]":
proof -
    using "=I"(1) "rule-id-df:2:a[2]" RAA(1) assms(1,2) "\<rightarrow>I" by metis
    using "rule=E" "=I"(1) "t=t-proper:1" "\<rightarrow>E" by fast
qed

AOT_theorem "rule-id-df:2:b[zero]":
proof -
    using "rule=E" "=I"(1) "t=t-proper:1" "\<rightarrow>E" by fast
qed

lemmas "=\<^sub>d\<^sub>fI" = "rule-id-df:2:b" "rule-id-df:2:b[zero]"

  by (metis "\<exists>E" "rule=I:1" "t=t-proper:2" "\<rightarrow>I" "\<exists>I"(1) "\<equiv>I" "\<rightarrow>E")

  by (metis "\<exists>E" "rule=E" "cqt:2[const_var]"[axiom_inst] "\<rightarrow>I" "\<forall>E"(1))

  by (meson "\<exists>I"(2) "id-eq:1")

AOT_theorem "free-thms:3[lambda]":
  by (meson "=I"(3) assms "cqt:2[lambda]"[axiom_inst] "existential:1")

AOT_theorem "free-thms:4[rel]":
  by (metis "rule=I:1" "&E"(1) "\<or>E"(1) "cqt:5:a"[axiom_inst]
            "cqt:5:b"[axiom_inst] "\<rightarrow>I" "\<exists>I"(1))

AOT_theorem "free-thms:4[vars]":
  by (metis "rule=I:1" "&E"(2) "\<or>E"(1) "cqt:5:a"[axiom_inst]
            "cqt:5:b"[axiom_inst] "\<rightarrow>I" "\<exists>I"(1))

AOT_theorem "free-thms:4[1,rel]":
  by (metis "rule=I:1" "&E"(1) "\<or>E"(1) "cqt:5:a"[axiom_inst]
            "cqt:5:b"[axiom_inst] "\<rightarrow>I" "\<exists>I"(1))
AOT_theorem "free-thms:4[1,1]":
  by (metis "rule=I:1" "&E"(2) "\<or>E"(1) "cqt:5:a"[axiom_inst]
            "cqt:5:b"[axiom_inst] "\<rightarrow>I" "\<exists>I"(1))

AOT_theorem "free-thms:4[2,rel]":
  by (metis "rule=I:1" "&E"(1) "\<or>E"(1) "cqt:5:a[2]"[axiom_inst]
            "cqt:5:b[2]"[axiom_inst] "\<rightarrow>I" "\<exists>I"(1))
AOT_theorem "free-thms:4[2,1]":
  by (metis "rule=I:1" "&E" "\<or>E"(1) "cqt:5:a[2]"[axiom_inst]
            "cqt:5:b[2]"[axiom_inst] "\<rightarrow>I" "\<exists>I"(1))
AOT_theorem "free-thms:4[2,2]":
  by (metis "rule=I:1" "&E"(2) "\<or>E"(1) "cqt:5:a[2]"[axiom_inst]
            "cqt:5:b[2]"[axiom_inst] "\<rightarrow>I" "\<exists>I"(1))
AOT_theorem "free-thms:4[3,rel]":
  by (metis "rule=I:1" "&E"(1) "\<or>E"(1) "cqt:5:a[3]"[axiom_inst]
            "cqt:5:b[3]"[axiom_inst] "\<rightarrow>I" "\<exists>I"(1))
AOT_theorem "free-thms:4[3,1]":
  by (metis "rule=I:1" "&E" "\<or>E"(1) "cqt:5:a[3]"[axiom_inst]
            "cqt:5:b[3]"[axiom_inst] "\<rightarrow>I" "\<exists>I"(1))
AOT_theorem "free-thms:4[3,2]":
  by (metis "rule=I:1" "&E" "\<or>E"(1) "cqt:5:a[3]"[axiom_inst]
            "cqt:5:b[3]"[axiom_inst] "\<rightarrow>I" "\<exists>I"(1))
AOT_theorem "free-thms:4[3,3]":
  by (metis "rule=I:1" "&E"(2) "\<or>E"(1) "cqt:5:a[3]"[axiom_inst]
            "cqt:5:b[3]"[axiom_inst] "\<rightarrow>I" "\<exists>I"(1))
AOT_theorem "free-thms:4[4,rel]":
  by (metis "rule=I:1" "&E"(1) "\<or>E"(1) "cqt:5:a[4]"[axiom_inst]
            "cqt:5:b[4]"[axiom_inst] "\<rightarrow>I" "\<exists>I"(1))
AOT_theorem "free-thms:4[4,1]":
  by (metis "rule=I:1" "&E" "\<or>E"(1) "cqt:5:a[4]"[axiom_inst]
            "cqt:5:b[4]"[axiom_inst] "\<rightarrow>I" "\<exists>I"(1))
AOT_theorem "free-thms:4[4,2]":
  by (metis "rule=I:1" "&E" "\<or>E"(1) "cqt:5:a[4]"[axiom_inst]
            "cqt:5:b[4]"[axiom_inst] "\<rightarrow>I" "\<exists>I"(1))
AOT_theorem "free-thms:4[4,3]":
  by (metis "rule=I:1" "&E" "\<or>E"(1) "cqt:5:a[4]"[axiom_inst]
            "cqt:5:b[4]"[axiom_inst] "\<rightarrow>I" "\<exists>I"(1))
AOT_theorem "free-thms:4[4,4]":
  by (metis "rule=I:1" "&E"(2) "\<or>E"(1) "cqt:5:a[4]"[axiom_inst]
            "cqt:5:b[4]"[axiom_inst] "\<rightarrow>I" "\<exists>I"(1))

  by (rule GEN) (fact "cqt:2[const_var]"[axiom_inst])
  by (rule GEN) (fact "free-thms:3[const_var]")

  by (rule RN) (fact "cqt:2[const_var]"[axiom_inst])
  by (rule RN) (fact "free-thms:3[const_var]")

  by (rule RN) (fact "ex:1:a")
  by (rule RN) (fact "ex:1:b")

  by (rule GEN; rule RN) (fact "cqt:2[const_var]"[axiom_inst])
  by (rule GEN; rule RN) (fact "free-thms:3[const_var]")

  by (rule RN) (simp add: "ex:4:a")
  by (rule RN) (simp add: "ex:4:b")

  by (rule RN; rule GEN) (fact "id-eq:1")
  by (rule GEN; rule RN) (fact "id-eq:1")

proof(rule "\<rightarrow>I")
    by (rule RN) (fact "id-eq:1")
qed

proof(rule "\<rightarrow>I")
    using calculation "t=t-proper:1" "\<rightarrow>E" by blast
    using calculation "all-self=:2" "\<forall>E"(1) by blast
qed

proof (rule "\<equiv>I"; rule "\<rightarrow>I")
    by (rule "\<exists>I"(2)[where \<beta>=\<alpha>]; rule "&I")
       (auto simp: "id-eq:1" asm)
next
    using "\<exists>E"[rotated, OF 0] by blast
qed

proof(rule "\<rightarrow>I")
    by (rule GEN) (fact "term-out:1")
    using "\<forall>E" by blast
qed

AOT_theorem "term-out:3":
  apply (rule "\<equiv>I"; rule "\<rightarrow>I")
   apply (frule "&E"(1))
   apply (drule "&E"(2))
   apply (rule GEN; rule "\<equiv>I"; rule "\<rightarrow>I")
  using "rule-ui:2[const_var]" "vdash-properties:5"
    apply blast
   apply (meson "rule=E" "id-eq:1")
  apply (rule "&I")
  using "id-eq:1" "\<equiv>E"(2) "rule-ui:3"
   apply blast
  apply (rule GEN; rule "\<rightarrow>I")
  using "\<equiv>E"(1) "rule-ui:2[const_var]"
  by blast

AOT_theorem "term-out:4":
  using "term-out:3" .

AOT_syntax_print_translations
  "_AOT_exists_unique \<tau> \<phi>" <= "CONST AOT_exists_unique (_abs \<tau> \<phi>)"
syntax
