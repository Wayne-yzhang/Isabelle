theory Univariate_Roots_Bound
  imports 
    "HOL-Computational_Algebra.Polynomial"  
begin



  using MOST_coeff_eq_0 eventually_cofinite 
  by fastforce


lemma poly_degree_eq_Max_non_zero_coeffs: 
  "degree p = Max (insert 0 {n. poly.coeff p n \<noteq> 0})"
  by (intro le_antisym degree_le) (auto simp add: finite_non_zero_coeffs le_degree)




lemma card_poly_mult_roots:
  fixes p :: "'a::{comm_ring_1,ring_no_zero_divisors} poly" 
    and q :: "'a::{comm_ring_1,ring_no_zero_divisors} poly" 
  assumes "p \<noteq> 0" and "q \<noteq> 0" 
  shows "card {x. poly p x * poly q x = 0} \<le> card {x. poly p x = 0} + card {x. poly q x = 0}"
proof -
  have "card {x . poly p x * poly q x = 0} \<le> card ({x . poly p x = 0} \<union> {x . poly q x = 0})"
    by (auto simp add: poly_roots_finite assms intro!: card_mono)
  also have "\<dots> \<le> card {x . poly p x = 0} + card {x . poly q x = 0}" 
    by(auto simp add: Finite_Set.card_Un_le)
  finally show ?thesis .
qed


lemma univariate_roots_bound:
  using assms
proof (induction "degree p" arbitrary: p rule: nat_less_induct)
  case 1
  then show ?case
  proof(cases "\<exists>r. poly p r = 0")

    then obtain r where "poly p r = 0" by(auto)
    let ?xr = "[:- r, 1:] ^ order r p"

    have "?xr \<noteq> 0" by(simp)
      by (simp add: degree_power_eq order_root) 
    have "degree q < degree p" 
            degree_mult_eq[where p = "?xr" and q = "q"] 
      by (simp)
      by(simp add: order_root)
      by (simp)

    have "card {r . poly p r = 0} \<le> degree p" 
            poly_mult[where p = "?xr" and q = "q"] 
            card_poly_mult_roots[where p = "?xr" and q = "q"] 
            x_roots q_roots  
      by (simp) 
    then show ?thesis .    
  next
    then show ?thesis by simp
  qed
qed


end