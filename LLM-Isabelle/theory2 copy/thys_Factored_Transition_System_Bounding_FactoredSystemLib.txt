theory FactoredSystemLib
  imports Main "HOL-Library.Finite_Map"
begin 







hide_const (open) Map.map_add
no_notation Map.map_add (infixl "++" 100)
definition fmap_add_ltr :: "('a, 'b) fmap \<Rightarrow> ('a, 'b) fmap \<Rightarrow> ('a, 'b) fmap" (infixl "++" 100) where 
  "m1 ++ m2 \<equiv> m2 ++\<^sub>f m1"  




type_synonym ('a) state = "('a, bool) fmap" 
type_synonym ('a) action = "('a state \<times> 'a state)"
type_synonym ('a) problem = "('a state \<times> 'a state) set"


definition action_dom where 
  "action_dom s1 s2 \<equiv> (fmdom' s1 \<union> fmdom' s2)"





definition prob_dom where 
  "prob_dom prob \<equiv> \<Union> ((\<lambda> (s1, s2). action_dom s1 s2) ` prob)"

definition valid_states where
  "valid_states prob \<equiv> {s. fmdom' s = prob_dom prob}"

definition valid_plans  where 
  "valid_plans prob \<equiv> {as. set as \<subseteq> prob}"

definition state_succ where
  "state_succ s a \<equiv> (if fst a \<subseteq>\<^sub>f s then (snd a ++ s) else s)"

end