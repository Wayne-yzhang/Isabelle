theory Var_list
imports Main
begin


type_synonym ('a, '\<sigma>) var_list = "('\<sigma> \<Rightarrow> 'a list) * (('a list \<Rightarrow> 'a list) \<Rightarrow> '\<sigma> \<Rightarrow> '\<sigma>)"


definition select :: "('a, 'r) var_list \<Rightarrow> 'r \<Rightarrow> 'a"
where "select f \<equiv> \<lambda> A. hd ((fst f) A)"


definition increase :: "('a, 'r) var_list \<Rightarrow> 'a \<Rightarrow> 'r \<Rightarrow> 'r"
where "increase f val \<equiv> (snd f) (\<lambda> l. val#l)"


definition increase0 :: "('a, 'r) var_list \<Rightarrow> 'r \<Rightarrow> 'r"
where "increase0 f \<equiv> (snd f) (\<lambda> l. ((SOME val. True)#l))"


definition decrease :: "('a, 'r) var_list \<Rightarrow> 'r \<Rightarrow> 'r"
where "decrease f \<equiv> (snd f) (\<lambda> l. (tl l))"


definition update :: "('a, 'r) var_list \<Rightarrow> ('a \<Rightarrow> 'a) \<Rightarrow> 'r \<Rightarrow> 'r"
where "update f upd \<equiv> (snd f) (\<lambda> l. (upd (hd l))#(tl l))"


definition update0 :: "('a, 'r) var_list \<Rightarrow> 'r \<Rightarrow> 'r"
where "update0 f \<equiv> (snd f) (\<lambda> l. ((SOME upd. True) (hd l))#(tl l))"

axiomatization  where select_increase: "(select v (increase v a s)) = a"



syntax "_VAR_LIST" :: "id \<Rightarrow> ('a, 'r) var_list"  ("VAR'_LIST _")
translations "VAR_LIST x" => "(x, _update_name x)"

end
