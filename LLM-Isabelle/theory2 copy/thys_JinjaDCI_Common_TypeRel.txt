    Based on the Jinja theory Common/TypeRel.thy by Tobias Nipkow
*)
(*<*)by(erule subcls1.induct)(fastforce simp add:is_class_def)(*>*)
(*<*)by(fastforce dest:subcls1D)(*>*)
(*<*)
(*>*)
(*<*)
(*>*)
(*<*)
(*>*)
(*<*)by (auto elim: widen.cases)(*>*)
(*<*)by (auto elim: widen.cases)(*>*)
(*<*)by (auto elim: widen.cases)(*>*)
(*<*)by (auto elim: widen.cases)(*>*)
(*<*)by (auto elim: widen.cases)(*>*)
(*<*)by (auto elim: widen.cases)(*>*)
(*<*)
(*>*)
(*<*)
(*>*)
(*<*)
(*>*)
(*<*)by(induct T, auto)(*>*)
(*<*)
(*>*)
(*<*)by (rule list_all2_trans, rule widen_trans)(*>*)
(*<*)
(*>*)
 (*<*)
(*>*)
 (*<*)by(induct rule:Methods.induct) auto(*>*)
 (*<*)
(*>*)
(*<*)
(*>*)
(*FIXME something wrong with induct: need to attache [consumes 1]
directly to proof of thm, declare does not work. *)
(*<*)
(*>*)
 (*<*)by(fastforce dest: sees_methods_fun simp:Method_def)(*>*)
 (*<*)by(clarsimp simp:Method_def sees_methods_decl_above)(*>*)
(*<*)by(fastforce simp:Method_def dest!: visible_methods_exist)(*>*)
 (*<*)by(fastforce simp: Method_def intro:sees_methods_idemp)(*>*)
 (*<*)
(*>*)
(*<*)by (auto simp add: is_class_def elim: Methods.induct)(*>*)
(*<*)by (auto simp add: is_class_def Method_def dest: sees_methods_is_class)(*>*)
(*<*)by(drule sees_method_idemp, rule sees_method_is_class, assumption)(*>*)
(*<*)by (auto simp add: is_class_def elim: Fields.induct)(*>*)
 (*<*)
(*>*)
(*<*)
(*>*)
(*<*)
(*>*)
(*<*)
(*>*)
(*<*)
(*>*)
(*<*)
(*>*)
(*<*)by(fastforce simp:has_field_def dest:has_fields_fun)(*>*)
(*<*)
(*>*)
(*<*)by (induct t) (auto simp:fun_upd_apply split: if_split_asm)(*>*)
(*<*)by (induct t) (auto simp:fun_upd_apply split: if_split_asm)(*>*)
(*<*)
(*>*)
(*<*)by(auto simp add:has_field_def sees_field_def map_of_remap_SomeD2)(*>*)
(*<*)by(fastforce simp:sees_field_def dest:has_fields_fun)(*>*)
(*<*)
(*>*)
(*<*)
(*>*)
(*<*)by (auto simp add: is_class_def has_field_def elim: Fields.induct)(*>*)
(*<*)by(drule has_field_idemp, rule has_field_is_class, assumption)(*>*)
(*<*)by (unfold fields_def) (auto dest: has_fields_fun)(*>*)
(*<*)by (unfold field_def) (auto dest: sees_field_fun)(*>*)
(*<*)by (unfold method_def) (auto dest: sees_method_fun)(*>*)
(*<*) by (unfold ifields_def) (auto simp: sees_field_def map_of_SomeD map_of_remap_SomeD2) (*>*)
(*<*) by (unfold isfields_def) (auto simp: sees_field_def map_of_SomeD map_of_remap_SomeD2) (*>*)
(*<*)
(*>*)
