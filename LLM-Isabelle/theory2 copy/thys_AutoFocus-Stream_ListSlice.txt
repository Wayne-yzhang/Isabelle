theory ListSlice
imports "List-Infinite.ListInf"
begin


definition ilist_slice  :: "'a ilist \<Rightarrow> nat \<Rightarrow> 'a list ilist"
  where "ilist_slice f k \<equiv> \<lambda>x. map f [x * k..<Suc x * k]"

primrec list_slice_aux :: "'a list \<Rightarrow> nat \<Rightarrow> nat \<Rightarrow> 'a list list"
where
  "list_slice_aux xs k 0 = []"
| "list_slice_aux xs k (Suc n) = take k xs # list_slice_aux (xs \<up> k) k n"

definition list_slice :: "'a list \<Rightarrow> nat \<Rightarrow> 'a list list"
  where "list_slice xs k \<equiv> list_slice_aux xs k (length xs div k)"

definition list_slice2 :: "'a list \<Rightarrow> nat \<Rightarrow> 'a list list"
  where "list_slice2 xs k \<equiv>
    list_slice xs k @ (if length xs mod k = 0 then [] else [xs \<up> (length xs div k * k)])"

