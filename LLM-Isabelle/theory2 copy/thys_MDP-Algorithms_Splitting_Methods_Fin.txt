theory Splitting_Methods_Fin
  imports 
    "MDP-Rewards.Blinfun_Util" 
    MDP_fin
    Splitting_Methods
begin

definition upper_triangular_blin :: "('a::linorder \<Rightarrow>\<^sub>b real) \<Rightarrow>\<^sub>L ('a \<Rightarrow>\<^sub>b real) \<Rightarrow> bool" where 
  "upper_triangular_blin X \<longleftrightarrow> (\<forall>u v i. (\<forall>j \<ge> i. apply_bfun v j = apply_bfun u j) \<longrightarrow> X v i = X u i)"

definition strict_upper_triangular_blin :: "('a::linorder \<Rightarrow>\<^sub>b real) \<Rightarrow>\<^sub>L ('a \<Rightarrow>\<^sub>b real) \<Rightarrow> bool" where 
  "strict_upper_triangular_blin X \<longleftrightarrow> (\<forall>u v i. (\<forall>j > i. apply_bfun v j = apply_bfun u j) \<longrightarrow> X v i = X u i)"

lemma upper_triangularD:
  fixes X :: "('a::linorder \<Rightarrow>\<^sub>b real) \<Rightarrow>\<^sub>L ('a \<Rightarrow>\<^sub>b real)"
    and u v :: "'a \<Rightarrow>\<^sub>b real"
  assumes "upper_triangular_blin X" and "\<And>j. i \<le> j \<Longrightarrow> v j = u j"
  shows "X v i = X u i"
  using assms by (auto simp: upper_triangular_blin_def)

lemma upper_triangularI[intro]:
  fixes X :: "('a::linorder \<Rightarrow>\<^sub>b real) \<Rightarrow>\<^sub>L ('a \<Rightarrow>\<^sub>b real)"
  assumes "\<And>i u v. (\<And>j. i \<le> j \<Longrightarrow> apply_bfun v j = apply_bfun u j) \<Longrightarrow> X v i = X u i"
  shows "upper_triangular_blin X"
  using assms by (fastforce simp: upper_triangular_blin_def)

lemma strict_upper_triangularD:
  fixes X :: "('a::linorder \<Rightarrow>\<^sub>b real) \<Rightarrow>\<^sub>L ('a \<Rightarrow>\<^sub>b real)" and u v :: "'a \<Rightarrow>\<^sub>b real"
  assumes "strict_upper_triangular_blin X" and "\<And>j. i < j \<Longrightarrow> v j = u j"
  shows "X v i = X u i"
  using assms by (auto simp: strict_upper_triangular_blin_def)

lemma strict_imp_upper_triangular_blin: "strict_upper_triangular_blin X \<Longrightarrow> upper_triangular_blin X"
  unfolding strict_upper_triangular_blin_def upper_triangular_blin_def by auto

definition lower_triangular_blin :: "('a::linorder \<Rightarrow>\<^sub>b real) \<Rightarrow>\<^sub>L ('a \<Rightarrow>\<^sub>b real) \<Rightarrow> bool" where
  "lower_triangular_blin X \<longleftrightarrow> (\<forall>u v i. (\<forall>j \<le> i. apply_bfun v j = apply_bfun u j) \<longrightarrow> X v i = X u i)"

definition strict_lower_triangular_blin :: "('a::linorder \<Rightarrow>\<^sub>b real) \<Rightarrow>\<^sub>L ('a \<Rightarrow>\<^sub>b real) \<Rightarrow> bool" where
  "strict_lower_triangular_blin X \<longleftrightarrow> (\<forall>u v i. (\<forall>j < i. apply_bfun v j = apply_bfun u j) \<longrightarrow> X v i = X u i)"

lemma lower_triangularD:
  fixes X :: "('a::linorder \<Rightarrow>\<^sub>b real) \<Rightarrow>\<^sub>L ('a \<Rightarrow>\<^sub>b real)"
    and u v :: "'a \<Rightarrow>\<^sub>b real"
  assumes "lower_triangular_blin X" and "\<And>j. i \<ge> j \<Longrightarrow> v j = u j"
  shows "X v i = X u i" 
  using assms by (auto simp: lower_triangular_blin_def)

lemma lower_triangularI[intro]:
  fixes X :: "('a::linorder \<Rightarrow>\<^sub>b real) \<Rightarrow>\<^sub>L ('a \<Rightarrow>\<^sub>b real)"
  assumes "\<And>i u v. (\<And>j. i \<ge> j \<Longrightarrow> apply_bfun v j = apply_bfun u j) \<Longrightarrow> X v i = X u i"
  shows "lower_triangular_blin X"
  using assms by (fastforce simp: lower_triangular_blin_def)

lemma strict_lower_triangularI[intro]:
  fixes X :: "('a::linorder \<Rightarrow>\<^sub>b real) \<Rightarrow>\<^sub>L ('a \<Rightarrow>\<^sub>b real)"
  assumes "\<And>i u v. (\<And>j. i > j \<Longrightarrow> apply_bfun v j = apply_bfun u j) \<Longrightarrow> X v i = X u i"
  shows "strict_lower_triangular_blin X"
  using assms by (fastforce simp: strict_lower_triangular_blin_def)

lemma strict_lower_triangularD:
  fixes X :: "('a::linorder \<Rightarrow>\<^sub>b real) \<Rightarrow>\<^sub>L ('a \<Rightarrow>\<^sub>b real)"
    and u v :: "'a \<Rightarrow>\<^sub>b real"
  assumes "strict_lower_triangular_blin X" and "\<And>j. i > j \<Longrightarrow> v j = u j"
  shows "X v i = X u i"
  using assms by (auto simp: strict_lower_triangular_blin_def)

lemma strict_imp_lower_triangular_blin: "strict_lower_triangular_blin X \<Longrightarrow> lower_triangular_blin X"
  unfolding strict_lower_triangular_blin_def lower_triangular_blin_def
  by auto

lemma all_imp_Max:
  assumes "finite X" "X \<noteq> {}" "\<forall>x \<in> X. P (f x)" 
  shows "P (MAX x \<in> X. f x)"
proof -
  have "(MAX x \<in> X. f x) \<in> f ` X"
    using assms by auto
  thus ?thesis
    using assms by force
qed

lemma bounded_mult: 
  assumes "bounded ((f :: 'c \<Rightarrow> real) ` X)" "bounded (g ` X)"
  shows "bounded ((\<lambda>x. f x * g x) ` X)"
  using assms mult_mono
  by (fastforce simp: bounded_iff abs_mult intro!: mult_mono)

context MDP_nat_disc
begin


lemma \<P>\<^sub>1_det: "\<P>\<^sub>1 (mk_dec_det d) v s = measure_pmf.expectation (K (s, d s)) v"
  by (auto simp: mk_dec_det_def \<P>\<^sub>1.rep_eq K_st_def bind_return_pmf)

lift_definition \<P>\<^sub>U :: "(nat \<Rightarrow> nat) \<Rightarrow> (nat \<Rightarrow>\<^sub>b real) \<Rightarrow>\<^sub>L nat \<Rightarrow>\<^sub>b real" is "\<lambda>d (v :: nat \<Rightarrow>\<^sub>b real). 
  (Bfun (\<lambda>s. (\<P>\<^sub>1 (mk_dec_det d) (bfun_if (\<lambda>s'. s' < s) 0 v) s)))"
proof (standard, goal_cases)
  let ?vl = "\<lambda>v s. (bfun_if (\<lambda>s'. s' < s) 0 v)"
  have norm_bfun_if_le: "norm (?vl v s) \<le> norm v" for v :: "nat \<Rightarrow>\<^sub>b real" and s
    by (auto simp: norm_bfun_def' bfun_if.rep_eq intro!: cSUP_mono bounded_imp_bdd_above)
  hence is_bfun2: "(\<lambda>s. \<P>\<^sub>1 (mk_dec_det d) (?vl v s) s) \<in> bfun" for v :: "nat \<Rightarrow>\<^sub>b real" and d
    by (intro bfun_normI) (fastforce intro: order.trans[OF norm_blinfun] order.trans[OF norm_le_norm_bfun])
  case (1 d u v)
  have *: "\<P>\<^sub>1 (mk_dec_det d) (?vl (u + v) x) x = \<P>\<^sub>1 (mk_dec_det d) (?vl u x) x + \<P>\<^sub>1 (mk_dec_det d) (?vl v x) x " for x
    by (auto simp: bfun_if_zero_add blinfun.add_right)
  show ?case
    by (simp add: * eq_onp_same_args is_bfun2 plus_bfun.abs_eq)
  case (2 d r v)
  have "?vl (r *\<^sub>R v) x = r *\<^sub>R ?vl v x" for x
    by (auto simp: bfun_if.rep_eq)
  hence *: "r * \<P>\<^sub>1 (mk_dec_det d) (?vl v x) x = \<P>\<^sub>1 (mk_dec_det d) (?vl (r *\<^sub>R v) x) x" for x
    by (auto simp: blinfun.scaleR_right)
  show ?case
    using is_bfun2 by (auto simp: *)
