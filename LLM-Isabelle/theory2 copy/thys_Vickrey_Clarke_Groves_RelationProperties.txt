theory RelationProperties
imports
  RelationOperators

begin


lemma injflip: "inj_on flip A" 
  by (metis flip_flip inj_on_def)

lemma lm01: "card P = card (P^-1)" 
  using card_image flip_conv injflip by metis

lemma cardinalityOneTheElemIdentity: "(card X = 1) = (X={the_elem X})" 
  by (metis One_nat_def card_Suc_eq card.empty empty_iff the_elem_eq)

lemma lm02: "trivial X = (X={} \<or> card X=1)" 
  using cardinalityOneTheElemIdentity order_refl subset_singletonD trivial_def trivial_empty by (metis(no_types))

lemma lm03: "trivial P = trivial (P^-1)" 
  using trivial_def subset_singletonD  subset_refl subset_insertI cardinalityOneTheElemIdentity converse_inject
        converse_empty lm01 
  by metis

lemma restrictedRange: "Range (P||X) = P``X" 
  unfolding restrict_def by blast

lemma doubleRestriction:  "((P || X) || Y) = (P || (X \<inter> Y))" 
  unfolding restrict_def by fast

lemma restrictedDomain: "Domain (R||X) = Domain R \<inter> X" 
  using restrict_def by fastforce


lemma subrel_runiq: 
  assumes "runiq Q" "P \<subseteq> Q" 
  shows "runiq P" 
  using assms runiq_def by (metis Image_mono subsetI trivial_subset)

lemma rightUniqueInjectiveOnFirstImplication: 
  assumes "runiq P" 
  shows "inj_on fst P" 
  unfolding inj_on_def 
  using assms runiq_def trivial_def trivial_imp_no_distinct 
        the_elem_eq surjective_pairing subsetI Image_singleton_iff 
  by (metis(no_types))

lemma runiq_alt: "runiq R \<longleftrightarrow> (\<forall> x . trivial (R `` {x}))" 
  unfolding runiq_def by (metis Image_empty2 trivial_empty_or_singleton trivial_singleton) 
 
lemma runiq_wrt_eval_rel: "runiq R = (\<forall>x . R `` {x} \<subseteq> {R ,, x})" 
  by (metis eval_rel.simps runiq_alt trivial_def)

lemma rightUniquePair: 
  assumes "runiq f" 
  assumes "(x,y)\<in>f" 
  shows "y=f,,x" 
  using assms runiq_wrt_eval_rel subset_singletonD Image_singleton_iff equals0D singletonE 
  by fast

lemma runiq_basic: "runiq R \<longleftrightarrow> (\<forall> x y y' . (x, y) \<in> R \<and> (x, y') \<in> R \<longrightarrow> y = y')" 
  unfolding runiq_alt trivial_same by blast

lemma rightUniqueFunctionAfterInverse: 
  assumes "runiq f" 
  shows "f``(f^-1``Y) \<subseteq> Y" 
  using assms runiq_basic ImageE converse_iff subsetI by (metis(no_types))

lemma lm04: 
  assumes "runiq f" "y1 \<in> Range f" 
  shows "(f^-1 `` {y1} \<inter> f^-1 `` {y2} \<noteq> {}) = (f^-1``{y1}=f^-1``{y2})"
  using assms rightUniqueFunctionAfterInverse by fast

lemma converse_Image: 
  assumes runiq: "runiq R"
      and runiq_conv: "runiq (R^-1)"
  shows "(R^-1) `` R `` X \<subseteq> X" 
  using assms by (metis converse_converse rightUniqueFunctionAfterInverse)

lemma lm05: 
  assumes "inj_on fst P" 
  shows "runiq P" 
  unfolding runiq_basic 
  using assms fst_conv inj_on_def old.prod.inject 
  by (metis(no_types))

lemma rightUniqueInjectiveOnFirst: "(runiq P) = (inj_on fst P)" 
  using rightUniqueInjectiveOnFirstImplication lm05 by blast

lemma disj_Un_runiq: 
  assumes "runiq P" "runiq Q" "(Domain P) \<inter> (Domain Q) = {}" 
  shows "runiq (P \<union> Q)" 
  using assms rightUniqueInjectiveOnFirst fst_eq_Domain injection_union by metis

lemma runiq_paste1: 
  assumes "runiq Q" "runiq (P outside Domain Q)" 
  shows "runiq (P +* Q)"
  unfolding paste_def 
  using assms disj_Un_runiq Diff_disjoint Un_commute outside_reduces_domain
  by (metis (poly_guards_query))

corollary runiq_paste2: 
  assumes "runiq Q" "runiq P" 
  shows "runiq (P +* Q)"
  using assms runiq_paste1 subrel_runiq Diff_subset Outside_def 
  by (metis)

lemma rightUniqueRestrictedGraph: "runiq {(x,f x)| x. P x}" 
  unfolding runiq_basic by fast

lemma rightUniqueSetCardinality: 
  assumes "x \<in> Domain R" "runiq R" 
  shows "card (R``{x})=1"
  using assms  lm02 DomainE Image_singleton_iff empty_iff
  by (metis runiq_alt)


lemma Image_runiq_eq_eval: 
  assumes "x \<in> Domain R" "runiq R" 
  shows "R `` {x} = {R ,, x}" 
  using assms rightUniqueSetCardinality
  by (metis eval_rel.simps cardinalityOneTheElemIdentity)

lemma lm06: 
  assumes "trivial f" 
  shows "runiq f" 
  using assms trivial_subset_non_empty runiq_basic snd_conv
  by fastforce

corollary runiq_singleton_rel: "runiq {(x, y)}" 
  using trivial_singleton lm06 by fast

lemma runiq_emptyrel: "runiq {}" 
  using trivial_empty lm06 by blast

lemma runiq_wrt_ex1:
  "runiq R \<longleftrightarrow> (\<forall> a \<in> Domain R . \<exists>! b . (a, b) \<in> R)"
  using runiq_basic by (metis Domain.DomainI Domain.cases)

lemma eval_runiq_rel:
  assumes domain: "x \<in> Domain R"
      and runiq: "runiq R" 
  shows "(x, R,,x) \<in> R"
  using assms by (metis rightUniquePair runiq_wrt_ex1)

lemma eval_runiq_in_Range:
  assumes "runiq R"
      and "a \<in> Domain R"
  shows "R ,, a \<in> Range R"
  using assms by (metis Range_iff eval_runiq_rel)






lemma converse_Image_singleton_Domain:
  assumes runiq: "runiq R"
      and runiq_conv: "runiq (R\<inverse>)"
      and domain: "x \<in> Domain R"
  shows "R\<inverse> `` R `` {x} = {x}"
proof -
  have sup: "{x} \<subseteq> R\<inverse> `` R `` {x}" using domain by fast
  have "trivial (R `` {x})" using runiq domain by (metis runiq_def trivial_singleton)
  then have "trivial (R\<inverse> `` R `` {x})"
    using assms runiq_def by blast
  then show ?thesis
    using sup by (metis singleton_sub_trivial_uniq subset_antisym trivial_def)
qed


lemma disj_Domain_imp_disj_Image: 
  assumes "Domain R \<inter> X \<inter> Y = {}" 
  assumes "runiq R"
      and "runiq (R\<inverse>)"
  shows "(R `` X) \<inter> (R `` Y) = {}" 
  using assms unfolding runiq_basic by blast

lemma runiq_converse_paste_singleton: 
  assumes "runiq (P^-1)" "y\<notin>(Range P)" 
  shows "runiq ((P +* {(x,y)})\<inverse>)" 
  (is "?u (?P^-1)")
proof -
  have "(?P) \<subseteq> P \<union> {(x,y)}" using assms by (metis paste_sub_Un)
  then have "?P^-1 \<subseteq> P^-1 \<union> ({(x,y)}^-1)" by blast
  moreover have "... = P^-1 \<union> {(y,x)}" by fast
  moreover have "Domain (P^-1) \<inter> Domain {(y,x)} = {}" using assms(2) by auto
  ultimately moreover have "?u (P^-1 \<union> {(y,x)})" using assms(1) by (metis disj_Un_runiq runiq_singleton_rel)
  ultimately show ?thesis by (metis subrel_runiq)
qed











definition injections :: "'a set \<Rightarrow> 'b set \<Rightarrow> ('a \<times> 'b) set set"
  where "injections X Y = {R . Domain R = X \<and> Range R \<subseteq> Y \<and> runiq R \<and> runiq (R\<inverse>)}"

  where "injections_alg [] Y = [{}]" |
        "injections_alg (x # xs) Y = concat [ [ R +* {(x,y)} . y \<leftarrow> sorted_list_of_set (Y - Range R) ]
       . R \<leftarrow> injections_alg xs Y ]"

lemma Image_within_domain': 
  fixes x R 
  shows "(x \<in> Domain R) = (R `` {x} \<noteq> {})" 
  by blast

end

