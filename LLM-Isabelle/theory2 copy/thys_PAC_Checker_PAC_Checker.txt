theory PAC_Checker
  imports PAC_Polynomials_Operations
    PAC_Checker_Specification
    PAC_Map_Rel
    Show.Show
    Show.Show_Instances
    PAC_Misc
begin






datatype 'a code_status =
  is_cfailed: CFAILED (the_error: 'a) |
  CSUCCESS |
  is_cfound: CFOUND

fun merge_cstatus where


lemma in_code_status_status_rel_iff[simp]:
  by (cases a; cases b; auto simp: code_status_status_rel_def; fail)+





lemma pac_step_rel_assn_alt_def:
    by (auto split: pac_step.splits)



definition error_msg where

definition error_msg_notin_dom_err where


definition error_msg_reused_dom where


definition error_msg_not_equal_dom where























definition check_extension_l_side_cond_err
where

definition check_extension_l
where


lemma check_extension_alt_def:
proof -
    by (subst coeff_add[symmetric], subst not_in_vars_coeff0)
      (auto simp flip: coeff_add monom.abs_eq
        simp: not_in_vars_coeff0 MPoly_Type.coeff_def
          Var.abs_eq Var\<^sub>0_def lookup_single_eq monom.rep_eq)
     for ab
   proof -
       by auto
     show ?thesis
       unfolding p
       apply (subst coeff_minus[symmetric], subst not_in_vars_coeff0)
       using that unfolding q_def[symmetric]
       by (auto simp flip: coeff_minus simp: not_in_vars_coeff0
           Var.abs_eq Var\<^sub>0_def simp flip: monom.abs_eq
           simp: not_in_vars_coeff0 MPoly_Type.coeff_def
           Var.abs_eq Var\<^sub>0_def lookup_single_eq monom.rep_eq)
  qed
    by simp
  show ?thesis
    unfolding check_extension_def
    apply (auto 5 5 simp: check_extension_def weak_equality_def
      mult_poly_spec_def field_simps
      add_poly_spec_def power2_eq_square cong: if_cong
      intro!: intro_spec_refine[where R=Id, simplified]
      split: option.splits dest: ideal.span_add)
   done
qed

  by (auto simp: pw_eq_iff refine_pw_simps)


lemma check_add_alt_def:
