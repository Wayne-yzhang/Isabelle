theory ArchStat
imports TameEnum ArchCompAux
begin

definition stat :: "nat fgraph list \<Rightarrow> nat * nat * nat * nat * nat" where
"stat A =
 (length A,
  foldl (\<lambda>x y. if x<y then y else x) 0 (map length A),
  foldl (+) 0 (map length A),
  foldl (\<lambda>x y. if x<y then y else x)  0 (map nof_vertices A),
  foldl (+) 0 (map nof_vertices A)
 )"

value "stat Tri"
value "stat Quad"
value "stat Pent"
value "stat Hex"


type_synonym config = "(nat,nat fgraph)tries * nat * nat"
fun insert_mod :: "graph \<Rightarrow> config \<Rightarrow> config" where
"insert_mod x (t,tot,fins) =
 (if final x
  then
    let
      fg = fgraph x; h = hash fg; ys = Tries.lookup t h;
      t' = if (\<exists>y:set ys. iso_test fg y) then t else Tries.update t h (fg#ys)
    in (t', tot+1, fins+1)
  else (t,tot+1,fins))"

definition worklist_collect_aux ::
  "(graph \<Rightarrow> graph list) \<Rightarrow> graph list \<Rightarrow> config \<Rightarrow> config option"
where
"worklist_collect_aux succs = worklist_dfs succs insert_mod"

fun stat_of_tries where
"stat_of_tries(Tries vs al) =
   (if vs=[] then [] else [length vs]) @
   concat(map (\<lambda>(a,t). stat_of_tries t) al)"

definition "avgmax ns = (listsum ns, length ns, max_list ns)"

definition count where
"count p =
 (case worklist_collect_aux (next_tame p) [Seed p] (Tries [] [],1,0) of
  None \<Rightarrow> None |
  Some(t,n,f) \<Rightarrow> Some(avgmax(stat_of_tries t),n,f))"


end

