theory WB_Sort
  imports
    Refine_Imperative_HOL.IICF
    "HOL-Library.Rewrite"
    Nested_Multisets_Ordinals.Duplicate_Free_Multiset
begin




lemma isPartition_wrtI:
  by (simp add: isPartition_wrt_def)



lemma isPartition_map_def':
  by (auto simp add: isPartition_wrt_def conjI)


  by (auto simp add: isPartition_def isPartition_wrt_def nth_Cons')




lemma take_Suc0:
  "l\<noteq>[] \<Longrightarrow> take (Suc 0) l = [l!0]"
  "0 < length l \<Longrightarrow> take (Suc 0) l = [l!0]"
  "Suc n \<le> length l \<Longrightarrow> take (Suc 0) l = [l!0]"
  by (cases l, auto)+

  by (cases xs) (auto simp add: sublist_def take_Suc0)

  by auto

  by (simp add: sublist_def)

  by (simp add: sublist_def)

  apply simp
  apply (rewrite List.length_greater_0_conv[symmetric])
  apply (rewrite sublist_length)
  by auto



  unfolding sublist_def
  by (smt (verit) Suc_eq_plus1_left Suc_le_mono append.assoc le_SucI le_add_diff_inverse le_trans same_append_eq take_add)




lemma sorted_sublist_map_def':
  apply (simp add: sorted_sublist_wrt_def)
  by (simp add: drop_map sorted_wrt_map sublist_def take_map)

  by (auto simp add: sorted_sublist_wrt_def sublist_single)

  by (auto simp add: sorted_sublist_def sorted_sublist_wrt_refl)

  apply (auto simp add: sublist_def)
  by (simp add: drop_map take_map)


  by (rule eq_reflection) (auto simp add: take_set)


  by (auto simp add: take_set sublist_def)

  apply (subst sublist_el, assumption, assumption)
  by (smt (verit) Groups.add_ac(2) le_add1 le_add_diff_inverse less_Suc_eq less_diff_conv nat_less_le order_refl)


  by (auto simp add: sublist_def)

  by linarith


  apply (auto simp add: nat_le_eq_or_lt)
  unfolding sorted_sublist_wrt_def
  subgoal apply (rewrite sublist_single) by auto
  subgoal by (auto simp add: sublist_lt)
  done

lemma sorted_sublist_wrt_nth_le:
proof -
  show ?thesis
    using assms(1) apply (simp add: sorted_sublist_wrt_def I J)
    apply (rewrite sublist_nth[symmetric, where k=i', where lo=lo, where hi=hi])
    using assms apply auto subgoal using I by linarith
    apply (rewrite sublist_nth[symmetric, where k=j', where lo=lo, where hi=hi])
    using assms apply auto subgoal using J by linarith
    apply (rule sorted_wrt_nth_less)
    apply auto
    subgoal using I J nat_add_left_cancel_less by blast
    subgoal apply (simp add: sublist_length) using J by linarith
    done
qed

lemma sorted_sublist_wrt_nth_le':
proof -
  then show ?thesis
  proof cases
    case a
    then show ?thesis
      using assms(2-5,7) sorted_sublist_wrt_nth_le by blast
  next
    case b
    then show ?thesis
      by (simp add: ref)
  qed
qed






  by (auto simp add: sorted_sublist_def sorted_sublist_wrt_le)

  by (auto simp add: sorted_sublist_wrt_le)

  by (metis Cons_eq_appendI append_self_conv2 less_imp_le_nat less_or_eq_imp_le less_trans
      sublist_app sublist_single)

lemma sorted_sublist_wrt_cons':
  apply (auto simp add: nat_le_eq_or_lt sorted_sublist_wrt_def)
  apply (auto 5 4 simp add: sublist_cons sublist_el less_diff_conv add.commute[of _ lo]
      dest: Suc_lessI sublist_single)
  done

lemma sorted_sublist_wrt_cons:
proof -
  show ?thesis
    apply (rule sorted_sublist_wrt_cons') using assms apply auto
    subgoal premises assms' for j
    proof -
      show ?thesis
        using A proof
          by (simp add: A assms')
      next
          apply (rule trans)
          apply (rule assms(5))
          subgoal using A assms'(6) by linarith
          subgoal using assms'(3) less_imp_diff_less by blast
          subgoal using assms'(5) by auto
          subgoal using A by linarith
          subgoal by (simp add: assms'(6))
          done
      qed
    qed
    done
qed

lemma sorted_sublist_map_cons:
  by (blast intro: sorted_sublist_wrt_cons)


  apply (simp add: sublist_def)
proof -
  assume a1: "lo < hi"
  assume "hi < length xs"
  then have "take lo xs @ take (Suc hi - lo) (drop lo xs) = (take lo xs @ take (hi - lo) (drop lo xs)) @ [xs ! hi]"
    using a1 by (metis (no_types) Suc_diff_le add_Suc_right hd_drop_conv_nth le_add_diff_inverse less_imp_le_nat take_add take_hd_drop)
  then show "take (Suc hi - lo) (drop lo xs) = take (hi - lo) (drop lo xs) @ [xs ! hi]"
    by simp
qed

lemma sorted_sublist_wrt_snoc':
  apply (simp add: sorted_sublist_wrt_def)
  apply (auto simp add: nat_le_eq_or_lt)
  subgoal by (simp add: sublist_single)
  by (auto simp add: sublist_snoc sublist_el sorted_wrt_append add.commute[of lo] less_diff_conv
      simp: leI simp flip:nat_le_eq_or_lt)


lemma sorted_sublist_wrt_snoc:
proof -
  show ?thesis
    apply (rule sorted_sublist_wrt_snoc') using assms apply auto
    subgoal premises assms' for j
    proof -
      show ?thesis
        using A proof
          by (simp add: A assms')
      next
          apply (rule trans)
               prefer 6
               apply (rule assms(5))
              apply auto
          subgoal using A assms'(5) by linarith
          subgoal using assms'(3) less_imp_diff_less by blast
          subgoal using assms'(5) by auto
          subgoal using A by linarith
          done
      qed
    qed
    done
qed

  by (simp add: sublist_app)

  by (auto simp add: sublist_split[symmetric] sublist_snoc[where xs=xs,where lo=lo,where hi=p])


lemma isPartition_wrt_trans:
  by (auto simp add: isPartition_wrt_def)

lemma isPartition_map_trans:
  by (auto simp add: isPartition_wrt_def)


lemma merge_sorted_wrt_partitions_between':
  apply (auto simp add: isPartition_def isPartition_wrt_def sorted_sublist_def sorted_sublist_wrt_def sublist_map)
  apply (simp add: sublist_split_part[symmetric])
  apply (auto simp add: List.sorted_wrt_append)
  subgoal by (auto simp add: sublist_el)
  subgoal by (auto simp add: sublist_el)
  subgoal by (auto simp add: sublist_el')
  done

lemma merge_sorted_wrt_partitions_between:
  by (simp add: merge_sorted_wrt_partitions_between' isPartition_wrt_trans)






lemma merge_sorted_wrt_partitions:
  subgoal premises assms
  proof -
      using assms by linarith
    show ?thesis
      using C apply auto
        apply (rule sorted_sublist_wrt_refl)
        using assms by auto
        using assms by (simp add: isPartition_def isPartition_wrt_def sorted_sublist_wrt_cons')
        using assms by (simp add: isPartition_def isPartition_wrt_def sorted_sublist_wrt_snoc')
        using assms
        apply (rewrite merge_sorted_wrt_partitions_between'[where p=p])
        by auto
      done
  qed
  done

theorem merge_sorted_map_partitions:
  apply (rule merge_sorted_wrt_partitions) apply auto
  by (simp add: merge_sorted_wrt_partitions isPartition_map_trans)


lemma partition_wrt_extend:
  unfolding isPartition_wrt_def
  apply (intro conjI)
  subgoal
    by (force simp: not_le)
  subgoal
    using leI by blast
  done

lemma partition_map_extend:
  by (auto simp add: partition_wrt_extend)


lemma isPartition_empty:
  by (auto simp add: isPartition_wrt_def)



lemma take_ext:
  by (simp add: nth_take_lemma)

lemma drop_ext':
  apply simp
  apply (rule take_ext)
  by (auto simp add: rev_nth)

lemma drop_ext:
  apply (cases xs)
   apply auto
  apply (cases k)
  subgoal  by (simp add: nth_equalityI)
  subgoal apply (rule drop_ext') by auto
  done


lemma sublist_ext':
  apply (simp add: sublist_def)
  apply (rule take_ext)
  by auto


  by auto

  by (simp add: sublist_def)

lemma sublist_ext:
  apply (auto simp add: lt_Suc[where a=hi])
  subgoal by (auto simp add: sublist_until_end_eq_drop drop_ext)
  subgoal by (auto simp add: sublist_ext')
  done

lemma sorted_wrt_lower_sublist_still_sorted:
proof -
    by linarith
  show ?thesis
    using l apply auto
      apply (auto simp add: sorted_sublist_wrt_def)
      apply (rewrite sublist_ext[where xs=xs])
      using assms by (auto simp add: sorted_sublist_wrt_def)
      using assms by (auto simp add: sorted_sublist_wrt_le)
    done
qed

lemma sorted_map_lower_sublist_still_sorted:
  using assms by (rule sorted_wrt_lower_sublist_still_sorted)

lemma sorted_wrt_upper_sublist_still_sorted:
proof -
    by linarith
  show ?thesis
    using l apply auto
      apply (auto simp add: sorted_sublist_wrt_def)
      apply (rewrite sublist_ext[where xs=xs])
      using assms by (auto simp add: sorted_sublist_wrt_def)
      using assms by (auto simp add: sorted_sublist_wrt_le)
    done
qed

lemma sorted_map_upper_sublist_still_sorted:
  using assms by (rule sorted_wrt_upper_sublist_still_sorted)







