theory Patch
  imports "HOL-CSP.Assertions"
begin


      the modifications appear in the current version on the AFP.
      This theory fixes the incompatibilities and will be removed in the next release.\<close>
section \<open>Results\<close>
\<comment>\<open>This one is very easy\<close>
  \<open>(\<box> a \<in> A \<rightarrow> P a) \<box> (\<box> b \<in> B \<rightarrow> Q b) = 
   \<box> x \<in> A \<union> B \<rightarrow> (  if x \<in> A \<inter> B then P x \<sqinter> Q x 
                    else if x \<in> A then P x else Q x)\<close>
  (is \<open>?lhs = ?rhs\<close>)
  show \<open>(s, X) \<in> \<F> ?lhs \<Longrightarrow> (s, X) \<in> \<F> ?rhs\<close> for s X
  show \<open>(s, X) \<in> \<F> ?rhs \<Longrightarrow> (s, X) \<in> \<F> ?lhs\<close> for s X
  show \<open>s \<in> \<D> ?lhs \<Longrightarrow> s \<in> \<D> ?rhs\<close> for s
  show \<open>s \<in> \<D> ?rhs \<Longrightarrow> s \<in> \<D> ?lhs\<close> for s
  \<open>\<F> (Mndetprefix A P) =
   (if A = {} then {(s, X). s = []} else \<Union>x\<in>A. \<F> (x \<rightarrow> P x))\<close>
  \<open>\<D> (Mndetprefix A P) = (if A = {} then {} else \<Union>x\<in>A. \<D> (x \<rightarrow> P x))\<close>
  \<open>\<T> (Mndetprefix A P) = (if A = {} then {[]} else \<Union>x\<in>A. \<T> (x \<rightarrow> P x))\<close>
  \<open>\<D> P = {t1 @ t2| t1 t2. t1 \<in> \<D> P \<and> tickFree t1 \<and> front_tickFree t2}\<close>
  (is \<open>\<D> P = ?rhs\<close>)
  show \<open>s \<in> \<D> P \<Longrightarrow> s \<in> ?rhs\<close> for s
    apply (simp, cases \<open>tickFree s\<close>)
     apply (rule_tac x = s in exI, rule_tac x = \<open>[]\<close> in exI, simp)
    apply (rule_tac x = \<open>butlast s\<close> in exI, rule_tac x = \<open>[tick]\<close> in exI, simp)
  show \<open>s \<in> ?rhs \<Longrightarrow> s \<in> \<D> P\<close> for s
lemma F_Seq: \<open>\<F> (P \<^bold>; Q) = {(t, X). (t, X \<union> {tick}) \<in> \<F> P \<and> tickFree t} \<union>
                          {(t1 @ t2, X) |t1 t2 X. t1 @ [tick] \<in> \<T> P \<and> (t2, X) \<in> \<F> Q} \<union>
                          {(t1, X) |t1 X. t1 \<in> \<D> P}\<close>
  have * : \<open>{(t, X). \<exists>t1 t2. t = t1 @ t2 \<and> t1 @ [tick] \<in> \<T> P \<and> t2 \<in> \<D> Q} \<subseteq>
            {(t1 @ t2, X) |t1 t2 X. t1 @ [tick] \<in> \<T> P \<and> (t2, X) \<in> \<F> Q}\<close>
  have ** : \<open>{(t1, X) |t1 X. t1 \<in> \<D> P} =
             {(t, X). \<exists>t1 t2. t = t1 @ t2 \<and> t1 \<in> \<D> P \<and> tickFree t1 \<and> front_tickFree t2}\<close>
  \<open>\<D> (P \<^bold>; Q) = \<D> P \<union> {t1 @ t2 |t1 t2. t1 @ [tick] \<in> \<T> P \<and> t2 \<in> \<D> Q}\<close>
lemma T_Seq: \<open>\<T> (P \<^bold>; Q) = {t. \<exists>X. (t, X \<union> {tick}) \<in> \<F> P \<and> tickFree t} \<union> 
                          {t1 @ t2 |t1 t2. t1 @ [tick] \<in> \<T> P \<and> t2 \<in> \<T> Q} \<union>
                          \<D> P\<close>
  \<open>tickFree s \<longleftrightarrow> tickFree (butlast s) \<and> (s \<noteq> [] \<longrightarrow> last s \<noteq> tick)\<close>
lemma front_tickFree_butlast: \<open>front_tickFree s \<longleftrightarrow> tickFree (butlast s)\<close>
lemma STOP_iff_T: \<open>P = STOP \<longleftrightarrow> \<T> P = {[]}\<close>
lemma BOT_iff_D: \<open>P = \<bottom> \<longleftrightarrow> [] \<in> \<D> P\<close>
lemma Ndet_is_STOP_iff: \<open>P \<sqinter> Q = STOP \<longleftrightarrow> P = STOP \<and> Q = STOP\<close>
lemma Det_is_STOP_iff: \<open>P \<box> Q = STOP \<longleftrightarrow> P = STOP \<and> Q = STOP\<close>
lemma Det_is_BOT_iff: \<open>P \<box> Q = \<bottom> \<longleftrightarrow> P = \<bottom> \<or> Q = \<bottom>\<close>
lemma Ndet_is_BOT_iff: \<open>P \<sqinter> Q = \<bottom> \<longleftrightarrow> P = \<bottom> \<or> Q = \<bottom>\<close>
lemma Sync_is_BOT_iff: \<open>P \<lbrakk>S\<rbrakk> Q = \<bottom> \<longleftrightarrow> P = \<bottom> \<or> Q = \<bottom>\<close>
     (use empty_setinterleaving in \<open>auto simp add: BOT_iff_D D_Sync\<close>)
lemma STOP_neq_BOT: \<open>STOP \<noteq> \<bottom>\<close>
lemma SKIP_neq_BOT: \<open>SKIP \<noteq> \<bottom>\<close>
lemma Mprefix_neq_BOT: \<open>Mprefix A P \<noteq> \<bottom>\<close>
lemma Mndetprefix_neq_BOT: \<open>Mndetprefix A P \<noteq> \<bottom>\<close>
  by (cases \<open>A = {}\<close>) (simp_all add: D_STOP BOT_iff_D D_Mndetprefix write0_def)
lemma STOP_T_iff: \<open>STOP \<sqsubseteq>\<^sub>T P \<longleftrightarrow> P = STOP\<close>
lemma STOP_F_iff: \<open>STOP \<sqsubseteq>\<^sub>F P \<longleftrightarrow> P = STOP\<close>
lemma STOP_FD_iff: \<open>STOP \<sqsubseteq>\<^sub>F\<^sub>D P \<longleftrightarrow> P = STOP\<close>
lemma SKIP_FD_iff: \<open>SKIP \<sqsubseteq>\<^sub>F\<^sub>D P \<longleftrightarrow> P = SKIP\<close>
lemma SKIP_F_iff: \<open>SKIP \<sqsubseteq>\<^sub>F P \<longleftrightarrow> P = SKIP\<close>
lemma Seq_is_SKIP_iff: \<open>P \<^bold>; Q = SKIP \<longleftrightarrow> P = SKIP \<and> Q = SKIP\<close>
  show \<open>P = SKIP \<and> Q = SKIP \<Longrightarrow> P \<^bold>; Q = SKIP\<close>
  have \<open>P \<^bold>; Q = SKIP \<Longrightarrow> (Q = SKIP \<longrightarrow> P = SKIP) \<and> Q = SKIP\<close>
    show \<open>P \<^bold>; Q = SKIP \<Longrightarrow> Q = SKIP \<Longrightarrow> P = SKIP\<close>
    show \<open>P \<^bold>; Q = SKIP \<Longrightarrow> Q = SKIP\<close>
  thus \<open>P \<^bold>; Q = SKIP \<Longrightarrow> P = SKIP \<and> Q = SKIP\<close> by blast
section \<open>The Renaming Operator\<close>
subsection\<open>Some Preliminaries\<close>
definition EvExt where \<open>EvExt f x \<equiv> case_event (ev o f) tick x\<close>
definition finitary :: \<open>('a \<Rightarrow> 'b) \<Rightarrow> bool\<close> 
  where \<open>finitary f \<equiv> \<forall>x. finite (f -` {x})\<close>
text \<open>We start with some simple results.\<close>
lemma \<open>f -` {} = {}\<close> by simp
lemma \<open>X \<subseteq> Y \<Longrightarrow> f -` X \<subseteq> f -` Y\<close> by (rule vimage_mono)
lemma \<open>f -`(X \<union> Y) = f -` X \<union> f -` Y\<close> by (rule vimage_Un)
lemma EvExt_id: \<open>EvExt id = id\<close>
lemma EvExt_eq_tick: \<open>EvExt f a = tick \<longleftrightarrow> a = tick\<close>
lemma tick_eq_EvExt: \<open>tick = EvExt f a \<longleftrightarrow> a = tick\<close>
  \<open>EvExt f b = ev a \<longleftrightarrow> (\<exists>c. b = ev c \<and> EvExt f (ev c) = ev a)\<close>
lemma EvExt_tF: \<open>tickFree (map (EvExt f) s) \<longleftrightarrow> tickFree s\<close> 
lemma inj_EvExt: \<open>inj EvExt\<close>
lemma EvExt_ftF: \<open>front_tickFree (map (EvExt f) s) \<longleftrightarrow> front_tickFree s\<close> 
lemma map_EvExt_tick: \<open>[tick] = map (EvExt f) t \<longleftrightarrow> t = [tick]\<close>
  \<open>EvExt f -` (X - {tick}) = EvExt f -` X - {tick}\<close>
lemma   ev_elem_anteced1: \<open>ev a \<in> EvExt f -` A \<longleftrightarrow> ev (f a) \<in> A\<close>
  and tick_elem_anteced1: \<open>tick \<in> EvExt f -` A \<longleftrightarrow> tick \<in> A\<close>
  \<open>t \<noteq> [] \<Longrightarrow> hd t = ev a \<Longrightarrow> hd (map (EvExt f) t) = ev (f a)\<close>
  and tl_map_EvExt: \<open>t \<noteq> [] \<Longrightarrow> tl (map (EvExt f) t) = map (EvExt f) (tl t)\<close>
subsection\<open>The Renaming Operator Definition\<close>
lift_definition Renaming :: \<open>['a process, 'a \<Rightarrow> 'b] \<Rightarrow> 'b process\<close>
  is \<open>\<lambda>P f. ({(s, R). \<exists>s1. (s1, (EvExt f) -` R) \<in> \<F> P \<and>
                           s = map (EvExt f) s1} \<union>
             {(s ,R). \<exists>s1 s2. tickFree s1 \<and> front_tickFree s2 \<and> 
                              s = (map (EvExt f) s1) @ s2 \<and> s1 \<in> \<D> P},
             {t. \<exists> s1 s2. tickFree s1 \<and> front_tickFree s2 \<and>
                          t = (map (EvExt f) s1) @ s2 \<and> s1 \<in> \<D> P})\<close>
  show \<open>?thesis P f\<close> (is "is_process(?f, ?d)") for P f
    show \<open>([], {}) \<in> ?f\<close>
    show \<open>(s, X) \<in> ?f \<Longrightarrow> front_tickFree s\<close> for s X
    show \<open>(s @ t, {}) \<in> ?f \<Longrightarrow> (s, {}) \<in> ?f\<close> for s t
      show \<open>(s @ [], {}) \<in> ?f \<Longrightarrow> (s, {}) \<in> ?f\<close> by simp
      assume  hyp : \<open>(s @ t, {}) \<in> ?f \<Longrightarrow> (s, {}) \<in> ?f\<close>
         and prem : \<open>(s @ t @ [x], {}) \<in> ?f\<close>
      from prem consider \<open>\<exists>s1. (s1, {}) \<in> \<F> P \<and> s @ t @ [x] = map (EvExt f) s1\<close>
        | \<open>\<exists>s1. tickFree s1 \<and> (\<exists>s2. front_tickFree s2 \<and> 
                s @ t @ [x] = map (EvExt f) s1 @ s2 \<and> s1 \<in> \<D> P)\<close> by fast
      thus \<open>(s, {}) \<in> ?f\<close>
        assume \<open>\<exists>s1. (s1, {}) \<in> \<F> P \<and> s @ t @ [x] = map (EvExt f) s1\<close>
        then obtain s1 where * : \<open>(s1, {}) \<in> \<F> P\<close> \<open>s @ t @ [x] = map (EvExt f) s1\<close> by blast
        hence \<open>(butlast s1, {}) \<in> \<F> P\<close> \<open>s @ t = map (EvExt f) (butlast s1)\<close>
        with hyp show \<open>(s, {}) \<in> ?f\<close> by auto
        assume \<open>\<exists>s1. tickFree s1 \<and> (\<exists>s2. front_tickFree s2 \<and>
                     s @ t @ [x] = map (EvExt f) s1 @ s2 \<and> s1 \<in> \<D> P)\<close>
          where * : \<open>tickFree s1\<close> \<open>front_tickFree s2\<close>
                    \<open>s @ t @ [x] = map (EvExt f) s1 @ s2\<close> \<open>s1 \<in> \<D> P\<close> by blast
        show \<open>(s, {}) \<in> ?f\<close>
          from "*"(3, 4) show \<open>s2 = [] \<Longrightarrow> (s, {}) \<in> ?f\<close>
          assume \<open>s2 = s2' @ [y]\<close>
          with "*" front_tickFree_dw_closed have \<open>(s @ t, {}) \<in> ?f\<close> by simp blast
          thus \<open>(s, {}) \<in> ?f\<close> by (rule hyp)
    show \<open>(s, Y) \<in> ?f \<and> X \<subseteq> Y \<Longrightarrow> (s, X) \<in> ?f\<close> for s X Y
    show \<open>(s, X) \<in> ?f \<and> (\<forall>c. c \<in> Y \<longrightarrow> (s @ [c], {}) \<notin> ?f) \<Longrightarrow> (s, X \<union> Y) \<in> ?f\<close> for s X Y
    show \<open>(s @ [tick], {}) \<in> ?f \<Longrightarrow> (s, X - {tick}) \<in> ?f\<close> for s X
    show \<open>s \<in> ?d \<and> tickFree s \<and> front_tickFree t \<Longrightarrow> s @ t \<in> ?d\<close> for s t
    show \<open>s \<in> ?d \<Longrightarrow> (s, X) \<in> ?f\<close> for s X by blast
    assume \<open>s @ [tick] \<in> ?d\<close>
      where \<open>tickFree t1\<close> \<open>front_tickFree t2\<close> 
            \<open>s @ [tick] = map (EvExt f) t1 @ t2\<close> \<open>t1 \<in> \<D> P\<close> by blast
    thus \<open>s \<in> ?d\<close>
      apply (rule_tac x = \<open>butlast t2\<close> in exI)
text \<open>Some syntaxic sugar\<close>
text \<open>Now we can write \<^term>\<open>P\<lbrakk>a := b\<rbrakk>\<close>. But like in \<^theory>\<open>HOL.Fun\<close>, we can write this kind of
      expression with as many updates we want: \<^term>\<open>P\<lbrakk>a := b, c := d, e := f, g := h\<rbrakk>\<close>.
      By construction we also inherit all the results about \<^const>\<open>fun_upd\<close>, for example:
