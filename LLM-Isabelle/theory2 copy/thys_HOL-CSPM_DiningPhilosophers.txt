theory DiningPhilosophers                                               
  imports CSPM
begin 






locale DiningPhilosophers =
  
  fixes N::nat

begin


datatype dining_event  =    picks (phil:nat) (fork:nat) 
                       | putsdown (phil:nat) (fork:nat)










  unfolding PHILS_def by (simp add: eval_nat_numeral upt_rec Sync_assoc)





end





instantiation nat :: discrete_cpo
begin

definition below_nat_def:
  "(x::nat) \<sqsubseteq> y \<longleftrightarrow> x = y"

instance proof
qed (rule below_nat_def)

end

locale DiningPhilosophers_fixrec =
  
  fixes N::nat

begin


datatype dining_event  =    picks (phil:nat) (fork:nat) 
                       | putsdown (phil:nat) (fork:nat)



where 
   RPHIL_rec [simp del] :
 | LPHIL0_rec[simp del] :
 | FORK_rec  [simp del] :





  unfolding PHILS_def by (simp add: eval_nat_numeral upt_rec Sync_assoc)





end

end