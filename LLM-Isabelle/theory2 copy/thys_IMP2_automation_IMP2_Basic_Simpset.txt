theory IMP2_Basic_Simpset
imports "../basic/Semantics" "../lib/Named_Simpsets" "../lib/IMP2_Utils"
begin
    and to compute program analysis information.
   \<close>
  ML \<open>
    fun vcg_bb_simplify thms ctxt = simplify (Named_Simpsets.put @{named_simpset vcg_bb} ctxt addsimps thms)
    fun vcg_bb_simp_tac thms ctxt = simp_tac (Named_Simpsets.put @{named_simpset vcg_bb} ctxt addsimps thms)
  \<close>
  text \<open>Put in ASSUMPTION and NO_MATCH\<close>  
  declaration \<open>K
    let
      val asm_sol = mk_solver "ASSUMPTION" (fn ctxt =>
        resolve_tac ctxt [@{thm ASSUMPTION_I}] THEN'
        resolve_tac ctxt (Simplifier.prems_of ctxt))
    in
      Named_Simpsets.map_ctxt @{named_simpset vcg_bb} (
           (fn ctxt => Simplifier.addSolver (ctxt,asm_sol))
        #> (fn ctxt => ctxt addsimprocs [@{simproc NO_MATCH}])
      )
    end
  \<close>
  text \<open>Congruence rules for short-circuit behaviour on if. 
    This is useful, as this simpset has to perform basic computations, 
    like variable name comparison, etc.
    
      clash with the evaluation of the semantics of aexp or bexp!
    
  \<close>
  text \<open>Protection of user-specified terms, like pre/postcondition and invariants
    from bb-computation\<close>
  text \<open>Tag to protect user annotations\<close>
  ML \<open>
    fun mk_BB_PROTECT t = let val T=fastype_of t in 
      Const (@{const_name BB_PROTECT}, T --> T)$t end 
      
    fun dest_BB_PROTECT (Const (@{const_name BB_PROTECT}, _)$t) = t
      | dest_BB_PROTECT t = raise TERM("dest_BB_PROTECT", [t]);
  \<close>
  text \<open>Basic Logic\<close>  
  text \<open>String Comparison\<close>  
  text \<open>State Query\<close>
  text \<open> Local/Global Variables \<close>
  text \<open>For the next two lemmas, we use a crude heuristics to ensure that they are not 
    applied to symbolic variable names: A variable name must be a (non-empty) list.\<close>    
  text \<open>Sets and Computation of Variable Sets\<close>  
