theory Laws_Classical
  imports Axioms_Classical
begin

notation map_comp (infixl "*\<^sub>u" 55)
notation tensor_update (infixr "\<otimes>\<^sub>u" 70)
notation register_pair ("'(_;_')")


declare id_preregister[simp]
declare id_update_left[simp]
declare id_update_right[simp]
declare register_preregister[simp]
declare register_comp[simp]
declare register_of_id[simp]
declare register_tensor_left[simp]
declare register_tensor_right[simp]
declare preregister_mult_right[simp]
declare preregister_mult_left[simp]
declare register_id[simp]


proof -
    by (rule comp_preregister; simp)
  then show ?thesis
    by (simp add: o_def tensor_update_mult)
qed

proof -
    by (rule comp_preregister, simp_all)
  then show ?thesis
    by (simp add: o_def tensor_update_mult)
qed


lemma id_update_tensor_register[simp]:
  using assms apply (rule register_comp[unfolded o_def])
  by simp

lemma register_tensor_id_update[simp]:
  using assms apply (rule register_comp[unfolded o_def])
  by simp


definition register_tensor  (infixr "\<otimes>\<^sub>r" 70) where
  "register_tensor F G = register_pair (\<lambda>a. tensor_update (F a) Some) (\<lambda>b. tensor_update Some (G b))"

lemma register_tensor_is_register: 
  fixes F :: "'a::type update \<Rightarrow> 'b::type update" and G :: "'c::type update \<Rightarrow> 'd::type update"
  shows "register F \<Longrightarrow> register G \<Longrightarrow> register (F \<otimes>\<^sub>r G)"
  unfolding register_tensor_def
  apply (rule register_pair_is_register)
  by (simp_all add: tensor_update_mult)

lemma register_tensor_apply[simp]:
  fixes F :: "'a::type update \<Rightarrow> 'b::type update" and G :: "'c::type update \<Rightarrow> 'd::type update"
  shows "(F \<otimes>\<^sub>r G) (a \<otimes>\<^sub>u b) = F a \<otimes>\<^sub>u G b"
  unfolding register_tensor_def
  apply (subst register_pair_apply)
  unfolding register_tensor_def 
  by (simp_all add: assms tensor_update_mult)

definition "separating (_::'b::type itself) A \<longleftrightarrow> 
  (\<forall>F G :: 'a::type update \<Rightarrow> 'b update. preregister F \<longrightarrow> preregister G \<longrightarrow> (\<forall>x\<in>A. F x = G x) \<longrightarrow> F = G)"

  unfolding separating_def by auto

  unfolding separating_def by (meson in_mono) 

  unfolding separating_def by auto

lemma separating_tensor:
proof (unfold separating_def, intro allI impI)
    by simp
    by simp
    by simp
    by simp

    using that by auto
    apply (rule register_eqI[where A=B, THEN fun_cong, where x=b, rotated -1])
    using that by auto
    apply (rule register_eqI[where A=A, THEN fun_cong, where x=a, rotated -1])
    by auto
  then show "F = G"
    apply (rule tensor_extensionality[rotated -1])
    by auto
qed

lemma register_tensor_distrib:
  apply (rule tensor_extensionality)
  by (auto intro!: register_comp register_preregister register_tensor_is_register)

lemma separating_tensor':
  using assms
  by (simp add: separating_tensor)

lemma tensor_extensionality3: 
  assumes "\<And>f g h. F (f \<otimes>\<^sub>u g \<otimes>\<^sub>u h) = G (f \<otimes>\<^sub>u g \<otimes>\<^sub>u h)"
  shows "F = G"
    apply (rule separating_tensor'[where A=UNIV and B=UNIV])
    by auto
    by auto
    using assms(3) by auto
qed

lemma tensor_extensionality3': 
  assumes "\<And>f g h. F ((f \<otimes>\<^sub>u g) \<otimes>\<^sub>u h) = G ((f \<otimes>\<^sub>u g) \<otimes>\<^sub>u h)"
  shows "F = G"
    apply (rule separating_tensor'[where A=UNIV and B=UNIV])
    by auto
    by auto
    using assms(3) by auto
qed

  apply (rule tensor_extensionality)
  by (auto simp add: register_tensor_is_register)



lemma compatibleI:
  assumes "register F" and "register G"
  shows "compatible F G"
  using assms unfolding compatible_def by simp

lemma swap_registers:
  assumes "compatible R S"
  shows "R a *\<^sub>u S b = S b *\<^sub>u R a"
  using assms unfolding compatible_def by metis

lemma compatible_sym: "compatible x y \<Longrightarrow> compatible y x"
  by (simp add: compatible_def)

lemma pair_is_register[simp]:
  assumes "compatible F G"
  shows "register (F; G)"
  by (metis assms compatible_def register_pair_is_register)

lemma register_pair_apply:
  apply (rule register_pair_apply)
  using assms unfolding compatible_def by metis+

lemma register_pair_apply':
  apply (subst register_pair_apply)
  using assms by (auto simp: compatible_def intro: register_preregister)



lemma compatible_comp_left[simp]: "compatible F G \<Longrightarrow> register H \<Longrightarrow> compatible (F \<circ> H) G"
  by (simp add: compatible_def)

lemma compatible_comp_right[simp]: "compatible F G \<Longrightarrow> register H \<Longrightarrow> compatible F (G \<circ> H)"
  by (simp add: compatible_def)

lemma compatible_comp_inner[simp]: 
  "compatible F G \<Longrightarrow> register H \<Longrightarrow> compatible (H \<circ> F) (H \<circ> G)"
  by (smt (verit, best) comp_apply compatible_def register_comp register_mult)

  by (simp add: compatible_def)
  by (simp add: compatible_def)

lemma pair_o_tensor:
  shows "(A; B) o (C \<otimes>\<^sub>r D) = (A o C; B o D)"
  apply (rule tensor_extensionality)
  using assms by (simp_all add: register_tensor_is_register register_pair_apply comp_preregister)

lemma compatible_tensor_id_update_left[simp]:
  fixes F :: "'a::type update \<Rightarrow> 'c::type update" and G :: "'b::type update \<Rightarrow> 'c::type update"
  assumes "compatible F G"
  shows "compatible (\<lambda>a. Some \<otimes>\<^sub>u F a) (\<lambda>a. Some \<otimes>\<^sub>u G a)"
  using assms apply (rule compatible_comp_inner[unfolded o_def])
  by simp

lemma compatible_tensor_id_update_right[simp]:
  fixes F :: "'a::type update \<Rightarrow> 'c::type update" and G :: "'b::type update \<Rightarrow> 'c::type update"
  assumes "compatible F G"
  shows "compatible (\<lambda>a. F a \<otimes>\<^sub>u Some) (\<lambda>a. G a \<otimes>\<^sub>u Some)"
  using assms apply (rule compatible_comp_inner[unfolded o_def])
  by simp

lemma compatible_tensor_id_update_rl[simp]:
  assumes "register F" and "register G"
  shows "compatible (\<lambda>a. F a \<otimes>\<^sub>u Some) (\<lambda>a. Some \<otimes>\<^sub>u G a)"
  apply (rule compatibleI)
  using assms by (auto simp: tensor_update_mult)

lemma compatible_tensor_id_update_lr[simp]:
  assumes "register F" and "register G"
  shows "compatible (\<lambda>a. Some \<otimes>\<^sub>u F a) (\<lambda>a. G a \<otimes>\<^sub>u Some)"
  apply (rule compatibleI)
  using assms by (auto simp: tensor_update_mult)

lemma register_comp_pair:
  shows "(F o G; F o H) = F o (G; H)"
proof (rule tensor_extensionality)
    by simp_all

    apply (rule compatible_comp_inner, simp)
    by simp
    unfolding compatible_def by auto
    unfolding compatible_def by auto
  fix a b
    by (auto simp: register_pair_apply register_mult tensor_update_mult)
qed

lemma swap_registers_left:
  assumes "compatible R S"
  shows "R a *\<^sub>u S b *\<^sub>u c = S b *\<^sub>u R a *\<^sub>u c"
  using assms unfolding compatible_def by metis

lemma swap_registers_right:
  assumes "compatible R S"
  shows "c *\<^sub>u R a *\<^sub>u S b = c *\<^sub>u S b *\<^sub>u R a"
  by (metis assms comp_update_assoc compatible_def)

lemmas compatible_ac_rules = swap_registers comp_update_assoc[symmetric] swap_registers_right



  unfolding Fst_def by (rule register_tensor_left)

  unfolding Snd_def by (rule register_tensor_right)

  apply (rule compatibleI, simp, simp)
  by (simp add: Fst_def Snd_def tensor_update_mult)

lemmas compatible_Snd_Fst[simp] = compatible_Fst_Snd[THEN compatible_sym]


lemma swap_apply[simp]: "swap (a \<otimes>\<^sub>u b) = (b \<otimes>\<^sub>u a)"
  unfolding swap_def
  by (simp add: Axioms_Classical.register_pair_apply Fst_def Snd_def tensor_update_mult) 

lemma swap_o_Fst: "swap o Fst = Snd"
  by (auto simp add: Fst_def Snd_def)
lemma swap_o_Snd: "swap o Snd = Fst"
  by (auto simp add: Fst_def Snd_def)

  by (simp add: swap_def)

  apply (rule tensor_extensionality)
  by (simp_all add: register_pair_apply Fst_def Snd_def tensor_update_mult)

  by (metis swap_def compatible_Snd_Fst pair_Fst_Snd register_comp_pair register_swap swap_o_Fst swap_o_Snd)

  by (simp add: pointfree_idE)

  by (meson inv_unique_comp swap_o_swap)

lemma register_pair_Fst:
  using assms by (auto intro!: ext simp: Fst_def register_pair_apply compatible_register2)

lemma register_pair_Snd:
  using assms by (auto intro!: ext simp: Snd_def register_pair_apply compatible_register1)

lemma register_Fst_register_Snd[simp]:
  apply (rule tensor_extensionality)
  using assms by (auto simp: register_pair_apply Fst_def Snd_def register_mult tensor_update_mult)

lemma register_Snd_register_Fst[simp]: 
  apply (rule tensor_extensionality)
  using assms by (auto simp: register_pair_apply Fst_def Snd_def register_mult tensor_update_mult)


lemma compatible3[simp]:
  assumes [simp]: "compatible F G" and "compatible G H" and "compatible F H"
  shows "compatible (F; G) H"
proof (rule compatibleI)
    using assms compatible_def by auto
    using register_preregister by blast+
    by simp_all
    by simp_all
  have "(F; G) (f \<otimes>\<^sub>u g) *\<^sub>u H h = H h *\<^sub>u (F; G) (f \<otimes>\<^sub>u g)" for f g h
  proof -
    have FH: "F f *\<^sub>u H h = H h *\<^sub>u F f"
      using assms compatible_def by metis
    have GH: "G g *\<^sub>u H h = H h *\<^sub>u G g"
      using assms compatible_def by metis
      using FH GH by (metis comp_update_assoc)
    finally show ?thesis
      by -
  qed
  then show "(F; G) fg *\<^sub>u (H h) = (H h) *\<^sub>u (F; G) fg" for fg h
    apply (rule_tac tensor_extensionality[THEN fun_cong])
    by auto
  show "register H" and  "register (F; G)"
    by simp_all
qed

lemma compatible3'[simp]:
  assumes "compatible F G" and "compatible G H" and "compatible F H"
  shows "compatible F (G; H)"
  apply (rule compatible_sym)
  apply (rule compatible3)
  using assms by (auto simp: compatible_sym)

lemma pair_o_swap[simp]:
  assumes [simp]: "compatible A B"
  shows "(A; B) o swap = (B; A)"
proof (rule tensor_extensionality)
  have [simp]: "preregister A" "preregister B"
     apply (metis (no_types, opaque_lifting) assms compatible_register1 register_preregister)
    by (metis (full_types) assms compatible_register2 register_preregister)
    by simp
    by (metis (no_types, lifting) assms compatible_sym register_preregister pair_is_register)
    apply (simp only: o_def swap_apply)
    apply (subst register_pair_apply, simp)
    apply (subst register_pair_apply, simp add: compatible_sym)
    by (metis (no_types, lifting) assms compatible_def)
qed



lemma compatible_register_tensor:
proof -
  note [intro!] = 
    comp_preregister[OF _ preregister_mult_right, unfolded o_def]
    comp_preregister[OF _ preregister_mult_left, unfolded o_def]
    comp_preregister
    register_tensor_is_register
    using assms compatible_def by blast+
    by (auto simp add: register_tensor_def)
    by auto
    by (auto simp: reorder_def)
    apply (simp add: reorder_def register_pair_apply)
    by (simp add: Fst_def Snd_def tensor_update_mult)
    unfolding \<Phi>_def 
    by (auto intro: register_preregister)
    unfolding \<Phi>_def by (auto simp: register_pair_apply tensor_update_mult)
    apply (rule_tac fun_cong[of _ _ \<sigma>])
    apply (rule tensor_extensionality)
    by auto
    unfolding \<Phi>_def apply (auto simp: register_pair_apply)
    by (metis assms(1) assms(2) compatible_def tensor_update_mult)
    apply (rule_tac fun_cong[of _ _ \<sigma>])
    apply (rule tensor_extensionality)
    by auto
    apply (rule_tac fun_cong[of _ _ \<tau>])
    apply (rule tensor_extensionality)
    by auto
  then show ?thesis
    apply (rule compatibleI[rotated -1])
    by auto
qed



  by (auto simp: assoc_def)

  by (auto simp: assoc_def register_pair_apply Fst_def Snd_def tensor_update_mult)


  by (auto simp: assoc'_def)

  by (auto simp: assoc'_def register_pair_apply Fst_def Snd_def tensor_update_mult)

  unfolding assoc_def
  by force

  unfolding assoc'_def 
  by force

lemma pair_o_assoc[simp]:
proof (rule tensor_extensionality3')
    by simp
    by simp
    by (simp add: register_pair_apply assoc_apply comp_update_assoc)
qed

lemma pair_o_assoc'[simp]:
proof (rule tensor_extensionality3)
    by simp
    by simp
    by (simp add: register_pair_apply assoc'_apply comp_update_assoc)
qed

  apply (rule tensor_extensionality3')
  by auto

  by (simp add: pointfree_idE)

  apply (rule tensor_extensionality3)
  by auto

  by (simp add: pointfree_idE)

  using assoc'_o_assoc assoc_o_assoc' inv_unique_comp by blast

  by (simp add: inv_equality)

  using assoc'_o_assoc assoc_o_assoc' o_bij by blast

  using assoc'_o_assoc assoc_o_assoc' o_bij by blast



lemma iso_registerI:
  using assms(1) assms(2) assms(3) assms(4) iso_register_def by blast

  by (metis inv_unique_comp iso_register_def)

  using inv_unique_comp iso_register_def by blast

  using inv_unique_comp iso_register_def by blast


  by (simp add: iso_register_def)

  using iso_register_def by blast

lemma iso_register_comp[simp]:
proof -
    by (meson iso_register_def)
  show ?thesis
       apply (auto simp: register_tensor_is_register iso_register_is_register register_tensor_distrib)
qed


lemma iso_register_tensor_is_iso_register[simp]:
proof -
    by (meson iso_register_def)
  show ?thesis
    by (auto simp: register_tensor_is_register iso_register_is_register register_tensor_distrib)
qed

  using iso_register_def o_bij by auto

lemma inv_register_tensor[simp]: 
  apply (auto intro!: inj_imp_inv_eq bij_is_inj iso_register_bij 
              simp: register_tensor_distrib[unfolded o_def, THEN fun_cong] iso_register_is_register
                    iso_register_inv bij_is_surj iso_register_bij surj_f_inv_f)
  by (metis eq_id_iff register_tensor_id)

  apply (rule iso_registerI[of _ swap])
  by auto

  apply (rule iso_registerI[of _ assoc'])
  by auto

  apply (rule iso_registerI[of _ assoc])
  by auto


  by (simp add: equivalent_registers_def)

lemma equivalent_registersI:
  using assms unfolding equivalent_registers_def by blast

  using equivalent_registers_def by auto

  by (metis equivalent_registers_def iso_register_def register_comp that)

lemma equivalent_registers_sym:
  by (smt (verit) assms comp_id equivalent_registers_def equivalent_registers_register_right fun.map_comp iso_register_def)

lemma equivalent_registers_trans[trans]: 
proof -
    by (auto simp: equivalent_registers_def)
    using equivalent_registers_def by blast
    using equivalent_registers_def by blast
    by (auto simp: equivalent_registers_def)
  ultimately show ?thesis
    by (rule equivalent_registersI)
qed

lemma equivalent_registers_assoc[simp]:
  apply (rule equivalent_registersI[where I=assoc])
  by auto

lemma equivalent_registers_pair_right:
proof -
    by (metis equivalent_registers_def)
    by (auto intro!: tensor_extensionality register_comp register_preregister register_tensor_is_register 
        simp:  register_pair_apply iso_register_is_register)
  show ?thesis
    using * by (auto intro!: iso_register_tensor_is_iso_register)
qed

lemma equivalent_registers_pair_left:
proof -
    by (metis equivalent_registers_def)
    by (auto intro!: tensor_extensionality register_comp register_preregister register_tensor_is_register 
        simp:  register_pair_apply iso_register_is_register)
  show ?thesis
    using * by (auto intro!: iso_register_tensor_is_iso_register)
qed

lemma equivalent_registers_comp:
  by (metis (no_types, lifting) assms(1) assms(2) comp_assoc equivalent_registers_def register_comp)




named_theorems register_attribute_rule_immediate
named_theorems register_attribute_rule

lemmas [register_attribute_rule] = conjunct1 conjunct2 iso_register_is_register iso_register_is_register[OF iso_register_inv]
lemmas [register_attribute_rule_immediate] = compatible_sym compatible_register1 compatible_register2

  then those facts are added to the simplifier together with some derived theorems

  added to this attribute.\<close>
setup \<open>
let
fun add thm results = 
  Net.insert_term (K true) (Thm.concl_of thm, thm) results
  handle Net.INSERT => results
fun try_rule f thm rule state = case SOME (rule OF [thm]) handle THM _ => NONE  of
  NONE => state | SOME th => f th state
fun collect (rules,rules_immediate) thm results =
  results |> fold (try_rule add thm) rules_immediate |> fold (try_rule (collect (rules,rules_immediate)) thm) rules
fun declare thm context = let
  val ctxt = Context.proof_of context
  val rules = Named_Theorems.get ctxt @{named_theorems register_attribute_rule}
  val rules_immediate = Named_Theorems.get ctxt @{named_theorems register_attribute_rule_immediate}
  val thms = collect (rules,rules_immediate) thm Net.empty |> Net.entries
  in Simplifier.map_ss (fn ctxt => ctxt addsimps thms) context end
in
 (Scan.succeed (Thm.declaration_attribute declare))
  "Add register-related rules to the simplifier"
end
\<close>
subsection \<open>Notation\<close>
