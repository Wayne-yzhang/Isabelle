theory Completeness imports Prover Semantics begin


locale Hintikka =
  assumes


  by (induct t) (auto cong: map_cong)

  by (induct p arbitrary: s) auto

theorem Hintikka_counter_model:
  case 1
  then show ?case ..
next
  case (2 x)
  then show ?case
  proof (cases x; safe del: notI)
    case Falsity
      using Hintikka.FlsA assms by simp_all
  next
    case (Pre P ts)
      using Hintikka.Basic assms by (auto cong: map_cong)
  next
    case (Imp p q)
      using assms Hintikka.ImpA[of A B p q] Hintikka.ImpB[of A B p q] Imp 2 by auto
  next
    case (Uni p)
      using Uni 2 by (metis fm.size(8) in_measure lessI less_add_same_cancel1 size_sub_fm)+
      using assms Hintikka.UniA[of A B p] Hintikka.UniB[of A B p] by auto
  qed
qed


  by (induct n arbitrary: s) (auto intro: stl_sset in_mono)

  by (induct n) (auto elim: epath.cases)

lemma eff_preserves_Pre:

lemma epath_eff:
  using assms by (auto elim: epath.cases)


lemma epath_Pre_sdrop:
  using assms eff_preserves_Pre
  by (induct m arbitrary: steps) (simp; metis (no_types, lifting) epath.cases surjective_pairing)+

lemma Saturated_sdrop:
  using assms unfolding Saturated_def saturated_def by (simp add: alw_iff_sdrop)



  unfolding treeA_def using sset_range[of steps] by simp

  unfolding treeB_def using sset_range[of steps] by simp

  unfolding treeA_def by (induct n) (simp, metis SUP_subset_mono order_refl sset_sdrop)

  unfolding treeB_def by (induct n) (simp, metis SUP_subset_mono order_refl sset_sdrop)

lemma enabled_ex_taken:
  using assms unfolding Saturated_def saturated_def UNIV_rules by (auto simp: ev_iff_sdrop)

lemma Hintikka_epath:
proof
  fix P ts
    using treeA_snth by auto

    using treeB_snth by auto


    using assms m epath_sdrop epath_Pre_sdrop by (metis (no_types, lifting) sdrop_add)
    using assms k epath_sdrop epath_Pre_sdrop by (metis (no_types, lifting) add.commute sdrop_add)
    unfolding enabled_def by (metis eff.simps(2) prod.exhaust_sel)
    using enabled_ex_taken[OF epath_sdrop[OF assms(1)] Saturated_sdrop[OF assms(2)]] by auto
    using assms(1) epath_sdrop epath_eff
    by (metis (no_types, lifting) eff.simps(2) epath.simps equalsffemptyD surjective_pairing)
  then show False
    using assms(1) epath_sdrop by (metis epath.cases option.discI)
next
  proof
      unfolding enabled_def using treeA_snth by (metis eff.simps(3) prod.exhaust_sel sdrop_simps(1))
      using enabled_ex_taken[OF epath_sdrop[OF assms(1)] Saturated_sdrop[OF assms(2)]] by auto
      using assms(1) epath_sdrop epath_eff
      by (metis (no_types, lifting) eff.simps(3) epath.simps equalsffemptyD surjective_pairing)
    then show False
      using assms(1) epath_sdrop by (metis epath.cases option.discI)
  qed
next
  fix p q
    unfolding enabled_def using treeA_snth by (metis eff.simps(5) prod.exhaust_sel sdrop_simps(1))
    using enabled_ex_taken[OF epath_sdrop[OF assms(1)] Saturated_sdrop[OF assms(2)]] by auto
    using assms(1) epath_sdrop epath_eff
    by (metis (no_types, lifting) eff.simps(5) epath.cases option.distinct(1) prod.collapse)
    by auto
    unfolding treeA_def treeB_def by (meson UN_I shd_sset)
    using treeA_sdrop treeB_sdrop by (metis sdrop_simps(2) subsetD)
next
  fix p q
    unfolding enabled_def using treeB_snth by (metis eff.simps(6) prod.exhaust_sel sdrop_simps(1))
    using enabled_ex_taken[OF epath_sdrop[OF assms(1)] Saturated_sdrop[OF assms(2)]] by auto
    using assms(1) epath_sdrop epath_eff
    by (metis (no_types, lifting) eff.simps(6) epath.cases option.distinct(1) prod.collapse)
    by auto
    unfolding treeA_def treeB_def by (meson UN_I shd_sset)
    using treeA_sdrop treeB_sdrop by (metis sdrop_simps(2) subsetD)
next
  fix p
  proof
    fix t
      unfolding enabled_def using treeA_snth by (metis eff.simps(7) prod.exhaust_sel sdrop_simps(1))
      using enabled_ex_taken[OF epath_sdrop[OF assms(1)] Saturated_sdrop[OF assms(2)]] by auto
      using assms(1) epath_sdrop epath_eff
      by (metis (no_types, lifting) eff.simps(7) epath.cases option.distinct(1) prod.collapse)
      by auto
      unfolding treeA_def by (meson UN_I shd_sset)
      using treeA_sdrop by (metis sdrop_simps(2) subsetD)
  qed
next
  fix p
    unfolding enabled_def using treeB_snth by (metis eff.simps(8) prod.exhaust_sel sdrop_simps(1))
    using enabled_ex_taken[OF epath_sdrop[OF assms(1)] Saturated_sdrop[OF assms(2)]] by auto
    using assms(1) epath_sdrop epath_eff
    by (metis (no_types, lifting) eff.simps(8) epath.cases option.distinct(1) prod.collapse)
    by auto
    unfolding treeB_def by (meson UN_I shd_sset)
    using treeB_sdrop by (metis sdrop_simps(2) subsetD)
qed


  unfolding rules_def using fair_stream surj_rule_of_nat .

  using fair_stream_rules unfolding Fair_Stream.fair_def fair_def alw_iff_sdrop ev_holds_sset
  by (metis dual_order.refl le_Suc_ex sdrop_snth snth_sset)

lemma epath_prover:
