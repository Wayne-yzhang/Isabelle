theory Compiler
  imports
    "HOL-IMP.Big_Step"
    "HOL-IMP.Star"
begin



subsection "List setup"

declare [[coercion_enabled]]
declare [[coercion "int :: nat \<Rightarrow> int"]]
declare [[syntax_ambiguity_warning = false]]

abbreviation (output)
"isize xs \<equiv> int (length xs)"

notation isize ("size")

primrec (nonexhaustive) inth :: "'a list \<Rightarrow> int \<Rightarrow> 'a" (infixl "!!" 100) where
"(x # xs) !! i = (if i = 0 then x else xs !! (i - 1))"

lemma inth_append [simp]:
 "0 \<le> i \<Longrightarrow>
    (xs @ ys) !! i = (if i < size xs then xs !! i else ys !! (i - size xs))"
by (induction xs arbitrary: i, auto simp: algebra_simps)


subsection "Instructions and stack machine"


datatype instr = 
  LOADI int | LOAD vname | ADD | STORE vname |
  JMP int | JMPLESS int | JMPGE int

type_synonym stack = "val list"
type_synonym config = "int \<times> state \<times> stack"

abbreviation "hd2 xs \<equiv> hd (tl xs)"
abbreviation "tl2 xs \<equiv> tl (tl xs)"

fun iexec :: "instr \<Rightarrow> config \<Rightarrow> config" where
"iexec ins (i, s, stk) = (case ins of
  LOADI n \<Rightarrow> (i + 1, s, n # stk) |
  LOAD x \<Rightarrow> (i + 1, s, s x # stk) |
  ADD \<Rightarrow> (i + 1, s, (hd2 stk + hd stk) # tl2 stk) |
  STORE x \<Rightarrow> (i + 1, s(x := hd stk), tl stk) |
  JMP n \<Rightarrow> (i + 1 + n, s, stk) |
  JMPLESS n \<Rightarrow> (if hd2 stk < hd stk then i + 1 + n else i + 1, s, tl2 stk) |
  JMPGE n \<Rightarrow> (if hd2 stk \<ge> hd stk then i + 1 + n else i + 1, s, tl2 stk))"

inductive iexec_pred :: "instr \<times> config \<Rightarrow> config \<Rightarrow> bool"
  (infix "\<mapsto>" 55) where
"(ins, cf) \<mapsto> iexec ins cf"

definition exec1 :: "instr list \<Rightarrow> config \<Rightarrow> config \<Rightarrow> bool"
  ("(_/ \<turnstile>/ _/ \<rightarrow>/ _)" 55) where
"P \<turnstile> cf \<rightarrow> cf' \<equiv> (P !! fst cf, cf) \<mapsto> cf' \<and> 0 \<le> fst cf \<and> fst cf < size P"

abbreviation exec :: "instr list \<Rightarrow> config \<Rightarrow> config \<Rightarrow> bool"
  ("(_/ \<turnstile>/ _/ \<rightarrow>*/ _)" 55) where
"exec P \<equiv> star (exec1 P)"


declare iexec_pred.intros [intro]

inductive_cases LoadIE  [elim!]:  "(LOADI i, pc, s, stk) \<mapsto> cf"
inductive_cases LoadE  [elim!]:  "(LOAD x, pc, s, stk) \<mapsto> cf"
inductive_cases AddE  [elim!]:  "(ADD, pc, s, stk) \<mapsto> cf"
inductive_cases StoreE  [elim!]:  "(STORE x, pc, s, stk) \<mapsto> cf"
inductive_cases JmpE  [elim!]:  "(JMP i, pc, s, stk) \<mapsto> cf"
inductive_cases JmpLessE  [elim!]:  "(JMPLESS i, pc, s, stk) \<mapsto> cf"
inductive_cases JmpGeE  [elim!]:  "(JMPGE i, pc, s, stk) \<mapsto> cf"

lemmas exec_induct = star.induct [of "exec1 P", split_format(complete)]

lemma iexec_simp:
 "(ins, cf) \<mapsto> cf' = (cf' = iexec ins cf)"
by (auto elim: iexec_pred.cases)

lemma exec1I [intro, code_pred_intro]:
 "\<lbrakk>c' = iexec (P !! i) (i, s, stk); 0 \<le> i; i < size P\<rbrakk> \<Longrightarrow>
    P \<turnstile> (i, s, stk) \<rightarrow> c'"
by (auto simp: exec1_def iexec_simp)


type_synonym addr = int

datatype m_instr =
  M_LOADI int | M_LOAD addr | M_ADD | M_STORE addr |
  M_JMP int | M_JMPLESS int | M_JMPGE int


primrec vars :: "instr list \<Rightarrow> vname list" where
"vars [] = []" |
"vars (ins # P) = (case ins of
  LOAD x \<Rightarrow> if x \<in> set (vars P) then [] else [x] |
  STORE x \<Rightarrow> if x \<in> set (vars P) then [] else [x] |
  _ \<Rightarrow> []) @ vars P"

primrec addr_of :: "vname list \<Rightarrow> vname \<Rightarrow> addr" where
"addr_of [] _ = 0" |
"addr_of (x # xs) y = (if x = y then size xs + 1 else addr_of xs y)"


fun to_m_instr :: "vname list \<Rightarrow> instr \<Rightarrow> m_instr" where
"to_m_instr xs ins = (case ins of
  LOADI n \<Rightarrow> M_LOADI n |
  LOAD x \<Rightarrow> M_LOAD (addr_of xs x) |
  ADD \<Rightarrow> M_ADD |
  STORE x \<Rightarrow> M_STORE (addr_of xs x) |
  JMP n \<Rightarrow> M_JMP n |
  JMPLESS n \<Rightarrow> M_JMPLESS n |
  JMPGE n \<Rightarrow> M_JMPGE n)"

fun to_m_prog :: "instr list \<Rightarrow> m_instr list" where
"to_m_prog P = map (to_m_instr (vars P)) P"

type_synonym m_state = "addr \<Rightarrow> val"
type_synonym m_config = "int \<times> m_state \<times> nat"


fun to_state :: "vname list \<Rightarrow> m_state \<Rightarrow> state" where
"to_state xs ms x = ms (addr_of xs x)"

fun to_m_state :: "vname list \<Rightarrow> state \<Rightarrow> m_state" where
"to_m_state xs s a = (if 0 < a \<and> a \<le> size xs then s (xs !! (size xs - a)) else 0)"


primrec add_stack :: "nat \<Rightarrow> m_state \<Rightarrow> stack" where
"add_stack 0 _ = []" |
"add_stack (Suc n) ms = ms (-Suc n) # add_stack n ms"

primrec add_m_stack :: "nat \<Rightarrow> stack \<Rightarrow> m_state \<Rightarrow> m_state" where
"add_m_stack 0 _ ms = ms" |
"add_m_stack (Suc n) stk ms = (add_m_stack n (tl stk) ms)(-Suc n := hd stk)"


primrec m_msp :: "m_instr \<Rightarrow> nat" where
"m_msp (M_LOADI n) = 0" |
"m_msp (M_LOAD a) = 0" |
"m_msp M_ADD = 2" |
"m_msp (M_STORE a) = 1" |
"m_msp (M_JMP n) = 0" |
"m_msp (M_JMPLESS n) = 2" |
"m_msp (M_JMPGE n) = 2"

definition msp :: "instr list \<Rightarrow> int \<Rightarrow> nat" where
"msp P i \<equiv> m_msp (to_m_instr [] (P !! i))"


fun m_iexec :: "m_instr \<Rightarrow> m_config \<Rightarrow> m_config" where
"m_iexec mins (i, ms, sp) = (case mins of
  M_LOADI n \<Rightarrow> (i + 1, ms(-1 - sp := n), sp + 1) |
  M_LOAD a \<Rightarrow> (i + 1, ms(-1 - sp := ms a), sp + 1) |
  M_ADD \<Rightarrow> (i + 1, ms(1 - sp := ms (1 - sp) + ms (-sp)), sp - 1) |
  M_STORE a \<Rightarrow> (i + 1, ms(a := ms (-sp)), sp - 1) |
  M_JMP n \<Rightarrow> (i + 1 + n, ms, sp) |
  M_JMPLESS n \<Rightarrow>
    (if ms (1 - sp) < ms (-sp) then i + 1 + n else i + 1, ms, sp - 2) |
  M_JMPGE n \<Rightarrow>
    (if ms (1 - sp) \<ge> ms (-sp) then i + 1 + n else i + 1, ms, sp - 2))"

fun m_config_equiv :: "m_config \<Rightarrow> m_config \<Rightarrow> bool" (infix "\<cong>" 55) where
"(i, ms, sp) \<cong> (i', ms', sp') =
  (i = i' \<and> sp = sp' \<and> (\<forall>a \<ge> -sp. ms a = ms' a))"

definition m_exec1 :: "m_instr list \<Rightarrow> m_config \<Rightarrow> m_config \<Rightarrow> bool"
  ("(_/ \<^bold>\<turnstile>/ _/ \<^bold>\<rightarrow>/ _)" [59, 0, 59] 60) where
"MP \<^bold>\<turnstile> mcf \<^bold>\<rightarrow> mcf' \<equiv>
  mcf' \<cong> m_iexec (MP !! fst mcf) mcf \<and> 0 \<le> fst mcf \<and> fst mcf < size MP \<and>
    m_msp (MP !! fst mcf) \<le> snd (snd mcf)"

abbreviation m_exec :: "m_instr list \<Rightarrow> m_config \<Rightarrow> m_config \<Rightarrow> bool"
  ("(_/ \<^bold>\<turnstile>/ _/ \<^bold>\<rightarrow>\<^bold>*/ _)" [59, 0, 59] 60) where
"m_exec MP \<equiv> star (m_exec1 MP)"


lemma inth_map [simp]:
 "\<lbrakk>0 \<le> i; i < size xs\<rbrakk> \<Longrightarrow> (map f xs) !! i = f (xs !! i)"
by (induction xs arbitrary: i, simp_all)

lemma inth_set [simp]:
 "\<lbrakk>0 \<le> i; i < size xs\<rbrakk> \<Longrightarrow> xs !! i \<in> set xs"
by (induction xs arbitrary: i, simp_all)

lemma vars_dist:
 "distinct (vars P)"
by (induction P, simp_all split: instr.split)

lemma vars_load:
 "\<lbrakk>0 \<le> i; i < size P; P !! i = LOAD x\<rbrakk> \<Longrightarrow> x \<in> set (vars P)"
by (induction P arbitrary: i, simp, fastforce split: if_split_asm)

lemma vars_store:
 "\<lbrakk>0 \<le> i; i < size P; P !! i = STORE x\<rbrakk> \<Longrightarrow> x \<in> set (vars P)"
by (induction P arbitrary: i, simp, fastforce split: if_split_asm)

lemma addr_of_max:
 "addr_of xs x \<le> size xs"
by (induction xs, simp_all)

lemma addr_of_neq:
 "1 + size xs \<noteq> addr_of xs x"
by (insert addr_of_max [of xs x], simp)

lemma addr_of_correct:
 "x \<in> set xs \<Longrightarrow> xs !! (size xs - addr_of xs x) = x"
by (induction xs, simp, clarsimp, erule contrapos_pp, rule addr_of_neq)

lemma addr_of_nneg:
 "0 \<le> addr_of xs x"
by (induction xs, simp_all)

lemma addr_of_set:
 "x \<in> set xs \<Longrightarrow> 0 < addr_of xs x"
by (induction xs, auto)

lemma addr_of_unique:
 "\<lbrakk>distinct xs; 0 < a; a \<le> size xs\<rbrakk> \<Longrightarrow> addr_of xs (xs !! (size xs - a)) = a"
by (induction xs, auto)

lemma add_m_stack_nneg:
 "0 \<le> a \<Longrightarrow> add_m_stack n stk ms a = ms a"
by (induction n arbitrary: stk, simp_all)

lemma add_m_stack_hd:
 "0 < n \<Longrightarrow> add_m_stack n stk ms (-n) = hd stk"
by (cases n, simp_all)

lemma add_m_stack_hd2:
 "1 < n \<Longrightarrow> add_m_stack n stk ms (1 - int n) = hd2 stk"
by (cases n, simp_all add: add_m_stack_hd)

lemma add_m_stack_nth:
 "\<lbrakk>-n \<le> a; n \<le> length stk\<rbrakk> \<Longrightarrow>
    add_m_stack n stk ms a = (if 0 \<le> a then ms a else stk ! (nat (n + a)))"
by (induction n arbitrary: stk, auto intro: hd_conv_nth simp: add_m_stack_nneg
 nth_tl Suc_nat_eq_nat_zadd1 ac_simps)

lemma exec1_m_exec1 [simplified Let_def]:
 "\<lbrakk>P \<turnstile> (pc, s, stk) \<rightarrow> (pc', s', stk'); msp P pc \<le> sp; sp \<le> length stk\<rbrakk> \<Longrightarrow>
    let sp' = sp + length stk' - length stk in to_m_prog P \<^bold>\<turnstile>
      (pc, add_m_stack sp stk (to_m_state (vars P) s), sp) \<^bold>\<rightarrow>
      (pc', add_m_stack sp' stk' (to_m_state (vars P) s'), sp')"
proof (auto dest: vars_load vars_store addr_of_set intro: addr_of_max
 simp: msp_def exec1_def m_exec1_def vars_load addr_of_correct addr_of_nneg
 add_m_stack_nneg add_m_stack_hd add_m_stack_hd2 split: instr.split)
qed (auto dest: vars_store simp: add_m_stack_nth nth_tl Suc_nat_eq_nat_zadd1
 of_nat_diff vars_dist addr_of_correct addr_of_unique)


lemma addr_of_nset:
 "x \<notin> set xs \<Longrightarrow> addr_of xs x = 0"
by (induction xs, auto split: if_split_asm)

lemma addr_of_inj:
 "inj_on (addr_of xs) (set xs)"
by (subst inj_on_def, clarify, induction xs, simp_all split: if_split_asm,
 drule sym, (subst (asm) add.commute, erule contrapos_pp, rule addr_of_neq)+)

lemma addr_of_neq2:
 "\<lbrakk>x \<in> set xs; x' \<noteq> x\<rbrakk> \<Longrightarrow> addr_of xs x' \<noteq> addr_of xs x"
by (cases "x' \<in> set xs", erule contrapos_nn, rule inj_onD [OF addr_of_inj],
 simp_all, drule addr_of_set, drule addr_of_nset, simp)

lemma to_state_eq:
 "\<forall>a \<ge> 0. ms' a = ms a \<Longrightarrow> to_state xs ms' = to_state xs ms"
by (rule ext, simp, induction xs, simp_all)

lemma to_state_upd:
 "\<lbrakk>\<forall>a \<ge> 0. ms' a = (if a = addr_of xs x then i else ms a); x \<in> set xs\<rbrakk> \<Longrightarrow>
    to_state xs ms' = (to_state xs ms)(x := i)"
by (rule ext, simp, rule conjI, rule_tac [!] impI, simp add: addr_of_nneg,
 drule addr_of_neq2, simp, simp add: addr_of_nneg)

lemma add_stack_eq:
 "\<lbrakk>\<forall>a \<in> {-m..<0}. ms' a = ms a; m = n\<rbrakk> \<Longrightarrow> add_stack m ms' = add_stack n ms"
by (induction m arbitrary: n, auto)

lemma add_stack_eq2:
 "\<lbrakk>\<forall>a \<in> {-n..<0}. ms' a = (if a = -n then i else ms a); 0 < n\<rbrakk> \<Longrightarrow>
    add_stack n ms' = i # add_stack (n - 1) ms"
by (cases n, simp_all add: add_stack_eq)

lemma add_stack_hd:
 "0 < n \<Longrightarrow> hd (add_stack n ms) = ms (-n)"
by (cases n, simp_all)

lemma add_stack_hd2:
 "1 < n \<Longrightarrow> hd2 (add_stack n ms) = ms (1 - int n)"
by (induction n, simp_all add: add_stack_hd)

lemma add_stack_nnil:
 "0 < n \<Longrightarrow> add_stack n ms \<noteq> []"
by (cases n, simp_all)

lemma add_stack_nnil2:
 "1 < n \<Longrightarrow> tl (add_stack n ms) \<noteq> []"
by (induction n, simp_all add: add_stack_nnil)

lemma add_stack_tl:
 "tl (add_stack n ms) = add_stack (n - 1) ms"
by (cases n, simp_all)

lemma m_exec1_exec1 [simplified]:
 "to_m_prog P \<^bold>\<turnstile> (pc, ms, sp) \<^bold>\<rightarrow> (pc', ms', sp') \<Longrightarrow>
    P \<turnstile> (pc, to_state (vars P) ms, add_stack sp ms @ stk) \<rightarrow>
      (pc', to_state (vars P) ms', add_stack sp' ms' @ stk)"
proof (auto elim!: vars_store intro!: to_state_eq to_state_upd add_stack_eq
 simp: exec1_def m_exec1_def iexec_simp add_stack_hd add_stack_hd2
 add_stack_nnil add_stack_nnil2 split: instr.split_asm)
qed (subst add_stack_eq2, fastforce+, simp_all add: add_stack_tl, rule arg_cong,
 auto dest!: vars_store addr_of_set intro: add_stack_eq)

lemma m_exec_exec:
 "to_m_prog P \<^bold>\<turnstile> (pc, ms, sp) \<^bold>\<rightarrow>\<^bold>* (pc', ms', sp') \<Longrightarrow>
    P \<turnstile> (pc, to_state (vars P) ms, add_stack sp ms @ stk) \<rightarrow>*
      (pc', to_state (vars P) ms', add_stack sp' ms' @ stk)"
by (induction _ "(pc, ms, sp)" "(pc', ms', sp')" arbitrary: pc ms sp rule:
 star.induct, simp_all add: split_paired_all, drule m_exec1_exec1,
 auto intro: star_trans)


subsection "Verification infrastructure"

lemma iexec_shift [simp]: 
 "((n + i', s', stk') = iexec ins (n + i, s, stk)) =
    ((i', s', stk') = iexec ins (i, s, stk))"
by (auto split: instr.split)

lemma exec1_appendR:
 "P \<turnstile> c \<rightarrow> c' \<Longrightarrow> P @ P' \<turnstile> c \<rightarrow> c'"
by (auto simp: exec1_def)

lemma exec_appendR:
 "P \<turnstile> c \<rightarrow>* c' \<Longrightarrow> P @ P' \<turnstile> c \<rightarrow>* c'"
by (induction rule: star.induct) (fastforce intro: star.step exec1_appendR)+

lemma exec1_appendL:
  fixes i i' :: int 
  shows "P \<turnstile> (i, s, stk) \<rightarrow> (i', s', stk') \<Longrightarrow>
    P' @ P \<turnstile> (size P' + i, s, stk) \<rightarrow> (size P' + i', s', stk')"
by (auto simp: exec1_def iexec_simp simp del: iexec.simps)

lemma exec_appendL:
  fixes i i' :: int 
  shows "P \<turnstile> (i, s, stk) \<rightarrow>* (i', s', stk') \<Longrightarrow>
    P' @ P \<turnstile> (size P' + i, s, stk) \<rightarrow>* (size P' + i', s', stk')"
by (induction rule: exec_induct) (blast intro: star.step exec1_appendL)+

lemma exec_Cons_1 [intro]:
 "P \<turnstile> (0, s, stk) \<rightarrow>* (j, t, stk') \<Longrightarrow>
    ins # P \<turnstile> (1, s, stk) \<rightarrow>* (1 + j, t, stk')"
by (drule exec_appendL [where P' = "[ins]"]) simp

lemma exec_appendL_if [intro]:
  fixes i i' j :: int
  shows "\<lbrakk>size P' \<le> i; P \<turnstile> (i - size P', s, stk) \<rightarrow>* (j, s', stk');
    i' = size P' + j\<rbrakk> \<Longrightarrow>
      P' @ P \<turnstile> (i, s, stk) \<rightarrow>* (i', s', stk')"
by (drule exec_appendL [where P' = P']) simp

lemma exec_append_trans [intro]:
  fixes i' i'' j'' :: int
  shows "\<lbrakk>P \<turnstile> (0, s, stk) \<rightarrow>* (i', s', stk'); size P \<le> i';
    P' \<turnstile> (i' - size P, s', stk') \<rightarrow>* (i'', s'', stk''); j'' = size P + i''\<rbrakk> \<Longrightarrow>
      P @ P' \<turnstile> (0, s, stk) \<rightarrow>* (j'', s'', stk'')"
by (metis star_trans [OF exec_appendR exec_appendL_if])

declare Let_def [simp]


subsection "Compilation"


primrec acomp :: "aexp \<Rightarrow> instr list" where
"acomp (N i) = [LOADI i]" |
"acomp (V x) = [LOAD x]" |
"acomp (Plus a\<^sub>1 a\<^sub>2) = acomp a\<^sub>1 @ acomp a\<^sub>2 @ [ADD]"

fun bcomp :: "bexp \<times> bool \<times> int \<Rightarrow> instr list" where
"bcomp (Bc v, f, i) = (if v = f then [JMP i] else [])" |
"bcomp (Not b, f, i) = bcomp (b, \<not> f, i)" |
"bcomp (And b\<^sub>1 b\<^sub>2, f, i) =
  (let cb\<^sub>2 = bcomp (b\<^sub>2, f, i);
     cb\<^sub>1 = bcomp (b\<^sub>1, False, size cb\<^sub>2 + (if f then 0 else i))
   in cb\<^sub>1 @ cb\<^sub>2)" |
"bcomp (Less a\<^sub>1 a\<^sub>2, f, i) =
  acomp a\<^sub>1 @ acomp a\<^sub>2 @ (if f then [JMPLESS i] else [JMPGE i])"

primrec ccomp :: "com \<Rightarrow> instr list" where
"ccomp SKIP = []" |
"ccomp (x ::= a) = acomp a @ [STORE x]" |
"ccomp (c\<^sub>1;; c\<^sub>2) = ccomp c\<^sub>1 @ ccomp c\<^sub>2" |
"ccomp (IF b THEN c\<^sub>1 ELSE c\<^sub>2) =
  (let cc\<^sub>1 = ccomp c\<^sub>1; cc\<^sub>2 = ccomp c\<^sub>2; cb = bcomp (b, False, size cc\<^sub>1 + 1)
   in cb @ cc\<^sub>1 @ JMP (size cc\<^sub>2) # cc\<^sub>2)" |
"ccomp (WHILE b DO c) =
  (let cc = ccomp c; cb = bcomp (b, False, size cc + 1)
   in cb @ cc @ [JMP (- (size cb + size cc + 1))])"


abbreviation m_ccomp :: "com \<Rightarrow> m_instr list" where
"m_ccomp c \<equiv> to_m_prog (ccomp c)"

abbreviation m_state :: "com \<Rightarrow> state \<Rightarrow> m_state" where
"m_state c \<equiv> to_m_state (vars (ccomp c))"

abbreviation state :: "com \<Rightarrow> m_state \<Rightarrow> state" where
"state c \<equiv> to_state (vars (ccomp c))"


lemma acomp_correct [intro]:
 "acomp a \<turnstile> (0, s, stk) \<rightarrow>* (size (acomp a), s, aval a s # stk)"
by (induction a arbitrary: stk) fastforce+

lemma bcomp_correct [intro]:
  fixes i :: int
  shows "0 \<le> i \<Longrightarrow> bcomp (b, f, i) \<turnstile> (0, s, stk) \<rightarrow>*
    (size (bcomp (b, f, i)) + (if f = bval b s then i else 0), s, stk)"
proof (induction b arbitrary: f i)
  case Not
  from Not(1) [where f = "\<not> f"] Not(2)
  show ?case
    by fastforce
next
  case (And b\<^sub>1 b\<^sub>2)
  from And(1) [of "if f then size (bcomp (b\<^sub>2, f, i)) else
    size (bcomp (b\<^sub>2, f, i)) + i" False] And(2) [of i f] And(3)
  show ?case
    by fastforce
qed fastforce+


subsection "Preservation of semantics"


theorem ccomp_bigstep:
 "(c, s) \<Rightarrow> t \<Longrightarrow> ccomp c \<turnstile> (0, s, stk) \<rightarrow>* (size (ccomp c), t, stk)"
proof (induction arbitrary: stk rule: big_step_induct)
  case (Assign x a s)
  show ?case
    by (fastforce simp: fun_upd_def cong: if_cong)
next
  case (Seq c\<^sub>1 s\<^sub>1 s\<^sub>2 c\<^sub>2 s\<^sub>3)
  let ?cc\<^sub>1 = "ccomp c\<^sub>1"
  let ?cc\<^sub>2 = "ccomp c\<^sub>2"
  have "?cc\<^sub>1 @ ?cc\<^sub>2 \<turnstile> (0, s\<^sub>1, stk) \<rightarrow>* (size ?cc\<^sub>1, s\<^sub>2, stk)"
    using Seq.IH(1) by fastforce
  moreover have "?cc\<^sub>1 @ ?cc\<^sub>2 \<turnstile> (size ?cc\<^sub>1, s\<^sub>2, stk) \<rightarrow>*
    (size (?cc\<^sub>1 @ ?cc\<^sub>2), s\<^sub>3, stk)"
    using Seq.IH(2) by fastforce
  ultimately show ?case
    by simp (blast intro: star_trans)
next
  case (WhileTrue b s\<^sub>1 c s\<^sub>2 s\<^sub>3)
  let ?cc = "ccomp c"
  let ?cb = "bcomp (b, False, size ?cc + 1)"
  let ?cw = "ccomp (WHILE b DO c)"
  have "?cw \<turnstile> (0, s\<^sub>1, stk) \<rightarrow>* (size ?cb, s\<^sub>1, stk)"
  moreover have "?cw \<turnstile> (size ?cb, s\<^sub>1, stk) \<rightarrow>* (size ?cb + size ?cc, s\<^sub>2, stk)"
    using WhileTrue.IH(1) by fastforce
  moreover have "?cw \<turnstile> (size ?cb + size ?cc, s\<^sub>2, stk) \<rightarrow>* (0, s\<^sub>2, stk)"
    by fastforce
  moreover have "?cw \<turnstile> (0, s\<^sub>2, stk) \<rightarrow>* (size ?cw, s\<^sub>3, stk)"
    by (rule WhileTrue.IH(2))
  ultimately show ?case
    by (blast intro: star_trans)
qed fastforce+


declare Let_def [simp del]

lemma impCE2 [elim!]:
 "\<lbrakk>P \<longrightarrow> Q; \<not> P \<Longrightarrow> R; P \<Longrightarrow> Q \<Longrightarrow> R\<rbrakk> \<Longrightarrow> R"
by blast

lemma Suc_lessI2 [intro!]:
 "\<lbrakk>m < n; m \<noteq> n - 1\<rbrakk> \<Longrightarrow> Suc m < n"
by simp

end
