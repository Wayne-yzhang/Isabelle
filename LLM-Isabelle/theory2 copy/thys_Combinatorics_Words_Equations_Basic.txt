theory Equations_Basic
  imports
    Periodicity_Lemma
    Lyndon_Schutzenberger
    Submonoids
    Binary_Code_Morphisms
begin

chapter "Equations on words - basics"

text


definition factor_interpretation :: "'a list \<Rightarrow> 'a list \<Rightarrow> 'a list \<Rightarrow> 'a list list \<Rightarrow> bool" ("_ _ _ \<sim>\<^sub>\<I> _" [51,51,51,51] 60)
  where "factor_interpretation p u s ws = (p <p hd ws \<and> s <s last ws \<and> p \<cdot> u \<cdot> s = concat ws)"


lemma fac_interp_nemp:  "u \<noteq> \<epsilon> \<Longrightarrow> p u s \<sim>\<^sub>\<I> ws \<Longrightarrow> ws \<noteq> \<epsilon>"
  unfolding factor_interpretation_def by auto

lemma fac_interpD: assumes "p u s \<sim>\<^sub>\<I> ws"
  shows "p <p hd ws" and "s <s last ws" and "p \<cdot> u \<cdot> s = concat ws"
  using assms unfolding factor_interpretation_def by blast+

lemma fac_interpI:
  "p <p hd ws \<Longrightarrow> s <s last ws \<Longrightarrow> p \<cdot> u \<cdot> s = concat ws \<Longrightarrow> p u s \<sim>\<^sub>\<I> ws"
  unfolding factor_interpretation_def by blast

lemma obtain_fac_interp: assumes  "pu \<cdot> u \<cdot> su = concat ws" and "u \<noteq> \<epsilon>"
  obtains ps ss p s vs where "p u s \<sim>\<^sub>\<I> vs" and "ps \<cdot> vs \<cdot> ss = ws" and "concat ps \<cdot> p = pu" and
    "s \<cdot> concat ss = su"
  using assms
proof (induction "\<^bold>|ws\<^bold>|" arbitrary: ws pu su thesis rule: less_induct)
  case less
  then show ?case
  proof-
    have "ws \<noteq> \<epsilon>"
    have "\<^bold>|tl ws\<^bold>| < \<^bold>|ws\<^bold>|" and "\<^bold>|butlast ws\<^bold>| < \<^bold>|ws\<^bold>|"
    show thesis
    proof (cases)
      assume "hd ws \<le>p pu \<or> last ws \<le>s su"
      then show thesis
      proof
        assume "hd ws \<le>p pu"
        from prefixE[OF this]
        obtain pu' where "pu = hd ws \<cdot> pu'".
        have "pu' \<cdot> u \<cdot> su = concat (tl ws)"
          by force
        obtain p s vs ps' ss where "p u s \<sim>\<^sub>\<I> vs" and  "ps' \<cdot> vs \<cdot> ss = tl ws" and  "concat ps' \<cdot> p = pu'"
          and "s \<cdot> concat ss = su".
        have "(hd ws # ps') \<cdot> vs \<cdot> ss = ws"
        have "concat (hd ws # ps') \<cdot> p = pu"
        show thesis.
      next
        assume "last ws \<le>s su"
        from suffixE[OF this]
        obtain su' where "su = su' \<cdot> last ws".
        have "pu \<cdot> u \<cdot> su' = concat (butlast ws)"
          by force
        obtain p s vs ps ss' where "p u s \<sim>\<^sub>\<I> vs" and  "ps \<cdot> vs \<cdot> ss' = butlast ws" and "concat ps \<cdot> p = pu" and "s \<cdot> concat ss' = su'".
        have "ps \<cdot> vs \<cdot> (ss' \<cdot> [last ws]) = ws"
        have "s \<cdot> concat (ss' \<cdot> [last ws]) = su"
        show thesis.
      qed
    next
      assume not_or: "\<not> (hd ws \<le>p pu \<or> last ws \<le>s su)"
      hence "pu <p hd ws" and "su <s last ws"
      have "pu u su \<sim>\<^sub>\<I> ws".
      from less.prems(1)[OF this, of \<epsilon> \<epsilon>]
      show thesis by simp
    qed
  qed
qed

lemma obtain_fac_interp': assumes "u \<le>f concat ws" and "u \<noteq> \<epsilon>"
  obtains p s vs where "p u s \<sim>\<^sub>\<I> vs" and "vs \<le>f ws"
proof-
  obtain pu su where "concat ws = pu \<cdot> u \<cdot> su".
  show thesis
    using facI' by metis
qed

lemma fac_pow_longE:  assumes "w \<le>f v\<^sup>@k" and "\<^bold>|v\<^bold>| \<le> \<^bold>|w\<^bold>|"
  obtains m v1 v2 where "v1 \<le>s v" "v2 \<le>p v" "w = v1 \<cdot> v\<^sup>@m \<cdot> v2"
  using assms
proof (cases "w = \<epsilon> \<or> w = v")
  assume "w = \<epsilon> \<or> w = v"
  then show thesis
    by (rule disjE) (use that[of \<epsilon> \<epsilon> 0] in fastforce, use that[of \<epsilon> \<epsilon> 1] in auto)
next
  assume "\<not> (w = \<epsilon> \<or> w = v)"
  hence "w \<noteq> \<epsilon>" and "w \<noteq> v" by blast+
  have "v\<^sup>@k = concat ([v]\<^sup>@k)"
    by auto
  obtain p vs s where "p w s \<sim>\<^sub>\<I> vs" "vs \<le>f [v] \<^sup>@ k".
  note fac_interpD[OF this(1)]
  obtain m where "vs = [v]\<^sup>@m"
  hence "concat vs = v\<^sup>@m"
    by simp
  have "0 < m"
  hence "hd vs = v" and "last vs = v"
    by (simp_all add: hd_pow hd_pow[reversed])
  obtain v1 where "v = p \<cdot> v1"
  obtain v2 where "v = v2 \<cdot> s"
  have "m \<noteq> 1"
  hence "2 \<le> m"
  from Suc_minus2[OF this]
  have "concat vs = v \<cdot> v\<^sup>@(m-2) \<cdot> v"
  hence "w = v1 \<cdot> v\<^sup>@(m-2) \<cdot> v2"
  from that[OF _ _ this]
  show thesis
qed

lemma obtain_fac_interp_dec: assumes  "w \<in> \<langle>G\<rangle>"  "u \<le>f w" "u \<noteq> \<epsilon>"
  obtains p s ws where "ws \<in> lists (G - {\<epsilon>})" "p u s \<sim>\<^sub>\<I> ws" "ws \<le>f Dec G w"
proof-
  obtain p s ws where *: "p u s \<sim>\<^sub>\<I> ws" "ws \<le>f Dec G w".
  have "ws \<in> lists (G - {\<epsilon>})"
  from that[OF this *]
  show thesis.
qed


lemma fac_interp_inner: assumes "u \<noteq> \<epsilon>" and  "p u s \<sim>\<^sub>\<I> ws" and "1 < \<^bold>|ws\<^bold>|"
shows "p\<inverse>\<^sup>>(hd ws)\<cdot>concat(butlast (tl ws))\<cdot>(last ws)\<^sup><\<inverse>s = u"
proof-
have "p <p hd ws" and  "s <s last ws" and  "p \<cdot> u \<cdot> s = concat ws"
using assms[unfolded factor_interpretation_def]  by blast+
have "last (tl ws) = last ws"
have ws_eq: "[hd ws] \<cdot> butlast (tl ws) \<cdot> [last ws] = ws"
have "(hd ws)\<cdot>concat(butlast (tl ws))\<cdot>(last ws) = p \<cdot> u \<cdot> s".
thus "p\<inverse>\<^sup>>(hd ws)\<cdot>concat(butlast (tl ws))\<cdot>(last ws)\<^sup><\<inverse>s = u"
unfolding cancel_right[of "p\<inverse>\<^sup>>(hd ws)\<cdot>concat (butlast (tl ws)) \<cdot> last ws\<^sup><\<inverse>s" s u, symmetric]
unfolding cancel[of p "p\<inverse>\<^sup>>hd ws \<cdot> concat (butlast (tl ws)) \<cdot> last ws" "u\<cdot>s", symmetric]
qed


lemma fac_interp_inner_len: assumes "u \<noteq> \<epsilon>" and  "p u s \<sim>\<^sub>\<I> ws"
shows  "\<^bold>|concat(butlast (tl ws))\<^bold>| < \<^bold>|u\<^bold>|"
proof (cases "\<^bold>|ws\<^bold>| \<le> 1")
assume "\<^bold>|ws\<^bold>| \<le> 1"
hence "tl ws = \<epsilon>"
using nemp_le_len by fastforce
thus ?thesis
next
assume neg: "\<not> \<^bold>|ws\<^bold>| \<le> 1"  hence "1 < \<^bold>|ws\<^bold>|" by auto
show ?thesis
unfolding factor_interpretation_def lenmorph
using rq_ssuf[of s "last ws", folded length_greater_0_conv]
by linarith
qed

lemma rev_in_set_map_rev_conv: "rev u \<in> set (map rev ws) \<longleftrightarrow> u \<in> set ws"
  by auto

lemma rev_fac_interp: assumes "p u s \<sim>\<^sub>\<I> ws" shows "(rev s) (rev u) (rev p) \<sim>\<^sub>\<I> rev (map rev ws)"
proof (rule fac_interpI)
  note fac_interpD[OF assms]
  show "rev p <s last (rev (map rev ws))"
  show "rev s \<cdot> rev u \<cdot> rev p = concat (rev (map rev ws))"
    by (metis append_assoc rev_append rev_concat rev_map)
qed

lemma rev_fac_interp_iff [reversal_rule]: "(rev s) (rev u) (rev p) \<sim>\<^sub>\<I> rev (map rev ws) \<longleftrightarrow> p u s \<sim>\<^sub>\<I> ws"
  using rev_fac_interp
  by (metis (no_types, lifting) map_rev_involution rev_map rev_rev_ident)

lemma fac_interp_mid_fac: assumes "p u s \<sim>\<^sub>\<I> ws"
  shows "concat (butlast (tl ws)) \<le>f u"
proof(rule le_cases)
  assume "2 \<le> \<^bold>|ws\<^bold>|"
  note ex = sprefD1[OF this(1)] sprefE[reversed, OF this(2)]
  obtain p' where "hd ws = p \<cdot> p'"
    using ex(1) prefixE
    by blast
  obtain s' where "last ws = s' \<cdot> s"
  show ?thesis
    unfolding concat_morph concat_sing'
    by simp
next
  assume "\<^bold>|ws\<^bold>| \<le> 2"
  hence "butlast (tl ws) = \<epsilon>"
    using nemp_le_len by fastforce
  thus ?thesis
    by simp
qed

definition disjoint_interpretation :: "'a list \<Rightarrow> 'a list list \<Rightarrow> 'a list \<Rightarrow> 'a list list \<Rightarrow> bool" ("_ _ _ \<sim>\<^sub>\<D> _" [51,51,51,51] 60)
  where "p us s \<sim>\<^sub>\<D> ws \<equiv> p (concat us) s \<sim>\<^sub>\<I> ws \<and>
                                             (\<forall> u v. u \<le>p us \<and> v \<le>p ws \<longrightarrow> p \<cdot> concat u \<noteq> concat v)"

lemma disjoint_interpI: "p (concat us) s \<sim>\<^sub>\<I> ws \<Longrightarrow>
      (\<forall> u v. u \<le>p us \<and> v \<le>p ws \<longrightarrow> p \<cdot> concat u \<noteq> concat v) \<Longrightarrow> p us s \<sim>\<^sub>\<D> ws"
  unfolding disjoint_interpretation_def by blast

lemma disjoint_interpI'[intro]: "p (concat us) s \<sim>\<^sub>\<I> ws \<Longrightarrow>
      (\<And> u v. u \<le>p us \<Longrightarrow> v \<le>p ws \<Longrightarrow>  p \<cdot> concat u \<noteq> concat v) \<Longrightarrow> p us s \<sim>\<^sub>\<D> ws"
  unfolding disjoint_interpretation_def by blast

lemma disj_interpD: "p us s \<sim>\<^sub>\<D> ws \<Longrightarrow> p (concat us) s \<sim>\<^sub>\<I> ws"
  unfolding disjoint_interpretation_def by blast

lemma disj_interpD1: assumes "p us s \<sim>\<^sub>\<D> ws" and "us' \<le>p us" and "ws' \<le>p ws"
  shows "p \<cdot> concat us' \<noteq> concat ws'"
  using assms unfolding disjoint_interpretation_def by blast

lemma disj_interp_nemp: assumes "p us s \<sim>\<^sub>\<D> ws"
  shows "p \<noteq> \<epsilon>" and "s \<noteq> \<epsilon>"
  using disj_interpD1[OF assms emp_pref emp_pref]
       disj_interpD1[OF assms self_pref self_pref, folded
       fac_interpD(3)[OF disj_interpD, OF assms], unfolded cancel] by blast+

subsection "Factor intepretation of morphic images"

context morphism
begin

lemma image_fac_interp': assumes "w \<le>f f z" "w \<noteq> \<epsilon>"
  obtains p w_pred s where "w_pred \<le>f z" "p w s \<sim>\<^sub>\<I> (map f\<^sup>\<C> w_pred)"
proof-
  let ?fzs = "map f\<^sup>\<C> z"
  have "w \<le>f concat (map f\<^sup>\<C> z)"
    by (simp add: assms(1) morph_concat_map)

  obtain p s ws where "p w s \<sim>\<^sub>\<I> ws" "ws \<le>f ?fzs"
    by blast

  obtain w_pred where "ws = map f\<^sup>\<C> w_pred" "w_pred \<le>f z"

  show ?thesis
qed

lemma image_fac_interp: assumes "u\<cdot>w\<cdot>v = f z" "w \<noteq> \<epsilon>"
  obtains p w_pred s u_pred v_pred where
    "u_pred\<cdot>w_pred\<cdot>v_pred = z" "p w s \<sim>\<^sub>\<I> (map f\<^sup>\<C> w_pred)"
    "u = (f u_pred)\<cdot>p" "v = s\<cdot>(f v_pred)"
proof-
  let ?fzs = "map f\<^sup>\<C> z"

  have "u\<cdot>w\<cdot>v = concat (map f\<^sup>\<C> z)"
    by (simp add: assms(1) morph_concat_map)

  obtain ps ss p s ws where "p w s \<sim>\<^sub>\<I> ws" "ps\<cdot>ws\<cdot>ss = ?fzs" "concat ps \<cdot> p = u"  "s \<cdot> concat ss = v"
    by metis

  obtain w_pred u_pred v_pred where "ws = map f\<^sup>\<C> w_pred" "ps = map f\<^sup>\<C> u_pred"
    "ss = map f\<^sup>\<C> v_pred" "u_pred\<cdot>w_pred\<cdot>v_pred = z"
    by blast

  show ?thesis
qed

lemma image_fac_interp_mid: assumes "p w s \<sim>\<^sub>\<I> map f\<^sup>\<C> w_pred" "2 \<le> \<^bold>|w_pred\<^bold>|"
  obtains pw sw where
    "w = pw \<cdot> (f (butlast (tl w_pred))) \<cdot> sw" "p\<cdot>pw = f [hd w_pred]" "sw\<cdot>s = f [last w_pred]"
proof-

  have "w_pred \<noteq> \<epsilon>"
    using assms(2) by force

  obtain pw' where
    "p \<cdot> pw' = hd (map f\<^sup>\<C> w_pred)"
  hence pw': "p \<cdot> pw' = f [hd w_pred]"
    unfolding core_def

  obtain sw' where
    "sw' \<cdot> s = last (map f\<^sup>\<C> (w_pred))"
  hence sw' : "sw' \<cdot> s = f [last (w_pred)]"
    unfolding core_def

  have "w = pw' \<cdot> f (butlast (tl w_pred)) \<cdot> sw'"
    unfolding morph
    unfolding pw'[symmetric] sw'[symmetric]
  by simp
  thus ?thesis
    using pw' sw' that by blast
qed

end

section Miscellanea


lemma mismatch_pref_comm_len: assumes "w1 \<in> \<langle>{u,v}\<rangle>" and "w2 \<in> \<langle>{u,v}\<rangle>" and "p \<le>p w1"
  "u \<cdot> p \<le>p v \<cdot> w2" and "\<^bold>|v\<^bold>| \<le> \<^bold>|p\<^bold>|"
shows "u \<cdot> v = v \<cdot> u"
proof (rule ccontr)
  assume "u \<cdot> v \<noteq> v \<cdot> u"
  then interpret binary_code u v
    by unfold_locales
  show False
    by blast
qed

lemma mismatch_pref_comm: assumes "w1 \<in> \<langle>{u,v}\<rangle>" and "w2 \<in> \<langle>{u,v}\<rangle>" and
  "u \<cdot> w1 \<cdot> v \<le>p v \<cdot> w2 \<cdot> u"
shows "u \<cdot> v = v \<cdot> u"
  using assms  by mismatch

lemma mismatch_eq_comm: assumes "w1 \<in> \<langle>{u,v}\<rangle>" and "w2 \<in> \<langle>{u,v}\<rangle>" and
  "u \<cdot> w1 = v \<cdot> w2"
shows "u \<cdot> v = v \<cdot> u"
  using assms  by mismatch

lemmas mismatch_suf_comm = mismatch_pref_comm[reversed] and
       mismatch_suf_comm_len = mismatch_pref_comm_len[reversed, unfolded rassoc]


lemma conj_pers_conj_comm_aux:
  assumes "(u \<cdot> v)\<^sup>@k \<cdot> u = r \<cdot> s" and "(v \<cdot> u)\<^sup>@l \<cdot> v = (s \<cdot> r)\<^sup>@m" and "0 < k" "0 < l" and "2 \<le> m"
  shows "u \<cdot> v =  v \<cdot> u"
proof (rule nemp_comm)
  assume "u \<noteq> \<epsilon>" and "v \<noteq> \<epsilon>" hence "u \<cdot> v \<noteq> \<epsilon>" and "v \<cdot> u \<noteq> \<epsilon>" by blast+
  proof (rule notI)
    assume "l = 1"
    hence "v \<cdot> u \<cdot> v = (s \<cdot> r)\<^sup>@m"
      using assms(2) by simp
    have "\<^bold>|v \<cdot> u\<^bold>| + \<^bold>|u\<^bold>| \<le> \<^bold>|r \<cdot> s\<^bold>|"
      unfolding lenmorph add.commute[of "\<^bold>|u\<^bold>|"]
      lenarg[OF assms(1), unfolded lenmorph pow_len, symmetric]
    hence "\<^bold>|v \<cdot> u \<cdot> v \<cdot> u\<^bold>| \<le> 2*\<^bold>|r \<cdot> s\<^bold>|"
      unfolding lenmorph pow_len by simp
    hence "\<^bold>|v \<cdot> u \<cdot> v\<^bold>| < 2*\<^bold>|r \<cdot> s\<^bold>|"
    show False
      unfolding lenmorph pow_len add.commute[of "\<^bold>|s\<^bold>|"] by force
  qed
  hence "2 \<le> l"
  let ?w = "(v \<cdot> u)\<^sup>@l \<cdot> v"
  have per1: "?w \<le>p (v \<cdot> u) \<cdot> ?w"
    unfolding lassoc pow_comm[symmetric] by force
  have per2: "?w \<le>p (s \<cdot> r) \<cdot> ?w"
    unfolding  assms(2) using pref_pow_ext' by blast
  have len: "\<^bold>|v \<cdot> u\<^bold>| + \<^bold>|s \<cdot> r\<^bold>|  \<le> \<^bold>|?w\<^bold>|"
  proof-
    have  len1: "2*\<^bold>|s \<cdot> r\<^bold>| \<le> \<^bold>|?w\<^bold>|"
    moreover have len2: "2*\<^bold>|v \<cdot> u\<^bold>|  \<le> \<^bold>|?w\<^bold>|"
      unfolding lenmorph pow_len by linarith
    ultimately show ?thesis
      using len1 len2 by linarith
  qed
  from two_pers[OF per1 per2 len]
  have "(v \<cdot> u) \<cdot> (s \<cdot> r) = (s \<cdot> r) \<cdot> (v \<cdot> u)".
  hence "(v \<cdot> u)\<^sup>@l \<cdot> (s \<cdot> r)\<^sup>@m = (s \<cdot> r)\<^sup>@m \<cdot> (v \<cdot> u)\<^sup>@l"
    using comm_add_exps by blast
  show "u \<cdot> v = v \<cdot> u"
    unfolding rassoc cancel by blast
qed

lemma conj_pers_conj_comm: assumes "\<rho> (v \<cdot> (u \<cdot> v)\<^sup>@k) \<sim> \<rho> ((u \<cdot> v)\<^sup>@m \<cdot> u)" and "0 < k" and "0 < m"
  shows "u \<cdot> v = v \<cdot> u"
proof (rule nemp_comm)
  let ?v = "v \<cdot> (u \<cdot> v)\<^sup>@k" and ?u = "(u \<cdot> v)\<^sup>@m \<cdot> u"
  assume "u \<noteq> \<epsilon>" and "v \<noteq> \<epsilon>"
  hence "u \<cdot> v \<noteq> \<epsilon>" and "?v \<noteq> \<epsilon>" and "?u \<noteq> \<epsilon>" by simp_all
  obtain r s where "r \<cdot> s = \<rho> ?v" and "s \<cdot> r = \<rho> ?u"
    using conjugE[OF assms(1)].
  then obtain k1 k2 where "?v = (r \<cdot> s)\<^sup>@k1" and "?u = (s \<cdot> r)\<^sup>@k2" and "0 < k1" and "0 < k2"
    using primroot_expE[of ?u] primroot_expE[of ?v] unfolding shift_pow by metis
  hence eq: "(s \<cdot> r)\<^sup>@k2 \<cdot> (r \<cdot> s)\<^sup>@k1 = (u \<cdot> v)\<^sup>@(m + 1 + k)"
    unfolding add_exps pow_one rassoc by simp
  have ineq: "2 \<le> m + 1 + k"
  consider (two_two) "2 \<le> k1 \<and> 2 \<le> k2"|
    (one_one) "k1 = 1 \<and> k2 = 1" |
    (two_one) "2 \<le> k1 \<and> k2 = 1" |
    (one_two) "k1 = 1 \<and> 2 \<le> k2"
  then show "u \<cdot> v = v \<cdot> u"
  proof (cases)
    case (two_two)
    with Lyndon_Schutzenberger(1)[OF eq _ _ ineq]
    have "(s \<cdot> r) \<cdot> (r \<cdot> s) = (r \<cdot> s) \<cdot> (s \<cdot> r)"
      using eqd_eq[of "s \<cdot> r" "r \<cdot> s" "r \<cdot> s" "s \<cdot> r"] by fastforce

    show "u \<cdot> v =  v \<cdot> u"
      by mismatch
  next
    case (one_one)
    hence "(s \<cdot> r) \<^sup>@ k2 \<cdot> (r \<cdot> s) \<^sup>@ k1 = (s \<cdot> r) \<cdot> (r \<cdot> s)"
      using pow_one by simp
    from eq[unfolded conjunct1[OF one_one] conjunct2[OF one_one] pow_1]
         pow_nemp_imprim[OF ineq, folded eq[unfolded this]]
         Lyndon_Schutzenberger_conjug[of "s \<cdot> r" "r \<cdot> s", OF conjugI']
    have "(s \<cdot> r) \<cdot> (r \<cdot> s) = (r \<cdot> s) \<cdot> (s \<cdot> r)" by metis

    show "u \<cdot> v =  v \<cdot> u"
      by mismatch
  next
    case (two_one)
    hence "?u = s \<cdot> r"
      by simp
    have "(v \<cdot> u) \<^sup>@ k \<cdot> v = (r \<cdot> s)\<^sup>@k1".
    show "u \<cdot> v = v \<cdot> u"
      using two_one by auto
  next
    case (one_two)
    hence "?v = r \<cdot> s"
    have "(u \<cdot> v) \<^sup>@ m \<cdot> u = (s \<cdot> r) \<^sup>@ k2".
    show "u \<cdot> v = v \<cdot> u"
      using one_two by argo
  qed
qed

hide_fact conj_pers_conj_comm_aux


lemma uv_fac_uvv: assumes "p \<cdot> u \<cdot> v \<le>p u \<cdot> v \<cdot> v" and "p \<noteq> \<epsilon>" and "p \<le>s w" and "w \<in> \<langle>{u,v}\<rangle>"
  shows "u \<cdot> v = v \<cdot> u"
proof (rule nemp_comm)
  assume "u \<noteq> \<epsilon>" and "v \<noteq> \<epsilon>"
  obtain s where "u \<cdot> v \<cdot> v = p \<cdot> u \<cdot> v \<cdot> s"
  obtain p' where "u \<cdot> p' = p \<cdot> u" and "p' \<cdot> v \<cdot> s = v \<cdot> v"
  hence "p' \<noteq> \<epsilon>"
  have "p' \<cdot> v \<cdot> s = v \<cdot> v"
  from mid_sq[OF this]
  have "v \<cdot> p' = p' \<cdot> v" by simp
  have "\<rho> v = \<rho> p'"
    by simp
  have "w \<in> \<langle>{u, \<rho> v}\<rangle>"
  obtain m where "p' = \<rho> v\<^sup>@m" "0 < m"
  have "(u \<cdot> \<rho> v\<^sup>@(m-1)) \<cdot> \<rho> v \<le>s (\<rho> v \<cdot> w) \<cdot> u"
  hence "u \<cdot> \<rho> v = \<rho> v \<cdot> u"

  thus "u \<cdot> v = v \<cdot> u"
    unfolding comm_primroot_conv[symmetric].
qed

lemmas uv_fac_uvv_suf = uv_fac_uvv[reversed, unfolded rassoc]



lemma "u \<le>p v \<Longrightarrow> u' \<le>p v' \<Longrightarrow> u \<and>\<^sub>p u' \<noteq> u \<Longrightarrow> u \<and>\<^sub>p u' \<noteq> u' \<Longrightarrow> u \<and>\<^sub>p u' = v \<and>\<^sub>p v'"
  using lcp.absorb2 lcp.orderE lcp_rulers pref_compE by metis

lemma comm_puv_pvs_eq_uq: assumes "p \<cdot> u \<cdot> v = u \<cdot> v \<cdot> p" and "p \<cdot> v \<cdot> s = u \<cdot> q" and
  "p \<le>p u" "q \<le>p w" and "s \<le>p  w'" and
  "w \<in> \<langle>{u,v}\<rangle>" and "w' \<in> \<langle>{u,v}\<rangle>" and "\<^bold>|u\<^bold>| \<le> \<^bold>|s\<^bold>|"
shows "u \<cdot> v = v \<cdot> u"
proof (rule ccontr)
  assume "u \<cdot> v \<noteq> v \<cdot> u"
  then interpret binary_code u v
    by unfold_locales
  write bin_code_lcp ("\<alpha>") and
    bin_code_mismatch_fst ("c\<^sub>0") and
    bin_code_mismatch_snd ("c\<^sub>1")
  have "\<^bold>|\<alpha>\<^bold>| < \<^bold>|v \<cdot> s\<^bold>|"
  show False
  proof (cases)
    assume "p = \<epsilon>"
    hence "v \<cdot> s = u \<cdot> q"
    have "\<alpha> \<cdot> [c\<^sub>1] \<le>p v \<cdot> s" and "\<alpha> \<cdot> [c\<^sub>0] \<le>p u \<cdot> q"
      by blast+
    thus False
      by (simp add: same_sing_pref)
  next
    assume "p \<noteq> \<epsilon>"
    show False
    proof-
      have "u \<noteq> \<epsilon>" and "v \<noteq> \<epsilon>" and "u \<cdot> v \<noteq> v \<cdot> u"
        by (simp_all add: bin_fst_nemp bin_snd_nemp non_comm)
      have "w \<cdot> u \<cdot> v \<in> \<langle>{u, v}\<rangle>"
      have "\<^bold>|w \<cdot> u \<cdot> v\<^bold>| \<ge> \<^bold>|\<alpha>\<^bold>|"
        using  bin_lcp_short by auto
      have p_pref1: "p \<cdot> v \<cdot> s \<and>\<^sub>p p \<cdot> p \<cdot> v \<cdot> s = p \<cdot> \<alpha>"
      have p_pref2: "u \<cdot> \<alpha> \<le>p u \<cdot> (w \<cdot> u \<cdot> v) \<and>\<^sub>p p \<cdot> u \<cdot> (w \<cdot> u \<cdot> v)"
      have "u \<cdot> w \<cdot> u \<cdot> v \<and>\<^sub>p p \<cdot> u \<cdot> w \<cdot> u \<cdot> v = p \<cdot> v \<cdot> s \<and>\<^sub>p p \<cdot> p \<cdot> v \<cdot> s"
      proof(rule lcp_rulers')
        show "\<not> p \<cdot> v \<cdot> s \<bowtie>  p \<cdot> p \<cdot> v \<cdot> s"
        proof (rule notI)
          assume "p \<cdot> v \<cdot> s \<bowtie>  p \<cdot> p \<cdot> v \<cdot> s"
          hence "p \<cdot> v \<cdot> s \<and>\<^sub>p  p \<cdot> p \<cdot> v \<cdot> s = p \<cdot> v \<cdot> s"
          from this[unfolded p_pref1 cancel]
          show False
        qed
        show "p \<cdot> v \<cdot> s \<le>p u \<cdot> (w \<cdot> u \<cdot> v)"  "p \<cdot> p \<cdot> v \<cdot> s \<le>p p \<cdot> u \<cdot> w \<cdot> u \<cdot> v"
          by (simp_all add: assms(2) assms(4))
      qed
      from p_pref2[unfolded rassoc this p_pref1]
      have "p = u"
      thus False
    qed
  qed
qed


lemma assumes "u \<cdot> v \<cdot> v \<cdot> u = p \<cdot> u \<cdot> v \<cdot> u \<cdot> q" and "p \<noteq> \<epsilon>" and "q \<noteq> \<epsilon>"
  shows "u \<cdot> v = v \<cdot> u"


lemma uvu_pref_uvv: assumes "p \<cdot> u \<cdot> v \<cdot> v \<cdot> s = u \<cdot> v \<cdot> u \<cdot> q" and
  "p \<le>p u" and "q \<le>p w" and  "s \<le>p  w'" and
  "w \<in> \<langle>{u,v}\<rangle>" and "w' \<in> \<langle>{u,v}\<rangle>" and "\<^bold>|u\<^bold>| \<le> \<^bold>|s\<^bold>|"
shows "u \<cdot> v = v \<cdot> u"
proof(rule nemp_comm)
  have "\<^bold>|p \<cdot> u \<cdot> v\<^bold>| \<le> \<^bold>|u \<cdot> v \<cdot> u\<^bold>|"
    by (simp add: prefix_length_le)

  have "p \<cdot> (u \<cdot> v) = (u \<cdot> v) \<cdot> p"
    by (rule pref_marker[of "u \<cdot> v \<cdot> u"], force)
    (rule eq_le_pref, use assms in force, fact)

  have "p \<cdot> v \<cdot> s = u  \<cdot> q"
  proof-
    have "((u \<cdot> v) \<cdot> p) \<cdot> v \<cdot>  s = (u \<cdot> v) \<cdot> u \<cdot> q"
    from this[unfolded rassoc cancel]
    show ?thesis.
  qed

  show "u \<cdot> v = v \<cdot> u".
qed


lemma uvu_pref_uvvu: assumes "p \<cdot> u \<cdot> v \<cdot> v \<cdot> u = u \<cdot> v \<cdot> u \<cdot> q" and
  "p \<le>p u" and "q \<le>p w" and  " w \<in> \<langle>{u,v}\<rangle>"
shows "u \<cdot> v = v \<cdot> u"
  by blast


lemma uvu_pref_uvvu_interp: assumes interp: "p u \<cdot> v \<cdot> v \<cdot> u s \<sim>\<^sub>\<I> ws" and
  "[u, v, u] \<le>p  ws" and "ws \<in> lists {u,v}"
shows "u \<cdot> v = v \<cdot> u"
proof-
  note fac_interpD[OF interp]
  obtain ws' where "[u,v,u] \<cdot> ws' = ws" and "ws' \<in> lists {u,v}"
  have "p \<cdot> u \<cdot> v \<cdot> v \<cdot> u \<cdot> s = u \<cdot> v \<cdot> u \<cdot> concat ws'"
    by simp
  from lenarg[OF this, unfolded lenmorph]
  have "\<^bold>|s\<^bold>| \<le> \<^bold>|concat ws'\<^bold>|"
    by auto
  hence "s \<le>s concat ws'"
    by blast
  note local_rule = uvu_pref_uvv[of p u v u "concat ws'\<^sup><\<inverse>s" "concat ws'" u]
  show "u \<cdot> v = v \<cdot> u"
  proof (rule local_rule)
    show "p \<le>p u"
      by force
    have "p \<cdot> u \<cdot> v \<cdot> v \<cdot> u \<cdot> s = u \<cdot> v \<cdot> u \<cdot> (concat ws'\<^sup><\<inverse>s) \<cdot> s"
    thus "p \<cdot> u \<cdot> v \<cdot> v \<cdot> u = u \<cdot> v \<cdot> u \<cdot> concat ws'\<^sup><\<inverse>s"
      by simp
    show "concat ws' \<in> \<langle>{u,v}\<rangle>"
    show "concat ws'\<^sup><\<inverse>s  \<le>p concat ws'"
  qed auto
qed

lemmas uvu_suf_uvvu = uvu_pref_uvvu[reversed, unfolded rassoc] and
  uvu_suf_uvv = uvu_pref_uvv[reversed, unfolded rassoc]

lemma uvu_suf_uvvu_interp: "p u \<cdot> v \<cdot> v \<cdot> u s \<sim>\<^sub>\<I> ws \<Longrightarrow> [u, v, u] \<le>s  ws
  \<Longrightarrow> ws \<in> lists {u,v} \<Longrightarrow> u \<cdot> v = v \<cdot> u"
  by (rule uvu_pref_uvvu_interp[reversed, unfolded rassoc emp_simps, symmetric, of p u v s ws],
      simp, force, simp add: image_iff rev_in_lists rev_map)


lemma conjug_pref_suf_mismatch: assumes "w1 \<in> \<langle>{r\<cdot>s,s\<cdot>r}\<rangle>" and "w2 \<in> \<langle>{r\<cdot>s,s\<cdot>r}\<rangle>" and "r \<cdot> w1 = w2 \<cdot> s"
  shows "r = s \<or> r = \<epsilon> \<or> s = \<epsilon>"
proof (rule ccontr)
  assume "\<not> (r = s \<or> r = \<epsilon> \<or> s = \<epsilon>)"
  hence "r \<noteq> s" and "r \<noteq> \<epsilon>" and "s \<noteq> \<epsilon>" by simp_all
  from assms
  show False
  proof (induct "\<^bold>|w1\<^bold>|" arbitrary: w1 w2 rule: less_induct)
    case less
    have "w1 \<in> \<langle>{r,s}\<rangle>"
    obtain w1' where "(w1 = \<epsilon> \<or> w1 = r \<cdot> s \<cdot> w1' \<or> w1 = s \<cdot> r \<cdot> w1') \<and> w1' \<in> \<langle>{r\<cdot>s,s\<cdot>r}\<rangle>"
    hence "w1' \<in> \<langle>{r\<cdot>s,s\<cdot>r}\<rangle>" and cases1: "(w1 = \<epsilon> \<or> w1 = r \<cdot> s \<cdot> w1' \<or> w1 = s \<cdot> r \<cdot> w1')" by blast+
    hence "w1' \<in> \<langle>{r,s}\<rangle>" by force
    obtain w2' where "(w2 = \<epsilon> \<or> w2 = r \<cdot> s \<cdot> w2' \<or> w2 = s \<cdot> r \<cdot> w2') \<and> w2' \<in> \<langle>{r\<cdot>s,s\<cdot>r}\<rangle>"
    hence "w2' \<in> \<langle>{r\<cdot>s,s\<cdot>r}\<rangle>" and cases2: "(w2 = \<epsilon> \<or> w2 = r \<cdot> s \<cdot> w2' \<or> w2 = s \<cdot> r \<cdot> w2')" by blast+
    hence "w2' \<in> \<langle>{r,s}\<rangle>" by force
    consider (empty2) "w2 = \<epsilon>" | (sr2) "w2 = s \<cdot> r \<cdot> w2'" | (rs2) "w2 = r \<cdot> s \<cdot> w2'"using cases2 by blast
    thus False
    proof (cases)
      case empty2
      consider (empty1) "w1 = \<epsilon>" | (sr1) "w1 = s \<cdot> r \<cdot> w1'" | (rs1) "w1 = r \<cdot> s \<cdot> w1'"
        using cases1 by blast
      thus False
      proof (cases)
        case empty1
        show False
      next
        case sr1
        show False
      next
        case rs1
        show False
            fac_triv[of "r \<cdot> r" s w1', unfolded rassoc] by force
      qed
    next
      case sr2
      have "r \<cdot> s = s \<cdot> r"
        by (mismatch)
      consider (empty1) "w1 = \<epsilon>" | (sr1) "w1 = s \<cdot> r \<cdot> w1'" | (rs1) "w1 = r \<cdot> s \<cdot> w1'" using cases1 by blast
      thus False
      proof (cases)
        case empty1
        then show False
      next
        case rs1
        then have "r \<cdot> s = s \<cdot> r"
          by mismatch
        hence "r \<cdot> w1' = w2' \<cdot> s"
        show False
      next
        case sr1
        then have "r \<cdot> s = s \<cdot> r"
          by mismatch
        hence "r \<cdot> w1' = w2' \<cdot> s"
        show False
      qed
    next
      case rs2
      consider (empty1) "w1 = \<epsilon>" | (sr1) "w1 = s \<cdot> r \<cdot> w1'" | (rs1) "w1 = r \<cdot> s \<cdot> w1'" using cases1 by blast
      thus False
      proof (cases)
        case empty1
        then show False
      next
        case rs1
        then have "r \<cdot> s = s \<cdot> r"
          by mismatch
        hence "r \<cdot> w1' = w2' \<cdot> s"
        show False
      next
        case sr1
        then show False
      qed
    qed
  qed
qed

lemma conjug_conjug_primroots: assumes "u \<noteq> \<epsilon>" and "r \<noteq> \<epsilon>" and "\<rho> (u \<cdot> v) = r \<cdot> s" and "\<rho> (v \<cdot> u) = s \<cdot> r"
  obtains k m where "(r \<cdot> s)\<^sup>@k \<cdot> r = u" and "(s \<cdot> r)\<^sup>@m \<cdot> s = v"
proof-
  have "v \<cdot> u \<noteq> \<epsilon>" and "u \<cdot> v \<noteq> \<epsilon>"
  have "\<rho> (s \<cdot> r) = s \<cdot> r"
  obtain n where "(r \<cdot> s)\<^sup>@n = u \<cdot> v" "0 < n"
    using assms(3) by metis
  obtain n' where "(s \<cdot> r)\<^sup>@ n' = v \<cdot> u" "0 < n'"
  have "(s \<cdot> u) \<cdot> (s \<cdot> r) = (s \<cdot> r) \<cdot> (s \<cdot> u)"
  proof (rule pref_marker)
    show "(s \<cdot> u) \<cdot> s \<cdot> r \<le>p s \<cdot> (r \<cdot> s)\<^sup>@(n+ n)"
    show "s \<cdot> (r \<cdot> s) \<^sup>@ (n + n) \<le>p (s \<cdot> r) \<cdot> s \<cdot> (r \<cdot> s) \<^sup>@ (n + n)"
      by comparison
  qed
  obtain k where "(s \<cdot> r)\<^sup>@k = s \<cdot> u"
  have  "0 < k"
    by blast
  have u: "(r \<cdot> s)\<^sup>@(k-1) \<cdot> r = u"
  have "r \<cdot> v = (r \<cdot> s) \<^sup>@ (n + 1 - k)"
  have "0 < n + 1 - k"
    by blast
  have v: "(s \<cdot> r)\<^sup>@(n + 1 - k - 1) \<cdot> s = v".
  show thesis
    using that[OF u v].
qed


definition commutes :: "'a list set \<Rightarrow> bool"
  where "commutes A = (\<forall>x y. x \<in> A \<longrightarrow> y \<in> A \<longrightarrow> x\<cdot>y = y\<cdot>x)"

lemma commutesE: "commutes A \<Longrightarrow> x \<in> A \<Longrightarrow> y \<in> A \<Longrightarrow> x\<cdot>y = y\<cdot>x"
  using commutes_def by blast

lemma commutes_root: assumes "commutes A"
  obtains r where "\<And>x. x \<in> A \<Longrightarrow> x \<in> r*"
  using assms comm_primroots emp_all_roots primroot_is_root
  unfolding commutes_def
  by metis

lemma commutes_primroot: assumes "commutes A"
  obtains r where "\<And>x. x \<in> A \<Longrightarrow> x \<in> r*" and "primitive r"
  using commutes_root[OF assms] emp_all_roots prim_sing
    primroot_is_root primroot_prim root_trans
  by metis

lemma commutesI [intro]: "(\<And>x y. x \<in> A \<Longrightarrow> y \<in> A \<Longrightarrow> x\<cdot>y = y\<cdot>x) \<Longrightarrow> commutes A"
  unfolding commutes_def
  by blast

lemma commutesI': assumes "x \<noteq> \<epsilon>" and "\<And>y. y \<in> A \<Longrightarrow> x\<cdot>y = y\<cdot>x"
  shows "commutes A"
proof-
  have "\<And>x' y'. x' \<in> A \<Longrightarrow> y' \<in> A \<Longrightarrow> x'\<cdot>y' = y'\<cdot>x'"
  proof-
    fix x' y'
    assume "x' \<in> A" "y' \<in> A"
    hence "x'\<cdot>x = x\<cdot>x'" and "y'\<cdot>x = x\<cdot>y'"
      using assms(2) by auto+
    from comm_trans[OF this assms(1)]
    show "x'\<cdot>y' = y'\<cdot>x'".
  qed
  thus ?thesis
    by (simp add: commutesI)
qed

lemma commutesI_root[intro]: "\<forall>x \<in> A. x \<in> t* \<Longrightarrow> commutes A"
  by (meson comm_root commutesI)

lemma commutes_sub: "commutes A \<Longrightarrow> B \<subseteq> A \<Longrightarrow> commutes B"
  by (simp add: commutes_def subsetD)

lemma commutes_insert: "commutes A \<Longrightarrow> x \<in> A \<Longrightarrow> x \<noteq> \<epsilon> \<Longrightarrow>  x\<cdot>y = y\<cdot>x \<Longrightarrow> commutes (insert y A)"
  using commutesE[of A x] commutesI'[of x "insert y A"] insertE
  by blast

lemma commutes_emp [simp]: "commutes {\<epsilon>, w}"
  by (simp add: commutes_def)

lemma commutes_emp'[simp]: "commutes {w, \<epsilon>}"
  by (simp add: commutes_def)

lemma commutes_cancel: assumes "y \<in> A" and "x \<cdot> y \<in> A" and "commutes A"
  shows "commutes (insert x A)"
proof-
  obtain r where "(\<And>x. x \<in> A \<Longrightarrow> x \<in> r*)"
