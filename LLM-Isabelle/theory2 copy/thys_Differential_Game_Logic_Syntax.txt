theory "Syntax"
imports
  Complex_Main
  "Identifiers"
begin 



type_synonym lit = real

abbreviation allidents:: "ident set"
  where "allidents \<equiv> {x | x. True}"


datatype variable =
  RVar ident
| DVar ident  

datatype trm =
  Var variable
| Number lit
| Const ident
| Func ident trm
| Plus trm trm
| Times trm trm
| Differential trm


datatype fml =
  Pred ident trm
| Geq trm trm
| Not fml                 ("!")
| And fml fml             (infixr "&&" 8)
| Exists variable fml
| Diamond game fml        ("(\<langle> _ \<rangle> _)" 20)
and game =
  Game ident
| Assign variable trm     (infixr ":=" 20)
| Test fml                ("?")
| Choice game game        (infixr "\<union>\<union>" 10)
| Compose game game       (infixr ";;" 8)
| Loop game               ("_**")
| Dual game               ("_^d")
| ODE ident trm


definition Neg ::"trm \<Rightarrow> trm" 
where "Neg \<theta> = Times (Number (-1)) \<theta>"

definition Minus ::"trm \<Rightarrow> trm \<Rightarrow> trm"
where "Minus \<theta> \<eta> = Plus \<theta> (Neg \<eta>)"

definition Or :: "fml \<Rightarrow> fml \<Rightarrow> fml" (infixr "||" 7)
where "Or P Q = Not (And (Not P) (Not Q))"

definition Implies :: "fml \<Rightarrow> fml \<Rightarrow> fml" (infixr "\<rightarrow>" 10)
where "Implies P Q = Or Q (Not P)"

definition Equiv :: "fml \<Rightarrow> fml \<Rightarrow> fml" (infixr "\<leftrightarrow>" 10)
where "Equiv P Q = Or (And P Q) (And (Not P) (Not Q))"

definition Forall :: "variable \<Rightarrow> fml \<Rightarrow> fml"
where "Forall x P = Not (Exists x (Not P))"

definition Equals :: "trm \<Rightarrow> trm \<Rightarrow> fml"
where "Equals \<theta> \<theta>' = ((Geq \<theta> \<theta>') && (Geq \<theta>' \<theta>))"

definition Greater :: "trm \<Rightarrow> trm \<Rightarrow> fml"
where "Greater \<theta> \<theta>' = ((Geq \<theta> \<theta>') && (Not (Geq \<theta>' \<theta>)))"
  
