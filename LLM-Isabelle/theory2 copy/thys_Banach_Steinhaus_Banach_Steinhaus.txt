theory Banach_Steinhaus
  imports Banach_Steinhaus_Missing
begin



lemma linear_plus_norm:
  includes notation_norm
proof-
    by (smt add_diff_cancel_left' assms diff_add_cancel diff_diff_add linear_diff midpoint_def 
        midpoint_plus_self of_nat_1 of_nat_add one_add_one scaleR_half_double)
    using Real_Vector_Spaces.real_normed_vector_class.norm_scaleR by simp
    by (simp add: norm_triangle_ineq4)
    by auto
  finally show ?thesis by blast
qed

lemma onorm_Sup_on_ball:
  includes notation_norm
  shows "\<parallel>f\<parallel> \<le> Sup ( (\<lambda>x. \<parallel>f *\<^sub>v x\<parallel>) ` (ball x r) ) / r"
proof-
  proof -
      using norm_blinfun norm_ge_zero by blast      
    thus ?thesis by (meson bdd_aboveI2)     
  qed
  proof-
      by auto          
      using bdd_above_3 by blast
      by (rule bdd_above_plus)
      unfolding bdd_above_def by (meson image_eqI)
      by (simp add: blinfun.add_right norm_triangle_ineq)                
      by (simp add: blinfun.add_right norm_triangle_le)
    thus ?thesis by (meson bdd_aboveI2)                          
  qed 
  proof-
      by (meson image_eqI)
      by auto
    thus ?thesis by (metis K_def ab_group_add_class.ab_diff_conv_add_uminus bdd_aboveI2)
  qed
  proof-
      using bdd_above_2 by blast
      using bdd_above_4 by blast
    ultimately show ?thesis
      unfolding max_def apply auto apply (meson bdd_above_Int1 bdd_above_mono image_Int_subset)
      by (meson bdd_above_Int1 bdd_above_mono image_Int_subset)   
  qed 
  proof-
      by simp            
      by (metis (no_types) add.left_neutral bdd_above_2 bdd_above_norm bounded_norm_comp 
          image_add_ball image_image)
    thus ?thesis
      by (simp add: bounded_imp_bdd_above)
  qed
    by (metis add.right_neutral ball_translation image_image)   
    by (simp add: bdd_above_2)   
  proof-
      by auto
      by auto
    thus ?thesis 
      by (metis (no_types, lifting) ab_group_add_class.ab_diff_conv_add_uminus image_iff) 
  qed
  proof-
      by auto
      by auto
    thus ?thesis 
      by (metis (no_types, lifting) diff_minus_eq_add image_iff)          
  qed
    by (simp add: bdd_above_4)   
  proof-
      using bdd_above_5 by blast
      using bdd_above_6 by blast
    ultimately show ?thesis
      using max_Sup
      by (metis (mono_tags, lifting) Banach_Steinhaus_Missing.pointwise_max_def image_cong) 
  qed 
    by (simp add: norm_2')
    by (simp add: norm_2)  
  proof-
      apply auto using Sup_3' apply auto using Sup_3'' by blast
      by simp
    thus ?thesis by simp
  qed
  proof-
      apply(rule linear_plus_norm) apply (rule bounded_linear.linear)
      by (simp add: blinfun.bounded_linear_right)
      using bdd_above_1 by blast
      using cSUP_mono by smt 
      using Sup_2 by blast
      using Sup_3 by blast
      by (metis  add.right_neutral ball_translation image_image)      
    finally show ?thesis by blast
  qed
    by simp
  thus ?thesis by simp    
qed

lemma onorm_Sup_on_ball':
  includes notation_norm
  case True
  thus ?thesis by (metis assms(1) centre_in_ball mult_zero_right norm_zero order_refl 
        zero_blinfun.rep_eq) 
next
  case False
    using assms(1) bounded_linear_image by (simp add: bounded_linear_image 
        blinfun.bounded_linear_right bounded_imp_bdd_above bounded_norm_comp) 
    by simp
    using bdd_above_1 apply transfer by simp
    by (simp add: less_cSup_iff)    
  thus ?thesis by (smt comp_def image_iff) 
qed


theorem banach_steinhaus:
proof(rule classical)
  proof-
      by (simp flip: power_inverse)
      using summable_imp_sums_bounded[where f = "(\<lambda>n. inverse (real_of_nat 3^n))"]
        lessThan_atLeast0 by auto
      using bounded_iff by blast
      for h
      by blast      
    proof-
        by blast
        by (simp add: atLeastLessThanSuc_atLeastAtMost)        
        by auto
      thus ?thesis  by blast
    qed
      using sum_2 by blast
    thus ?thesis  by blast
  qed
    by auto
    using onorm_Sup_on_ball' by blast
    by metis
    by blast
    by metis
    by simp
    by blast
    unfolding T_def by simp        
    by auto
    unfolding ball_def apply auto using dist_norm by (smt norm_minus_commute) 
    using sum_1 by blast
    using convergent_series_Cauchy[where a = "\<lambda>n. inverse (of_nat 3^n)" and \<phi> = y] dist_norm
    by (metis calculation(1) calculation(2))
    by (simp add: convergent_eq_Cauchy)
    by blast
  proof-
      by simp        
      using y_def by auto
      using bound_Cauchy_to_lim[where c = "inverse (of_nat 3)" and y = y and x = x]
      by auto
    ultimately show ?thesis 
      by (metis power_inverse) 
  qed
    using norm_2 by blast
    unfolding T_def apply auto
    by blast
  proof-   
      by (simp add: norm_minus_commute)
      by auto
    thus ?thesis by simp      
  qed 
  proof-
      by auto
      apply transfer apply auto by (metis diff_add_cancel linear_simps(1))
      by (simp add: norm_triangle_ineq)
      apply transfer apply auto using onorm by auto 
      using norm_1 by blast
      by blast
      by linarith
      by fastforce
      by linarith      
  qed
  proof-
      apply auto by (metis divide_inverse_commute of_rat_divide power_divide of_rat_numeral_eq) 
      by blast
      by auto
    ultimately show ?thesis by auto
  qed
  proof-
      using inverse_3 by blast
      using inverse_2 by blast
      by auto
  qed
    using Real.real_arch_pow by auto
    using inverse_1 by blast                      
  ultimately show ?thesis by smt
qed


corollary bounded_linear_limit_bounded_linear:
proof-
    unfolding pointwise_convergent_to_def by metis
    by (simp add: pointwise_convergent_to_def)
    unfolding bounded_def
    using Limits.isCont_norm by simp
    using Elementary_Metric_Spaces.convergent_imp_bounded
  proof-
      using norm_f_n by simp 
      by blast
      apply transfer apply auto by (metis mult.commute onorm) 
      by (metis (no_types, opaque_lifting) dual_order.trans norm_eq_zero order_refl 
          mult_le_cancel_iff2 vector_space_over_itself.scale_zero_left zero_less_norm_iff)
  qed 
  proof-
